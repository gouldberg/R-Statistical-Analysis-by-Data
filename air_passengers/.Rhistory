packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Air Passengers
#   - Monthly totals of international airline passengers, 1949 to 1960, taken from Box and Jenkins.
# ------------------------------------------------------------------------------
data(AirPassengers, package = "datasets")
str(AirPassengers)
head(AirPassengers)
graphics.off()
par(mfrow=c(2,1))
plot(AirPassengers, type = "l")
# growth rate
plot(diff(log(AirPassengers)), type = "l")
mean(diff(log(AirPassengers)))
forecast::ndiffs(log(AirPassengers))
x <- AirPassengers
lx <- log(x)
dlx <- diff(lx)
ddlx <- diff(dlx, 12)
# ----------
plot.ts(cbind(x, lx, dlx, ddlx), main = "")
# ----------
forecast::ndiffs(ddlx)
forecast::ndiffs(dlx)
par(mfrow = c(2,1))
monthplot(dlx)
monthplot(ddlx)
graphics.off()
par(mfrow = c(3, 1))
# acf2:  produces a simultaneous plot (and a printout) of the sample ACF and PACF
# The zero lag value of the ACF is removed.
# The lags in terms of years
astsa::acf2(dlx, 50)
# -->
# Clearly yearly seasonal cycle
astsa::acf2(ddlx, 50)
astsa::acf2(dlx, 50)
# ----------
astsa::acf2(ddlx, 50)
sarima(lx, p = 1, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
sarima(lx, p = 0, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
sarima(lx, p = 1, d = 1, q = 0, P = 0, D = 1, Q = 1, S = 12)
mod0 <- sarima(lx, p = 1, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
graphics.off()
mod0 <- sarima(lx, p = 1, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
mod1 <- sarima(lx, p = 0, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
mod2 <- sarima(lx, p = 1, d = 1, q = 0, P = 0, D = 1, Q = 1, S = 12)
AIC(mod1, mod2)
mod1$AIC
mod0$AIC
mod1$AIC
mod2$AIC
mod1
mod0$AICc
mod1$AICc
mod2$AICc
mod1 <- sarima(lx, p = 0, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
sarima.for(lx, n.ahead = 12, p = 0, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
mod0 <- sarima(lx, p = 1, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 12)
mod0
sumamry(mod0)
summary(mod0)
mod0
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("nondurables", package = "fda")
str(nondurables)
data("nondurables", package = "fda")
str(nondurables)
# this is time-series data
# ------------------------------------------------------------------------------
# data exploration:  time series plot
# ------------------------------------------------------------------------------
par(mfrow = c(1,1))
plot(nondurables, ylim=c(0, 120), xlab = 'Year', ylab='Nondurable Goods Index', las=1)
# ----------
plot(log10(nondurables), xlab = 'Year',
ylab=expression(Log[10]~Nondurable~Goods~Index), las=1)
# abline(lm(log10(nondurables) ~ index(nondurables)), lty='dashed')
abline(lm(log10(nondurables) ~ zoo::index(nondurables)), lty='dashed')
abline(v = 1964, lty = 2, col = "gray")
abline(v = 1968, lty = 2, col = "gray")
par(mfrow = c(1,1))
plot(nondurables, ylim=c(0, 120), xlab = 'Year', ylab='Nondurable Goods Index', las=1)
# -->
# There is a tendency for the index to show geometric or exponential increase over the whole century
# ----------
plot(log10(nondurables), xlab = 'Year',
ylab=expression(Log[10]~Nondurable~Goods~Index), las=1)
# abline(lm(log10(nondurables) ~ index(nondurables)), lty='dashed')
abline(lm(log10(nondurables) ~ zoo::index(nondurables)), lty='dashed')
abline(v = 1964, lty = 2, col = "gray")
abline(v = 1968, lty = 2, col = "gray")
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
goodsbasis
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur= int2Lfd(m = 4)
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
# ----------
# The log nondurable goods index for 1964 to 1967
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
plot(zoo::index(nondurables)[sel64.67],
log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
abline(v=1965:1966, lty='dashed')
data("nondurables", package = "fda")
str(nondurables)
# this is time-series data
# ------------------------------------------------------------------------------
# More closer look at a comparatively stable period by smoothing and interpolation
# ------------------------------------------------------------------------------
# set up a basis for smoothing log nondurable goods index
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
goodsbasis
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur= int2Lfd(m = 4)
# ----------
# smooth the data using function smooth.basisPar, which does not require setting up a functional parameter object
# zoo::coredata():  generic functions for extracting the core data contained in a (more complex) object and replacing it.
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
# ----------
# The log nondurable goods index for 1964 to 1967
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
plot(zoo::index(nondurables)[sel64.67],
log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
abline(v=1965:1966, lty='dashed')
t64.67 = seq(1964, 1967, len=601)
lines(t64.67, predict(logNondurSm, t64.67))
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("nondurables", package = "fda")
str(nondurables)
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
goodsbasis
LfdobjNonDur= int2Lfd(m = 4)
# ----------
# smooth the data using function smooth.basisPar, which does not require setting up a functional parameter object
# zoo::coredata():  generic functions for extracting the core data contained in a (more complex) object and replacing it.
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//nondurables")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  nondurables
#   - the nondurable goods manufacturing index for the United States.
# ------------------------------------------------------------------------------
data("nondurables", package = "fda")
str(nondurables)
# this is time-series data
# ------------------------------------------------------------------------------
# data exploration:  time series plot
# ------------------------------------------------------------------------------
par(mfrow = c(1,1))
plot(nondurables, ylim=c(0, 120), xlab = 'Year', ylab='Nondurable Goods Index', las=1)
# ----------
plot(log10(nondurables), xlab = 'Year',
ylab=expression(Log[10]~Nondurable~Goods~Index), las=1)
# abline(lm(log10(nondurables) ~ index(nondurables)), lty='dashed')
abline(lm(log10(nondurables) ~ zoo::index(nondurables)), lty='dashed')
abline(v = 1964, lty = 2, col = "gray")
abline(v = 1968, lty = 2, col = "gray")
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
goodsbasis
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur= int2Lfd(m = 4)
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
zoo::index(nondurables)
log10(zoo::coredata(nondurables))
LfdobjNonDur
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
log10(zoo::coredata(nondurables))
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
plot(zoo::index(nondurables)[sel64.67],
log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
goodsbasis
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur1 = int2Lfd(m = 1)
LfdobjNonDur2 = int2Lfd(m = 2)
LfdobjNonDur3 = int2Lfd(m = 3)
LfdobjNonDur4 = int2Lfd(m = 4)
# ----------
logNondurSm1 = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur1, lambda=1e-11)
logNondurSm2 = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur2, lambda=1e-11)
logNondurSm3 = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur3, lambda=1e-11)
logNondurSm4 = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur4, lambda=1e-11)
help(smooth.basisPar)
=zoo::index(nondurables)
zoo::index(nondurables)
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=1000, norder=8)
goodsbasis
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur= int2Lfd(m = 4)
# ----------
# smooth the data using function smooth.basisPar, which does not require setting up a functional parameter object
# zoo::coredata():  generic functions for extracting the core data contained in a (more complex) object and replacing it.
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=500, norder=8)
goodsbasis
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur= int2Lfd(m = 4)
# ----------
# smooth the data using function smooth.basisPar, which does not require setting up a functional parameter object
# zoo::coredata():  generic functions for extracting the core data contained in a (more complex) object and replacing it.
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=1020, norder=8)
goodsbasis
# ----------
# Convert integer to linear differential operator
# m = 1:  penalize the square of the slope or valocity
# m = 2:  penalize the squared acceleration
# m = 3:  penalize the squared rate of change of acceleration
# m = 4:  penalize the squared curvature of acceleration
LfdobjNonDur= int2Lfd(m = 4)
# ----------
# smooth the data using function smooth.basisPar, which does not require setting up a functional parameter object
# zoo::coredata():  generic functions for extracting the core data contained in a (more complex) object and replacing it.
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
str(nondurables)
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
plot(zoo::index(nondurables)[sel64.67],
log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
sel64.67
plot(zoo::index(nondurables)[sel64.67],
log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
sel64.67
index(nondurables)[sel64.67]
which(nondurables)[sel64.67]
which(nondurables)[sel64.67])
which(nondurables[sel64.67])
zoo::index(nondurables)
str(zoo::index(nondurables))
which(sel64.67)
which(sel64.67 == TRUE)
which(sel64.67 == "TRUE")
which(sel64.67 == "TRUE")
sel64.67 == "TRUE"
sel64.67
plot( log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
log10(nondurables[sel64.67])
data("nondurables", package = "fda")
str(nondurables)
# this is time-series data
# ------------------------------------------------------------------------------
# More closer look at a comparatively stable period by smoothing and interpolation
# ------------------------------------------------------------------------------
# set up a basis for smoothing log nondurable goods index
goodsbasis  = create.bspline.basis(rangeval=c(1919,2000), nbasis=979, norder=8)
goodsbasis
LfdobjNonDur= int2Lfd(m = 4)
logNondurSm = smooth.basisPar(argvals=zoo::index(nondurables),
y=log10(zoo::coredata(nondurables)), fdobj=goodsbasis,
Lfdobj=LfdobjNonDur, lambda=1e-11)
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
plot(zoo::index(nondurables)[sel64.67],
log10(nondurables[sel64.67]), xlab='Year',
ylab='Log10 Nondurable Goods Index', las=1)
log10(nondurables[sel64.67])
sel64.67 = ((1964<=zoo::index(nondurables)) & (zoo::index(nondurables)<=1967) )
sel64.67
nondurables[sel64.67]
