nms <- abbreviate(names(fixef(fm16.lmer)), 5)
rownames(corb) <- nms
corb
nms <- abbreviate(names(fixef(fm16.lmer)), 5)
rownames(corb) <- nms
corb <- cov2cor(vcovb)
vcov <- vcov(fm16.lmer)
corb <- cov2cor(vcov)
nms <- abbreviate(names(fixef(fm16.lmer)), 5)
rownames(corb) <- nms
corb
vcov <- vcov(fm16.lmer)
corb <- cov2cor(vcov)
nms <- abbreviate(names(fixef(fm16.lmer)), 5)
rownames(corb) <- nms
corb
VarCorr(fm16.lmer)
( sgma <- sigma(fm16.lmer) )
A <- getME(fm16.lmer, "A")
I.n <- diagonal(ncol(A))
V <- sgma ^ 2 * (I.n + crossprod(A))
str(getME(fm16.lmer, "flist"))
V[3:6, 3:6]
V[3:6, 3:6]
V[3:6, 3:6]
( daov <- anova(fm16.lmer) )
ddf1 <- ddf[-1]
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
coefs <- coef(summary(fm16.lmer))
# Denominator df
ddf <- c(631, 231, 631, 231, 631)
pT <- 2 * (1 - pt(abs(coef[, "t value"]), ddf))
tTable <- cbind(coefs, ddf, pT)
printCoefmat(tTable, P.values = TRUE, has.Pvalue = TRUE)
# ------------------------------------------------------------------------------
# P-values for the sequential-approach F-tests
# ------------------------------------------------------------------------------
( daov <- anova(fm16.lmer) )
ddf1 <- ddf[-1]
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
d11E <- STe * sigmaE
rndE <- rbind(d11E, sigmaE)
rndEm <- rowMeans(rndE)
rndE1 <- apply(rndE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
cbind(rndEm, t(rndEq))
betaEm <- apply(betaE, 1, mean)
betaEq <- apply(betaE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
ptE <- apply(betaE, 1, FUN = function(x){
prb <- mean(x > 0)
2 * pmax(0.5 / ncol(betaE), pmin(prb, 1 - prb))
})
cbind(betaEm, t(betaEq), ptE)
# ------------------------------------------------------------------------------
# Empirical means nad quantiles for sqrt(d11) and sigma
# ------------------------------------------------------------------------------
d11E <- STe * sigmaE
rndE <- rbind(d11E, sigmaE)
rndEm <- rowMeans(rndE)
rndE1 <- apply(rndE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
cbind(rndEm, t(rndEq))
( daov <- anova(fm16.lmer) )
# ddf for intercept omitted
ddf1 <- ddf[-1]
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
# ------------------------------------------------------------------------------
# Refitting the model to the simulated data
# ------------------------------------------------------------------------------
merObject <- fm16.lmer
simD1 <- simulate(merObject, nsim = 1000)
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
betaE <- sapply(dimD1summ, FUN = function(x) x$beta)
STe <- sapply(SimD1summ, FUN = function(x) x$ST)
sigmaE <- sapply(SimD1summ, FUN = function() x$sigma)
# ------------------------------------------------------------------------------
# Empirical means, quantiles, and p-values for fixed0effects coefficients
# ------------------------------------------------------------------------------
betaEm <- apply(betaE, 1, mean)
betaEq <- apply(betaE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
ptE <- apply(betaE, 1, FUN = function(x){
prb <- mean(x > 0)
2 * pmax(0.5 / ncol(betaE), pmin(prb, 1 - prb))
})
cbind(betaEm, t(betaEq), ptE)
# ------------------------------------------------------------------------------
# Empirical means nad quantiles for sqrt(d11) and sigma
# ------------------------------------------------------------------------------
d11E <- STe * sigmaE
rndE <- rbind(d11E, sigmaE)
rndEm <- rowMeans(rndE)
rndE1 <- apply(rndE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
cbind(rndEm, t(rndEq))
names(sigmaE) <- names(ST3) <- BULL
parSimD1 <- rbind(betaE, ST1 = ST2, sigma = sigmaE)
parSimD1t <- data.frame(t(parSImD1), check.names = FALSE)
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
library(reshape)
densityPlot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
densityplot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
library(reshape)
densityplot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
rm(list=ls())
graphics.off(9)
graphics.off()
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\armd")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  ARMD (Age-Related Macular Degeneration Trial)
# ------------------------------------------------------------------------------
armd.wide <- read.csv("armd.wide.txt", header = T, sep = "\t")
armd0 <- read.csv("armd0.txt", header = T, sep = "\t")
str(armd.wide)
str(armd0)
# ----------
data("armd", package = "nlmeU")
str(armd)
library(lme4)
fm16.lmer <- lmer(visual ~ visual0 + time * treat.f + (1 | subject), data = armd)
print(fm16.lmer, corr = FALSE)
lm1.form <- formula(visual ~ - 1 + visual0 + time.f + treat.f:time.f)
vis.gls1 <- gls(lm1.form, data = armd)
vis.gls1.tpwr <- gls(lm1.form, weights = varPower(form = ~ time), data = armd)
library(nlme)
lm1.form <- formula(visual ~ - 1 + visual0 + time.f + treat.f:time.f)
vis.gls1 <- gls(lm1.form, data = armd)
vis.gls1.tpwr <- gls(lm1.form, weights = varPower(form = ~ time), data = armd)
library(lme4)
fm16.lmer <- lmer(visual ~ visual0 + time * treat.f + (1 | subject), data = armd)
print(fm16.lmer, corr = FALSE)
# ------------------------------------------------------------------------------
# model fit
# ------------------------------------------------------------------------------
library(lme4)
fm16.lmer <- lmer(visual ~ visual0 + time * treat.f + (1 | subject), data = armd)
print(fm16.lmer, corr = FALSE)
# print fixed effects
printCoefmat(summary(fm16.1)$tTable, has.Pvalue = TRUE, P.values = TRUE)
printCoefmat(summary(fm16.lmer)$tTable, has.Pvalue = TRUE, P.values = TRUE)
VarCorr(fm16.lmer)
( sgma <- sigma(fm16.lmer) )
# ------------------------------------------------------------------------------
# The marginal variance-covariance matrix
# ------------------------------------------------------------------------------
A <- getME(fm16.lmer, "A")
I.n <- diagonal(ncol(A))
V <- sgma ^ 2 * (I.n + crossprod(A))
I.n <- Diagonal(ncol(A))
V <- sgma ^ 2 * (I.n + crossprod(A))
str(getME(fm16.lmer, "flist"))
V[3:6, 3:6]
str(getME(fm16.lmer, "flist"))
coefs <- coef(summary(fm16.lmer))
# Denominator df
ddf <- c(631, 231, 631, 231, 631)
pT <- 2 * (1 - pt(abs(coef[, "t value"]), ddf))
tTable <- cbind(coefs, ddf, pT)
printCoefmat(tTable, P.values = TRUE, has.Pvalue = TRUE)
coefs <- coef(summary(fm16.lmer))
ddf <- c(631, 231, 631, 231, 631)
pT <- 2 * (1 - pt(abs(coef[, "t value"]), ddf))
2 * (1 - pt(abs(coef[, "t value"]), ddf))
pT <- 2 * (1 - pt(abs(coef[, "t value"]), ddf))
pT <- 2 * (1 - pt(abs(coefs[, "t value"]), ddf))
tTable <- cbind(coefs, ddf, pT)
printCoefmat(tTable, P.values = TRUE, has.Pvalue = TRUE)
( dtaov <- anova(fm16.lmer) )
ddf1 <- ddf[-1]
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
( dtaov <- anova(fm16.lmer) )
ddf1 <- ddf[-1]
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
Df
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
within(dtaov,
{
'Pr(>F)' <- pf('F value', 1, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
within(dtaov,
{
'Pr(>F)' <- pf('F value', Df, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
ddf1
within(dtaov,
{
'Pr(>F)' <- pf('F value', 3, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
within(dtaov,
{
'Pr(>F)' <- pf('F value', npar, ddf1, lower.tail = FALSE)
denDF <- ddf1
})
( dtaov <- anova(fm16.lmer) )
str(dtaov)
dtaov$'F value'
within(dtaov, 'F value')
within(dtaov$'F value')
dtaov$'F value'
dtaov$'Pr(>F)' <- pf(dtaov$'F value', dtaov$npar, ddf1, lower.tail = FALSE)
dtaov$denDF <- ddf1
dtaov
SeedValue <- 17432157
set.seed(SeedValue)
merObject <- fm16.lmer
simD1 <- simulate(merObject, nsim = 1000)
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
SeedValue <- 17432157
set.seed(SeedValue)
merObject <- fm16.lmer
simD1 <- simulate(merObject, nsim = 1000)
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
merObject <- fm16.lmer
simD1 <- simulate(merObject, nsim = 1000)
head(simD1)
str(SimD1)
str(simD1)
refit(merObject,simD1$[,1])
refit(merObject,simD1[,1])
y <- simD1
y <- simD1[,1]
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
beta <- fixef(summ)
fixef(auxFit)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
#                    beta <- fixef(summ)
beta <- fixef(auxFit)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
simD1sum <- apply(simD1, 2,
fuction(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
#                    beta <- fixef(summ)
beta <- fixef(auxFit)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
simD1sum <- apply(simD1, 2,
function(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
#                    beta <- fixef(summ)
beta <- fixef(auxFit)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
betaE <- sapply(dimD1summ, FUN = function(x) x$beta)
betaE <- sapply(simD1summ, FUN = function(x) x$beta)
simD1summ <- apply(simD1, 2,
function(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
#                    beta <- fixef(summ)
beta <- fixef(auxFit)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
betaE <- sapply(simD1summ, FUN = function(x) x$beta)
STe <- sapply(SimD1summ, FUN = function(x) x$ST)
sigmaE <- sapply(SimD1summ, FUN = function() x$sigma)
betaE <- sapply(simD1summ, FUN = function(x) x$beta)
STe <- sapply(SimD1summ, FUN = function(x) x$ST)
betaE <- sapply(SimD1summ, FUN = function(x) x$beta)
STe <- sapply(SimD1summ, FUN = function(x) x$ST)
sigmaE <- sapply(SimD1summ, FUN = function() x$sigma)
betaE <- sapply(SimD1summ, FUN = function(x) x$beta)
betaE <- sapply(SimD1summ, FUN = function(x) x$beta)
SimD1summ <- apply(simD1, 2,
function(y){
auxFit <- refit(merObject, y)
summ <- summary(auxFit)
#                    beta <- fixef(summ)
beta <- fixef(auxFit)
Sx <- getME(auxFit, "theta")
sgma <- sigma(auxFit)
list(beta = beta, ST = Sx, sigma = sgma)
})
betaE <- sapply(SimD1summ, FUN = function(x) x$beta)
STe <- sapply(SimD1summ, FUN = function(x) x$ST)
sigmaE <- sapply(SimD1summ, FUN = function() x$sigma)
sigmaE <- sapply(SimD1summ, FUN = function(x) x$sigma)
betaEm <- apply(betaE, 1, mean)
betaEq <- apply(betaE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
ptE <- apply(betaE, 1, FUN = function(x){
prb <- mean(x > 0)
2 * pmax(0.5 / ncol(betaE), pmin(prb, 1 - prb))
})
cbind(betaEm, t(betaEq), ptE)
d11E <- STe * sigmaE
rndE <- rbind(d11E, sigmaE)
rndEm <- rowMeans(rndE)
rndE1 <- apply(rndE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
cbind(rndEm, t(rndEq))
rndEq <- apply(rndE, 1, FUN = function(x) quantile(x, c(0.5, 0.025, 0.975)))
cbind(rndEm, t(rndEq))
names(sigmaE) <- names(ST3) <- BULL
parSimD1 <- rbind(betaE, ST1 = ST2, sigma = sigmaE)
parSimD1t <- data.frame(t(parSImD1), check.names = FALSE)
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
library(reshape)
names(sigmaE) <- names(STe) <- BULL
parSimD1 <- rbind(betaE, ST1 = ST2, sigma = sigmaE)
sigma = sigmaE)
parSimD1t <- data.frame(t(parSImD1), check.names = FALSE)
names(sigmaE) <- names(STe) <- BULL
names(sigmaE) <- names(STe) <- NULL
parSimD1 <- rbind(betaE, ST1 = STe, sigma = sigmaE)
parSimD1t <- data.frame(t(parSImD1), check.names = FALSE)
parSimD1t <- data.frame(t(parSimD1), check.names = FALSE)
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
parSimD1t <- data.frame(t(parSimD1), check.names = FALSE)
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
parSimD1t
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
parSimD1t
parSimD1s <- subset(parSimD1t, select = - '(Intercept)')
parSimD1s <- subset(parSimD1t, select = -'(Intercept)')
parSimD1s <- parSimD1t %>% dplyr::select(-'(Intercept)')
library(reshape)
densityplot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
car::densityplot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
car::densityPlot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
library(reshape)
densityplot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
help(densityplot)
lattice::densityplot(~ value | variable, data = melt(parSimD1s),
scales = list(relation = "free"), plot.points = FALSE)
lm2.from <- visual ~ visual0 + time + treat.f + treat.f : time
vis.lm2 <- lm(lm2.form, data = armd)
( RLRTstat <- -2 * as.numeric(logLik(vis.lm2, REML = TRUE) - logLik(fm16.lmer)) )
0.5 * pchisq(RLRTstat, 1, lower.tail = FALESE)
lm2.from <- visual ~ visual0 + time + treat.f + treat.f : time
vis.lm2 <- lm(lm2.form, data = armd)
lm2.form <- visual ~ visual0 + time + treat.f + treat.f : time
vis.lm2 <- lm(lm2.form, data = armd)
( RLRTstat <- -2 * as.numeric(logLik(vis.lm2, REML = TRUE) - logLik(fm16.lmer)) )
0.5 * pchisq(RLRTstat, 1, lower.tail = FALESE)
0.5 * pchisq(RLRTstat, 1, lower.tail = FALSE)
libeary(RLRsim)
exactRLRT(fm16.lmer)
library(RLRsim)
exactRLRT(fm16.lmer)
lm2sim <- simulate(vis.lm2, nsim = 100)
RLRTstatSim <- apply(lm2sim, 2,
function(y){
dfAux <- within(armd, visual <- y)
lm0 <- lm(formula(vis.lm2), data = dfAux)
llik0 <- as.numeric(logLik(lm0, REML = TRUE))
llikA <- as.numeric(logLik(refit(fm16.lmer, y)))
RLRTstat <- -2 * (llik0 - llikA)
})
mean(RLRTstat <= RLRTstatSIm)
mean(RLRTstat <= RLRTstatSim)
fm16.2mer <- lmer(visual = visual0 + time + treat.f + treat.f : time + (1 | subject) + (0 * time | subject), data = armd)
summ <- summary(fm16.2mer)
fm16.2mer <- lmer(visual = visual0 + time + treat.f + treat.f : time + (1 | subject) + (0 * time | subject), data = armd)
fm16.2mer <- lmer(visual ~ visual0 + time + treat.f + treat.f : time + (1 | subject) + (0 * time | subject), data = armd)
summ <- summary(fm16.2mer)
coef(summ)
unlist(VarCorr(fm16.2mer))
sigma(fm16.2mer)
unlist(VarCorr(fm16.2mer))
unlist(VarCorr(fm16.2mer))
sigma(fm16.2mer)
VarCorr(fm16.2mer)
coef(summ)
VarCorr(fm16.2mer)
sigma(fm16.2mer)
unlist(VarCorr(fm16.2mer[[1]]))
fm16.2mer
summ <- summary(fm16.2mer)
fm16.2mer <- lmer(visual ~ visual0 + time + treat.f + treat.f : time + (1 | subject) + (0 * time | subject), data = armd)
summary(fm16.2mer)
summ <- summary(fm16.2mer)
coef(summ)
unlist(VarCorr(fm16.2mer))
fm16.2aux <- update(fm16.2mer, . ~ . ^ treat.f : time)
fm16.2aux <- update(fm16.2mer, . ~ . - treat.f : time)
anova(fm16.2aux, fm16.2.mer)
anova(fm16.2aux, fm16.2mer)
fm16.2mer <- lmer(visual ~ visual0 + time + treat.f + treat.f : time +
(1 | subject) + (0 + time | subject), data = armd)
summ <- summary(fm16.2mer)
coef(summ)
unlist(VarCorr(fm16.2mer))
sigma(fm16.2mer)
fm16.2aux <- update(fm16.2mer, . ~ . - treat.f : time)
anova(fm16.2aux, fm16.2mer)
RML0 <- logLik(fm16.1mer)
RMLa <- logLik(fm16.2mer)
(RLRTstat <- -2 * as.numeric(RML0 - RMLa))
.5 * pchisq(RLRTstat, 1, lower.tail = FALSE) +    # \zx{p}-value
.5 * pchisq(RLRTstat, 2, lower.tail = FALSE)
require(RLRsim)
mAux  <- lmer(visual ~               # Auxiliary model with ...
visual0 + time + treat.f + treat.f:time +
(0 + time| subject),        # ... random slopes only.
data = armd)
exactRLRT(m = mAux,                  # The auxiliary model
m0= fm16.1mer,             # M16.1 (null)
mA= fm16.2mer)
