setwd("//media//kswada//MyFiles//R//berkeley_growth")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  gait
#   - The Motion Analysis Laboratory at Children's Hospital, San Diego, CA, collected data, which consist of the angles fomred by the hip and knee
#     of each of 39 children over each child's gait cycle. See Olshen et al. (1989) for full details.
#   - Time is measured in terms of the individual gait cycle, which we have translated into values of t in [0,1].
#     The cycle begins and ends at the point where the heel of the limb under observation strikes the ground.
# ------------------------------------------------------------------------------
data("gait", package = "fda")
str(gait)
# ------------------------------------------------------------------------------
# basics
# ------------------------------------------------------------------------------
Time = c(0, as.numeric(dimnames(gait)[[1]]), 1)
Time
# ----------
gait[1,,]
gait[20,,]
# ----------
# Interpolate a common value for 0 & 1
gait01        = 0.5 * (gait[20,,] + gait[1,,])
Gait          = array(NA,  dim=c(22, 39, 2))
dimnames(Gait)= c(list(Time), dimnames(gait)[2:3])
Gait[1,,]     = gait01
Gait[2:21,,]  = gait
Gait[22,,]    = gait01
before = 17:22
Before = c(seq(-0.225, -0.025, by=0.05), 0)
after = 1:6
After = c(1, seq(1.025, 1.225, by=0.05))
# ----------
op = par(mfrow=c(2,1), mar=c(4, 4, 1, 2) + .1)
matplot(Time, Gait[,,'Hip Angle'], ylab='Hip Angle (degrees)', type='l', xlim=c(-0.25, 1.25), lty='solid', xlab='')
matlines(Before, Gait[before,,'Hip Angle'], lty='dotted')
matlines(After, Gait[after,,'Hip Angle'], lty='dotted')
abline(v=0:1, lty='dotted')
matplot(Time, Gait[,,'Knee Angle'], ylab='Knee Angle (degrees)', type='l', xlim=c(-0.25, 1.25), lty='solid', xlab='Time (portion of gait cycle)')
matlines(Before, Gait[before,,'Knee Angle'], lty='dotted')
matlines(After, gait[after,,'Knee Angle'], lty='dotted')
abline(v=0:1, lty='dotted')
par(op)
# -->
# We see that the knee shows a two-phase process, while the hip motion is single-phase.
# It is harder to see how the two joiints interact: The figure does not indicate which hip curve is paired with which knee curve.
# ------------------------------------------------------------------------------
# Visualize gait cycle for a single child
# by plotting knee angle against hip angle as time progresses round the cycle.
# ------------------------------------------------------------------------------
par(mfrow=c(1,1))
gaitMean = apply(gait, c(1, 3), mean)
xlim = range(c(gait[,,1], gaitMean[, 1]))
ylim = range(c(gait[,,2], gaitMean[, 2]))
plot(gait[, 1, ], type='b', xlim=xlim, ylim=ylim, xlab='Hip angle (degrees)', ylab='Knee angle (degrees)', pch='.', cex=3, lwd=1.5)
points(gaitMean, type='b', lty='dotted', pch='.', cex=3, lwd=1.5)
i4 = seq(4, 20, 4)
text(gait[i4, 1, ], labels=LETTERS[c(2:5, 1)])
text(gaitMean[i4, ], labels=LETTERS[c(2:5, 1)])
# -->
# The periodic nature of the process implies that this forms a closed curve.
# Also shown for reference purposes is the same relationship for the average across the 39 children.
# Interesting feature in this plot is the cusp occurring at the heel strike as the knee momentarily reverses its extension to absorb the shock.
# The angular velocity is clearly visible in terms of the spacing between numbers, and it varies considerably as the cycle proceeds.
# The child whoose gait is represented by the solid curve differs from the average in two principla ways.
# First, the portion of the gait pattern in the C-D part of the cycle shows an exaggeration of movement relative to the average.
# Second, in the part of the cyle where the hip is most bent, this bend is markedly less than average;
# interestingly, this is not accompanied by any strong effect on the knee angle.
gaittime = seq(0.5, 19.5, 1)
gaitrange = c(0, 20)
gaitfine = seq(0, 20, len = 101)
# ----------
harmaccelLfd20 = vec2Lfd(c(0, (2*pi/20)^2, 0), rangeval=gaitrange)
gaitbasis = create.fourier.basis(gaitrange, nbasis = 21)
# ----------
# First select smoothing for the raw data
gaitLoglam = seq(-4, 0, 0.25)
nglam   = length(gaitLoglam)
gaitSmoothStats = array(NA, dim=c(nglam, 3), dimnames=list(gaitLoglam, c("log10.lambda", "df", "gcv") ) )
gaitSmoothStats[, 1] = gaitLoglam
# ----------
# loop through smoothing parameters
for (ilam in 1:nglam) {
gaitSmooth = smooth.basisPar(gaittime, gait, gaitbasis,
Lfdobj=harmaccelLfd20, lambda=10^gaitLoglam[ilam])
gaitSmoothStats[ilam, "df"]  = gaitSmooth$df
gaitSmoothStats[ilam, "gcv"] = sum(gaitSmooth$gcv)
# note: gcv is a matrix in this case
}
# -----------
# display and plot GCV criterion and degrees of freedom
gaitSmoothStats
plot(gaitSmoothStats[, c(1, 3)], type='b')
# ----------
op = par(mfrow=c(2,1))
plot(gaitSmoothStats[, c(1, 3)], type="b", log="y")
plot(gaitSmoothStats[, 1:2], type="b", log="y")
par(op)
# ----------
# GCV is minimized with lambda = 10^(-1.5).
gaitSmooth = smooth.basisPar(gaittime, gait,
gaitbasis, Lfdobj=harmaccelLfd20, lambda=10^(-1.5))
gaitfd = gaitSmooth$fd
names(gaitfd$fdnames) = c("Normalized time", "Child", "Angle")
gaitfd$fdnames[[3]] = c("Hip", "Knee")
hipfd  = gaitfd[,1]
kneefd = gaitfd[,2]
kneefdMean = mean(kneefd)
# ----------
# Plot mean and its velocity and acceleration
op = par(mfrow=c(3,1))
plot(kneefdMean, xlab='', ylab='', ylim=c(0, 80), main='Mean Knee Angle', lwd=2)
abline(v=c(7.5, 14.7), lty='dashed')
plot(deriv(kneefdMean), xlab='', ylab='', main='Knee Angle Velocity', lwd=2)
abline(v=c(7.5, 14.7), h=0, lty='dashed')
plot(deriv(kneefdMean, 2), xlab='', ylab='', main='Knee Angle Acceleration', lwd=2)
abline(v=c(7.5, 14.7), h=0, lty='dashed')
par(op)
# ------------------------------------------------------------------------------
# Phase-Plane Plot
# ------------------------------------------------------------------------------
phaseplanePlot(gaitfine, kneefdMean,
labels=list(evalarg=gaittime, labels=1:20),
xlab='Knee Velocity', ylab='Knee Acceleration')
par(mfrow=c(2,1), mar=c(2,2,2,2))
plot(gaitfd, cex=1.2)
op <- par(mfrow=c(2,1))
plotfit.fd(gait, gaittime, gaitfd, cex=1.2)
graphics.off()
plotfit.fd(gait, gaittime, gaitfd, residual=TRUE, sort=TRUE, cex=1.2)
plot(gaitfd, Lfdob=1)
plot(gaitfd, Lfdob=2)
gaitmeanfd <- mean.fd(gaitfd)
#  plot these functions and their first two derivatives
#par(mfcol=c(2,3),pty="s")
#op <- par(mfrow=c(3,2))
op <- par(mfcol=2:3)
plot(gaitmeanfd)
plot(gaitmeanfd, Lfdobj=1)
plot(gaitmeanfd, Lfdobj=2)
par(op)
help(eval.bifd)
gaitvarbifd <- var.fd(gaitfd)
str(gaitvarbifd)
gaitvararray <- eval.bifd(gaittime, gaittime, gaitvarbifd)
gaitvarbifd <- var.fd(gaitfd)
str(gaitvarbifd)
gaitvararray <- eval.bifd(gaittime, gaittime, gaitvarbifd)
# ----------
# plot variance and covariance functions as contours
filled.contour(gaittime, gaittime, gaitvararray[,,1,1], cex=1.2)
title("Knee - Knee")
filled.contour(gaittime, gaittime, gaitvararray[,,1,2], cex=1.2)
title("Knee - Hip")
filled.contour(gaittime, gaittime, gaitvararray[,,1,3], cex=1.2)
title("Hip - Hip")
filled.contour(gaittime, gaittime, gaitvararray[,,1,1], cex=1.2)
title("Knee - Knee")
filled.contour(gaittime, gaittime, gaitvararray[,,1,3], cex=1.2)
title("Hip - Hip")
filled.contour(gaittime, gaittime, gaitvararray[,,1,2], cex=1.2)
title("Knee - Hip")
persp(gaittime, gaittime, gaitvararray[,,1,1], cex=1.2)
title("Knee - Knee")
persp(gaittime, gaittime, gaitvararray[,,1,2], cex=1.2)
title("Knee - Hip")
persp(gaittime, gaittime, gaitvararray[,,1,3], cex=1.2)
title("Hip - Hip")
persp(gaittime, gaittime, gaitvararray[,,1,1], cex=1.2)
title("Knee - Knee")
filled.contour(gaittime, gaittime, gaitvararray[,,1,1], cex=1.2)
title("Knee - Knee")
gaitvararray
str(gaitvarbifd)
gaitCorArray <- cor.fd(gaittime, gaitfd)
quantile(gaitCorArray)
contour(gaittime, gaittime, gaitCorArray[,,1,1], cex=1.2)
title("Knee - Knee")
# Smooth with lambda as determined before
gaitfdPar  <- fdPar(gaitbasis, harmaccelLfd, lambda=1e-2)
gaitpca.fd <- pca.fd(gaitfd, nharm=4, gaitfdPar)
gaitpca.fd <- varmx.pca.fd(gaitpca.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd, cycle=TRUE)
par(op)
gaitfdPar  <- fdPar(gaitbasis, harmaccelLfd, lambda=1e-2)
gaitpca.fd <- pca.fd(gaitfd, nharm=4, gaitfdPar)
gaitpca2.fd <- varmx.pca.fd(gaitpca.fd)
gaitfdPar  <- fdPar(gaitbasis, harmaccelLfd, lambda=1e-2)
gaitfdPar  <- fdPar(gaitbasis, harmaccelLfd20, lambda=1e-2)
gaitpca.fd <- pca.fd(gaitfd, nharm=4, gaitfdPar)
gaitpca2.fd <- varmx.pca.fd(gaitpca.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd, cycle=TRUE)
par(op)
gaitpca.fd
gaitpca.fd <- pca.fd(gaitfd, nharm=nharm, gaitfdPar)
gaitpca2.fd <- varmx.pca.fd(gaitpca.fd)
nharm = 4
gaitpca.fd <- pca.fd(gaitfd, nharm=nharm, gaitfdPar)
gaitpca2.fd <- varmx.pca.fd(gaitpca.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca2.fd, cycle=TRUE)
par(op)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd, cycle=FALSE)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd)
plot.pca.fd(gaitpca.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca2.fd)
op <- par(mfrow=c(2,2))
plot.pca.fd(gaitpca.fd, cycle=TRUE)
par(op)
( gaittime <- as.numeric(dimnames(gait)[[1]]) * 20 )
gaitrange <- c(0,20)
gaitbasis <- create.fourier.basis(gaitrange, nbasis=21)
harmaccelLfd <- vec2Lfd(c(0, (2*pi/20)^2, 0), rangeval=gaitrange)
gaitfd <- smooth.basisPar(gaittime, gait, gaitbasis, Lfdobj=harmaccelLfd, lambda=1e-2)$fd
str(gaitfd)
names(gaitfd$fdnames) <- c("Normalized time", "Child", "Angle")
gaitfd$fdnames[[3]] <- c("Hip", "Knee")
hipfd  <- gaitfd[,1]
kneefd <- gaitfd[,2]
hipfdPar  <- fdPar(hipfd,  harmaccelLfd, 1e2)
kneefdPar <- fdPar(kneefd, harmaccelLfd, 1e2)
ccafd    <- cca.fd(hipfd, kneefd, ncan=3, hipfdPar, kneefdPar)
round(ccafd$ccacorr[1:6],3)
plot(1:6, ccafd$ccacorr[1:6], type="b")
op <- par(mfrow=c(2,1), mar=c(3,4,2,1), pty="m")
plot.cca.fd(ccafd, cex=1.2)
op <- par(mfrow=c(2,1), mar=c(3,4,2,1), pty="m")
plot.cca.fd(ccafd, cex=1.2)
# display the canonical correlations
round(ccafd$ccacorr[1:6],3)
plot(1:6, ccafd$ccacorr[1:6], type="b")
par(mfrow=c(1,1))
plot(1:6, ccafd$ccacorr[1:6], type="b")
D2gaitfd <- deriv.fd(gaitfd,2)
D2gaitmeanfd  <- mean.fd(D2gaitfd)
nwbasis   <- 7
wbasis    <- create.bspline.basis(gaitrange, nwbasis, 3)
Warpfd    <- fd(matrix(0, nwbasis, 39), wbasis)
WarpfdPar <- fdPar(Warpfd)
regstr <- register.fd(D2gaitmeanfd, D2gaitfd, WarpfdPar, periodic=TRUE)
xfine        <- seq(0, 1, len=101)
D2gaitregfd  <- regstr$regfd
D2gaitregmat <- eval.fd(xfine, D2gaitregfd)
warpfd       <- regstr$Wfd
shift        <- regstr$shift
warpmat      <- eval.monfd(xfine, warpfd)
warpmat      <- warpmat / outer(rep(1,101), warpmat[101,])
print(round(shift,1))
hist(shift)
op <- par(mfrow=c(1,1), mar=c(4,4,2,1), pty="m")
matplot(xfine, warpmat, type="l", xlab="t", ylab="h(t)", main="Time warping functions", cex=1.2)
par(op)
defmat <- warpmat
for (i in 1:39) defmat[,i] <- warpmat[,i] - xfine - shift[i]
op <- par(mfrow=c(1,1), mar=c(4,4,2,1), pty="m")
matplot(xfine, defmat, type="l", xlab="t", ylab="h(t) - t", main="Deformation functions", cex=1.2)
par(op)
#  plot both the unregistered and registered versions of the curves
op <- par(mfrow=c(2,2))
plot(D2gaitfd,    ask = FALSE)
plot(D2gaitregfd, ask = FALSE)
par(op)
help(register.fd)
AmpPhasList = AmpPhaseDecomp(xfd = D2gaitfd, yfd = D2gaitregfd, hfd = warpfd, rng = c(0, 20))
AmpPhasList = AmpPhaseDecomp(xfd = D2gaitfd, yfd = D2gaitregfd, hfd = warpfd, rng = c(1, 20))
AmpPhasList = AmpPhaseDecomp(xfd = D2gaitfd, yfd = D2gaitregfd, hfd = warpfd, rng = c(0, 20))
AmpPhasList = AmpPhaseDecomp(xfd = D2gaitfd, yfd = D2gaitregfd, hfd = warpfd)
help(AmpPhaseDecomp)
AmpPhasList = AmpPhaseDecomp(xfd = D2gaitfd, yfd = D2gaitregfd, hfd = warpfd, rng = c(0, 20))
( gaittime <- as.numeric(dimnames(gait)[[1]]) * 20 )
gaitrange <- c(0, 20)
gaitbasis <- create.fourier.basis(gaitrange, nbasis = 21)
harmaccelLfd <- vec2Lfd(c(0, (2*pi/20)^2, 0), rangeval=gaitrange)
gaitfd <- smooth.basisPar(gaittime, gait, gaitbasis, Lfdobj=harmaccelLfd, lambda=1e-2)$fd
str(gaitfd)
names(gaitfd$fdnames) <- c("Normalized time", "Child", "Angle")
gaitfd$fdnames[[3]] <- c("Hip", "Knee")
# set up the data
hipfd  <- gaitfd[,1]
kneefd <- gaitfd[,2]
ncurve <- dim(kneefd$coefs)[2]
kneemeanfd <- mean(kneefd)
betafdPar <- fdPar(gaitbasis, harmaccelLfd)
betalist  <- list(betafdPar,betafdPar)
conbasis <- create.constant.basis(c(0, 20))
constfd  <- fd(matrix(1, 1, ncurve), conbasis)
kneehatfd   <- fRegressout$yhatfd
betaestlist <- fRegressout$betaestlist
alphafd   <- betaestlist[[1]]$fd
hipbetafd <- betaestlist[[2]]$fd
op <- par(mfrow=c(2,1), ask=FALSE)
plot(alphafd,   ylab="Intercept")
plot(hipbetafd, ylab="Hip coefficient")
par(op)
betafdPar <- fdPar(gaitbasis, harmaccelLfd)
betalist  <- list(betafdPar,betafdPar)
# ----------
conbasis <- create.constant.basis(c(0, 20))
constfd  <- fd(matrix(1, 1, ncurve), conbasis)
# ----------
# set up the list of covariate objects
xfdlist  <- list(constfd, hipfd)
# fit the current functional linear model
fRegressout <- fRegress(kneefd, xfdlist, betalist)
#  set up and plot the fit functions and the regression functions
kneehatfd   <- fRegressout$yhatfd
betaestlist <- fRegressout$betaestlist
alphafd   <- betaestlist[[1]]$fd
hipbetafd <- betaestlist[[2]]$fd
op <- par(mfrow=c(2,1), ask=FALSE)
plot(alphafd,   ylab="Intercept")
plot(hipbetafd, ylab="Hip coefficient")
par(op)
gaitfine    <- seq(0,20,len=101)
kneemat     <- eval.fd(gaitfine, kneefd)
#kneehatmat  <- eval.fd(gaitfine, kneehatfd)
kneehatmat  <- predict(kneehatfd, gaitfine)
kneemeanvec <- as.vector(eval.fd(gaitfine, kneemeanfd))
SSE0 <- apply((kneemat - outer(kneemeanvec, rep(1,ncurve)))^2, 1, sum)
SSE1 <- apply((kneemat - kneehatmat)^2, 1, sum)
Rsqr <- (SSE0-SSE1)/SSE0
op <- par(mfrow=c(1,1),ask=FALSE)
plot(gaitfine, Rsqr, type="l", ylim=c(0,0.4))
op <- par(mfrow=c(1,1),ask=TRUE)
for (i in 1:ncurve) {
plot( gaitfine, kneemat[,i], type="l", lty=1, col=4, ylim=c(0,80))
lines(gaitfine, kneemeanvec,           lty=2, col=2)
lines(gaitfine, kneehatmat[,i],        lty=3, col=4)
title(paste("Case",i))
}
kneehatfd   <- fRegressout$yhatfd
betaestlist <- fRegressout$betaestlist
alphafd   <- betaestlist[[1]]$fd
hipbetafd <- betaestlist[[2]]$fd
op <- par(mfrow=c(2,1), ask=FALSE)
plot(alphafd,   ylab="Intercept")
plot(hipbetafd, ylab="Hip coefficient")
par(op)
rm(list=ls())
setwd("//media//kswada//MyFiles//R//berkeley_growth")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  gait
# ------------------------------------------------------------------------------
data("gait", package = "fda")
str(gait)
( gaittime <- as.numeric(dimnames(gait)[[1]]) * 20 )
gaitrange <- c(0, 20)
gaitbasis <- create.fourier.basis(gaitrange, nbasis = 21)
harmaccelLfd <- vec2Lfd(c(0, (2*pi/20)^2, 0), rangeval=gaitrange)
c(0, (2*pi/20)^2, 0)
gaitfd <- smooth.basisPar(gaittime, gait, gaitbasis, Lfdobj=harmaccelLfd, lambda=1e-2)$fd
str(gaitfd)
names(gaitfd$fdnames) <- c("Normalized time", "Child", "Angle")
gaitfd$fdnames[[3]] <- c("Hip", "Knee")
gaitfd
gait[,1]
gaitfd[,1]
gaitfd[,4]
gaitfd[,3]
gaitfd[,2]
names(gaitfd)
gaitfd[,"Hip"]
attribute(gaitfd)
attributes(gaitfd)
dim(gaitfd)
( gaittime <- as.numeric(dimnames(gait)[[1]]) * 20 )
gaitrange <- c(0, 20)
gaitbasis <- create.fourier.basis(gaitrange, nbasis = 21)
harmaccelLfd <- vec2Lfd(c(0, (2*pi/20)^2, 0), rangeval=gaitrange)
gaitfd <- smooth.basisPar(gaittime, gait, gaitbasis, Lfdobj=harmaccelLfd, lambda=1e-2)$fd
str(gaitfd)
names(gaitfd$fdnames) <- c("Normalized time", "Child", "Angle")
gaitfd$fdnames[[3]] <- c("Hip", "Knee")
# ----------
hipfd  <- gaitfd[,1]
kneefd <- gaitfd[,2]
xfdlist   = list(const = rep(1, 39), hip = hipfd)
betafdPar = fdPar(gaitbasis, harmaccelLfd)
betalist  = list(const = betafdPar, hip = betafdPar)
gaitRegress = fRegress(kneefd, xfdlist, betalist)
# ----------
# Intercept
betaestlist = gaitRegress$betaestlist
gaitfine = seq(0, 20, len = 101)
kneeIntercept = predict(betaestlist$const$fd, gaitfine)
# ----------
# mean knee angle
kneeMean = predict(kneefdMean, gaitfine)
# ----------
kneefdMean = mean(kneefd)
kneeMean = predict(kneefdMean, gaitfine)
hipCoef = predict(betaestlist$hip$fd, gaitfine)
kneehatfd = gaitRegress$yhatfd$fd
kneehatmat = eval.fd(gaittime, kneehatfd)
resmat. = gait[,,'Knee Angle'] - kneehatmat
SigmaE = cov(t(resmat.))
kneefinemat   = eval.fd(gaitfine, kneefd)
kneemeanvec   = eval.fd(gaitfine, mean(kneefd))
kneehatfinemat= eval.fd(gaitfine, kneehatfd)
resmat        = kneefinemat - kneehatfinemat
ncurve        = dim(gait)[2]
resmat0 = kneefinemat - kneemeanvec %*% matrix(1, 1, ncurve)
SSE0 = apply((resmat0)^2, 1, sum)
SSE1 = apply(resmat^2, 1, sum)
knee.R2 = (SSE0 - SSE1) / SSE0
ylim1 = range(kneeIntercept, kneeMean)
ylim2 = c(0, max(hipCoef, knee.R2))
par(mfrow=c(2,1))
# Plot intercept & mean knee angle
plot(gaitfine, kneeIntercept, ylim=ylim1, lwd=2,
main="Intercept and Mean Knee Angle", type='l',
xlab='', ylab='')
lines(gaitfine, kneeMean, lty='dashed')
abline(h=0, v=c(7.5, 14.7), lty='dashed')
plot(gaitfine, hipCoef, lwd=2, xlab='', ylab='', ylim=ylim2, type='l',
main='Hip Coefficient and Squared Multiple Correlation')
abline(v=c(7.5, 14.7), lty='dashed')
lines(gaitfine, knee.R2, lty='dashed')
