names(tea)
plot(tea.hom, plot.type = "transplot", var.subset = c(20,22,23,24))
tea.hom$quantifications$profession
plot(tea.hom, plot.type = "jointplot")
par(mfrow = c(1,1))
plot(tea.hom, plot.type = "jointplot")
plot(tea.hom, plot.type = "jointplot", var.subset = -22)
plot(tea.hom, plot.type = "jointplot", var.subset = c(-22))
plot(tea.hom, plot.type = "jointplot", var.subset = c(1:20,22:36))
plot(tea.hom, plot.type = "jointplot", var.subset = c(1:21,23:36))
setwd("//media//kswada//MyFiles//R//perfume")
packages <- c("dplyr", "vcd", "vcdExtra", "MASS", "gpairs")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  perfume
#  - sensory data collected at Agrocampus of 98 consumers conducting categorization task using 12 luxury perfumes
#  - The participants were asked to divide the perfumes into groups according to their sensory similarities, and then to attribute a description to each of the groups.
# ------------------------------------------------------------------------------
perfume <- read.table("perfume.csv", header = TRUE, sep = ";", row.names = 1)
dim(perfume)
str(perfume)
perfume[,1:10]
per.hom <- homals(perfume)
summary(per.hom)
plot(per.hom, plot.type = "transplot", var.subset = 1:6)
homwp$quantifications$J18
per.hom$quantifications$J18
par(mfrow = c(1,1))
plot(per.hom)
plot(per.hom, plot.type = "jointplot", var.subset = 1:6)
names(perfume)
plot(per.hom, plot.type = "jointplot", var.subset = c("J18"))
plot(per.hom, plot.type = "jointplot", var.subset = c("J18", "J31", "J40", "J93"))
plot(per.hom, plot.type = "transplot", var.subset = C("J18", "J31", "J40", "J93"))
plot(per.hom, plot.type = "transplot", var.subset = c("J18", "J31", "J40", "J93"))
graphics.off()
par(mfrow = c(2,2))
res.mca <- MCA(perfume, graph = TRUE)
# -->
# This command executes the MCA and produces the graph of variables,
# the graph of individuals (featuring the individuals and the categories for the active and supplementary variables)
# as well as the graph of quantitative supplementary variables
# ----------
summary(res.mca)
# -->
# first 2 dimensions account 31.445% of the explained inertia.
# ------------------------------------------------------------------------------
# Percentage of inertia associated with a component
# ------------------------------------------------------------------------------
par(mfrow = c(1,1))
barplot(res.mca$eig[,1], main = "Eigenvalues", names.arg = paste("dim", 1:nrow(res.mca$eig)))
# -->
# In MCA, the percentages of inertia associated with the first components are generally much lower than in PCA.
par(mfrow = c(1,1))
plot(res.mca, invisible = c("var"), col.ind = "black", cex = 0.7)
par(mfrow = c(1,1))
plot(res.mca, choix = c("var"), cex = 0.7)
plot(per.hom, plot.type = "transplot", var.subset = c("J40", "J54"))
plot(per.hom, plot.type = "transplot", var.subset = c("J31", "J62"))
plot(per.hom, plot.type = "transplot", var.subset = c("J40", "J54"))
plot(per.hom, plot.type = "transplot", var.subset = c("J31", "J62"))
per.hom$quantifications$J40
per.hom$quantifications$J54
plot(per.hom, plot.type = "transplot", var.subset = c("J40", "J6"))
per.hom$quantifications$J40
per.hom$quantifications$J6
par(mfrow = c(1,1))
plot(per.hom, plot.type = "jointplot", var.subset = c("J40", "J54", "J31", "J62"))
plot(per.hom, plot.type = "jointplot", var.subset = c("J40", "J6"))
lines(per.hom$quantifications$J40, col = "gray")
lines(per.hom$quantifications$J6, col = "blue")
plot(per.hom, plot.type = "jointplot", var.subset = c("J40", "J54", "J31", "J62"))
lines(per.hom$quantifications$J40, col = "gray")
lines(per.hom$quantifications$J54, col = "skyblue")
lines(per.hom$quantifications$J31, col = "gray")
lines(per.hom$quantifications$J62, col = "skyblue")
plot(per.hom, plot.type = "jointplot", var.subset = c("J40", "J54", "J31", "J62"))
lines(per.hom$quantifications$J40, col = "gray", lty = 1)
lines(per.hom$quantifications$J54, col = "gray", lty = 2)
lines(per.hom$quantifications$J31, col = "orange", lty = 1)
lines(per.hom$quantifications$J62, col = "orange", lty = 2)
plot(per.hom, plot.type = "jointplot", var.subset = c("J40", "J6"))
lines(per.hom$quantifications$J40, col = "gray")
lines(per.hom$quantifications$J6, col = "skyblue")
plot(per.hom, plot.type = "jointplot", var.subset = c("J40", "J6"))
lines(per.hom$quantifications$J40, col = "gray")
lines(per.hom$quantifications$J6, col = "orange")
setwd("//media//kswada//MyFiles//R//accident")
packages <- c("dplyr", "vcd", "vcdExtra", "MASS", "gpairs")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Accident
# ------------------------------------------------------------------------------
data("Accident", package = "vcdExtra")
dim(Accident)
str(Accident)
car::some(Accident)
# frequency form in dataframe to table
( acci.tab <- xtabs(Freq ~ age + result + mode + gender, data = Accident) )
# ----------
# convert table to case form
acci_c <- expand.dft(acci.tab)
acci_c
acci.hom <- homals(acci_c)
summary(acci.hom)
plot(acci.hom, plot.type = "transplot")
acci.hom$quantifications$mode
plot(acci.hom, plot.type = "jointplot")
lines(per.hom$quantifications$age, col = "gray", lty = 1)
lines(per.hom$quantifications$result, col = "gray", lty = 2)
lines(per.hom$quantifications$mode, col = "orange", lty = 1)
lines(per.hom$quantifications$gender, col = "orange", lty = 2)
lines(acci.hom$quantifications$age, col = "gray", lty = 1)
lines(acci.hom$quantifications$result, col = "gray", lty = 2)
lines(acci.hom$quantifications$mode, col = "orange", lty = 1)
lines(acci.hom$quantifications$gender, col = "orange", lty = 2)
data("TV", package = "vcdExtra")
TV
dim(TV)
str(TV)
TV_c <- expand.dft(TV)
TV_c <- expand.dft(as.data.frame(TV))
as.data.frame(TV)
TV
as.data.frame(TV)
TV_c <- expand.dft(as.data.frame(as.data.frame(TV)))
as.data.frame(as.data.frame(TV))
as.data.matrix(as.data.frame(TV))
data.matrix(as.data.frame(TV))
TV_c <- expand.dft(data.matrix(as.data.frame(TV)))
help(gather)
TV_c <- expand.dft(data.table(as.data.frame(TV)))
TV_c <- expand.dft(as.table(as.data.frame(TV)))
as.table(as.data.frame(TV))
as.data.frame(TV)
help(aperm)
help(expand.table)
expand.table(TV)
expand.dft(TV)
library(tidyverse)
help(gather)
str(as.data.frame(TV))
as.data.frame(TV) %>% gather(., key = "time_network", value = "time_network")
expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c
head(TV_c)
help(separate)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq")) %>% separate(., time_network, time, network, sep = ".", remove = TRUE)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq")) %>%
separate(., col = time_network, into = c("time", "network"), sep = ".", remove = TRUE)
TV_c
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq")) %>%
separate(., col = "time_network", into = c("time", "network"), sep = ".", remove = TRUE)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- separate(TV_c, col = "time_network", into = c("time", "network"), sep = ".", remove = TRUE)
head(TV_c)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- separate(TV_c, col = "time_network", into = c("time", "network"), sep = ".", remove = FALSE)
head(TV_c)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- separate(TV_c, col = time_network, "time", "network", sep = ".", remove = FALSE)
head(TV_c)
df <- data.frame(x = c("a:1", "a:2", "c:4", "d", NA))
df %>% separate(x, c("key","value"), ":") %>% str
df
df %>% separate(x, c("key","value"), ":")
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- separate(TV_c, col = time_network, c("time", "network"), sep = ".", remove = TRUE)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- TV_c %>% separate(col = time_network, c("time", "network"), sep = ".", remove = TRUE)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
head(TV_c)
TV_c <- TV_c %>% separate(col = time_network, c("time", "network"), ".", remove = TRUE)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- TV_c %>% separate(col = time_network, c("time", "network"), sep = "\.", remove = TRUE)
TV_c <- expand.dft(as.data.frame(TV) %>% gather(., key = "time_network", value = "Freq"))
TV_c <- TV_c %>% separate(col = time_network, c("time", "network"), sep = "\\.", remove = TRUE)
head(TV_c)
tv.hom <- homals(TV_c)
summary(tv.hom)
plot(tv.hom, plot.type = "transplot")
str(TV_C)
str(TV_c)
tv.hom$quantifications$time
str(TV)
as.data.frame(TV)
TV_c <- as.data.frame(TV) %>% cbind(Day = rowmames(TV))
TV_c <- as.data.frame(TV)
TV_c <- cbind(TV_c, Day = row.mames(TV))
TV_c <- cbind(TV_c, Day = row.names(TV))
TV_c
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
TV_c <- as.data.frame(TV)
TV_c
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
TV_c
TV_c <- cbind(TV_c, Day = row.names(TV))
head(TV_c)
TV_c <- TV_c %>% separate(col = time_network, c("time", "network"), sep = "\\.", remove = TRUE)
head(TV_c)
tv.hom <- homals(TV_c)
summary(tv.hom)
plot(tv.hom, plot.type = "transplot")
tv.hom
summary(tv.hom)
names(tv.hom)
tv.hom$quantifications$time
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
TV_c <- cbind(TV_c, Day = row.names(TV))
TV_c <- TV_c %>% separate(col = time_network, c("Time", "Network"), sep = "\\.", remove = TRUE)
head(TV_c)
tv.hom <- homals(TV_c)
summary(tv.hom)
tv.hom$quantifications$Day
tv.hom$quantifications$Time
tv.hom$quantifications$Network
plot(tv.hom, plot.type = "transplot")
par(mfrow = c(1,1))
plot(tv.hom, plot.type = "jointplot")
plot(tv.hom, plot.type = "transplot")
library(tidyverse)
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
TV_c <- cbind(TV_c, Day = row.names(TV))
TV_c <- TV_c %>% separate(col = time_network, c("Time", "Network"), sep = "\\.", remove = TRUE) %>% mutate(Time = paste0("X", Time))
head(TV_c)
library(Gifi)
tv.hom <- homals(TV_c)
summary(tv.hom)
plot(tv.hom, plot.type = "transplot")
par(mfrow = c(1,1))
plot(tv.hom, plot.type = "jointplot")
# convert table to case form
library(tidyverse)
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
TV_c <- cbind(TV_c, Day = row.names(TV))
TV_c <- TV_c %>% separate(col = time_network, c("Time", "Network"), sep = "\\.", remove = TRUE)
head(TV_c)
# ------------------------------------------------------------------------------
# Multiple Correspondence Analysis Using Homals
#   - French Approach to multiple CA:  use a singular value decomposition on either the Burt matrix or the indicator matrix
#   - Dutch Approach (i.e., Homals) solves the multiple CA problem numerically, which offers a great amount of flexibility
# ------------------------------------------------------------------------------
library(Gifi)
tv.hom <- homals(TV_c)
summary(tv.hom)
tv.hom$quantifications$Day
TV
TV_c <- as.data.frame(aperm(TV, c(3,1,2)))
TV_c
TV_c <- expand.dft(TV_c %>% gather(., key = "day_time", value = "Freq"))
TV_c
names(TV)
dimnames(TV)
TV_c <- cbind(TV_c, Network = dimnames(TV)$Network)
dimnames(TV)$Network
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
rownames(TV)
TV_c <- cbind(TV_c, Network = rownames(TV))
TV_c <- TV_c %>% separate(col = time_network, c("Time", "Network"), sep = "\\.", remove = TRUE)
head(TV_c)
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
TV_c <- cbind(TV_c, Day = rownames(TV))
TV_c
head(TV_c)
TV_c <- TV_c %>% separate(col = time_network, c("Time", "Network"), sep = "\\.", remove = TRUE)
head(TV_c)
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = "Freq"))
head(TV_c)
TV_c <- as.data.frame(TV)
TV_c <- expand.dft(TV_c %>% gather(., key = "time_network", value = Freq))
head(TV_c)
data("HairEyeColor", package = "datasets")
HairEyeColor
haireye <- margin.table(HairEyeColor, 1:2)
haireye
( dat_freq <- as.data.frame(haireye) )
haireye <- margin.table(HairEyeColor, 1:2)
haireye
TV_c <- margin.table(TV, 1:3)
TV_c
TV_c <- margin.table(TV, 1:2)
TV_c
TV_c <- margin.table(TV, 1)
TV_c
TV
TV_c <- as.data.frame(TV)
TV_c
TV_c <- as.matrix(as.data.frame(TV))
TV_c
TV_c <- as.data.frame(as.matrix(as.data.frame(TV)))
head(TV_c)
HairEyeColor
( dat_freq <- as.data.frame(HairEyeColor) )
str(HairEyeColor)
str(TV)
TV_c <- as.data.frame(as.table(TV))
head(TV_c)
TV_c <- expand.dft(as.data.frame(as.table(TV)))
head(TV_c)
library(Gifi)
tv.hom <- homals(TV_c)
summary(tv.hom)
plot(tv.hom, plot.type = "transplot")
tv.hom$quantifications$Day
tv.hom$quantifications$Time
tv.hom$quantifications$Network
par(mfrow = c(1,1))
plot(tv.hom, plot.type = "jointplot")
TV_c2 <- TV_c %>% mutate(DayTime = paste0(Day, Time)) %>% dply::select(-Day, -Time)
head(TV_c2)
TV_c <- expand.dft(as.data.frame(as.table(TV)))
TV_c2 <- TV_c %>% mutate(DayTime = paste0(Day, Time)) %>% dply::select(-Day, -Time)
TV_c2 <- TV_c %>% mutate(DayTime = paste0(Day, Time)) %>% dplyr::select(-Day, -Time)
head(TV_c)
head(TV_c2)
tv.hom2 <- homals(TV_c2)
summary(tv.hom2)
plot(tv.hom2, plot.type = "transplot")
plot(tv.hom, plot.type = "transplot")
tv.hom2$quantifications$Network
tv.hom$quantifications$Network
tv.hom2$quantifications$Network
tv.hom2$quantifications$DayTime
tv.hom$quantifications$Day
tv.hom$quantifications$Time
margin.table(TV, 1:2)
margin.table(TV, 2:3)
margin.table(TV, c(1,3))
TV_c <- expand.dft(as.data.frame(as.table(TV)))
TV_c2 <- TV_c %>% mutate(DayTime = paste0(Day, Time)) %>% dplyr::select(-Day, -Time)
head(TV_c)
head(TV_c2)
library(Gifi)
tv.hom <- homals(TV_c)
tv.hom2 <- homals(TV_c2)
summary(tv.hom)
summary(tv.hom2)
plot(tv.hom, plot.type = "transplot")
plot(tv.hom2, plot.type = "transplot")
tv.hom$quantifications$Day
tv.hom$quantifications$Time
tv.hom2$quantifications$DayTime
tv.hom$quantifications$Network
tv.hom2$quantifications$Network
par(mfrow = c(1,1))
plot(tv.hom, plot.type = "jointplot")
plot(tv.hom2, plot.type = "jointplot")
par(mfrow = c(1,1))
plot(tv.hom, plot.type = "jointplot")
lines(tv.hom$quantifications$Day, col = "gray", lty = 1)
lines(tv.hom$quantifications$Time, col = "gray", lty = 2)
lines(tv.hom$quantifications$Network, col = "orange", lty = 1)
TV.df <- as.data.frame.table(TV)
levels(TV.df$Time) <- rep(c("8", "9", "10"), c(4, 4, 3))
TV3 <- xtabs(Freq ~ Day + Time + Network, TV.df)
TV3
# ------------------------------------------------------------------------------
# Multiple correspondence analysi by mjca() for 3-way table directly
# ------------------------------------------------------------------------------
tv.mca <- mjca(TV3, lambda = "Burt")
summary(tv.mca)
# -->
# only 35.5% of the total inertia is accounted for in 3 dimensions.
# 1st dimension:  largest contributions by "Network:NBC" but almost close is "Day:Thursday"
# 2nd dimension:  largest contributions by "Network:CBS" and second is "Network:ABC"
# ----------
par(mfrow = c(1,1))
plot(tv.mca)
tv.mca <- mjca(TV3, lambda = "Burt")
library(ca)
tv.mca <- mjca(TV3, lambda = "Burt")
summary(tv.mca)
# -->
# only 35.5% of the total inertia is accounted for in 3 dimensions.
# 1st dimension:  largest contributions by "Network:NBC" but almost close is "Day:Thursday"
# 2nd dimension:  largest contributions by "Network:CBS" and second is "Network:ABC"
# ----------
par(mfrow = c(1,1))
plot(tv.mca)
tv.multinom <- nnet::multinom(Network ~ Day + Time, data = TV.df, Hess = TRUE, weights = Freq)
TV.df <- as.data.frame.table(TV)
car::some(TV.df)
# ----------
levels(TV.df$Network)
# choose "ABC" clearly as baseline category
TV.df$Network <- relevel(TV.df$Network, ref = "ABC")
levels(TV.df$Network)
# ------------------------------------------------------------------------------
# Fitted probabilities
# ------------------------------------------------------------------------------
predictors <- expand.grid(Day = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
Time = c("8:00", "8:15", "8:30", "8:45", "9:00", "9:15", "9:30", "9:45", "10:00", "10:15", "10:30"))
( fit <- data.frame(predictors, predict(tv.multinom, predictors, type = "probs")) )
fit2 <- reshape2::melt(fit,
measure.vars = c("ABC", "CBS", "NBC"),
variable.name = "Network",
value.name = "Probability")
levels(fit2$Network) <- c("ABC", "CBS", "NBC")
fit2
# ----------
library(ggplot2)
# by Day and Network
gg <- ggplot(fit2, aes(x = Day, y = Probability)) + facet_grid(~ Network) + geom_boxplot(outlier.shape = NA) + geom_jitter(size = 0.2) + theme_bw()
gg
# ----------
# by Time and Network
gg <- ggplot(fit2, aes(x = Time, y = Probability)) + facet_grid(~ Network) + geom_boxplot(outlier.shape = NA) + geom_jitter(size = 0.2) + theme_bw()
gg
predictors <- expand.grid(Day = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
Time = c("8:00", "8:15", "8:30", "8:45", "9:00", "9:15", "9:30", "9:45", "10:00", "10:15", "10:30"))
( fit <- data.frame(predictors, predict(tv.multinom, predictors, type = "probs")) )
setwd("//media//kswada//MyFiles//R//tv")
packages <- c("dplyr", "vcd", "vcdExtra", "MASS", "lmtest", "ggplot2", "directlabels", "effects", "car", "nnet")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  TV viewing data
# ------------------------------------------------------------------------------
data("TV", package = "vcdExtra")
TV
dim(TV)
str(TV)
# ------------------------------------------------------------------------------
# Convert 3-way table to frequency form
# ------------------------------------------------------------------------------
TV.df <- as.data.frame.table(TV)
car::some(TV.df)
# ----------
levels(TV.df$Network)
# choose "ABC" clearly as baseline category
TV.df$Network <- relevel(TV.df$Network, ref = "ABC")
levels(TV.df$Network)
# ------------------------------------------------------------------------------
# Fitted probabilities
# ------------------------------------------------------------------------------
predictors <- expand.grid(Day = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
Time = c("8:00", "8:15", "8:30", "8:45", "9:00", "9:15", "9:30", "9:45", "10:00", "10:15", "10:30"))
( fit <- data.frame(predictors, predict(tv.multinom, predictors, type = "probs")) )
fit2 <- reshape2::melt(fit,
measure.vars = c("ABC", "CBS", "NBC"),
variable.name = "Network",
value.name = "Probability")
levels(fit2$Network) <- c("ABC", "CBS", "NBC")
TV.df <- as.data.frame.table(TV)
car::some(TV.df)
# ----------
levels(TV.df$Network)
# choose "ABC" clearly as baseline category
TV.df$Network <- relevel(TV.df$Network, ref = "ABC")
levels(TV.df$Network)
# ------------------------------------------------------------------------------
# Effect plot for the probabilities of Network viewers
# ------------------------------------------------------------------------------
# main effect plot
plot(effects::allEffects(tv.multinom))
setwd("//media//kswada//MyFiles//R//tv")
packages <- c("dplyr", "vcd", "vcdExtra", "MASS", "lmtest", "ggplot2", "directlabels", "effects", "car", "nnet")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  TV viewing data
# ------------------------------------------------------------------------------
data("TV", package = "vcdExtra")
TV
dim(TV)
str(TV)
# ------------------------------------------------------------------------------
# Convert 3-way table to frequency form
# ------------------------------------------------------------------------------
TV.df <- as.data.frame.table(TV)
car::some(TV.df)
# ----------
levels(TV.df$Network)
# choose "ABC" clearly as baseline category
TV.df$Network <- relevel(TV.df$Network, ref = "ABC")
levels(TV.df$Network)
# ------------------------------------------------------------------------------
# Generalized logit model by nnet::miltinom()
#  - This is used to construct submodels comparing any pair of categories
#  - We have assumed that the effects of Day and Time  are additive on the log odds scale
# ------------------------------------------------------------------------------
# specifying Hess = TRUE saves the Hessian and facilitates calculation of standard errors and hypothesis tests.
# Supply weights argument because each row represents the number of viewers in the Freq variable
tv.multinom <- nnet::multinom(Network ~ Day + Time, data = TV.df, Hess = TRUE, weights = Freq)
predictors <- expand.grid(Day = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
Time = c("8:00", "8:15", "8:30", "8:45", "9:00", "9:15", "9:30", "9:45", "10:00", "10:15", "10:30"))
( fit <- data.frame(predictors, predict(tv.multinom, predictors, type = "probs")) )
fit2 <- reshape2::melt(fit,
measure.vars = c("ABC", "CBS", "NBC"),
variable.name = "Network",
value.name = "Probability")
levels(fit2$Network) <- c("ABC", "CBS", "NBC")
fit2
# ----------
library(ggplot2)
# by Day and Network
gg <- ggplot(fit2, aes(x = Day, y = Probability)) + facet_grid(~ Network) + geom_boxplot(outlier.shape = NA) + geom_jitter(size = 0.2) + theme_bw()
gg
# ----------
# by Time and Network
gg <- ggplot(fit2, aes(x = Time, y = Probability)) + facet_grid(~ Network) + geom_boxplot(outlier.shape = NA) + geom_jitter(size = 0.2) + theme_bw()
gg
gg <- ggplot(fit2, aes(x = Day, y = Probability)) + facet_grid(~ Network) + geom_boxplot(outlier.shape = NA) + geom_jitter(size = 0.2) + theme_bw()
gg
plot(effects::allEffects(tv.multinom))
plot(effects::Effect(c("Day"), tv.multinom), style = "stacked", key.args = list(x = .05, y = .9))
