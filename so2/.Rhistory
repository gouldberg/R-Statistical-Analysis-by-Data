setwd("//media//kswada//MyFiles//R//so2")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  so2
#   - Sulfur dioxide series.
#     Sulfur dioxide is one of the pollutants monitored in the mortality study
# ------------------------------------------------------------------------------
data(so2, package = "astsa")
str(so2)
so2
rm(list=ls())
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  so2
#   - Sulfur dioxide series.
#     Sulfur dioxide is one of the pollutants monitored in the mortality study
# ------------------------------------------------------------------------------
data(so2, package = "astsa")
str(so2)
so2
so2
par(mfrow=c(3,1))
plot(so2)
plot(diff(so2))
plot(diff(log(so2)))
forecast::ndiffs(so2)
par(mfrow = c(1,1))
dec <- decompose(so2, type = "multiplicative")
plot(dec)
dec <- decompose(so2, type = "additive")
plot(dec)
head(so2)
head(so2)
length(so2)
setwd("//media//kswada//MyFiles//R//so2")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  so2
# ------------------------------------------------------------------------------
data(so2, package = "astsa")
str(so2)
so2
# ------------------------------------------------------------------------------
# Smoothing in time series context
# Locally weighted scatterplot smoothers (lowess)
# ------------------------------------------------------------------------------
# Lowess:  nearest neighbor and robust weighted regression, wherein one uses only the data {x(t-k/2),...,x(t),...,x(t+k/2)}
par(mfrow=c(1,1))
plot(so2)
# Smoother uses 5% of the data to obtain mid-term transition
lines(lowess(so2, f = 0.05), lwd = 2, col = 4)
# trend (with default smoother span f = 2 / 3)
lines(lowess(so2), lty = 2, lwd = 2, col = 2)
par(mfrow=c(1,1))
plot(so2)
# Smoother uses 5% of the data to obtain mid-term transition
lines(lowess(so2, f = 0.05), lwd = 2, col = 4)
# trend (with default smoother span f = 2 / 3)
lines(lowess(so2), lty = 2, lwd = 2, col = 2)
par(mfrow=c(1,1))
plot(so2)
lines(ksmooth(time(so2), so2, "normal", bandwidth = 1), lwd=2, col = 4)
# boxcar-type weights
( wgts <- c(.5, rep(1,11), .5) / 12 )
plot(wgts, type = "b")
# sides = 2:  for convolution filters only, if sides = 1 the filter coeffs are for past values only, if side = 2 they are centered around lag 0
( so2f <- stats::filter(so2, sides = 2, filter = wgts) )
par(mfrow=c(1,1))
plot(so2)
lines(so2f, lwd=2, col = 4)
monthplot(so2)
par(mfrow=c(1,1))
plot(so2)
lines(ksmooth(time(so2), so2, "normal", bandwidth = 1), lwd=2, col = 4)
par(mfrow=c(1,1))
plot(so2)
# spar = 0.5 to emphasize the mid-term transition, and spar = 1 to emphasize the trend
lines(smooth.spline(time(so2), so2, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(so2), so2, spar = 1), lty = 2, lwd = 2, col = 2)
graphics.off()
par(mfrow = c(1, 1))
# acf2:  produces a simultaneous plot (and a printout) of the sample ACF and PACF
# The zero lag value of the ACF is removed.
astsa::acf2(diff(log(so2)), 104, main = "Sulfur Dioxide")
astsa::acf2(diff(log(so2)), 52*4, main = "Sulfur Dioxide")
sarima(so2, p = 7, d = 1, q = 3, P = 0, D = 0, Q = 0, S = 0)
sarima(so2, p = 4, d = 1, q = 3, P = 0, D = 0, Q = 0, S = 0)
sarima(so2, p = 2, d = 1, q = 3, P = 0, D = 0, Q = 0, S = 0)
sarima.for(so2, n.ahead = 4, p = 2, d = 1, q = 3, P = 0, D = 0, Q = 0, S = 0, no.constant = TRUE)
nextn(length(so2))
par(mfrow=c(2,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
so2.per <- astsa::mvspec(so2, log = "no")
so2.per <- astsa::mvspec(diff(so2), log = "no")
so2.per$bandwidth
so2.per <- astsa::mvspec(so2, log = "no")
so2.per$bandwidth
512 * 0.10
length(so2)
508/52
52*9
so2.per$bandwidth
1/0.1016
1/so2$bandwidth
1/so2.per$bandwidth
9.85*52
so2.per <- astsa::mvspec(so2, log = "no")
so2.per <- astsa::mvspec(diff(so2), log = "no")
so2.per <- astsa::mvspec(so2, log = "no")
so2_d.per <- astsa::mvspec(diff(so2), log = "no")
par(mfrow=c(2,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
so2.per <- astsa::mvspec(so2, log = "no")
so2_d.per <- astsa::mvspec(diff(so2), log = "no")
so2.per$bandwidth
so2_d.per$bandwidth
512 * 0.101562
plot(soi)
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(soi), soi, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(soi), soi, spar = 1), lty = 2, lwd = 2, col = 2)
plot(soi)
lines(smooth.spline(time(soi), soi, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(soi), soi, spar = 1), lty = 2, lwd = 2, col = 2)
so2.per <- astsa::mvspec(so2, log = "no")
so2_d.per <- astsa::mvspec(diff(so2), log = "no")
20 * 9.85
197/52
21 * 9.85 / 52
L <- 3
m <- (L-1)/2
par(mfrow=c(2,1))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
so2.ave <- astsa::mvspec(so2, kernel("daniell", m), log = "no")
so2.ave <- astsa::mvspec(diff(so2), kernel("daniell", m), log = "no")
L <- 9
m <- (L-1)/2
par(mfrow=c(2,1))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
so2.ave <- astsa::mvspec(so2, kernel("daniell", m), log = "no")
so2.ave <- astsa::mvspec(diff(so2), kernel("daniell", m), log = "no")
m <- 3
( ker <- kernel("modified.daniell", c(m, m)) )
plot(ker)
graphics.off()
par(mfrow=c(2,1))
so2.smo <- astsa::mvspec(so2, kernel = ker, taper = 0.1, log = "no")
so2.smo <- astsa::mvspec(diff(so2), kernel = ker, taper = 0.1, log = "no")
m <- 3
( ker <- kernel("modified.daniell", c(m, m)) )
plot(ker)
# ----------
# taper:  generally have a shape that enhances the center of the data relative to the extremities, such as a cosine bell of the form
#  - taper = 0.1:  tapering the upper and lower 10% of the data
graphics.off()
par(mfrow=c(2,1))
so2.smo <- astsa::mvspec(so2, kernel = ker, taper = 0.1, log = "no")
so2.smo <- astsa::mvspec(diff(so2), kernel = ker, taper = 0.1, log = "no")
graphics.off()
par(mfrow=c(2,1))
so2.smo <- astsa::mvspec(so2, kernel = ker, taper = 0.1, log = "no")
so2.smo <- astsa::mvspec(diff(so2), kernel = ker, taper = 0.1, log = "no")
n <- length(so2)
AIC <- rep(0, 40) -> AICc -> BIC
# var.pred:  the prediction variance, an estimate of the portion of the variance of the time series
# that is not explained by the autoregressive model
for(k in 1:40){
sigma2 <- ar(so2, order = k, aic = FALSE)$var.pred
BIC[k] <- log(sigma2) + (k * log(n) / n)
AICc[k] <- log(sigma2) + ((n + k) / (n - k - 2))
AIC[k] <- log(sigma2) + ((n + 2 * k) / n)
}
# AICc is nearly identical to BIC, so we plot only AIC and BIC
# We added +1 to the BIC to reduce white space in the graphic
IC <- cbind(AIC, BIC + 1)
ts.plot(IC, type =c("o"), xlab = "p", ylab = "AIC / BIC")
graphics.off()
# spec.ar() to fit the best model via AIC and plot the resulting spectrum
spaic <- spec.ar(so2, log = "no")
spaic$method
graphics.off()
par(mfrow=c(2,1))
so2.smo <- astsa::mvspec(so2, kernel = ker, taper = 0.1, log = "no")
so2.smo <- astsa::mvspec(diff(so2), kernel = ker, taper = 0.1, log = "no")
