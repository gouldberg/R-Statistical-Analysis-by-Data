scan(scr, what = character(), sep = "\n", blank.lines.skip = F)
par <- c("logLike")
war <- 250
ite <- 500
see <- 1234
dig <- 3
cha <- 4
# ------------------------------------------------------------------------------
# Estimate:  2 mixed distribution
# ------------------------------------------------------------------------------
fit_2 <- stan(file=scr, model_name="access_time_1", data=data, pars=par, verbose=F, seed=see, chains=cha, warmup=war, iter=ite)
scr <- ".//stan//access_time_2.stan"
fit_3 <- stan(file=scr, model_name="access_time_2", data=data, pars=par, verbose=F, seed=see, chains=cha, warmup=war, iter=ite)
# ------------------------------------------------------------------------------
# Estimate:  4 mixed distribution
# ------------------------------------------------------------------------------
scr <- ".//stan//access_time_3.stan"
par <- c("mu1","mu2","mu3","mu4","sigma","theta","logLike","v","V")
fit_4 <- stan(file=scr, model_name="access_time_3", data=data, pars=par, verbose=F, seed=see, chains=cha, warmup=war, iter=ite)
traceplot(fit_2)
traceplot(fit_3)
traceplot(fit_4)
par <- c("logLike")
print(fit_2, pars=par, digits_summary=dig)
par <- c("logLike")
print(fit_3, pars=par, digits_summary=dig)
par <- c("mu1","mu2","mu3","mu4","sigma","theta","logLike","v","V")
print(fit_4, pars=par, digits_summary=dig)
logL <- extract(fit_2)$logLike
lppd <- mean(log(colMeans(exp(logL))))
p_waic <- mean(colMeans(logL^2) - colMeans(logL)^2)
( waic2 <- -2 * lppd + 2 * p_waic )
# ----------
logL <- extract(fit_3)$logLike
lppd <- mean(log(colMeans(exp(logL))))
p_waic <- mean(colMeans(logL^2) - colMeans(logL)^2)
( waic3 <- -2 * lppd + 2 * p_waic )
# ----------
logL <- extract(fit_4)$logLike
lppd <- mean(log(colMeans(exp(logL))))
p_waic <- mean(colMeans(logL^2) - colMeans(logL)^2)
( waic4 <- -2 * lppd + 2 * p_waic )
# ----------
waic2
waic3
waic4
mu1 <- extract(fit_4)$mu1
mu2 <- extract(fit_4)$mu2
mu3 <- extract(fit_4)$mu3
mu4 <- extract(fit_4)$mu4
# ----------
# EAP access time:  access time is concentrated on those EAP times
round(mean.circular(mu1, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu2, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu3, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu4, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
# ----------
pro <- c(0.025, 0.5, 0.975)
round(quantile(mu1, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu2, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu3, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu4, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
# ----------
round(sd.circular(mu1, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu2, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu3, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu4, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
logL <- extract(fit_2)$logLike
logL
round(mean.circular(mu1, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu2, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu3, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu4, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
# ----------
round(sd.circular(mu1, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu2, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu3, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu4, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
par <- c("mu1","mu2","mu3","mu4","sigma","theta","logLike","v","V")
print(fit_4, pars=par, digits_summary=dig)
par <- c("mu1","mu2","mu3","mu4","sigma","theta","v","V")
print(fit_4, pars=par, digits_summary=dig)
round(mean.circular(mu1, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu2, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu3, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(mean.circular(mu4, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu1, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu2, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu3, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(quantile(mu4, probs = pro,control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu1, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu2, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu3, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
round(sd.circular(mu4, control.circular = list(modulo="2pi")) * (180/pi), 3) / 360 * 24
mu4
par <- c("mu1","mu2","mu3","mu4","sigma","theta","v","V")
print(fit_4, pars=par, digits_summary=dig)
0.402 * 180 / (2 * pi)
2.322 * 180 / (2 * pi)
2.322 * 180 / pi
2.322 * 180 / pi / 360 * 24
2.322 * 180 / pi / 360 * 24
3.127 * 180 / pi / 360 * 24
4.535 * 180 / pi / 360 * 24
5.851 * 180 / pi / 360 * 24
0.404 * 180 / pi / 360 * 24
0.079 * 180 / pi / 360 * 24
abline(h = 11.5, lty = 2, col = "gray")
abline(v = 11.5, lty = 2, col = "gray")
abline(v = c(8.87, 11.94, 17.3, 22.35), lty = 2, col = "gray")
hist(data$x, breaks = seq(0, 24, by = 0.25))
# ----------
abline(v = c(8.87, 11.94, 17.3, 22.35), lty = 2, col = "blue")
data <- read.csv("access_time.csv", header = T)
str(data)
# ------------------------------------------------------------------------------
# data exploration
# ------------------------------------------------------------------------------
# This is time data within day
hist(data$x, breaks = seq(0, 24, by = 0.25))
# ----------
abline(v = c(8.87, 11.94, 17.3, 22.35), lty = 2, col = "blue")
print(fit_4, pars=par, digits_summary=dig)
rm(list=ls())
graphics.off()
help(stats)
ls()
a <- 1 + 1
list(ls())
ls()
help(ls)
list("a")
data("trd", package = "gamlss.data")
str(trd)
par(mfrow = c(1, 1))
plot(trd, type = "l")
str(trd)
table(trd)
NY <- 2 - trd
NY[60] <- 1 - trd[60]
y <- cbind(trd, NY)
# variable for the different days of the year
ti <- 1:366
# ----------
# Note that y is rain days and non-rain days (2 column)
y
# ----------
par(mfrow = c(2, 1))
plot(trd, type = "l")
plot(y[,"NY"], type = "l")
y
head(y)
unique(y)
par(mfrow = c(2, 1))
plot(trd, type = "l", ylab = "", main = "Rain days", las = 1)
plot(y[,"NY"], type = "l", ylab = "", main = "No Rain days", las = 1)
t1 <- gamlss(y ~ pb(ti, inter = 30), family = BI)
t2 <- gamlss(y ~ pbc(ti, inter = 30), family = BI)
# ----------
GAIC(t1, t2)
library(gamlss)
t1 <- gamlss(y ~ pb(ti, inter = 30), family = BI)
t2 <- gamlss(y ~ pbc(ti, inter = 30), family = BI)
GAIC(t1, t2)
help(pb)
par(mfrow=c(1,1))
plot(trd/2)
lines(fitted(t1) ~ ti, col = 2, lty = 3)
lines(fitted(t2) ~ ti, col = 3, lty = 2)
plot(t2)
trd
t1
summary(t1)
summary(t2)
par(mfrow=c(1,1))
plot(trd/2)
lines(fitted(t1) ~ ti, col = 2, lty = 3)
lines(fitted(t2) ~ ti, col = 3, lty = 2)
par(mfrow=c(1,1))
plot(trd/2)
lines(fitted(t1) ~ ti, col = 2, lty = 3)
lines(fitted(t2) ~ ti, col = 3, lty = 2)
par(mfrow=c(1,1))
plot(trd/2)
lines(fitted(t1) ~ ti, col = 2, lty = 3)
lines(fitted(t2) ~ ti, col = 3, lty = 2)
par(mfrow=c(1,1))
plot(trd/2)
lines(fitted(t1) ~ ti, col = 2, lty = 3)
lines(fitted(t2) ~ ti, col = 3, lty = 2)
par(mfrow=c(1,1))
plot(trd/2)
lines(fitted(t1) ~ ti, col = "gray", lty = 3)
lines(fitted(t2) ~ ti, col = "blue", lty = 2)
help(pbc)
summary(t1)
summary(t2)
par(mfrow=c(1,1))
plot(trd)
lines(fitted(t1) ~ ti, col = "gray", lty = 3)
lines(fitted(t2) ~ ti, col = "blue", lty = 2)
head(y)
trd
par(mfrow=c(1,1))
plot(y$trd/2)
lines(fitted(t1) ~ ti, col = "gray", lty = 3)
lines(fitted(t2) ~ ti, col = "blue", lty = 2)
y$trd
y$trd
y
y$trd
y[,"trd"]
par(mfrow=c(1,1))
plot(y[,"trd"]/2)
lines(fitted(t1) ~ ti, col = "gray", lty = 3)
lines(fitted(t2) ~ ti, col = "blue", lty = 2)
term.plot(t1, pages = 1, ask = FALSE)
term.plot(t2, pages = 1, ask = FALSE)
show.link(BI)
show.link(BI)
# ----------
t2_logit <- gamlss(y ~ pbc(ti, inter = 30), family = BI(mu.link = "logit"))
t2_probit <- gamlss(y ~ pbc(ti, inter = 30), family = BI(mu.link = "probit"))
t2_cloglog <- gamlss(y ~ pbc(ti, inter = 30), family = BI(mu.link = "cloglog"))
# cauchit link does not properly model by pbc()
# t2_cauchit <- gamlss(y ~ pbc(ti, inter = 30), family = BI(mu.link = "cauchit"))
t2_log <- gamlss(y ~ pbc(ti, inter = 30), family = BI(mu.link = "log"))
# ----------
GAIC(t2_logit, t2_probit, t2_cloglog, t2_log, k = log(length(y)))
# -->
# log link is the best
# ----------
plot(t2_log)
plot(t2_probit)
plot(t2_log)
plot(t2_probit)
term.plot(t2_log, pages = 1, ask = FALSE)
term.plot(t2_probit, pages = 1, ask = FALSE)
par(mfrow=c(1,1))
plot(y[,"trd"]/2)
lines(fitted(t2_log) ~ ti, col = "gray", lty = 3)
lines(fitted(t2_probit) ~ ti, col = "blue", lty = 2)
par(mfrow=c(1,1))
plot(y[,"trd"]/2)
lines(fitted(t2_log) ~ ti, col = "blue", lty = 2)
lines(fitted(t2_probit) ~ ti, col = "gray", lty = 3)
wp(t2_log)
wp(t2_probit)
wp(t2_log)
Ymin <- Ymax <- Ymid <- rep(0, 1000)
for(i in 1:1000){
Sample <- rNO(1000, mu = 10, sigma = 2)
Ymax[i] <- max(Sample)
Ymin[i] <- min(Sample)
Ymid[i] <- median(Sample)
}
# ------------------------------------------------------------------------------
# basics
# ------------------------------------------------------------------------------
par(mfrow=c(1,3), mar = c(2,2,2,2))
MASS::truehist(Ymax, main = "max")
MASS::truehist(Ymin, main = "min")
MASS::truehist(Ymid, main = "median")
# ----------
psych::describe(Ymax)
psych::describe(Ymin)
psych::describe(Ymid)
par(mfrow = c(1,3))
m1 <- histDist(Ymin, family = GU)
m2 <- histDist(Ymax, family = RG)
m3 <- histDist(Ymid, family = NO)
# ----------
m1
m2
m3
rm(list=ls())
# setwd("/media/kswada/MyFiles/R/msci_day")
# setwd("/media/kswada/MyFiles/R/Econometrics/msci_day")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\msci_day")
packages <- c("dplyr", "AER", "stargazer", "broom", "knitr", "tseries", "vars", "MTS", "forecast")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data <- read.table("msci_day.txt", header=T, stringsAsFactors=F)
str(data)
car::some(data)
data <- data[,c(2:8)]
summary(data)
psych::describe(data)
MASS::truehist(data$jp, nbins = 30)
par(mfrow = c(1,3))
MASS::truehist(data$jp, nbins = 30)
MASS::truehist(data$uk, nbins = 30)
MASS::truehist(data$us, nbins = 30)
par(mfrow = c(1,3))
MASS::truehist(data$jp, nbins = 30, main = "JP")
MASS::truehist(data$uk, nbins = 30, main = "UK")
MASS::truehist(data$us, nbins = 30, main = "US")
str(data)
data <- read.table("msci_day.txt", header=T, stringsAsFactors=F)
str(data)
table(data$Date)
data <- read.table("msci_day.txt", header=T, stringsAsFactors=F)
str(data)
car::some(data)
data <- data[,c(2:8)]
# This data is daily and only has eigyo-bi,  so do not convert to ts type
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
# ----------
data <- log(data)
MTSplot(data)
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
# take log
data <- log(data)
MTSplot(data)
data_dif <- data.frame(ca = diff(log(data$ca)), fr = diff(log(data$fr)), ge = diff(log(data$ge)), it = diff(log(data$it)),
jp = diff(log(data$jp)), uk = diff(log(data$uk)), us = diff(log(data$us)))
MTSplot(data_dif)
# ----------
# note that the number of rows are decreased to 1390
nrow(data)
nrow(data_dif)
data <- data[,c("jp","uk","us")]
# ----------
# This data is daily and only has eigyo-bi,  so do not convert to ts type
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
# ----------
# transform to stock return ration (log and diff) to secure stationarity
data_dif <- data.frame(jp = diff(log(data$jp)), uk = diff(log(data$uk)), us = diff(log(data$us)))
MTSplot(data_dif)
library(vars)
varmat <- as.matrix(data_dif)
# ----------
# determine optimal lag length according to AIC, BIC, HQ, SC, FPE(final prediction error) of an empirical VAR(p) process
VARselect(varmat, lag.max = 10, type = "const")
# ----------
# determine optimal lag length according to AIC, BIC, HQ
MTS::VARorder(data_dif)
# -->
# we choose p = 3
varmat
# Check the time series order:  we order by jp --> uk --> us
names(data_dif)
varfit <- vars::VAR(varmat, p = 3, type = "const")
summary(varfit)
# -->
# NOTE that US is quite independent and JP is dependent
# ----------
varfit_MTS <- MTS::VAR(cbind(data_dif), p = 3)
varfit_MTS
summary(varfit)
data <- read.table("msci_day.txt", header=T, stringsAsFactors=F)
str(data)
car::some(data)
data <- data[,c(2:8)]
# ------------------------------------------------------------------------------
# Generate the process:  p(t) = alpha + beta1 * rw(t) + beta2 * rw(t-1) + beta3 * p(t-1) + e(t)
# and regress each log(stock index) on the process
#
# VAR model:  includes lag of both of dependent variable (p(t)) and x variable (rw(t-1)) in order to avoid suprious regression
# ------------------------------------------------------------------------------
n <- nrow(data)
graphics.off()
par(mfrow=c(1,1))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
# rn <- cumsum(e)
rn0 <- 0
rn <- c()
for(i in 1:n){
if(i == 1){ rn[i] = rn0 }
else{ rn[i] <- rn[i-1] + e[i]}
}
rn20 <- 0
rnt1 <- c()
for(i in 1:n){
if(i == 1){ rnt1[i] = rn20 }
else{ rnt1[i] <- rn[i-1] }
}
y0 <- 0
yt1 <- c()
for(i in 1:n){
if(i == 1){ yt1[i] = y0 }
else{ yt1[i] <- log(data[i-1,x]) }
}
tmp <- data.frame(y = log(data[,x]), rw = rn, rwt1 = rnt1, yt1 = yt1)
# tmp <- tmp[2:nrow(tmp),]
# MTSplot(tmp[,c("yt1","y")])
# plot(tmp[,c("yt1","y")], main = paste0("Generated Process vs. ", colnames(data)[x]))
lm(y ~ rw + rwt1 + yt1, data = tmp)
})
mod[[5]]
# ----------
plot(mod[[5]])
plot(mod[[5]])
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta1 <- round(mod[[i]]$coefficients[2], digits = 5)
pval1 <- round(tidy(mod[[i]])$p.value[2], digits = 5)
beta2 <- round(tidy(mod[[i]])$estimate[3], digits = 5)
pval2 <- round(tidy(mod[[i]])$p.value[3], digits = 5)
beta3 <- round(tidy(mod[[i]])$estimate[4], digits = 5)
pval3 <- round(tidy(mod[[i]])$p.value[4], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta1 = beta1, pval1 = pval1, beta2 = beta2, pval2 = pval2, beta3 = beta3, pval3 = pval3, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_pr <- output
output_pr
# -->
# the coefficients of beta1 (rw) and beta2 (rw2) is not significant but beta3 (lagged log(stock index)) is significant
# and still Adjustd R^2 is large
# VAR model (including lag of dependent variable and x variable) is successful to avoid spurious regression
# ----------
# Unit Root Test (KPSS):  not rejected  --> indicating that residuals are not unit root --> not Spurious Regression
kpsstest_pr <- list()
for(i in 1:length(mod)){
kpsstest_pr[[i]] <- summary(urca::ur.kpss(resid(mod[[i]]), type ="mu", lags = "long"))
}
kpsstest_pr
output_wn
# pvalue of regression coeffs are almost zero. Adjusted R is high and low, but dw statistics is very low (close to zero),
# indicating positive serial correlation
# adj_r > DW
# residuals are UNIT ROOT --> spurious regression
output_rn
kpsstest_rn
# pvalue of beta3 are almost zero. Adjusted R is high. (but dw statistics is close to 2, adj_r < DW ???)
# residuals are not UNIT ROOT
output_pr
kpsstest_pr
varfit_MTS_ref <- refVAR(varfit_MTS, thres = 1.96)
varfit_MTS$aic;  varfit_MTS$bic;
varfit_MTS_ref$aic;  varfit_MTS_ref$bic;
names(data_dif)
varfit <- vars::VAR(varmat, p = 3, type = "const")
summary(varfit)
# -->
# NOTE that US is quite independent and JP is dependent
# ----------
varfit_MTS <- MTS::VAR(cbind(data_dif), p = 3)
graphics.off()
plot(varfit)
plot(varfit)
p <- 3;  k <- 3;
mq(varfit_MTS$residuals, adj = p * k^2)
MTSdiag(varfit_MTS, adj = p * k^2)
vars::roots(varfit)
MTSdiag(varfit_MTS, adj = p * k^2)
vars::causality(varfit, cause = "jp")
vars::causality(varfit, cause = "uk")
vars::causality(varfit, cause = "us")
vars::causality(varfit, cause = "uk")
library(lmtest)
# NOTE THAT F-statistics is multuplied by 3 in the background
lmtest::grangertest(jp ~ uk, order = 3, data_dif)  # --> rejected
lmtest::grangertest(jp ~ us, order = 3, data_dif)  # --> rejected
lmtest::grangertest(jp ~ uk, order = 3, data_dif)  # --> rejected
lmtest::grangertest(jp ~ us, order = 3, data_dif)  # --> rejected
lmtest::grangertest(uk ~ jp, order = 3, data_dif)  # --> NOT rejected
lmtest::grangertest(uk ~ us, order = 3, data_dif)  # --> rejected
impresp <- vars::irf(varfit)
# ----------
graphics.off()
# Response of JP, UK and US by JP shock
plot(impresp, plot.type = "m", names = "jp", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by UK shock
plot(impresp, plot.type = "m", names = "uk", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by US shock
plot(impresp, plot.type = "m", names = "us", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
graphics.off()
par(mfrow = c(2,2))
# Response of JP, UK and US by JP shock
plot(impresp, plot.type = "m", names = "jp", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by UK shock
plot(impresp, plot.type = "m", names = "uk", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by US shock
plot(impresp, plot.type = "m", names = "us", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
graphics.off()
# Response of JP, UK and US by JP shock
plot(impresp, plot.type = "m", names = "jp", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
plot(impresp, plot.type = "m", names = "uk", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by US shock
plot(impresp, plot.type = "m", names = "us", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
impresp$irf$jp
impresp$irf$jp
round(impresp$irf$jp, 5)
round(impresp$irf$jp * 100, 3)
impresp <- vars::irf(varfit)
graphics.off()
# Response of JP, UK and US by JP shock
plot(impresp, plot.type = "m", names = "jp", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by UK shock
# Response of JP, UK and US by UK shock
plot(impresp, plot.type = "m", names = "uk", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
# Response of JP, UK and US by US shock
plot(impresp, plot.type = "m", names = "us", main = "", mar=c(gap=0.4, 5.1, gap = 0.4, 2.1), lwd = 1.6)
round(impresp$irf$jp * 100, 3)
round(impresp$irf$us * 100, 3)
MTS::VARirf(varfit_MTS_ref$Phi, varfit_MTS_ref$Sigma, orth=F)
MTS::VARirf(varfit_MTS_ref$Phi, varfit_MTS_ref$Sigma)
MTS::FEVdec(Phi = varfit_MTS_ref$Phi, Theta = NULL, Sig = varfit_MTS_ref$Sigma, lag = 10)
plot(vars::fevd(varfit))
