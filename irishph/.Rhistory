iris
head(iris)
abbreviate(iris)
abbreviate(names(iris))
names(iris) <- abbreviate(names(iris))
str(iris)
library(dplyr)
library(tidyverse)
# ---------------------------------------------------------------------------
# enframe() converts named atomic vectors or lists to 2-column data frame
# ---------------------------------------------------------------------------
enframe(1:3)
enframe(1:3)
enframe(c(a = 5, b = 7))
( df <- enframe(c(a = 5, b = 7)) )
( vc <- deframe(df) )
help(bind_rows)
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
( one <- mtcars[1:4, ] )
( two <- mtcars[11:14, ] )
bind_rows(one, two)
bind_rows(list(one, two))
( one <- list(mtcars[1:4, ]) )
( two <- list(mtcars[11:14, ]) )
bind_rows(one, two)
split(mtcars, mtcars$cyl)
list_dat <- split(mtcars, mtcars$cyl)
( list_dat <- split(mtcars, mtcars$cyl) )
bind_rows(list_dat)
( list_dat1 <- list(one, two) )
( list_dat2 <- list(two, one) )
bind_rows(list_dat1, list_dat2)
( list_dat1 <- list(one, two) )
( list_dat2 <- list(two, one) )
bind_rows(list_dat1, list_dat2)
bind_rows(list(one, two), list(two, one))
( one <- list(mtcars[1:4, ]) )
( two <- list(mtcars[11:14, ]) )
bind_rows(list(one, two), list(two, one))
bind_rows(vec1, vec2)
vec1 <- c(a = 1, b = 2)
vec2 <- c(a = 3, b = 4)
bind_rows(vec1, vec2)
bind_rows(data.frame(x = 1:3), data.frame(y = 1:4))
ll <- list(
a = c(A = 1, B = 2),
b = c(A = 3, B = 4)
)
ll
ind_rows(ll)
bind_rows(ll)
bind_rows(!!!ll)
bind_rows(!!ll)
bind_rows(!ll)
bind_rows(!!!!ll)
bind_rows(!!!ll)
vec1 <- c(a = 1, b = 2)
vec2 <- c(a = 3, b = 4)
bind_rows(vec1, vec2)
bind_rows(
c(a = 1, b = 2),
c(a = 3, b = 4)
)
bind_rows(vec1, vec2)
bind_rows(
c(a = 1, b = 2),
c(a = 3, b = 4)
)
( one <- list(mtcars[1:4, ]) )
( two <- list(mtcars[11:14, ]) )
# ----------
bind_rows(one, two)
ll <- list(
a = c(A = 1, B = 2),
b = c(A = 3, B = 4)
)
ll
bind_rows(!!!ll)
!!!ll
!!ll
!ll
bind_rows(list(one, two), .id = "id")
bind_rows(list(a = one, b = two), .id = "id")
( one <- list(mtcars[1:4, ]) )
( two <- list(mtcars[11:14, ]) )
bind_rows(list(one, two), .id = "id")
bind_rows(list(a = one, b = two), .id = "id")
bind_rows("group 1" = one, "group 2" = two, .id = "groups")
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
bind_rows(list(one, two), .id = "id")
f1 <- factor("a")
f2 <- factor("b")
c(f1, f2)
unlist(list(f1, f2))
combine(f1, f2)
combine(list(f1, f2))
i39 <- sapply(1:3, seq)
i39
df <- data.frame(
a = rnorm(100),
b = rpois(10, 100),
c = rbinom(10, prob=0.1, n = 100)
)
head(df)
vapply(df, fivenum, c(0,0,0,0,0))
df
vapply(df, fivenum, c(0,0,0,0,0))
vapply(df, fivenum, FUN.VALUE = c(0,0,0,0,0))
( output <- vapply(df, fivenum, FUN.VALUE = c(0,0,0,0,0)) )
row.names(output) <- c("Min.", "1st Qu.", "Median", "3rd Qu.", "Max.")
output
str(output)
data.frame(output)
str(data.frame(output))
vapply(df, fivenum, FUN.VALUE = c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
vapply(v, f, outer(1:3), y = 2*(1:5))
v <- structure(10*(5:8), names=LETTERS[1:4])
v
f <- function(x,y) outer(rep(x, length.out=3, y)
vapply(v, f, outer(1:3), y = 2*(1:5))
f <- function(x,y) outer(rep(x, length.out=3, y))
vapply(v, f, outer(1:3), y = 2*(1:5))
vapply(v, f, outer(1:3,1:5), y = 2*(1:5))
f <- function(x,y) outer(rep(x, length.out=3), y)
a <- vapply(v, f, outer(1:3,1:5), y = 2*(1:5))
a
outer(1:3,1:5)
v
pmin(a, b, c)
a <- c(1,2,4,6,2,7,8)
b <- c(3,2,6,7,8,1,9)
c <- c(4,3,7,6,10,3,2)
# ----------
pmin(a, b, c)
pmax(a, b, c)
a <- (-3) : 3 / 3
( a <- (-3) : 3 / 3 )
trunc(a)
( a <- (-10) : 20 / 3 )
trunc(a)
( zx <- pi*100^(-2:3) )
zx / 1000
zapsmall(zx / 1000, digits = 4)
( zx <- pi*100^(-1:1) )
zx / 1000
zapsmall(zx / 1000, digits = 4)
zapsmall(zx / 1000, digits = 5)
round(zx, digits=3)
round(zx/1000, digits=3)
signif(zx/1000, digits=3)
zapsmall(zx / 1000, digits = 3)
zapsmall(zx / 1000, digits = 2)
round(122.5)
round(123.5)
round(123.345)
round(122.5)
round(123.345)
round(123.5)
round(124.5)
Round <- function(x, digit){
aux <- function(x)
(x%/%1) + ((10*(x%%1)) %/% 1 > 5)
10^(-digit) * aux(x*10^digit)
}
Round <- function(x, digit){
aux <- function(x) (x%/%1) + ((10*(x%%1)) %/% 1 > 5)
10^(-digit) * aux(x*10^digit)
}
x <- rnorm(10, mean = 10, sd=20)
x
Round(x)
Round(x, 1)
Round <- function(x, digit = 0){
aux <- function(x) (x%/%1) + ((10*(x%%1)) %/% 1 > 5)
10^(-digit) * aux(x*10^digit)
}
x <- rnorm(10, mean = 10, sd=20)
x
Round(x)
Round(x, 1)
x <- rnorm(1e6, mean=1e4, sd=200)
x
mean(x - Round(x))
mean(x = round(x))
mean(x - round(x))
x <- rnorm(1e6, mean=1e4, sd=200)
x
mean(x - Round(x))
mean(x - round(x))
mean(abs(x - Round(x)))
mean(abs(x - round(x)))
mean(Round(x) - round(x))
x <- rnorm(10, mean = 10, sd=20)
x
Round(x)
Round(x, 1)
# ----------
# round() is smaller than real
mean(Round(x) - round(x))
x <- rnorm(1e6, mean=1e4, sd=200)
x
mean(x - Round(x))
mean(x - round(x))
mean(abs(x - Round(x)))
mean(abs(x - round(x)))
# ----------
# round() is smaller than real
mean(Round(x) - round(x))
x <- rnorm(10, mean = 10, sd=20)
x
Round(x)
Round(1.49999)
Round(1.50001)
Round <- function(x, digit = 0){
aux <- function(x) (x %/% 1) + ((10*(x%%1)) %/% 1 > 5)
10^(-digit) * aux(x*10^digit)
}
Round(1.50001)
Round(1.5000000)
Round(1.50000001)
Round(1.510000001)
Round(1.51999990000001)
Round(1.54999990000001)
Round(1.554999990000001)
(x %/% 1) + ((10*(x%%1)) %/% 1 > 5)
x <- 1.45
(x %/% 1) + ((10*(x%%1)) %/% 1 > 5)
x %/% 1
((10*(x%%1)) %/% 1 > 5)
x*10^digit
help(prety)
help("pretty")
pretty(1:15)
pretty(pi)
for(k in 5:11) {
cat("k=", k, ": "); print(diff(range(pretty(100 + c(0, pi*10^-k)))))}
add.names <- function(v) { names(v) <- paste(v); v}
utils::str(lapply(add.names(-10:20), pretty))
add.names(-10:20)
paste(-10:20)
sapply(    add.names(0:20),   pretty, min.n = 4)
pretty(1:15, h=2)
pretty(1:15, h=3)
pretty(1:100, n=8)
pretty(1:100, n=30)
pretty(1:100, n=40)
cut(100, 10)
pretty(1:100, n=3)
pretty(1:100, n=6)
pretty(1:100, n=8)
setwd("//media//kswada//MyFiles//R//haireye_color")
packages <- c("dplyr", "datasets", "vcd", "vcdExtra", "MASS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  HairEyeColor
# ------------------------------------------------------------------------------
data("HairEyeColor", package = "datasets")
data <- HairEyeColor
data
# collapse table to 2-way table (Hair(1) and Eye(2))
( haireye <- margin.table(data, 1:2) )
( hair <- margin.table(haireye, 1) )
prop.table(hair)
mosaic(haireye, labeling = labeling_values)
vcd::mosaic(haireye, pop = FALSE)
vcd::labeling_cells(text = haireye, gp_text = gpar(fontface = 2), clip = FALSE)(haireye)
exp <- independence_table(haireye)
resids <- (haireye - exp) / sqrt(exp)
round(resids, 2)
round(residuals(chisq.test(haireye)), 2)
expected <- rep(sum(hair) / 4, 4)
names(epected) <- names(hair)
expected <- rep(sum(hair) / 4, 4)
names(expected) <- names(hair)
expected
( residuals <- (hair - expected) / sqrt(expected) )
round(addmargins(prop.table(haireye, haireye, 1), 2, 3))
round(addmargins(prop.table(haireye, 1), 2, 3))
round(addmargins(prop.table(haireye, 1), 2, 3)
round(addmargins(prop.table(haireye, 1), 2), 3)
round(addmargins(prop.table(haireye, 1), 2), 3)
exp <- independence_table(haireye)
exp
vcd::mosaic(haireye, shade=TRUE, suppress=0, labeling=labeling_residuals, gp_text=gpar(fontface=2))
round(residuals(chisq.test(haireye)), 2)
vcd::mosaic(haireye, shade = TRUE, labeling = labeling_residuals)
vcd::mosaic(haireye, shade=TRUE, suppress=0, labeling=labeling_residuals, gp_text=gpar(fontface=2))
vcd::mosaic(haireye, shade = TRUE, labeling = labeling_residuals)
( chisq <- sum(resids ^ 2) )
( df <- prod(dim(haireye) - 1) )
pchisq(chisq, df, lower.tail = FALSE)
chisq.test(haireye)
haireye2 <- as.table(haireye[, c("Brown", "Hazel", "Green", "Blue")])
vcd::mosaic(haireye2, shade = TRUE)
haireye2 <- as.table(haireye[, c("Brown", "Hazel", "Green", "Blue")])
vcd::mosaic(haireye2, shade = TRUE)
vignette("strucplot", pkg = "vcd")
vignette("strucplot", package = "vcd")
# color by hair color
fill_colors <- c("brown4", "#acba72", "green", "lightblue")
( fill_colors_mat <- t(matrix(rep(fill_colors, 4), ncol = 4)) )
vcd::mosaic(haireye2, gp = gpar(fill = fill_colors_mat, col = 0))
vcd::mosaic(haireye2, gp = shading_Marimekko(haireye2))
vcd::mosaic(haireye, shade=TRUE, suppress=0, labeling=labeling_residuals, gp_text=gpar(fontface=2))
vcd::mosaic(haireye, shade = TRUE, labeling = labeling_residuals)
vcd::mosaic(haireye2, gp = gpar(fill = fill_colors_mat, col = 0))
vcd::mosaic(haireye2, highlighting = "Eye", highlighting_fill = fill_colors)
vcd::mosaic(Eye ~ Hair, data = haireye2, highlighting_fill = fill_colors)
vcd::mosaic(haireye2, highlighting = "Eye", highlighting_fill = fill_colors)
vcd::mosaic(Eye ~ Hair, data = haireye2, highlighting_fill = fill_colors)
vcd::mosaic(haireye2, gp = shading_Marimekko(haireye2))
toeplitz(1 : 4)
vcd::mosaic(haireye2, shade = TRUE)
help(toeplitz)
x <- 1:5
toeplitz (x)
toeplitz(x)
y <- c(1,4,6,2,8,10)
toeplitz(y)
( fill_colors <- colorspace::rainbow_hcl(8)[1 + toeplitz(1 : 4)] )
1 + toeplitz(1 : 4)
rainbow_hcl(8)
library(colorspace)
colorspace::rainbow_hcl(8)
( fill_colors <- colorspace::rainbow_hcl(8)[1 + toeplitz(1 : 4)] )
vcd::mosaic(haireye2, gp = gpar(fill = fill_colors, col = 0))
fill_colors
rainbow_hcl(8)
rainbow_hcl(8)[1 + toeplitz(1 : 4)]
vcd::mosaic(haireye2, gp = gpar(fill = fill_colors, col = 0))
# Alternatively, we could have used function shading_diagonal
vcd::mosaic(haireye2, gp = shading_diagonal(haireye2))
vcd::mosaic(haireye2, highlighting = "Eye", highlighting_fill = fill_colors)
vcd::mosaic(Eye ~ Hair, data = haireye2, highlighting_fill = fill_colors)
vcd::mosaic(haireye2, highlighting = "Eye", highlighting_fill = fill_colors)
vcd::mosaic(Eye ~ Hair, data = haireye2, highlighting_fill = fill_colors)
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = 1 : 4))
interp <- function(x) pmin(x / 6, 1)
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = interp))
interp
x < 10
x <- 10
pmin(x / 6, 1)
interp <- function(x) pmin(x / 6, 1)
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = interp))
interp <- function(x) pmin(x / 6, 1)
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = interp))
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = 1 : 4))
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = 1 : 10))
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = 1 : 5))
interp <- function(x) pmin(x / 6, 1)
vcd::mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = interp))
vcd::mosaic(haireye2, gp = shading_Friendly, legend = legend_fixed)
set.seed(1234)
vcd::mosaic(haireye2, gp = shading_max)
vcd::mosaic(haireye2, gp = shading_Friendly2, legend = legend_fixed)
vcd::mosaic(haireye2, gp = shading_Friendly, legend = legend_fixed)
vcd::mosaic(haireye2, gp = shading_Friendly2, legend = legend_fixed)
vcd::mosaic(haireye2, gp = shading_Friendly, legend = legend_fixed)
vcd::mosaic(haireye2, gp = shading_Friendly2, legend = legend_fixed)
help(pmin)
setwd("//media//kswada//MyFiles//R//arthritis")
packages <- c("dplyr", "vcd", "MASS", "datasets")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Arthritis
# ------------------------------------------------------------------------------
data("Arthritis", package = "vcd")
data <- Arthritis
data
tab2 <- xtabs(~ Treatment + Improved + Sex, data = data)
names(dimnames(tab2))[2] <- "Improvement"
tab2
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labelig_residuals, suppress = 0, digits = 2)
tab2 <- xtabs(~ Treatment + Improved + Sex, data = data, subset = Sex == "Female")
names(dimnames(tab2))[2] <- "Improvement"
tab2
tab2
tab2 <- xtabs(~ Treatment + Improved + Sex, data = data, subset = Sex == "Female")
names(dimnames(tab2))[2] <- "Improvement"
tab2
tab2 <- xtabs(~ Treatment + Improved, data = data, subset = Sex == "Female")
names(dimnames(tab2))[2] <- "Improvement"
tab2
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labelig_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_Friendly, labeling = labeling_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_Friendly, labeling = labeling_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digits = 2)
mosaic(tab2, gp = shading_max, margin = c(right = 1))
mosaic(tab2, gp = shading_max, margin = c(right = 1))
chisq.test(tab2)
mosaic(tab2, gp = shading_max, margin = c(right = 1))
residuals(chisq.test(tab2))
set.seed(1234)
tab2_max <- coindep_test(tab2)
tab2_max
names(tab2_max)
dist(tab2_max)
tab2_max$dist
tab2$qdist(c(0.90, 0.99))
tab2_max$qdist(c(0.90, 0.99))
tab2_max$qdist
tab2_max$qdist(c(0.90, 0.99))
mosaic(tab2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digits = 2)
setwd("//media//kswada//MyFiles//R//uksoccer")
packages <- c("dplyr", "vcd", "MASS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("UKSoccer", package = "vcd")
data <- UKSoccer
data
sum(data)
str(data)
CMHtest(data)
set.seed(1234)
mosaic(data, gp=shading_max, laveling = labeling_residuals, digits = 2)
mosaic(data, gp=shading_max, labeling = labeling_residuals, digits = 2)
