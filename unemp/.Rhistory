# ----------
graphics.off()
par(mfcol = c(2,3))
# theoretical auto-correlation
# try when n = 100 and n = 1000
# when n = 100 (number of time points are small), the auto-correlation is decaying,
# since samples are to be smaller for calculation of auto-correlation
plot(cos(2 * pi * omega[1] * 1:100), type = "h")
acf(x1, lag = 100)
plot(cos(2 * pi * omega[2] * 1:100), type = "h")
acf(x2, lag = 100)
plot(cos(2 * pi * omega[3] * 1:100), type = "h")
acf(x3, lag = 100)
# ------------------------------------------------------------------------------
# Mixture of 3 periodic series
# ------------------------------------------------------------------------------
xall <- x1 + x2 + x3
# ----------
# plot x1, x2, x3 and xall
graphics.off()
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = paste0("omega: ", omega[1], "  A: ", round(A[1], 2)))
abline(h = c(A1, -A1), lty = 2, col = "gray")
plot.ts(x2, ylim = c(-10, 10), main = paste0("omega: ", omega[2], "  A: ", round(A[2], 2)))
abline(h = c(A2, -A2), lty = 2, col = "gray")
plot.ts(x3, ylim = c(-10, 10), main = paste0("omega: ", omega[3], "  A: ", round(A[3], 2)))
abline(h = c(A3, -A3), lty = 2, col = "gray")
plot.ts(xall, ylim = c(-16, 16), main = "sum")
# ----------
# sum of A^2 / 2 = time series variance
sum(A^2 / 2)
var(xall) * (n - 1) / n
# ------------------------------------------------------------------------------
# only cosine:  coef (A = sqrt(a^2 + b^2)) and phi
# ------------------------------------------------------------------------------
# ( phi <- acos(a / A) )
# ( phi <- asin(b / A) )
( phi <- atan(b / a) )
# ----------
# only cosine but with A and phi (phase)
x1_2 <- A[1] * cos(2 * pi * 1:n * cyc[1] / n - phi[1])
x2_2 <- A[2] * cos(2 * pi * 1:n * cyc[2] / n - phi[2])
x3_2 <- A[3] * cos(2 * pi * 1:n * cyc[3] / n - phi[3])
# ----------
# combine all time series
xall_2 <- x1_2 + x2_2 + x3_2
# ----------
# plot x1_2, x2_2, x3_2 and xall_2  --> same time series with above
par(mfrow = c(2,2))
plot.ts(x1_2, ylim = c(-10, 10), main = paste0("freq: ", cyc[1], "/", n, "  A^2: ", A[1]^2))
abline(h = c(A[1], -A[1]), lty = 2, col = "gray")
plot.ts(x2_2, ylim = c(-10, 10), main = paste0("freq: ", cyc[2], "/", n, "  A^2: ", A[2]^2))
abline(h = c(A[2], -A[2]), lty = 2, col = "gray")
plot.ts(x3_2, ylim = c(-10, 10), main = paste0("freq: ", cyc[3], "/", n, "  A^2: ", A[3]^2))
abline(h = c(A[3], -A[3]), lty = 2, col = "gray")
plot.ts(xall_2, ylim = c(-16, 16), main = "sum")
# ------------------------------------------------------------------------------
# Fast Discrete Fourier Transform by fft
# ------------------------------------------------------------------------------
# Discrete Fourier Transform (DFT):
# d(omega(j)) = 1 / sqrt(n)  *  sum from t = 1 to n { x(t) * exp(- 2 * pi * i * omega(j) * t) }
# j = 0, 1 ..., n-1
# omega(j) = j / n  (Fourier or Functamental frequencies)
# R function fft() computes without "1 / sqrt(n)"
# ----------
# Distcrete Fourier Transform (DFT)
dft1 <- fft(x1) / sqrt(n)
dft2 <- fft(x2) / sqrt(n)
dft3 <- fft(x3) / sqrt(n)
dftall <- fft(xall) / sqrt(n)
# ----------
# Periodogram = vector length ^ 2
Re(dft1)^2 + Im(dft1)^2
abs(dft1)^2
Mod(dft1)^2
P1 <- abs(dft1)^2
P2 <- abs(dft2)^2
P3 <- abs(dft3)^2
Pall <- abs(dftall)^2
# ----------
# plot raw periodogram
# you can see the x_all have all three components
omega
graphics.off()
par(mfcol = c(2,2))
Fr <- t/n
plot(Fr, P1, type = "h", xlab = "frequency", ylab = "periodogram")
plot(Fr, P2, type = "h", xlab = "frequency", ylab = "periodogram")
plot(Fr, P3, type = "h", xlab = "frequency", ylab = "periodogram")
plot(Fr, Pall, type = "h", xlab = "frequency", ylab = "periodogram")
# -->
# There is a mirrorring effect at the folding frequency of 0.5:  P(j/n) = P(1 - j/n)
# ----------
# average of Periodogram  =  time series variance
sum(abs(dft1)^2) / n
var(x1) * { (n - 1) / n }
sum(abs(dft2)^2) / n
var(x2) * { (n - 1) / n }
sum(abs(dft3)^2) / n
var(x3) * { (n - 1) / n }
sum(abs(dftall)^2) / n
var(xall) * { (n - 1) / n }
# ----------
# sum of periodogram  =  time series energy (sum of time series ^ 2)
sum(x1^2)
sum(abs(dft1)^2)
sum(x2^2)
sum(abs(dft2)^2)
sum(x3^2)
sum(abs(dft3)^2)
sum(xall^2)
sum(abs(dftall)^2)
# ----------
# periodogram by astsa::mvspec
graphics.off()
par(mfrow = c(2,2))
x1.per <- astsa::mvspec(x1, log = "no", type = "h")
x2.per <- astsa::mvspec(x2, log = "no", type = "h")
x3.per <- astsa::mvspec(x3, log = "no", type = "h")
xall.per <- astsa::mvspec(xall, log = "no", type = "h")
x1.per$bandwidth
# -->
# bandwidth = 1 / n  (this is raw periodogram, no smoothing)
x1.per$details
# ------------------------------------------------------------------------------
# Scaled Periodgram
# ------------------------------------------------------------------------------
sP1 <- abs(dft1)^2 * 4 / n
sP2 <- abs(dft2)^2 * 4 / n
sP3 <- abs(dft3)^2 * 4 / n
sPall <- abs(dftall)^2 * 4 / n
# ----------
graphics.off()
par(mfrow = c(2,2))
Fr <- 0:(n-1)/n
plot(Fr, sP1, type = "h", xlab = "frequency", ylab = "scaled periodogram")
plot(Fr, sP2, type = "h", xlab = "frequency", ylab = "scaled periodogram")
plot(Fr, sP3, type = "h", xlab = "frequency", ylab = "scaled periodogram")
plot(Fr, sPall, type = "h", xlab = "frequency", ylab = "scaled periodogram")
# ----------
# sum of scaled periodogram = A^2 = time series variance * 4
sum(sP1)
A[1]^2 * 2
var(x1) * { (n - 1) / n } * 4
sum(sP2)
A[2]^2 * 2
var(x2) * { (n - 1) / n } * 4
sum(sP3)
A[3]^2 * 2
var(x3) * { (n - 1) / n } * 4
sum(sPall)
sum(A^2) * 2
var(xall) * { (n - 1) / n } * 4
# ------------------------------------------------------------------------------
# Inverse back to original time series
# ------------------------------------------------------------------------------
idft1 <- fft(dft1, inverse = TRUE) / sqrt(n)
idft2 <- fft(dft2, inverse = TRUE) / sqrt(n)
idft3 <- fft(dft3, inverse = TRUE) / sqrt(n)
idftall <- fft(dftall, inverse = TRUE) / sqrt(n)
# ----------
idft1
# -->
# note that imagenary part is zero-i
# ----------
graphics.off()
par(mfrow = c(2,2))
plot(Re(idft1), type = "l")
plot(Re(idft2), type = "l")
plot(Re(idft3), type = "l")
plot(Re(idftall), type = "l")
# ----------
# manual calculation
# time point 1 and frequency = 1/n
t <- 1
j <- 1
1 / sqrt(n) * dftall[j] %*% exp(2 * pi * 1i * (j-1) / n * t)
# ----
# time point 1 and sum of all j
t <- 1
1 / sqrt(n) * dftall %*% exp(2 * pi * 1i * 0:(n-1) / n * t)
# ---
xall_inverse <- sapply(1:n, function(t){ 1 / sqrt(n) * dftall %*% exp(2 * pi * 1i * 0:(n-1) / n * t) } )
par(mfrow = c(1,1))
plot(Re(xall_inverse), type = "l")
# ------------------------------------------------------------------------------
# parametric spectral estimation
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(2,4))
mvspec(x1, type = "h")
spec.ar(x1, method = "burg")
mvspec(x2, type = "h")
spec.ar(x2, method = "burg")
mvspec(x3, type = "h")
spec.ar(x3, method = "burg")
mvspec(xall, type = "h")
spec.ar(xall, method = "burg")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\unemp")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  unemp
# ------------------------------------------------------------------------------
unemp <- read.table("unemp.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp <- ts(unemp, start = 1948, end = 1978, frequency = 12)
# ------------------------------------------------------------------------------
# data exploration:  time series plot
# ------------------------------------------------------------------------------
MTSplot(unemp)
# ------------------------------------------------------------------------------
# data exploration:  decompose
# ------------------------------------------------------------------------------
plot(decompose(unemp, type = "additive"))
# ------------------------------------------------------------------------------
# 1st difference, 2nd order difference, and detrended series
# ------------------------------------------------------------------------------
unemp_df1 <- diff(unemp)
unemp_df2 <- diff(diff(unemp))
unemp_dt1 <- resid(lm(unemp ~ time(unemp)))
unemp_dt2 <- unemp - decompose(unemp)$trend
graphics.off()
par(mfrow = c(3,2))
plot(unemp, type = "l")
plot(unemp_df1, type = "l")
plot(unemp_df2, type = "l")
plot(unemp_dt1, type = "l")
plot(unemp_dt2, type = "l")
# ------------------------------------------------------------------------------
# raw periodogram
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(3,2))
astsa::mvspec(unemp, log = "no")
astsa::mvspec(unemp_df1, log = "no")
astsa::mvspec(unemp_df2, log = "no")
astsa::mvspec(unemp_dt1, log = "no")
astsa::mvspec(na.omit(unemp_dt2), log = "no")
# -->
# unemp_df2:  over differenced series has large spectrum at high frequency (= 5)
# unemp_dt2:  detrended series has large spectrum at low frequency (= 1)
# ----------
# logged and smoothed
astsa::mvspec(unemp, log = "yes", spans = c(7,7), taper = 0.1)
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# moving average calculated from white noise
# ------------------------------------------------------------------------------
ma <- data.frame(ts.intersect(lead0 = stats::lag(ts1, 0), lead1 = stats::lag(ts1, -1), lead2 = stats::lag(ts1, -2)))
head(ts1)
head(ma)
# moving average
theta <- c(0.6, 0.3)
ma$ma <- 1 * ma$lead0 + theta[1] * ma$lead1 + theta[2] * ma$lead2
nrow(ma)
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(ts1[3:500], type = "l", lty = 1, lwd = 2, main = "ts1", cex.main = 2)
plot(ma$ma, type = "l", lty = 1, lwd = 2, col = "blue", ylim = c(-3, 3), main = "moving average of ts1", cex.main = 2)
# ------------------------------------------------------------------------------
# Autocorrelation and partial-autocorrelation
# ------------------------------------------------------------------------------
astsa::acf2(ma$ma)
sarima(ma$ma, p = 2, d = 0, q = 2, no.constant = TRUE)
sarima(ma$ma, p = 0, d = 0, q = 2, no.constant = TRUE)
# ------------------------------------------------------------------------------
# Raw periodogram
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
astsa::mvspec(ma$ma, log = "no", type = "h")
# ------------------------------------------------------------------------------
# Periodogram with more and more smoothing
# ------------------------------------------------------------------------------
# more smoothing by spans
# spans:  vector of odd integers, given in terms of L = 2 * m + 1 instead of m
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ma$ma, log = "no", type = "h")
astsa::mvspec(ma$ma, log = "no", type = "h", spans = c(10,10), ylim = c(0,4))
astsa::mvspec(ma$ma, log = "no", type = "h", spans = c(30,30), ylim = c(0,4))
astsa::mvspec(ma$ma, log = "no", type = "h", spans = c(50,50), ylim = c(0,4), taper = 0.25)
# ------------------------------------------------------------------------------
# Theoretical spectral density
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# generate white noise data
# ------------------------------------------------------------------------------
set.seed(12345)
n <- 500
ts1 <- rnorm(n = n, mean = 0, sd = 1)
# later we use
ts2 <- rnorm(n = n, mean = 0, sd = 10)
# ----------
graphics.off()
par(mfrow = c(1,1))
plot(ts1, type = "l", lty = 1, lwd = 2, main = "white noise", cex.main = 1.5)
# ------------------------------------------------------------------------------
# Autocorrelation and Partial Autocorrelation
# ------------------------------------------------------------------------------
acf2(ts1)
# ----------
# if time series is white noise, then for n (= time length) large,
# the sample autocorrelation rho is approximately normally distributed with zero mean and standard deviations
1 / sqrt(n)
# 95% interval
c(1,-1) * 2 / sqrt(n)
# ------------------------------------------------------------------------------
# Raw Periodogram
# ------------------------------------------------------------------------------
par(mfrow = c(1,1))
astsa::mvspec(ts1, log = "no", type = "h")
# bandwidth = 1 / n = 0.002
# ------------------------------------------------------------------------------
# Averaged Periodgram
# ------------------------------------------------------------------------------
# modified Daniell kernel puts half weights at the end points
( k1 <- kernel("daniell", c(3)) )
( k2 <- kernel("modified.daniell", c(3)) )
( k3 <- kernel("modified.daniell", c(3, 3)) )
graphics.off()
par(mfrow = c(2,2))
plot(k1);  plot(k2);  plot(k3)
# ----------
# we apply k3 kernel
k <- k3
graphics.off()
par(mfcol = c(2,2))
ts1.per <- astsa::mvspec(ts1, log = "no", type = "h")
ts1.per2 <- astsa::mvspec(ts1, log = "no", type = "h", kernel = k)
ts2.per <- astsa::mvspec(ts2, log = "no", type = "h")
ts2.per2 <- astsa::mvspec(ts2, log = "no", type = "h", kernel = k)
# ------------------------------------------------------------------------------
# Periodogram with more and more smoothing
# ------------------------------------------------------------------------------
# more smoothing by spans
# spans:  vector of odd integers, given in terms of L = 2 * m + 1 instead of m
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ts1, log = "no", type = "h")
astsa::mvspec(ts1, log = "no", type = "h", spans = c(10,10), ylim = c(0,2.5))
astsa::mvspec(ts1, log = "no", type = "h", spans = c(30,30), ylim = c(0,2.5))
astsa::mvspec(ts1, log = "no", type = "h", spans = c(30,30), ylim = c(0,2.5), taper = 0.25)
# -->
# the smoothed periodogram is closing to 1  (= variance of ts1)
# ---------
# ts2:  smoothed periodogram is closing to 100 (= variance of ts2)
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ts2, log = "no", type = "h")
astsa::mvspec(ts2, log = "no", type = "h", spans = c(10,10), ylim = c(0,250))
astsa::mvspec(ts2, log = "no", type = "h", spans = c(30,30), ylim = c(0,250))
astsa::mvspec(ts2, log = "no", type = "h", spans = c(30,30), ylim = c(0,250), taper = 0.25)
spec.ar(ts1)
spec.ar(ts2)
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ts1, log = "no", type = "h")
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ts2, log = "no", type = "h")
spec.taper(ts1, p = 0.5)
pllot(spec.taper(ts1, p = 0.5))
plott(spec.taper(ts1, p = 0.5))
plot(spec.taper(ts1, p = 0.5))
plot(tts1
)
plot(ts1)
astsa::mvspec(ts1, log = "no", type = "h")
spec.ar(ts1, type = "h")
astsa::mvspec(ts1, log = "no", type = "h")
spec.ar(ts1)
spec.ar(ts1, method = "burg")
graphics.off()
par(mfrow = c(1,2))
astsa::mvspec(ts1, log = "no", type = "h")
spec.ar(ts1)
astsa::mvspec(ts2, log = "no", type = "h")
spec.ar(ts2)
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ts1, log = "no", type = "h")
spec.ar(ts1)
astsa::mvspec(ts2, log = "no", type = "h")
spec.ar(ts2)
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# moving average calculated from white noise
# ------------------------------------------------------------------------------
ma <- data.frame(ts.intersect(lead0 = stats::lag(ts1, 0), lead1 = stats::lag(ts1, -1), lead2 = stats::lag(ts1, -2)))
head(ts1)
head(ma)
# moving average
theta <- c(0.6, 0.3)
ma$ma <- 1 * ma$lead0 + theta[1] * ma$lead1 + theta[2] * ma$lead2
nrow(ma)
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(ts1[3:500], type = "l", lty = 1, lwd = 2, main = "ts1", cex.main = 2)
plot(ma$ma, type = "l", lty = 1, lwd = 2, col = "blue", ylim = c(-3, 3), main = "moving average of ts1", cex.main = 2)
# ------------------------------------------------------------------------------
# Autocorrelation and partial-autocorrelation
# ------------------------------------------------------------------------------
astsa::acf2(ma$ma)
sarima(ma$ma, p = 2, d = 0, q = 2, no.constant = TRUE)
sarima(ma$ma, p = 0, d = 0, q = 2, no.constant = TRUE)
# ------------------------------------------------------------------------------
# Raw periodogram
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
astsa::mvspec(ma$ma, log = "no", type = "h")
# ------------------------------------------------------------------------------
# Periodogram with more and more smoothing
# ------------------------------------------------------------------------------
# more smoothing by spans
# spans:  vector of odd integers, given in terms of L = 2 * m + 1 instead of m
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ma$ma, log = "no", type = "h")
astsa::mvspec(ma$ma, log = "no", type = "h", spans = c(10,10), ylim = c(0,4))
astsa::mvspec(ma$ma, log = "no", type = "h", spans = c(30,30), ylim = c(0,4))
astsa::mvspec(ma$ma, log = "no", type = "h", spans = c(50,50), ylim = c(0,4), taper = 0.25)
graphics.off()
par(mfrow = c(1,2))
astsa::mvspec(ma$ma, log = "no", type = "h")
spec.ar(ma$ma)
spec.ar(ma$ma, method = "burg")
astsa::mvspec(ma$ma, log = "no", type = "h")
spec.ar(ma$ma)
par(mfrow = c(1,1))
arma.spec(ma = c(theta[1], theta[2]), log = "no", main = "moving average")
astsa::mvspec(ma$ma, log = "no", type = "h")
spec.ar(ma$ma)
par(mfrow = c(1,1))
arma.spec(ma = c(theta[1], theta[2]), log = "no", main = "moving average")
acf2(ma$ma)
astsa::mvspec(ma$ma, log = "no", type = "h")
spec.ar(ma$ma)
acf2(ma$ma)
sarim(ma$ma, p = 8, d = 0, q = 0)
sarima(ma$ma, p = 8, d = 0, q = 0)
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# auto-regressive time series calculated from white noise (ts2)
# ------------------------------------------------------------------------------
ar <- ts2
phi <- c(0.5, -0.9)
for(i in 3:length(ts1)){
# AR(2)
ar[i] <- ts2[i] + phi[1] * ar[i-1] + phi[2] * ar[i-2] + ts1[i]
}
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(ts2, type = "l", lty = 1, lwd = 2, main = "ts2", cex.main = 2)
plot(ar, type = "l", lty = 1, lwd = 2, col = "blue", main = "autoregressive series", cex.main = 2)
# ------------------------------------------------------------------------------
# autoregression by "filter"
# ------------------------------------------------------------------------------
ar2 <- stats::filter(ts2, filter = c(phi[1], phi[2]), method = "recursive")
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(ar, type = "l", lty = 1, lwd = 2, main = "AR series", cex.main = 2)
plot(ar2, type = "l", lty = 1, lwd = 2, col = "blue", main = "AR series by filter", cex.main = 2)
# ------------------------------------------------------------------------------
# Auto-correlation and partial autocorrelation
# ------------------------------------------------------------------------------
astsa::acf2(ar)
# ------------------------------------------------------------------------------
# Raw Periodogram
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
astsa::mvspec(ar, log = "no", type = "h")
# ------------------------------------------------------------------------------
# Periodogram with more and more smoothing
# ------------------------------------------------------------------------------
# more smoothing by spans
# spans:  vector of odd integers, given in terms of L = 2 * m + 1 instead of m
graphics.off()
par(mfrow = c(2,2))
astsa::mvspec(ar, log = "no", type = "h")
astsa::mvspec(ar, log = "no", type = "h", spans = c(10,10), ylim = c(0,20000))
astsa::mvspec(ar, log = "no", type = "h", spans = c(10,10), ylim = c(0,20000))
astsa::mvspec(ar, log = "no", type = "h", spans = c(10,10), ylim = c(0,20000), taper = 0.25)
# ------------------------------------------------------------------------------
# Parametric Spectral Estimation
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,2))
astsa::mvspec(ar, log = "no", type = "h")
spec.ar(ar)
# ------------------------------------------------------------------------------
# Theoretical spectral density
# ------------------------------------------------------------------------------
# Note that sigma_w^2 = 1 is assumed  (variance of noise is 1)
par(mfrow = c(1,1))
arma.spec(ar = c(phi[1], phi[2]), log = "no", main = "autoregression")
astsa::mvspec(ar, log = "no", type = "h")
spec.ar(ar)
par(mfrow = c(1,1))
arma.spec(ar = c(phi[1], phi[2]), log = "no", main = "autoregression")
astsa::mvspec(ar, log = "no", type = "h")
spec.ar(ar)
spec.ar(ar, method = "burg")
