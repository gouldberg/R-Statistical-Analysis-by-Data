lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
plot(output, type = "l", main = "OE")
lines(time(pred_oe), pred_oe, col = "red", lwd = 2)
plot(output, type = "l", main = "ARMAX")
lines(time(pred_armax), pred_armax, col = "black", lwd = 2)
fitch(modarx)$FPE
fitch(modoe)$FPE
fitch(modarmax)$FPE
modarx <- arx(ze, order = c(2,2,3), lambda = 0.1)
modarx$sys
pred_arx0 <- modarx$fitted.values[,1]
output0 <- c(ze$output)
# fitted values
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred), pred, col = "blue", lwd = 2)
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
resid_arx <- pred_arx - output
resid_arx_t <- pred_arx_t - output_t
sysid::residplot(modarx)
modoe <- oe(ze, order = c(2,2,3))
modoe$sys
pred_oe <- predict(modoe, ze)
pred_oe_t <- predict(modoe, zr)
resid_oe <- pred_oe - output
resid_oe_t <- pred_oe_t - output_t
sysid::residplot(modoe)
pred_armax <- predict(modarmax, ze)
pred_armax_t <- predict(modarmax, zr)
pred_armax <- predict(modarmax, ze)
pred_armax_t <- predict(modarmax, zr)
resid_armax <- pred_armax - output
resid_armax_t <- pred_armax_t - output_t
sysid::residplot(modarmax)
fitch(modarx)$nAIC
fitch(modoe)$nAIC
fitch(modarmax)$nAIC
fitch(modarx)$FPE
fitch(modoe)$FPE
fitch(modarmax)$FPE
graphics.off()
par(mfrow = c(3,2))
plot(output, type = "l", main = "ARX train")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
plot(output_t, type = "l", main = "ARX test")
lines(time(pred_arx_t), pred_arx, col = "blue", lwd = 2)
plot(output, type = "l", main = "OE train")
lines(time(pred_oe), pred_oe, col = "red", lwd = 2)
plot(output_t, type = "l", main = "OE test")
lines(time(pred_oe_t), pred_oe_t, col = "red", lwd = 2)
plot(output, type = "l", main = "ARMAX train")
lines(time(pred_armax), pred_armax, col = "black", lwd = 2)
plot(output_t, type = "l", main = "ARMAX test")
lines(time(pred_armax_t), pred_armax_t, col = "black", lwd = 2)
graphics.off()
par(mfcol = c(3,2))
plot(output, type = "l", main = "ARX train")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
plot(output_t, type = "l", main = "ARX test")
lines(time(pred_arx_t), pred_arx, col = "blue", lwd = 2)
plot(output, type = "l", main = "OE train")
lines(time(pred_oe), pred_oe, col = "red", lwd = 2)
plot(output_t, type = "l", main = "OE test")
lines(time(pred_oe_t), pred_oe_t, col = "red", lwd = 2)
plot(output, type = "l", main = "ARMAX train")
lines(time(pred_armax), pred_armax, col = "black", lwd = 2)
plot(output_t, type = "l", main = "ARMAX test")
lines(time(pred_armax_t), pred_armax_t, col = "black", lwd = 2)
graphics.off()
par(mfcol = c(2,3))
plot(output, type = "l", main = "ARX train")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
plot(output_t, type = "l", main = "ARX test")
lines(time(pred_arx_t), pred_arx, col = "blue", lwd = 2)
plot(output, type = "l", main = "OE train")
lines(time(pred_oe), pred_oe, col = "red", lwd = 2)
plot(output_t, type = "l", main = "OE test")
lines(time(pred_oe_t), pred_oe_t, col = "red", lwd = 2)
plot(output, type = "l", main = "ARMAX train")
lines(time(pred_armax), pred_armax, col = "black", lwd = 2)
plot(output_t, type = "l", main = "ARMAX test")
lines(time(pred_armax_t), pred_armax_t, col = "black", lwd = 2)
plot(output_t, type = "l", main = "ARX test")
lines(time(pred_arx_t), pred_arx, col = "blue", lwd = 2)
graphics.off()
par(mfcol = c(2,3))
plot(output, type = "l", main = "ARX train")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
plot(output_t, type = "l", main = "ARX test")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
plot(output, type = "l", main = "OE train")
lines(time(pred_oe), pred_oe, col = "red", lwd = 2)
plot(output_t, type = "l", main = "OE test")
lines(time(pred_oe_t), pred_oe_t, col = "red", lwd = 2)
plot(output, type = "l", main = "ARMAX train")
lines(time(pred_armax), pred_armax, col = "black", lwd = 2)
plot(output_t, type = "l", main = "ARMAX test")
lines(time(pred_armax_t), pred_armax_t, col = "black", lwd = 2)
graphics.off()
par(mfcol = c(3,2))
plot(resid_arx, type = "l", main = "ARX train", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_arx_t, type = "l", main = "ARX test", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_oe, type = "l", main = "OE train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_oe_t, type = "l", main = "OE test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax, type = "l", main = "ARMAX train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax_t, type = "l", main = "ARMAX test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
graphics.off()
par(mfcol = c(2,3))
plot(resid_arx, type = "l", main = "ARX train", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_arx_t, type = "l", main = "ARX test", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_oe, type = "l", main = "OE train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_oe_t, type = "l", main = "OE test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax, type = "l", main = "ARMAX train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax_t, type = "l", main = "ARMAX test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
graphics.off()
par(mfcol = c(2,3))
plot(resid_arx, type = "l", main = "ARX train", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_arx_t, type = "l", main = "ARX test", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_oe, type = "l", main = "OE train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_oe_t, type = "l", main = "OE test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax, type = "l", main = "ARMAX train", ylim = c(-10, 10))
abline(h = 0, col = "gray")
plot(resid_armax_t, type = "l", main = "ARMAX test", ylim = c(-10, 10))
abline(h = 0, col = "gray")
compare(zr, modarx, modoe, modarmax, nahead = 1)
# residuals for train data and test data
graphics.off()
par(mfcol = c(2,3))
plot(resid_arx, type = "l", main = "ARX train", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_arx_t, type = "l", main = "ARX test", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_oe, type = "l", main = "OE train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_oe_t, type = "l", main = "OE test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax, type = "l", main = "ARMAX train", ylim = c(-10, 10))
abline(h = 0, col = "gray")
plot(resid_armax_t, type = "l", main = "ARMAX test", ylim = c(-10, 10))
abline(h = 0, col = "gray")
sum(abs(resid_arx))
mean(abs(resid_arx)))
mean(abs(resid_arx))
mean(abs(resid_arx_t))
mean(abs(resid_oe))
mean(abs(resid_oe_t))
mean(abs(resid_armax))
mean(abs(resid_oe_armax_t))
mean(abs(resid_arx))
mean(abs(resid_arx_t))
mean(abs(resid_oe))
mean(abs(resid_oe_t))
mean(abs(resid_armax))
mean(abs(resid_armax_t))
( parms <- expand.grid(na = 2:10, nb = 2:10, nk = 3) )
parms <- parms %>% arrange(nk, na, nc)
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
modarx <- arx(ze, order = c(na, nb, nk), lambda  = 2)
parms$aicc[i] <- fitch(modarx)$AICc
parms$fpe[i] <- fitch(modarx)$FPE
parms$naic[i] <- fitch(modarx)$nAIC
parms$mse[i] <- fitch(modarx)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
parms[which.min(parms$naic),]
modarx <- arx(ze, order = c(2,2,3), lambda = 0.1)
modarx$sys
fitch(madarx)
fitch(modarx)
modarx <- arx(ze, order = c(2,2,3), lambda = 2)
modarx$sys
fitch(modarx)
modarx <- arx(ze, order = c(2,2,3), lambda = 0.1)
modarx$sys
fitch(modarx)
modarx$sys
unlist(fitch(modarx))
unlist(fitch(modarx))
unlist(fitch(modoe))
unlist(fitch(modarmax))
round(unlist(fitch(modarx), 3)
round(unlist(fitch(modarx), 3))
round(unlist(fitch(modarx)), 3)
round(unlist(fitch(modarx)), 3)
round(unlist(fitch(modoe)), 3)
round(unlist(fitch(modarmax)), 3)
( parms <- expand.grid(na = 2:10, nb = 2:10, nc = 2:10, nk = 3) )
parms <- parms %>% arrange(nk, na, nb, nc)
( parms <- expand.grid(na = 2:10, nb = 2:10, nc = 2:10, nk = 3) )
parms <- parms %>% arrange(nk, na, nb, nc)
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nc <- parms[i,"nc"]
nk <- parms[i,"nk"]
modarx <- armax(ze, order = c(na, nb, nc, nk))
parms$aicc[i] <- fitch(modarmax)$AICc
parms$fpe[i] <- fitch(modarmax)$FPE
parms$naic[i] <- fitch(modarmax)$nAIC
parms$mse[i] <- fitch(modarmax)$MSE
}
parms
plot(parms$naic, type = "l")
# add nc term = 2
modarmax <- armax(ze, order = c(2,2,2,3))
modarmax$sys
# ----------
# test data
pred_armax <- predict(modarmax, ze)
pred_armax_t <- predict(modarmax, zr)
resid_armax <- pred_armax - output
resid_armax_t <- pred_armax_t - output_t
# ----------
sysid::residplot(modarmax)
( parms <- expand.grid(na = 2:10, nb = 2:10, nc = 2:10, nk = 3) )
parms <- parms %>% arrange(nk, na, nb, nc)
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nc <- parms[i,"nc"]
nk <- parms[i,"nk"]
modarmax <- armax(ze, order = c(na, nb, nc, nk))
parms$aicc[i] <- fitch(modarmax)$AICc
parms$fpe[i] <- fitch(modarmax)$FPE
parms$naic[i] <- fitch(modarmax)$nAIC
parms$mse[i] <- fitch(modarmax)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
i <- 1
( parms <- expand.grid(na = 2:10, nb = 2:10, nc = 2:10, nk = 3) )
parms <- parms %>% arrange(nk, na, nb, nc)
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nc <- parms[i,"nc"]
nk <- parms[i,"nk"]
modarmax <- armax(ze, order = c(na, nb, nc, nk))
c(na, nb, nc, nk)
modarmax <- armax(ze, order = c(na, nb, nc, nk))
modarmax <- armax(ze, order = c(2,2,2,3))
ze
modarmax <- armax(ze, order = c(2,2,2,3))
# note that DO NOT USE dplyr
packages <- c("astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\dry2")
# note that DO NOT USE dplyr
packages <- c("astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  dry2
# ------------------------------------------------------------------------------
u <- read.csv("dry2_u.txt", sep = "", header = F, colClasses = "numeric")
y <- read.csv("dry2_y.txt", sep = "", header = F, colClasses = "numeric")
dry2 <- cbind(u, y)
colnames(dry2) <- c("input", "output")
head(dry2)
# ----------
str(dry2)
library(sysid)
# convert to idframe
dry <- idframe(output = ts(dry2$output), input = ts(dry2$input), Ts = 1)
str(dry)
# split data
ze <- dataSlice(dry, start = 100, end = 500)
zr <- dataSlice(dry, start = 501, end = 850)
# ----------
# detrending
# R by default doesn’t allow return of multiple objects.
# The %=% operator and g function in this package facillitate this behaviour
g(ze) %=% detrend(ze)
g(zr) %=% detrend(zr)
ze$output
# ----------
plot(dry)
par(mfrow = c(2,1))
plot(ze)
sp <- spa(ze)
# bode plot
plot(sp)
# Estimates the emperical transfer function from the data
# by taking the ratio of the fourier transforms of the output and the input variables
plot(etfe(ze))
# ------------------------------------------------------------------------------
# Impulse Response Function
# ------------------------------------------------------------------------------
fit <- impulseest(ze)
impulseplot(fit)
# -->
# estimated delay = 3
# ----------
# step response function
plot(step(fit))
( parms <- expand.grid(na = 2:10, nb = 2:10, nk = 3) )
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
modarx <- arx(ze, order = c(na, nb, nk), lambda  = 0.1)
parms$aicc[i] <- fitch(modarx)$AICc
parms$fpe[i] <- fitch(modarx)$FPE
parms$naic[i] <- fitch(modarx)$nAIC
parms$mse[i] <- fitch(modarx)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
modarx <- arx(ze, order = c(2,2,3), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
# ----------
# fitted values
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred), pred, col = "blue", lwd = 2)
# ----------
# test data
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
resid_arx <- pred_arx - output
resid_arx_t <- pred_arx_t - output_t
# ----------
sysid::residplot(modarx)
modoe <- oe(ze, order = c(2,2,3))
modoe$sys
# ----------
# test data
pred_oe <- predict(modoe, ze)
pred_oe_t <- predict(modoe, zr)
resid_oe <- pred_oe - output
resid_oe_t <- pred_oe_t - output_t
# ----------
sysid::residplot(modoe)
modarmax <- armax(ze, order = c(2,2,2,3))
modarmax$sys
# ----------
# test data
pred_armax <- predict(modarmax, ze)
pred_armax_t <- predict(modarmax, zr)
resid_armax <- pred_armax - output
resid_armax_t <- pred_armax_t - output_t
sysid::residplot(modarmax)
modarmax <- armax(ze, order = c(2,2,2,3))
help(armax)
u <- read.csv("dry2_u.txt", sep = "", header = F, colClasses = "numeric")
y <- read.csv("dry2_y.txt", sep = "", header = F, colClasses = "numeric")
dry2 <- cbind(u, y)
colnames(dry2) <- c("input", "output")
head(dry2)
# ----------
str(dry2)
# ------------------------------------------------------------------------------
# data preparation
# ------------------------------------------------------------------------------
library(sysid)
# convert to idframe
dry <- idframe(output = ts(dry2$output), input = ts(dry2$input), Ts = 1)
str(dry)
# split data
ze <- dataSlice(dry, start = 100, end = 500)
zr <- dataSlice(dry, start = 501, end = 850)
# ----------
# detrending
# R by default doesn’t allow return of multiple objects.
# The %=% operator and g function in this package facillitate this behaviour
g(ze) %=% detrend(ze)
g(zr) %=% detrend(zr)
ze$output
# ----------
plot(dry)
par(mfrow = c(2,1))
plot(ze)
# default lag size of the Hanning window (Default: min (length(x)/10,30))
sp <- spa(ze)
# bode plot
plot(sp)
# Estimates the emperical transfer function from the data
# by taking the ratio of the fourier transforms of the output and the input variables
plot(etfe(ze))
# ------------------------------------------------------------------------------
# Impulse Response Function
# ------------------------------------------------------------------------------
fit <- impulseest(ze)
impulseplot(fit)
# ----------
# step response function
plot(step(fit))
( parms <- expand.grid(na = 2:10, nb = 2:10, nk = 3) )
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
modarx <- arx(ze, order = c(na, nb, nk), lambda  = 0.1)
parms$aicc[i] <- fitch(modarx)$AICc
parms$fpe[i] <- fitch(modarx)$FPE
parms$naic[i] <- fitch(modarx)$nAIC
parms$mse[i] <- fitch(modarx)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
modarx <- arx(ze, order = c(2,2,3), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred), pred, col = "blue", lwd = 2)
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
resid_arx <- pred_arx - output
resid_arx_t <- pred_arx_t - output_t
sysid::residplot(modarx)
modoe <- oe(ze, order = c(2,2,3))
modoe$sys
# ----------
# test data
pred_oe <- predict(modoe, ze)
pred_oe_t <- predict(modoe, zr)
resid_oe <- pred_oe - output
resid_oe_t <- pred_oe_t - output_t
sysid::residplot(modoe)
modarmax <- armax(ze, order = c(2,2,2,3))
modarmax <- armax(ze, order = c(2,2,1,3))
modarmax$sys
modarmax <- arx(ze, order = c(2,2,2,3))
modarmax$sys
modarmax <- armax(ze, order = c(2,2,2,3))
modarmax$sys
library(sysid)
modarmax <- armax(ze, order = c(2,2,2,3))
ze
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\dry2")
# note that DO NOT USE dplyr
packages <- c("astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  dry2
# ------------------------------------------------------------------------------
u <- read.csv("dry2_u.txt", sep = "", header = F, colClasses = "numeric")
y <- read.csv("dry2_y.txt", sep = "", header = F, colClasses = "numeric")
dry2 <- cbind(u, y)
colnames(dry2) <- c("input", "output")
head(dry2)
# ----------
str(dry2)
