work <- read.table("work_women.csv", header = TRUE, row.names = 1, sep = ";")
str(work)
dim(work)
colnames(work) <- c("stay.at.home", "part.time.work", "full.time.work", "totally.agree", "mostly.agree", "mostly.disagree", "totally.disagree")
names(work)
work
summary(work)
work1 <- work[,1:3]
work2 <- work[,4:6]
spineplot(work1)
as.table(work1)
spineplot(as.matrix(work1))
spineplot(t(as.matrix(work1)))
spineplot(t(as.matrix(work2)))
work2 <- work[,4:7]
spineplot(t(as.matrix(work2)))
spineplot(t(as.matrix(work1)))
( work1 <- work[,1:3] )
( work2 <- work[,4:7] )
add.margins(work1)
addmargins(work1)
addmargins(as.matrix(work1))
addmargins(as.matrix(work2))
spineplot(t(as.matrix(work1)))
spineplot(t(as.matrix(work1)))
spineplot(t(as.matrix(work2)))
spineplot(t(as.matrix(work2)))
mosaic(work1, labeling = labeling_values)
mosaic(as.matrix(work1), labeling = labeling_values)
vcd::mosaic(as.matrix(work1), shade=TRUE, suppress=0, labeling=labeling_residuals, gp_text=gpar(fontface=2))
assocstats(as.matrix(work1))
CMHtest(as.matrix(work1))
CMHtest(as.matrix(work2))
ddr <- rbind(work1, apply(work1, 2, sum))
rownames(ddr)[4] <- "Mean Profile"
round(prop.table(as.matrix(ddr), margin = 1), 3)
ddc <- cbind(work1, apply(work1, 1, sum))
rownames(ddc)[4] <- "Mean Profile"
round(prop.table(as.matrix(ddc), margin = 1), 3)
ddr <- rbind(work1, apply(work1, 2, sum))
rownames(ddr)[4] <- "Mean Profile"
round(prop.table(as.matrix(ddr), margin = 1), 3)
round(addmargings(prop.table(as.matrix(ddr)), margin = 1), 3)
round(addmargins(prop.table(as.matrix(ddr)), margin = 1), 3)
round(addmargins(prop.table(as.matrix(ddr)), 3)
round(addmargins(prop.table(as.matrix(ddr))), 3)
round(addmargins(prop.table(as.matrix(ddr))), 3)
ddr <- rbind(work1, apply(work1, 2, sum))
rownames(ddr)[4] <- "Mean Profile"
round(addmargins(prop.table(as.matrix(ddr))), 3)
round(addmargins(prop.table(as.matrix(ddr), margin = 1)), 3)
round(addmargins(prop.table(as.matrix(ddr), margin = 1), margin = 2), 3)
ddc <- cbind(work1, apply(work1, 1, sum))
rownames(ddc)[4] <- "Mean Profile"
round(addmargins(prop.table(as.matrix(ddc), margin = 1), margin = 2), 3)
round(addmargins(prop.table(as.matrix(ddc), margin = 1), margin = 1), 3)
round(addmargins(prop.table(as.matrix(ddc), margin = 2), margin = 1), 3)
ddc <- cbind(work1, apply(work1, 1, sum))
rownames(ddc)[4] <- "Mean Profile"
ddc
ddc <- cbind(work1, apply(work1, 1, sum))
colnames(ddc)[4] <- "Mean Profile"
round(addmargins(prop.table(as.matrix(ddc), margin = 2), margin = 1), 3)
ddc
ddr
( haireye.ca <- ca::ca(as.matrix(work1)) )
( work.ca <- ca::ca(as.matrix(work1)) )
summary(work.ca)
chisq.test(as.matrix(work1))
1724 * 0.1354
( haireye.ca_comp <- ca::ca(as.matrix(work1), nd = 4) )
( work.ca_comp <- ca::ca(as.matrix(work1), nd = 4) )
# Standard coordinates Phi and Gamma
( Phi <- work.ca$rowcoord )
( Gamma <- work.ca$colcoord )
( Dr <- diag(work.ca$rowmass) )
zapsmall(t(Phi) %*% Dr %*% Phi)
( Dc <- diag(work.ca$colmass) )
zapsmall(t(Gamma) %*% Dc %*% Gamma)
( Phi <- work.ca$rowcoord )
( Dr <- diag(work.ca$rowmass) )
zapsmall(t(Phi) %*% Dr %*% Phi)
( Dr <- diag(work.ca$rowmass) )
round(addmargins(prop.table(as.matrix(ddr), margin = 1), margin = 2), 3)
round(addmargins(prop.table(as.matrix(ddc), margin = 2), margin = 1), 3)
( Dr <- diag(work.ca$rowmass) )
round(addmargins(prop.table(as.matrix(ddc), margin = 2), margin = 1), 3)
work.ca$rowmass
round(addmargins(prop.table(as.matrix(ddc), margin = 2), margin = 1), 3)
work.ca$colmass
round(addmargins(prop.table(as.matrix(ddr), margin = 1), margin = 2), 3)
( Phi <- work.ca$rowcoord )
summary(work.ca)
work.ca
graphics.off();  par(mfrow=c(1,1), asp = 1)
res <- plot(work.ca)
res
round(addmargins(prop.table(as.matrix(ddc), margin = 2), margin = 1), 3)
# Similarly, women who answered full-time work responded:
# Only the husband works less often than the average population (29.7% compared with 52.7%)
# Both parents work equally more often than the average population:  33.4% compared with 15.1%
res
summary(work.ca)
( Phi <- work.ca$rowcoord )
( Gamma <- work.ca$colcoord )
1/sqrt(0.1168)
names(work.ca)
work.ca$sv
sqrt(work.ca$sv)
work.ca$sv^2
1 / work.ca$sv
help(ca)
res.ca <- CA(work1)
res.ca
sumamry(res.ca)
summary(res.ca)
summary(work.ca)
par(mfrow = c(2,1))
plot(res.ca, invisible = "col")
plot(res.ca, invisible = "row")
par(mfrow = c(1,2))
plot(res.ca, invisible = "col")
plot(res.ca, invisible = "row")
par(mfrow = c(1,2))
plot(res.ca, invisible = "col")
coord.col <- sweep(res.ca$col$coord, 2, sqrt(res.ca$eig[,1]), FUN = "*")
points(coord.col, pch = 17, col = "red")
text(coord.col, rownames(coord.col), col = "red")
coord.col
coord.col <- sweep(res.ca$col$coord, 2, sqrt(res.ca$eig[,1]), FUN = "*")
coord.row <- sweep(res.ca$row$coord, 2, sqrt(res.ca$eig[,1]), FUN = "*")
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(res.ca, invisible = "col")
points(coord.col, pch = 17, col = "red")
text(coord.col, rownames(coord.col), col = "red")
plot(res.ca, invisible = "row")
points(coord.row, pch = 20, col = "blue")
text(coord.row, rownames(coord.row), col = "blue")
summary(res.ca)
coord.col
summary(work.ca)
summary(res.ca)
res.ca$row$inertia / res.ca$call$marge.row
res.ca$col$inertia / res.ca$call$marge.col
res.ca
summary(res.ca)
res.ca$row$inertia / res.ca$call$marge.row
res.ca$row$inertia / res.ca$call$marge.row
res.ca$col$inertia / res.ca$call$marge.col
res.ca$call$marge.row
res.ca$row$inertia / res.ca$call$marge.row
res.ca$row$inertia
res.ca$col$inertia / res.ca$call$marge.col
res.ca$col$inertia
summary(res.ca)
plot(res.ca)
par(mfrow = c(1,1))
plot(res.ca)
graphics.off()
par(mfrow = c(1,2))
plot(res.ca, invisible = "col")
points(coord.col, pch = 17, col = "red")
text(coord.col, rownames(coord.col), col = "red")
plot(res.ca, invisible = "row")
points(coord.row, pch = 20, col = "blue")
text(coord.row, rownames(coord.row), col = "blue")
par(mfrow = c(1,1))
plot(res.ca)
res.ca2 <- CA(work, col.sup = 4:ncol(work))
summary(res.ca2)
names(res.ca2)
names(summary(res.ca2))
names(summary(res.ca2))
assocstats(work2)
res.ca2 <- CA(work, col.sup = 4:ncol(work))
assocstats(as.matrix(work2))
chisq.test(as.matrix(work2))
assocstats(as.matrix(work2))
assocstats(as.matrix(work2))
assocstats(as.matrix(work1))
0.3345^2
0.26^2
assoc.stats(as.matrix(work2))
assocstats(as.matrix(work2))
psych::phi(work2)
work2
res.ca2 <- CA(work, col.sup = 4:ncol(work), arrows = TRUE)
help(CA)
res.ca2 <- CA(work, quanti.sup = 4:ncol(work))
res.ca2 <- CA(work, col.sup = 4:ncol(work))
fit_ca <- ca(work, supcol = 4:ncol(work))
graphics.off()
par(mfrow = c(1,1))
plot(fit_ca, arrows = c(FALSE, TRUE))
fit_ca
summary(fit_ca)
fit_ca <- ca(work, supcol = 4:ncol(work))
graphics.off()
par(mfrow = c(1,1))
plot(fit_ca, arrows = c(FALSE, TRUE))
fit_ca
summary(fit_ca)
plot(res_ca, arrows = c(FALSE, TRUE))
plot(res.ca2, arrows = c(FALSE, TRUE))
plot(fit_ca, arrows = c(FALSE, TRUE))
plot(res.ca2)
graphics.off()
par(mfrow = c(1,1))
plot(fit_ca, arrows = c(FALSE, TRUE))
# ----------
fit_ca
summary(fit_ca)
fit_ca$sv
sqrt(fit_anass$eigen.values)
sqrt(fit_ca$eigen.values)
fit_ca$sv
sqrt(fit_ca$sv)
fit_ca$sv^2
fit_ca$sv^2
fit_ca
par(mfrow=c(1,2))
plot(fit_ca)
plot(res.ca2)
library(ca)
fit_ca <- ca(work, supcol = 4:ncol(work))
graphics.off()
par(mfrow = c(1,1))
plot(fit_ca, arrows = c(FALSE, TRUE))
par(mfrow=c(1,2))
plot(fit_ca, arrows = c(FALSE, TRUE))
plot(res.ca2)
help(spineplot)
help(assocstats)
help(CMHtest)
setwd("//media//kswada//MyFiles//R//rogers")
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//rogers")
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
str(Rogers)
data("Rogers", package = "MPsychoR")
str(Rogers)
dim(Rogers)
car::some(Rogers)
dim(Rogers)
psych::pairs.panels(Rogers)
psych::pairs.panels(Rogers)
corrplot::corrplot(cor(Rogers), order = "hclust", method = "ward.D2")
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust")
help(corrplot)
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust", hclust.method = "ward.D2")
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust", hclust.method = "ward.D2", sig.level = 0.05)
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust", hclust.method = "ward.D2")
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust", hclust.method = "ward.D2",rect.hc = 4, rect.col = "yellow")
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust", hclust.method = "ward.D2",rect.hc = 4)
library(qqgraph)
library(qgraph)
install.packages("qgraph", dep = "T")
install.packages("qgraph", dep = T)
library(qgraph)
cormat <- cor(Rogers)
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2, graph = "cor", groups = list(Depression = 1:16, OCD = 17:26),
color = c("white", "gray"), labels = colnames(Rogers),
title = "Depression/OCD Correlation Network")
help(qgraph)
library("psych")
data(bfi)
cor_bfi <- cor_auto(bfi[,1:25])
cor_bfi
plot(cor_bfi)
corrplot::corrplot(cor(Rogers), method = "shade", order = "hclust", hclust.method = "ward.D2")
help(varclus)
varclus(~ ., sim = "hoeffding", data = Rogers)
Hmisc::varclus(~ ., sim = "hoeffding", data = Rogers)
help(rcorr)
library(Hmisc)
x <- Rogers
r <- rcorr(x, type="spearman")$r
maxabsr <- max(abs(r[row(r) != col(r)]))
p <- nrow(r)
v <- dimnames(r)[[1]]
plot(c(-.35, p+.5), c(.5, p+.25), type="n", axes=FALSE, xlab="", ylab="")
text(rep(.5, p), 1:p, v, adj=1)
for(i in 1:(p-1)){
for(j in (i+1):p){
lines(c(i,i), c(j,j+r[i,j]/maxabsr/2), lwd=3, lend="butt")
lines(c(i-.2, i+.2), c(j,j), lwd=1, col=grey(.7))
}
text(i, i, v[i], str=-45,  adj=0)
}
r <- rcorr(x, type="spearman")$r
x <- as.matrix(Rogers)
# ----------
# To handle skewness, we use Spearman rank correlations for continuous variables
# spearman rho rank correlation plot
r <- rcorr(x, type="spearman")$r
maxabsr <- max(abs(r[row(r) != col(r)]))
p <- nrow(r)
v <- dimnames(r)[[1]]
plot(c(-.35, p+.5), c(.5, p+.25), type="n", axes=FALSE, xlab="", ylab="")
text(rep(.5, p), 1:p, v, adj=1)
for(i in 1:(p-1)){
for(j in (i+1):p){
lines(c(i,i), c(j,j+r[i,j]/maxabsr/2), lwd=3, lend="butt")
lines(c(i-.2, i+.2), c(j,j), lwd=1, col=grey(.7))
}
text(i, i, v[i], str=-45,  adj=0)
}
vc <- varclus(~ ., data = Rogers, sim="hoeffding", data = data)
plot(vc)
vc <- varclus(~ ., data = Rogers, sim="hoeffding")
plot(vc)
centrality(cornet)
centralityplot(cornet)
centralityPlot(cornet)
par(mfrow = c(1,3))
centralityPlot(cornet)
help(centralityPlot)
centralityPlot(cornet, include = c("Degree", "Strength", "InDegree", "OutDegree"))
graphics.off()
centralityPlot(cornet, include = c("Degree", "Strength", "InDegree", "OutDegree"))
help(centralituPlot)
help(centralityPlot)
centralityPlot(cornet, include = c("Closeness", "Betweenness"))
graphics.off()
centralityPlot(cornet, include = c("Betweeness", "Closeness", "Strength"))
centralityPlot(cornet, include = c("Betweenness", "Closeness", "Strength"))
qgraph(cormat, layout = "spring", sampleSize = nrow(Rogers), graph = "glasso",
groups = list(Depression = 1:16, OCD = 17:26),
color = c("white", "gray"), labels = colnames(Rogers),
title = "Depression / OCD Graphical Lasso")
library(eigenmodels)
install.packages("eigenmodels",dep = T)
install.packages("eigenmodel",dep = T)
library(eigenmodel)
fitEM <- eigenmodel_mcmc(cormat, R = 2, S = 1000, burn = 200, seed = 123)
diag(cormat) <- NA
fitEM <- eigenmodel_mcmc(cormat, R = 2, S = 1000, burn = 200, seed = 123)
evals <- colMeans(fitEM$L_postsamp)
evals
evecs <- eigen(fitEM$ULU_postmean)$vec[,1:2]
cols <- c("coral", "cadetblue")
plot(evecs, type = "n", xlab = "Dimension 1", ylab = "Dimension 2", xlim = c(-0.30, 0),
main = "Depression / OCD Eigenmodel Network")
corthresh <- 0.2
addlines(evecs, abs(cormat) > corthresh, col = "gray")
ind <- c(rep(1, 16), rep(2, 10))
text(evecs, labels = rownames(cormat), col = cols[ind], cex = 0.8)
legend("topright", legend = c("Depression", "OCD"), col = cols, pch = 19)
eigen(fitEM$ULU_postmean)$vec
evals
thresh <- 0.2
cormat01 <- ifelse(abs(cormat) > thresh, 1, 0)
# ----------
# We need to convert this adjacency matrix into a network object (undirected graph), using the network package
library(network)
cornet <- network(cormat01, matrix.type = "adjacency", directed = FALSE)
library(latentnet)
install.packages("network", dep = T)
install.package("latentnet", dep = T)
install.packages("latentnet", dep = T)
library(network)
cornet <- network(cormat01, matrix.type = "adjacency", directed = FALSE)
library(latentnet)
set.seed(111)
install.pacakges("latentnet", dep = T)
install.pacakge("latentnet", dep = T)
install.package("latentnet", dep = T)
install.packages("latentnet", dep = T)
install.packages("latentnet", dep = T)
install.packages("latentnet", dep = T)
setwd("//media//kswada//MyFiles//R//rogers")
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Rogers
# ------------------------------------------------------------------------------
data("Rogers", package = "MPsychoR")
str(Rogers)
dim(Rogers)
car::some(Rogers)
# ------------------------------------------------------------------------------
# Correlation Networks based on simple Pearson Correlation
# ------------------------------------------------------------------------------
library(qgraph)
cormat <- cor(Rogers)
thresh <- 0.2
cormat01 <- ifelse(abs(cormat) > thresh, 1, 0)
# ----------
# We need to convert this adjacency matrix into a network object (undirected graph), using the network package
library(network)
cornet <- network(cormat01, matrix.type = "adjacency", directed = FALSE)
library(latentnet)
set.seed(111)
fitLN1 <- ergmm(cornet ~ euclidean(d = 2, G = 1))
summary(fitLN1)$bic$Z
fitLN2 <- ergmm(cornet ~ euclidean(d = 2, G = 2))
summary(fitLN2)$bic$Z
fitLN3 <- ergmm(cornet ~ euclidean(d = 2, G = 3))
summary(fitLN3)$bic$Z
clusmemb2 <- fitNL2$mkl$mbc$Z.pZK
dimnames(clusmemb2) <- list(colnames(cormat01), paste("Cluster", 1:2))
clusmemb2[c("comptime", "suicide", "weightgain"), ]
clusmemb2 <- fitLN2$mkl$mbc$Z.pZK
dimnames(clusmemb2) <- list(colnames(cormat01), paste("Cluster", 1:2))
clusmemb2[c("comptime", "suicide", "weightgain"), ]
plot(fitNL2)
plot(fitLN2)
clusmemb2 <- fitLN2$mkl$mbc$Z.pZK
dimnames(clusmemb2) <- list(colnames(cormat01), paste("Cluster", 1:2))
clusmemb2[c("comptime", "suicide", "weightgain"), ]
plot(fitLN3)
plot(fitLN3, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"), what = "density")
cornet
summary(fitLN1)$bic$Z
help(ergmm)
mcmc.diagnostics(fitLN2)
plot(fitLN2)
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"), what = "network
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"), what = "network")
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"), what = "network")
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"))
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue"))
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue"))
plot(fitLN2, main = "Latent Class Network")
plot(fitLN2, main = "Latent Class Network", cluster.col = c("coral", "cadetblue"))
summary(fitLN1)
plot(fitLN3)
clusmemb3 <- fitLN3$mkl$mbc$Z.pZK
dimnames(clusmemb3) <- list(colnames(cormat01), paste("Cluster", 1:3))
clusmemb3[c("comptime", "suicide", "weightgain", "obdistress"), ]
plot(fitLN3, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"), what = "density")
plot(fitLN3, main = "Latent Class Network", cluster.col = c("coral", "cadetblue", "darkgoldenrod"), what = "density")
psych::describe(Rogers)
Hmisc::describe(Rogers)
pca_rog1 <- prcomp(Rogers)
pca_rog2 <- prcomp(Rogers, scale = TRUE)
# Biplot, with scale factor alpha = 1 (default):  row metric preserving
op <- par(mfrow = c(1,2))
biplot(pca_rog1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Unstandardized)", xlim = c(-4, 4), asp = 1, cex.axis = 0.8)
biplot(pca_rog2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Standardized)", asp = 1, cex.axis = 0.8)
layout(1)
par(op)
op <- par(mfrow = c(2,2), mar = c(4, 3, 4, 1))
biplot(pca_rog1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Unstandardized, ", alpha, "=0)")), scale = 0, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_rog1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Unstandardized, ", alpha, "=1)")), scale = 1, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_rog2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Standardized, ", alpha, "=0)")), scale = 0, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_rog2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Standardized, ", alpha, "=1)")), scale = 1, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
par(op)
round(apply(Rogers, 2, sd), 3)
round(cor(Rogers), 3)
graphics.off()
par(mfrow=c(1,2))
res.pca0 <- FactoMineR::PCA(Rogers)
res.pca0
summary(res.pca0)
res.pca <- FactoMineR::PCA(Rogers)
# ------------------------------------------------------------------------------
# Automatic dimension description from the quantitative and categorical variables
#   - For a quantitative variable, the correlation coefficient between the coordinates of the individuals on the component and each variable
#     is calculated.
#     We then sort the variables in descending order from the highest coefficient to the weakest and retain the variables with the highest correlation coefficients
#   - For a categorical variable, we conduct a one-way analysis of variance where we seek to explain the coordinates of the individuals (on the component)
#     by the categorical variable.
#     We use the sum to zero contrasts (sum of all to 0)
#     For each categorical variable, a Student t-test is conducted to compare the average of the individuals who possess that category with the general average.
# ------------------------------------------------------------------------------
dimdesc(res.pca)
help(dimdesc)
FactorMineR::dimdesc(res.pca)
FactoMineR::dimdesc(res.pca)
lapply(FactoMineR::dimdesc(res.pca),lapply,round,2)
library(Gifi)
prc <- princals(Rogers)
summary(prc)
# ----------
par(mfrow = c(1,1))
# expand = 0.5 to shorten the vectors for better representation
plot(prc, plot.type = "biplot", main = "Princals Biplot", expand = 0.5, cex.scores = 0.6, col.scores = "gray")
abline(h = 0, v = 0, lty = 2, col = "gray")
# ----------
par(mar = c(1,1,1,1))
plot(prc, plot.type = "transplot")
help(addlines)
cordist <- cor2dist(cor(Rogers))
library(smacof)
cordist <- smacof::cor2dist(cor(Rogers))
cordist <- psych::cor2dist(cor(Rogers))
cordist
fit <- mds(cordist, type = "interval")
fit
# ----------
par(mfrow = c(1, 1))
plot(fit)
dist(Rogers)
help(sim2diss)()
help(sim2diss)
