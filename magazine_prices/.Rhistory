geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, shape = id), size = 1,  data = DATA) +
scale_shape_manual(values=1:N) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
}
}
php <- pdata.frame(HousePricesUS)
pdim(php)
head(index(php))
php.eq <- log(price) ~ log(income)
# this produces errors...
plotplm(plm(php.eq, data = php), N = 3, seed = 4, lgth = .05)
plotplm(plm(php.eq, data = php), N = 6, seed = 4, lgth = .05)
plotplm(plm(php.eq, data = php), N = 10, seed = 4, lgth = .05)
plotplm(plm(php.eq, data = php), N = 20, seed = 4, lgth = .05)
php <- pdata.frame(HousePricesUS)
php <- pdata.frame(HousePricesUS)
# ----------
pdim(php)
index(php)
# ----------
php.eq <- log(price) ~ log(income)
php.eq <- log(price) ~ log(income)
php.eq <- log(price) ~ log(income)
# Estimate the Swamy and Arora model
php.swar <- plm(php.eq, data = php, model = "random", random.method = "swar")
php.swar2 <- plm(php.eq, data = php, model = "random", random.models = c("within", "between"), random.dfcor = c(2,2))
summary(php.swar)
ercomp(php.eq, HousePricesUS)
ercomp(php.eq, php)$theta
php.ml <- pglm(php.eq, data = php, family = gaussian)
summary(php.ml)
library(pglm)
# Estimate the Swamy and Arora model
php.ml <- pglm(php.eq, data = php, family = gaussian)
summary(php.ml)
summary(php.swar)
summary(php.ml)
summary(php.swar)
summary(php.ml)
php.walhus <- update(php.swar, random.method = "swar")
php.amemiya <- update(php.swar, random.method = "amemiya")
php.nerlove <- update(php.swar, random.method = "nerlove")
php.models <- list(swar = php.swar, walhus = php.walhus, amemiya = php.amemiya, nerlove = php.nerlove)
sapply(php.models, function(x) ercomp(x)$theta)
php <- pdata.frame(HousePricesUS)
# ----------
pdim(php)
index(php)
# ----------
php.w <- plm(php.eq, data = php, model = "within")
php.w <- plm(php.eq, data = php, model = "within")
php.p <- update(php.w, model = "pooling")
php.wd <- plm(php.eq, data = php, effect = "twoways")
pFtest(php.w, php.p)
pFtest(php.wd, php.p)
pFtest(php.wd, php.w)
plmtest(php.p)
plmtest(php.p, effect = "twoways")
plmtest(php.p, effect = "time")
php <- pdata.frame(HousePricesUS)
# ----------
pdim(php)
index(php)
php.eq <- log(price) ~ log(income)
php.w <- plm(php.eq, data = Rice, model = "within")
php.r <- update(php.w, model = "random")
phtest(php.w, php.r)
php.w <- plm(php.eq, data = php, model = "within")
php.r <- update(php.w, model = "random")
# ----------
# The test of the null hypothesis of no correlation between the regressors and the individual effects
# (the statistic is distributed as a X^2 with 1 degrees of freedom)
phtest(php.w, php.r)
php.w <- plm(php.eq, data = php, model = "within")
php.b <- update(php.w, model = "between")
cp <- intersect(names(coef(php.b)), names(coef(php.w)))
dcoef <- coef(php.w)[cp] - coef(php.b)[cp]
V <- vcov(php.w)[cp, cp] + vcov(php.b)[cp, cp]
# Chi-square test statistics
( test.stats <- as.numeric(t(dcoef) %*% solve(V) %*% dcoef) )
# p-values
1 - pchisq(test.stats, df = 3)
1 - pchisq(test.stats, df = 1)
piest(php.eq, data = HousePricesUS, index = "id")
piest(php.eq, data = HousePricesUS)
str(HousePricesUS)
piest(php.eq, data = HousePricesUS, index = "state")
piest(php.eq, data = php, index = "id")
aneweytest(php.eq, data = HousePricesUS, index = "id")
aneweytest(php.eq, data = HousePricesUS, index = "state")
piest(php.eq, data = HousePricesUS, index = "state")
pwtest(php.eq, php)
php.eq <- log(price) ~ log(income)
# ----------
bsy.LM <- matrix(ncol = 3, nrow = 2)
tests <- c("J", "RE", "AR")
dimnames(bsy.LM) <- list(c("LM test", "p-value"), tests)
for(i in tests){
mytest <- pbsytest(php.eq, data = php, test = i)
bsy.LM[1:2, i] <- c(mytest$statistic, mytest$p.value)
}
round(bsy.LM, 6)
pbltest(php.eq, php, alternative = "onesided")
swmod <- pvcm(php.eq, data = HousePricesUS, model = "random")
mgmod <- pmg(php.eq, data = HousePricesUS, model = "mg")
coefs <- cbind(coef(swmod), coef(mgmod))
dimnames(coefs)[[2]] <- c("Swamy", "MG")
coefs
summary(swmod)
summary(mgmod)
php.eq <- log(price) ~ log(income)
# ----------
# unrestricted model estimated by pvcm()
# This function allows to estimate two different models, depending on the parameter "model"
php.np <- pvcm(php.eq, data = HousePricesUS, model = "within")
php.pool <- plm(php.eq, data = HousePricesUS, model = "pooling")
php.within <- plm(php.eq, data = HousePricesUS, model = "within")
# ----------
summary(php.np)
names(php.np)
php.np$coefficients
summary(php.np)
lattice::histogram(~ php.np$coefficients[,1])
par(mfrow = c(1,2))
lattice::histogram(~ php.np$coefficients[,1])
lattice::histogram(~ php.np$coefficients[,2])
par(mfrow = c(1,2))
hist(php.np$coefficients[,1])
hist(php.np$coefficients[,2])
par(mfrow = c(1,2))
hist(php.np$coefficients[,1], xlab = "", ylab = "", col = gray(0.8))
hist(php.np$coefficients[,2], xlab = "", ylab = "", col = gray(0.8))
par(mfrow = c(1,2))
hist(php.np$coefficients[,1], xlab = "", ylab = "", col = gray(0.8), main = "")
hist(php.np$coefficients[,2], xlab = "", ylab = "", col = gray(0.8), main = "")
par(mfrow = c(1,2))
hist(php.np$coefficients[,1], xlab = "", ylab = "", col = gray(0.8), main = "Intercept")
hist(php.np$coefficients[,2], xlab = "", ylab = "", col = gray(0.8), main = "log(income)")
par(mfrow = c(1,2))
hist(php.np$coefficients[,1], xlab = "", ylab = "", col = gray(0.8), main = "Intercept", xlim = c(-2, 10), ylim = c(0, 20))
hist(php.np$coefficients[,2], xlab = "", ylab = "", col = gray(0.8), main = "log(income)", xlim = c(-2, 3), ylim = c(0, 20))
par(mfrow = c(1,2))
hist(php.np$coefficients[,1], xlab = "", ylab = "", col = gray(0.8), main = "Intercept", xlim = c(-2, 8), ylim = c(0, 20))
hist(php.np$coefficients[,2], xlab = "", ylab = "", col = gray(0.8), main = "log(income)", xlim = c(-2, 3), ylim = c(0, 20))
summary(php.np)
par(mfrow = c(1,2))
hist(php.np$coefficients[,1], xlab = "", ylab = "", col = gray(0.8), main = "Intercept", xlim = c(-2, 8), ylim = c(0, 20))
hist(php.np$coefficients[,2], xlab = "", ylab = "", col = gray(0.8), main = "log(income)", xlim = c(-2, 3), ylim = c(0, 20))
pooltest(php.pool, php.np)
pooltest(php.pool, php.np)
pooltest(php.within, php.np)
setwd("//media//kswada//MyFiles//R//hedonic")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("Hedonic", package = "plm")
str(Hedonic)
dim(Hedonic)
hlmmod <- lm(hfm, data = Hedonic)
coeftest(hlmmod, vcov = vcovHC)
car::coeftest(hlmmod, vcov = vcovHC)
lmtest::coeftest(hlmmod, vcov = vcovHC)
library(lmtest):  library(plm);
coeftest(hlmmod, vcov = vcovHC)
hlmmod <- lm(hfm, data = Hedonic)
coeftest(hlmmod, vcov = vcovHC)
library(lmtest):  library(plm);
hfm <- mv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + blacks + lstat
# ----------
# OLS with HC SE
hlmmod <- lm(hfm, data = Hedonic)
coeftest(hlmmod, vcov = vcovHC)
hplmmod <- plm(hfm, data = Hedonic, model = "pooling", index = "townid")
sign.tab <- cbind(coef(hlmmod), coeftest(hlmmod, vcov = vcovHC)[,4], coeftest(hplmmod, vcov = vcovHC)[,4])
dimnames(sign.tab)[[2]] <- c("Coefficient", "p-values, HC", "p-val., cluster")
round(sign.tab, 3)
coeftest(hplmmod, vcov = vcovHC)
sign.tab <- cbind(coef(hlmmod), coeftest(hlmmod, vcov = vcovHC)[,4], coeftest(hplmmod, vcov = vcovHC)[,4])
dimnames(sign.tab)[[2]] <- c("Coefficient", "p-values, HC", "p-val., cluster")
round(sign.tab, 3)
hplmmod <- plm(hfm, data = Hedonic, model = "pooling", index = "townid")
coeftest(hplmmod, vcov = vcovHC)
round(sign.tab, 3)
hedp <- pdata.frame(Hedonic, index = "townid")
pdim(hedp)
head(index(hedp))
hedp <- pdata.frame(Hedonic, group = "townid")
hedp <- pdata.frame(Hedonic, index = list(group = "townid"))
names(Hedonic)
help(Hedonic)
summary(hedp$mv)
summary(log(hedp$mv))
pdim(hedp)
index(hedp)
table(index(hedp)$townid)
baw <- FALSE
library(ggplot2)
plotplm <- function(x, N = 10, seed = 1, lgth = 0.1){
mydata <- model.frame(x)
onames <- names(mydata)
names(mydata) <- c("y", "x")
LGTH <- (max(mydata$x) - min(mydata$x)) ^ 2 +
(max(mydata$y) - min(mydata$y)) ^ 2
lgth <- lgth * sqrt(LGTH) / 2
seed <- set.seed(seed)
theids <- sample(unique(index(mydata)[[1]]), N)
small <- subset(mydata, index(mydata)[[1]] %in% theids)
small <- cbind(small, id = index(small)[[1]])
ymean <- with(small, tapply(y, id, mean)[as.character(theids)])
xmean <- with(small, tapply(x, id, mean)[as.character(theids)])
within <- update(x, model = "within")
alpha <- mean(mydata[[1]]) - coef(within) * mean(mydata[[2]])
beta <- as.numeric(coef(within))
random <- update(within, model = "random")
between <- update(within, model = "between")
ols <- update(within, model = "pooling")
FE <- fixef(within)[as.character(theids)]
DATA <- data.frame(id = names(FE), FE = as.numeric(FE), slope = beta,
xmean = xmean, ymean = ymean,
xmin = xmean - lgth / sqrt(1 + beta ^ 2),
xmax = xmean + lgth / sqrt(1 + beta ^ 2),
ymin = ymean - lgth * beta / sqrt(1 + beta ^ 2),
ymax = ymean + lgth * beta / sqrt(1 + beta ^ 2))
MODELS <- data.frame(models = c("ols", "random", "within", "between"),
intercept = c(coef(ols)[1], coef(random)[1], alpha, coef(between)[1]),
slope = c(coef(ols)[2], coef(random)[2], coef(within), coef(between)[2]))
if (! baw){
ggplot(data = small, aes(x = x, y = y, color = id)) + geom_point(size = 0.4) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax, color = id), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, color = id), size = 1, shape = 13, data = DATA) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
} else {
ggplot(data = small, aes(x = x, y = y)) + geom_point(size = 0.4, aes(shape = id)) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, shape = id), size = 1,  data = DATA) +
scale_shape_manual(values=1:N) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
}
}
hedp <- pdata.frame(Hedonic, index = "townid")
pdim(hedp)
head(index(hedp))
hfm <- mv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + blacks + lstat
plotplm(plm(php.eq, data = php), N = 20, seed = 4, lgth = .05)
plotplm(plm(hfm, data = hedp), N = 20, seed = 4, lgth = .05)
setwd("//media//kswada//MyFiles//R//foreigntrade")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("ForeignTrade", package = "pder")
dim(ForeginTrade)
str(ForeignTrade)
dim(ForeignTrade)
car::some(ForeignTrade)
FT <- pdata.frame(ForeignTrade)
pdim(FT)
head(index(FT))
summary(FT$gnp)
ercomp(imports ~ gnp, FT)
models <- c("within", "random", "pooling", "between")
sapply(models, function(x) coef(plm(imports ~ gnp, data = FT, model = x))["gnp"])
plotplm(plm(hfm, data = FT), N = 20, seed = 4, lgth = .05)
FT <- pdata.frame(ForeignTrade)
pdim(FT)
head(index(FT))
hfm <- imports ~ gnp
plotplm(plm(hfm, data = FT), N = 20, seed = 4, lgth = .05)
data("Turkish Banks", package = "pder")
str(TurkishBanks)
dim(TurkishBanks)
car::some(TurkishBanks)
data("TurkishBanks", package = "pder")
str(TurkishBanks)
dim(TurkishBanks)
car::some(TurkishBanks)
summary(TurkishBanks)
TurkishBanks <- na.omit(TurkishBanks)
summary(TurkishBanks)
summary(TurkishBanks)
TB <- pdata.frame(TurkishBanks)
pdim(TB)
head(index(TB))
table(index(TB)$id, useNA = "always")
table(index(TB)$year, useNA = "always")
table(index(TB))
summary(log(TB$output))
ercomp(log(cost) ~ log(output), FT)
ercomp(log(cost) ~ log(output), TB)
models <- c("within", "random", "pooling", "between")
sapply(models, function(x) coef(plm(log(cost) ~ log(output), data = FB, model = x))["gnp"])
sapply(models, function(x) coef(plm(log(cost) ~ log(output), data = FB, model = x))["log(output)"])
sapply(models, function(x) coef(plm(log(cost) ~ log(output), data = TB, model = x))["log(output)"])
plotplm(plm(log(cost) ~ log(output), data = TB), N = 20, seed = 4, lgth = .05)
plotplm(plm(log(cost) ~ log(output), data = TB), N = 10, seed = 4, lgth = .05)
str(TexsasElectr)
data("TexsasElectr", package = "pder")
str(TexsasElectr)
dim(TexsasElectr)
car::some(TexsasElectr)
# ------------------------------------------------------------------------------
# data:  Texas Electr
#  - This data were used by Kumbhakar (1996) and Horrace and Schmidt (1996) and concern the production cost of electric firms in Texas.
# ------------------------------------------------------------------------------
data("TexasElectr", package = "pder")
str(TexasElectr)
dim(TexasElectr)
car::some(TexasElectr)
TexasElectr$cost <- with(TexasElectr, explab + expfuel + expcap)
TE <- pdata.frame(TexasElectr)
pdim(TE)
head(index(TE))
table(index(TE)$id, useNA = "always")
table(index(TE)$year, useNA = "always")
table(index(TE))
summary(log(TE$output))
ercomp(log(cost) ~ log(output), TE)
sapply(models, function(x) coef(plm(log(cost) ~ log(output), data = TE, model = x))["log(output)"])
plotplm(plm(log(cost) ~ log(output), data = TE), N = 10, seed = 4, lgth = .05)
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Magazine Prices
#   - Cecchetti (1986) analyzes price changes, with an application to magazines.
#     His analysis is replicated (and criticized) by Willis (1986).
#     Price changes are costly for two reasons:
#        - changing prices induce administrative costs
#        - in a monopolistic competition context, increasing prices will lead to a loss of customers
#     For these two reasons, there is a difference between the optimal price of a good for a given period (p*(nt)) and the actual price (p(nt))
#     A price change will occur only if the gap between the two becomes greater than a given threshold. More formally, the price will change if:
#        - ln (p*8nt) / p(nt)) > hc(nt)    hc(nt):  minimum relative gap between the optimal and the actual price that would result in a price change.
#        - If the price changes, given the infrequency of price changes, the enterprise will set its new price above the optimal price, the relative diffence
#          being equal ot ho(nt)
#   - "length":  the length of period since tha last price change
# ------------------------------------------------------------------------------
data("MagazinePrices", package = "pder")
str(MagazinePrices)
dim(MagazinePrices)
car::some(MagazinePrices)
MagazinePrices %>% filter(id == 31)
MagazinePrices %>% filter(magazine == "Audio")
xtabs(~ year + magazine, data = MagazinePrices) %>% data.frame() %>% filter(Freq >= 2)
MagazinePrices %>% filter(magazine == "Science Digest")
xtabs(~ year + magazine, data = MagazinePrices) %>% data.frame() %>% filter(Freq >= 2)
MagazinePrices %>% filter(magazine == "Science Digest")
MagazinePrices %>% filter(id == 31)
MagazinePrices %>% filter(magazine == "Science Digest")
MagazinePrices2 <- MagazinePrices %>% filter(! (year == 45 & magazine == "Science Digest" & length == 7)) %>% filter(included == 1)
library(plm)
mp <- pdata.frame(MagazinePrices2, index = c("magazine", "year"), drop.index = FALSE)
# This is balanced panel
pdim(mp)
head(index(mp))
table(index(mp)$magazine, useNA = "always")
table(index(mp)$magazine, useNA = "always")
table(index(mp)$year, useNA = "always")
table(index(mp), useNA = "ifany")
summary(mp$price)
mod <- lm(price ~ magazine + year, data = MagazinePrices2)
summary(mod)
anova(mod)
names(anova(mod))
anova(mod)$'Sum sq'
anova(mod)$'Sum Sq'
anova(mod)$'Sum Sq' / sum(anova(mod)$'Sum Sq')
summary(mp$price)
round(anova(mod)$'Sum Sq' / sum(anova(mod)$'Sum Sq'), 3)
summary(mod)
anova(mod)
MagazinePrices2$year
mod <- lm(price ~ magazine + I(year - mean(year)), data = MagazinePrices2)
summary(mod)
anova(mod)
round(anova(mod)$'Sum Sq' / sum(anova(mod)$'Sum Sq'), 3)
mod <- lm(price ~ magazine + year, data = MagazinePrices2)
summary(mod)
anova(mod)
round(anova(mod)$'Sum Sq' / sum(anova(mod)$'Sum Sq'), 3)
help(summary.plm)
ercomp(price ~ length + cuminf + cumsales, mp)
help(ercomp)
models <- c("within", "random", "pooling", "between")
sapply(models, function(x) coef(plm(price ~ length + cuminf + cumsales, data = mp, model = x)))
# -->
# Note that coefficients are quite different ...
baw <- FALSE
library(ggplot2)
plotplm <- function(x, N = 10, seed = 1, lgth = 0.1){
mydata <- model.frame(x)
onames <- names(mydata)
names(mydata) <- c("y", "x")
LGTH <- (max(mydata$x) - min(mydata$x)) ^ 2 +
(max(mydata$y) - min(mydata$y)) ^ 2
lgth <- lgth * sqrt(LGTH) / 2
seed <- set.seed(seed)
theids <- sample(unique(index(mydata)[[1]]), N)
small <- subset(mydata, index(mydata)[[1]] %in% theids)
small <- cbind(small, id = index(small)[[1]])
ymean <- with(small, tapply(y, id, mean)[as.character(theids)])
xmean <- with(small, tapply(x, id, mean)[as.character(theids)])
within <- update(x, model = "within")
alpha <- mean(mydata[[1]]) - coef(within) * mean(mydata[[2]])
beta <- as.numeric(coef(within))
random <- update(within, model = "random")
between <- update(within, model = "between")
ols <- update(within, model = "pooling")
FE <- fixef(within)[as.character(theids)]
DATA <- data.frame(id = names(FE), FE = as.numeric(FE), slope = beta,
xmean = xmean, ymean = ymean,
xmin = xmean - lgth / sqrt(1 + beta ^ 2),
xmax = xmean + lgth / sqrt(1 + beta ^ 2),
ymin = ymean - lgth * beta / sqrt(1 + beta ^ 2),
ymax = ymean + lgth * beta / sqrt(1 + beta ^ 2))
MODELS <- data.frame(models = c("ols", "random", "within", "between"),
intercept = c(coef(ols)[1], coef(random)[1], alpha, coef(between)[1]),
slope = c(coef(ols)[2], coef(random)[2], coef(within), coef(between)[2]))
if (! baw){
ggplot(data = small, aes(x = x, y = y, color = id)) + geom_point(size = 0.4) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax, color = id), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, color = id), size = 1, shape = 13, data = DATA) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
} else {
ggplot(data = small, aes(x = x, y = y)) + geom_point(size = 0.4, aes(shape = id)) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, shape = id), size = 1,  data = DATA) +
scale_shape_manual(values=1:N) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
}
}
# ----------
plotplm(plm(price ~ cuminf, data = mp), N = 10, seed = 4, lgth = .05)
plotplm(plm(price ~ cumsales, data = mp), N = 10, seed = 4, lgth = .05)
plotplm(plm(price ~ length, data = mp), N = 10, seed = 4, lgth = .05)
logitS <- glm(change ~ length + cuminf + cumsales, data = MagazinePrices,
subset = included == 1, family = binomial(link = "logit"))
logitD <- glm(change ~ length + cuminf + cumsales + magazine, data = MagazinePrices,
subset = included == 1, family = binomial(link = "logit"))
summary(logitS)
summary(logitD)
library(textreg)
screenreg(list(logitS = logitS, logitD = logitD), digits = 3)
# Wald Test:  estimated coefficients (Wald test)
lmtest::coeftest(logitS)
lmtest::coeftest(logitD)
car::Anova(logitS)
car::Anova(logitD)
vcdExtra::LRstats(logitS, logitD)
help(LRstats)
n <- logitS$df.null + 1
(1 - exp((logitS$dev - logitS$null)/n)) / (1 - exp(-logitS$null/n))
# logitD is the twice
n <- logitD$df.null + 1
(1 - exp((logitD$dev - logitD$null)/n)) / (1 - exp(-logitD$null/n))
1 - logitS$deviance / logitS$null.deviance
library(ResourceSelection)
# g = 10:  number of bins to use to calcualte quantiles
( hl <- hoslem.test(logitS$y, fitted(logitS), g = 10) )
( hl <- hoslem.test(logitD$y, fitted(logitD), g = 10) )
cbind(hl$observed, hl$expected)
lmtest::coeftest(logitS)
car::Anova(logitS)
library(pglm)
m.pl <- pglm(change ~ length + cuminf + cumsales,
data = MagazinePrices2,
family = binomial(link = "logit"))
summary(m.pl)
# ----------
car::compareCoefs(logitS, logitD, m.pl)
library(survival)
logitC <- clogit(change ~ length + cuminf + cumsales + strata(id), data = MagazinePrices,
subset = included == 1)
summary(logitC)
# -->
# Note that the coefficient of the lenght of the period since the last price change has the expected positive sign
# and is significant only for the conditional logit model.
# ----------
data("MagazinePrices", package = "pder")
str(MagazinePrices)
dim(MagazinePrices)
car::some(MagazinePrices)
MagazinePrices %>% filter(id == 31)
MagazinePrices %>% filter(magazine == "Audio")
setwd("//media//kswada//MyFiles//R//magazine_prices")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
MagazinePrices %>% filter(id == 31)
MagazinePrices %>% filter(magazine == "Audio")
# ----------
xtabs(~ year + magazine, data = MagazinePrices) %>% data.frame() %>% filter(Freq >= 2)
MagazinePrices %>% filter(magazine == "Science Digest")
summary(MagazinePrices)
summary(MagazinePrices)
with(MagazinePrices, by(length, magazine, FUN = summary))
bwplot(length ~ magazine, data = MagazinePrices)
