vis.gam(b, color = "bw", view = c("gly", "bmi"), plot.type = "persp", theta = 60, phi = 30)
vis.gam(b, color = "bw", view = c("gly", "bmi"), plot.type = "persp", theta = 300, phi = 30)
plot(b)
setwd("//media//kswada//MyFiles//R//chicago")
packages <- c("dplyr", "lattice", "gamair")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data(chicago, package = "gamair")
str(chicago)
hist(chicago$death)
summary(chicago$death)
psych::describe(chicago$death)
psych::describe(chicago)
ap0 <- gam(death ~ s(time, bs = "cr", k = 200) + pm10median + so2median + o3median + tmpd, data = chicago, family = poisson)
gam.check(ap0)
par(mfrow = c(2, 1))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000)
par(mfrow = c(1, 1))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000)
par(mfrow = c(2, 1), mar = c(1,1,1,1))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000)
par(mfrow = c(2, 1), mar = c(0.5, 0.5, 0.5, 0.5))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000)
par(mfrow = c(2, 1), mar = c(2,2,2,2))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000)
par(mfrow = c(2, 1), mar = c(2,2,2,2))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000, pch = 1)
par(mfrow = c(2, 1), mar = c(2,2,2,2))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000, cex = 0.6)
par(mfrow = c(2, 1), mar = c(2,2,2,2))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000, cex = 0.9)
par(mfrow = c(2, 1), mar = c(2,2,2,2))
plot(ap0, n = 1000)
plot(ap0, residuals = TRUE, n = 1000, pch = 2)
chicago$death[3111:3125]
summary(ap0)
ap0 <- gam(death ~ s(time, bs = "cr", k = 200) + s(pm10median, bs = "cr") + s(so2median, bs = "cr") + s(o3median, bs = "cr") + s(tmpd, bs = "cr"), data = chicago, family = poisson)
ap0 <- gam(death ~ s(time, bs = "cr", k = 200) + pm10median + so2median + o3median + tmpd, data = chicago, family = poisson)
ap1 <- gam(death ~ s(time, bs = "cr", k = 200) + s(pm10median, bs = "cr") + s(so2median, bs = "cr") + s(o3median, bs = "cr") + s(tmpd, bs = "cr"), data = chicago, family = poisson)
gam.check(ap1)
plot(ap1)
par(mfrow = c(1, 1), mar = c(4,4,4,4))
plot(ap1)
summary(ap1)
matplot(chicago[3111:3125])
chicago[3111:3125]
matplot(chicago[3111:3125,])
matplot(chicago[3111:3125,], type = "l")
names(chicago)
ts.plot(chicago[3111:3125,], type = "l")
matplot(chicago[3111:3125,], type = "l")
chicago[3111:3125,]
var_interest <- c("death", "pm10median", "o3median", "so2median", "tmpd")
matplot(chicago[3111:3125, var_interest], type = "l")
chicago[3111:3125, var_interest]
matplot(scale(chicago[3111:3125, var_interest]), type = "l")
matplot(scale(chicago[3100:3140, var_interest]), type = "l")
chicago[3100:3140, var_interest]
lagard <- function(x, n.lag = 6){
n <- length(x)
X <- matrix(NA, n, n.lag)
for(i in 1:n.lag) X[i:n, i] <- x[1:n-i+1]
X
}
# ----------
dat <- list(lag = matrix(0:5, nrow(chicago), 6, byrow=TRUE),
death = chicago$death, time = chicago$time)
dat$pm10 <- lagard(chicago$pm10median)
dat$tmp <- lagard(chicago$tmpd)
dat$o3 <- lagard(chicago$o3median)
dat
str(dat)
dat$pm10 <- lagard(chicago$pm10median)
lagard <- function(x, n.lag = 6){
n <- length(x)
X <- matrix(NA, n, n.lag)
for(i in 1:n.lag) X[i:n, i] <- x[1:(n-i+1)]
X
}
# ----------
dat <- list(lag = matrix(0:5, nrow(chicago), 6, byrow=TRUE),
death = chicago$death, time = chicago$time)
dat$pm10 <- lagard(chicago$pm10median)
dat$tmp <- lagard(chicago$tmpd)
dat$o3 <- lagard(chicago$o3median)
head(dat)
f1 <- optim(rep(1, 5), si, method = "BFGS", hessian = TRUE, dat = dat)
si <- function(theta, dat, opt = TRUE){
# Return ML if opt == TRUE or fitted gam otherwise
# make identifiable by insisting that ||alpha|| = 1
alpha <- c(1, theta)  # alpha defined via unconstrained theta
kk <- sqrt(sum(alpha^2))
alpha <- alpha / kk  # ||alpha|| = 1
# ----------
# re-weight lagged covariates
o3 <- dat$os %*% alpha
tmp <- dat$tmp %*% alpha
pm10 <- dat$pm10 %*% alpha
# ----------
# bam with default REML smoothing parameter estimation in order to keep the computation time reasonable
# using the discrete = TRUE option to bam would speed up a little more again.
b <- ban(dat$death ~ s(dat$time, k = 200, bs = "cr") + s(pm10, bs = "cr") + te(o3, tmp, k = 8), family = poisson)  # fit model
cat(".")
# ----------
if(opt) return(b$gcv.ubre) else{
b$alpha <- alpha  # add alpha to model object
b$J <- outer(alpha, -theta / kk^2)  # get dalpha_i / dtheta_j
for(j in 1:length(theta)) b$J[j+1, j] <- b$J[j+1, j] + 1/kk
return(b)
}
}
# ----------
f1 <- optim(rep(1, 5), si, method = "BFGS", hessian = TRUE, dat = dat)
si <- function(theta, dat, opt = TRUE){
# Return ML if opt == TRUE or fitted gam otherwise
# make identifiable by insisting that ||alpha|| = 1
alpha <- c(1, theta)  # alpha defined via unconstrained theta
kk <- sqrt(sum(alpha^2))
alpha <- alpha / kk  # ||alpha|| = 1
# ----------
# re-weight lagged covariates
o3 <- dat$o3 %*% alpha
tmp <- dat$tmp %*% alpha
pm10 <- dat$pm10 %*% alpha
# ----------
# bam with default REML smoothing parameter estimation in order to keep the computation time reasonable
# using the discrete = TRUE option to bam would speed up a little more again.
b <- ban(dat$death ~ s(dat$time, k = 200, bs = "cr") + s(pm10, bs = "cr") + te(o3, tmp, k = 8), family = poisson)  # fit model
cat(".")
# ----------
if(opt) return(b$gcv.ubre) else{
b$alpha <- alpha  # add alpha to model object
b$J <- outer(alpha, -theta / kk^2)  # get dalpha_i / dtheta_j
for(j in 1:length(theta)) b$J[j+1, j] <- b$J[j+1, j] + 1/kk
return(b)
}
}
# ----------
f1 <- optim(rep(1, 5), si, method = "BFGS", hessian = TRUE, dat = dat)
# ----------
# Function to re-weight the lagged covariates and perform the GAM fitting call using the re-weighted data
# theta:  weighting parameter
si <- function(theta, dat, opt = TRUE){
# Return ML if opt == TRUE or fitted gam otherwise
# make identifiable by insisting that ||alpha|| = 1
alpha <- c(1, theta)  # alpha defined via unconstrained theta
kk <- sqrt(sum(alpha^2))
alpha <- alpha / kk  # ||alpha|| = 1
# ----------
# re-weight lagged covariates
o3 <- dat$o3 %*% alpha
tmp <- dat$tmp %*% alpha
pm10 <- dat$pm10 %*% alpha
# ----------
# bam with default REML smoothing parameter estimation in order to keep the computation time reasonable
# using the discrete = TRUE option to bam would speed up a little more again.
b <- bam(dat$death ~ s(dat$time, k = 200, bs = "cr") + s(pm10, bs = "cr") + te(o3, tmp, k = 8), family = poisson)  # fit model
cat(".")
# ----------
if(opt) return(b$gcv.ubre) else{
b$alpha <- alpha  # add alpha to model object
b$J <- outer(alpha, -theta / kk^2)  # get dalpha_i / dtheta_j
for(j in 1:length(theta)) b$J[j+1, j] <- b$J[j+1, j] + 1/kk
return(b)
}
}
# ----------
f1 <- optim(rep(1, 5), si, method = "BFGS", hessian = TRUE, dat = dat)
apsi <- si(f1$par, dat, opt = FALSE)
apsi$alpha
names(f1)
names(apsi)
apsi
fi
f1
f1$par
f1
help(optim)
gam.check(apsi)
plot(apsi)
apl <- bam(death ~ s(time, bs = "cr", k = 200) + te(pm10, lag, k = c(10, 5)) + te(o3, tmp, lag, k = c(8, 8, 5)), family = poisson, data = dat)
summary(apl)
names(dat)
gam.check(apl)
plot(apl)
plot(apl)
fitted(apl)
df_comp <- data.frame(tmp <- dat$tmp, fit_si = fitted(si), fit_dl = fitted(apl))
df_comp <- data.frame(tmp = dat$tmp, fit_si = fitted(si), fit_dl = fitted(apl))
tmp = dat$tmp
fit_si = fitted(si)
fit_dl = fitted(apl)
fitted(si)
df_comp <- data.frame(tmp = dat$tmp, fit_si = fitted(apsi), fit_dl = fitted(apl))
nrow(dat)
nrow(dat$tmp)
nrow(dat$tmp)
length(fitted(apsi))
length(fitted(apl))
apsi
names(apsi)
apsi$data
apsi$coefficients
apsi$data
names(apsi)
predict(apsi)
Xp <- predict(apsi, newdata = dat, type = "lpmatrix")
Xp <- predict(apsi, newdata = dat, type = "lpmatrix")
Xp <- predict(apl, newdata = dat, type = "lpmatrix")
nrow(Xp)
Xp <- predict(apsi, newdata = dat, type = "lpmatrix")
nrow(dat$tmp)
length(fitted(apsi))
length(fitted(apl))
AIC(apsi, apl)
# ----------
plot(apl)
vis.gam(apl, plot.type = "contour", view = c("PM10"))
# ----------
vis.gam(apl, plot.type = "contour", view = c("pm10"))
vis.gam(apl, plot.type = "contour", view = c("pm10", "lag"))
vis.gam(apl, plot.type = "contour", view = c("pm10", "lag"), color = "gray")
vis.gam(apl, plot.type = "contour", view = c("pm10", "lag"))
vis.gam(apl, plot.type = "contour", view = "pm10")
vis.gam(apsi, plot.type = "contour", view = c("o3", "tmp"))
apsi
vis.gam(apsi, plot.type = "contour", view = c("o3", "tmp"))
dat
names(dat)
vis.gam(apl, plot.type = "contour", view = c("pm10", "lag"))
vis.gam(apl, plot.type = "perspe", view = c("os3", "tmp"), theta = 240, phi = 30)
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 240, phi = 30)
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 240, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 120, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 60, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 120, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 180, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 240, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 300, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 60, phi = 30, se = 1, color = "gray")
graphics.off()
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 60, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp"), theta = 30, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "perspe", view = c("o3", "tmp", "lag"), theta = 30, phi = 30, se = 1, color = "gray")
help(vis.gam)
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, se = 1, color = "gray")
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag=1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag=c(1,2,3)))
par(mfrow=c(1,2))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 2))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 2), add = TRUE)
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 2), new = TRUE)
par(mfrow=c(1,2))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 2), new = TRUE)
help(vis.gam)
par(mfrow=c(1,2))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 5))
par(mfrow=c(2,3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 5))
par(mfrow=c(1,3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 5))
vis.gam(apl, plot.type = "contour", view = c("pm10", "lag"))
par(mfrow=c(1,3))
vis.gam(apl, plot.type = "contour", view = c("pm10", "f(pm10)"))
plot(apl)
help(plot.gam)
plot(apl, select = 2)
help(plot.gam)
plot(apl, all.terms = TRUE)
par(mfrow = c(1, 1))
plot(apl, all.terms = TRUE)
rm(list=ls())
data(mack, package = "gamair")
str(mack)
psych::describe(mack)
hist(mack$egg.count)
mack$log.net.area <- log(mack$net.area)
gmtw <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(salinity) + s(temp.surf) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
summary(gmtw)
gmtw
summary(gmtw)
gmnb <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(salinity) + s(temp.surf) + s(temp.20m) + offset(log.net.area),
data = mack, family = nb, method = "REML", select = TRUE)
summary(gmnb)
plot(gmtw)
gam.check(gmtw)
plot(mack$temp.20m, resid(gmtw))
mack$temp.20m
resid(gmtw)
plot(mack$temp.20m, resid(gmtw))
plot(gmtw)
par(mfrow = c(1, 2))
plot(fitted(gmtw), resid(gmtw))
plot(fitted(gmnb), resid(gmnb))
AIC(gmtw, gmnb)
plot(gmtw)
gm2 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm2 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML")
gm2
par(mfrow = c(1, 1))
plot(fitted(gm2), resid(gm2))
# drop salinity
gm1 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + s(salinity) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm1
gm1 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + s(temp.surf) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm1
gm2 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm2
plot(mack$temp.20m, resid(gm2))
par(mfrow = c(2,3))
plot(mack$temp.20m, resid(gm2))
plot(mack$lat, resid(gm2))
plot(mack$lon, resid(gm2))
plot(mack$temp.surf, resid(gm2))
plot(mack$c.dist, resid(gm2))
qqnorm(resid(gm2));  qqlines(resid(gm2))
qqnorm(resid(gm2));  qqline(resid(gm2))
graphics.off()
par(mfrow = c(2,3))
plot(mack$temp.20m, resid(gm2))
plot(mack$lat, resid(gm2))
plot(mack$lon, resid(gm2))
plot(mack$temp.surf, resid(gm2))
plot(mack$c.dist, resid(gm2))
qqnorm(resid(gm2));  qqline(resid(gm2))
plot(gm2)
par(mfrow = c(2, 2))
plot(gm2)
summary(gm2)
data(mackp, package = "gamair")
str(mackp)
mackp$log.net.area <- rep(0, nrow(mackp))
lon <- seq(-15, -1, 1/4)
lag <- seq(44, 58, 1/4)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 47), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
mackp$log.net.area <- rep(0, nrow(mackp))
lon <- seq(-15, -1, 1/4)
lag <- seq(44, 58, 1/4)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
lon <- seq(-15, -1, 1/4)
lat <- seq(44, 58, 1/4)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 47), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
lon <- seq(-15, -1, 1/4)
lat <- seq(44, 58, 1/4)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
par(mfrow = c(1,1))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 47), add = TRUE)
par(mfrow = c(1,1))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
set.seed(4)
br1 <- rmvn(n = 1000, coef(gm2), vcov(gm2))
br1
Xp <- predict(gm2, newdata = mackp, type = "lpmatrix")
mean.eggs1 <- colMeans(exp(Xp %*% t(br1)))
hist(mean.eggs1)
set.seed(4)
br2 <- rmvn(n = 1000, coef(gm2), vcov(gm2, unconditional = TRUE))
br2
mean.eggs2 <- colMeans(exp(Xp %*% t(br2)))
par(mfrow = c(2, 1))
hist(mean.eggs1)
hist(mean.eggs2)
par(mfrow = c(1, 2), mar = c(2,2,2,2))
hist(mean.eggs1)
hist(mean.eggs2)
par(mfrow = c(2, 1), mar = c(2,2,2,2))
hist(mean.eggs1)
hist(mean.eggs2)
summary(mean.eggs1)
summary(mean.eggs1)
summary(mean.eggs2)
set.seed(4)
br2 <- rmvn(n = 1000, coef(gm2), vcov(gm2, unconditional = TRUE))
br2
br2
mean.eggs2 <- colMeans(exp(Xp %*% t(br2)))
# ----------
par(mfrow = c(2, 1), mar = c(2,2,2,2))
hist(mean.eggs1)
hist(mean.eggs2)
# ----------
summary(mean.eggs1)
summary(mean.eggs2)
car::some(mackp)
car::some(mack)
car::some(mackp)
gm_sos <- gam(egg.count ~ s(lon, lat, bs = "sos", k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm_sos
summary(gm_sos)
gm_sos
AIC(gm2, gm_sos)
plot(gm2)
plot(gm2, select = 1)
plot(gm2, select = 2)
plot(gm2, select = 1)
par(mfrow = c(2, 1))
plot(gm2, select = 1)
plot(gm2, select = 2)
par(mfrow = c(1, 2))
plot(gm2, select = 1)
plot(gm2, select = 2)
par(mfrow = c(1, 2))
plot(gm2, select = 1)
plot(gm_sos, select = 1)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
zz_sos <- array(NA, 57*57)
zz_sos[mackp$area.index] <- predict(gm_sos, mackp)
par(mfrow = c(1,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
mackp$log.net.area <- rep(0, nrow(mackp))
lon <- seq(-15, -1, 1/4)
lat <- seq(44, 58, 1/4)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
# ----------
par(mfrow = c(1,1))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
data(coast, package = "gamair")
str(coast)
car::some(coast)
mackp$log.net.area <- rep(0, nrow(mackp))
lon <- seq(-15, -1, 1/4)
lat <- seq(44, 58, 1/4)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
# ----------
par(mfrow = c(1,1))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
par(mfrow = c(1,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
gamgr <- gam(egg.count ~ s(lon, lat, k = 100) + s(lon, lat, by = temp.20m) + s(lon, lat, by = I(b.depth^.5)) + offset(log.net.area),
data = mack, family = tw, method = "ML")
gamgr
summary(gamgr)
AIC(gm2, gm_sos, gamgr)
zz_gr <- array(NA, 57*57)
zz_gr[mackp$area.index] <- predict(gm_sos, mackp)
par(mfrow = c(1,3))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_gr, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_gr, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
zz_gr <- array(NA, 57*57)
zz_gr[mackp$area.index] <- predict(gamgr, mackp)
par(mfrow = c(1,3))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_gr, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_gr, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
