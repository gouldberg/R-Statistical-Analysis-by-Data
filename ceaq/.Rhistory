data("CEAQ", package = "MPsychoR")
str(CEAQ)
car::some(CEAQ)
# ----------
# set the lowest category to zero in order to make it eRm compaatible
itceaq <- CEAQ[,1:16] - 1
# ----------
library(psych)
polcor <- polychoric(itceaq)
polcor
polcor$rho
# ------------------------------------------------------------------------------
# Explanatory Factor Analaysis
# ------------------------------------------------------------------------------
resFA <- fa(polcor$rho, nfactors = 2, rotate = "none", fm = "ml")
summary(resFA)
summary(resFA)
print(ceFA$loadings)
print(resFA$loadings)
print(resFA$loadings, cutoff = 0.2)
round(resFA$communality, 2)
plot(prin, main = "CEAQ Loadings")
library(Gifi)
prin <- princals(itceaq)
prin
# ----------
# plot loadings
plot(prin, main = "CEAQ Loadings")
print(resFA$loadings, cutoff = 0.2)
print(resFA2$loadings, cutoff = 0.2)
resFA2 <- fa(polcor$rho, nfactors = 2, rotate = "varimax", fm = "ml")
# ------------------------------------------------------------------------------
# Check factor loadings
# ------------------------------------------------------------------------------
print(resFA$loadings, cutoff = 0.2)
print(resFA2$loadings, cutoff = 0.2)
round(resFA$communality, 4)
round(resFA2$communality, 4)
resFA3 <- fa(polcor$rho, nfactors = 2, rotate = "oblimin", fm = "ml")
resFA4 <- fa(polcor$rho, nfactors = 3, rotate = "oblimin", fm = "ml")
# ------------------------------------------------------------------------------
# Check factor loadings
# ------------------------------------------------------------------------------
print(resFA3$loadings, cutoff = 0.2)
print(resFA4$loadings, cutoff = 0.2)
round(resFA2$communality, 4)
round(resFA3$communality, 4)
round(resFA4$communality, 4)
itceaq2 <- itceaq[,-c(10,14,15)]
polcor2 <- polychoric(itceaq2)
# ----------
resFA_s <- fa(polcor2$rho, nfactors = 2, rotate = "none", fm = "ml")
summary(resFA_s)
print(resFA_s$loadings, cutoff = 0.2)
round(resFA_s$communality, 2)
# ----------
resFA_s2 <- fa(polcor2$rho, nfactors = 2, rotate = "varimax", fm = "ml")
print(resFA_s2$loadings, cutoff = 0.2)
resFA_s3 <- fa(polcor2$rho, nfactors = 2, rotate = "oblimin", fm = "ml")
resFA_s4 <- fa(polcor2$rho, nfactors = 3, rotate = "oblimin", fm = "ml")
print(resFA_s3$loadings, cutoff = 0.2)
print(resFA_s4$loadings, cutoff = 0.2)
print(resFA4$loadings, cutoff = 0.2)
library(eRm)
fitrsm <- RSM(itceaq)
fitrsm
# ----------
# The item parameters
head(coef(fitrsm))
ppar <- person.parameter(fitrsm)
ifit0 <- eRm::itemfit(ppar)
ifit0
# eliminate item 10 and refit
obj_item <- "ceaq10"
ind <- match(obj_item, colnames(itceaq))
itceaq1 <- itceaq[,-ind]
fitrsm1 <- RSM(itceaq1)
ppar1 <- person.parameter(fitrsm1)
ifit1 <- eRm::itemfit(ppar1)
ifit1
# ----------
# eliminate item 15 and refit again
obj_item <- "ceaq15"
ind <- match(obj_item, colnames(itceaq1))
itceaq2 <- itceaq1[,-ind]
fitrsm2 <- RSM(itceaq2)
ppar2 <- person.parameter(fitrsm2)
ifit2 <- eRm::itemfit(ppar2)
ifit2
# -->
# There is no item left which shows a suspicious combination of significant p-values and extreme infit/outfit values
# (but here ceaq4 is bad ...)
library(mice)
set.seed(222)
imp <- mice(CEAQ)
gradevec <- complete(imp)$grade
# ----------
# binarize
levels(gradevec) <- c("grade56", "grade56", "grade78", "grade78")
LRtest(fitrsm2, gradevec)
coef_df <- data.frame(coef(fitrsm2)) %>% mutate(item = row.names(.), c1_2 = as.factor(rep(c(1,2), 14)))
coef_df
# ----------
par(mfrow = c(1,1))
car::densityPlot(coef_df$coef.fitrsm2., g = coef_df$c1_2, legend = FALSE, lty = 1:2, col = c("black", "blue"))
coef_df <- data.frame(coef(fitrsm2)) %>% mutate(item = row.names(.), c1_2 = as.factor(rep(c(1,2), 14)))
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
coef_df <- data.frame(coef(fitrsm2)) %>% mutate(item = row.names(.), c1_2 = as.factor(rep(c(1,2), 14)))
coef_df
par(mfrow = c(1,1))
car::densityPlot(coef_df$coef.fitrsm2., g = coef_df$c1_2, legend = FALSE, lty = 1:2, col = c("black", "blue"))
graphics.off()
par(mfrow = c(2,2), mar = c(2,2,2,2))
plotICC(fitrsm2, ask = TRUE, col = c("black", "blue", "red"), lty = 1:3, ylab = "")
par(mfrow = c(1,1), ask = FALSE)
plot(prin)
# ----------
( th9 <- thpar$threshtable$'1'["ceaq9",] )
( th14 <- thpar$threshtable$'1'["ceaq14",] )
thpar <- thresholds(fitrsm2)
thpar
# ----------
# Note that the each range is same  --> Rating Scale Model
data.frame(thpar$threshtable$'1') %>% mutate(dif1 = Location - Threshold.1, dif2 = Threshold.2 - Location)
( th9 <- thpar$threshtable$'1'["ceaq9",] )
( th14 <- thpar$threshtable$'1'["ceaq14",] )
par(mfrow = c(2,1))
plotICC(fitrsm2, item.subset = "ceaq9", col = c("black", "blue", "red"), lty = 1:3, lwd = 2, ylab = "")
abline(v = c(th9[1], th9[2], th9[3]), lty = 2, col = "darkgray")
plotICC(fitrsm2, item.subset = "ceaq14", col = c("black", "blue", "red"), lty = 1:3, lwd = 2,ylab = "")
abline(v = c(th14[1], th14[2], th14[3]), lty = 2, col = "darkgray")
ppar2 <- person.parameter(fitrsm2)
ppar2
ppar2$theta.table$`Person Parameter`
# ----------
par(mfrow = c(1,1))
car::densityPlot(ppar2$theta.table$`Person Parameter`)
plotPImap(fitrsm2, latdim = "Empathy", main = "Person-Item Map CEAQ")
# -->
# solid dots:  the item location parameters
# hollow dots:  the thredhols parameters
# ----------
# for reference:  thresholds for ceaq9 and ceaq14
thpar <- thresholds(fitrsm2)
( th9 <- thpar$threshtable$'1'["ceaq9",] )
( th14 <- thpar$threshtable$'1'["ceaq14",] )
ppar2 <- person.parameter(fitrsm2)
ppar2
CEAQ$theta <- ppar2$theta.table$`Person Parameter`
summary(aov(theta ~ grade + gender, data = CEAQ))
# -->
# Significant differences in theta by gender
# ----------
par(mfrow = c(1,2), mar = c(2,2,2,2))
boxplot(theta ~ gender, data = CEAQ)
car::densityPlot(theta ~ gender, data = CEAQ, col = c("darkgray", "blue"), lty = c(2,1))
# -->
# theta distribution for men are higher.
# ----------
covars <- CEAQ %>% dplyr::select(age, grade, gender)
# ------------------------------------------------------------------------------
# Tree-Based DIF detection
#   - Based on multiple external metric or categorical variables, the algorithm tries to find splits for which the item parameters differ.
#     If no split is found, there is no DIF.
# ------------------------------------------------------------------------------
library(psychotree)
# Note that item responses, in order to be processed by the raschtree function, have to be provided as object of class "itemresp"
df <- data.frame(res = itemresp(itceaq), covars)
head(df)
mscale(df$res)
graphics.off()
plot(df$res)
set.seed(1)
rstr <- rstree(res ~ age + grade + gender,
data = df, vcov = "info", minsize = 10, nrep = 1e5)
# ----------
plot(rstr)
library("strucchange")
sctest(rstr, node = 4)
sctest(rstr, node = 6)
sctest(rstr, node = 8)
sctest(rstr, node = 9)
pred_node <- predict(rstr, ndwdata = df, type = c("node")) %>% as.data.frame()
pred_node$id <- row.names(pred_node)
colnames(pred_node) <- c("pred_node", "id")
item_info <- predict(rstr, ndwdata = df, type = c("item-information")) %>% as.data.frame()
item_info$id <- row.names(item_info)
test_info <- predict(rstr, ndwdata = df, type = c("test-information")) %>% as.data.frame()
test_info$id <- row.names(test_info)
colnames(test_info) <- c("test_info", "id")
tmp_dat <- data.frame(rownames(df))
colnames(tmp_dat)[1] <- "id"
tmp_dat <- tmp_dat %>% left_join(., pred_node, by = "id") %>% left_join(., item_info, by = "id") %>% left_join(., test_info, by = "id")
tmp_dat$pred_node <- as.factor(tmp_dat$pred_node)
str(tmp_dat)
# ------------------------------------------------------------------------------
# test information by node
boxplot(test_info ~ pred_node, data = tmp_dat, varwidth = TRUE,
xlab = "node", ylab = "test information", las = 1)
plot(rstr)
boxplot(test_info ~ pred_node, data = tmp_dat, varwidth = TRUE,
xlab = "node", ylab = "test information", las = 1)
library(tidyr)
tmp_dat2 <- gather(tmp_dat, key = "item", value = "iteminfo", -id, -pred_node) %>% dplyr::filter(item != "test_info")
tmp_dat2$item <- abbreviate(tmp_dat2$item)
head(tmp_dat2)
str(tmp_dat2)
# ----------
bwplot(iteminfo ~ pred_node | item, data = tmp_dat2)
bwplot(iteminfo ~ item | pred_node, data = tmp_dat2)
bwplot(iteminfo ~ item | pred_node, data = tmp_dat2 %>% dplyr::filter(pred_node == 8))
round(itempar(rstr), 2)
# -->
bwplot(iteminfo ~ pred_node | item, data = tmp_dat2)
plotPImap(fitrsm2, latdim = "Empathy", main = "Person-Item Map CEAQ")
