summary(bmod)
faraway::sumary(bmod)
par(mfrow=c(2,3))
plot(rawres ~ linpred, xlab = "linpred", ylab = "raw resid")
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(pearres ~ linpred, xlab = "linpred", ylab = "st. pearson resid")
plot(rawres ~ predprob, xlab = "predprob", ylab = "raw resid")
plot(devres ~ predprob, xlab = "predprob", ylab = "st. deviance resid")
plot(pearres ~ predprob, xlab = "predprob", ylab = "st. pearson resid")
par(mfrow=c(1,2))
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(bmod, 1)
devres <- rstandard(bmod, type = "deviance")
par(mfrow=c(1,2))
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(bmod, 1)
par(mfrow=c(2,3))
plot(rawres ~ linpred, xlab = "linpred", ylab = "raw resid")
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(pearres ~ linpred, xlab = "linpred", ylab = "st. pearson resid")
devres <- rstandard(bmod, type = "deviance")
pearres <- rstandard(bmod, type = "pearson")
par(mfrow=c(2,3))
plot(rawres ~ linpred, xlab = "linpred", ylab = "raw resid")
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(pearres ~ linpred, xlab = "linpred", ylab = "st. pearson resid")
head(predict(bmod))
head(predict(bmod, type = "response"))
linpred <- predict(bmod)
predprob <- predict(bmod, type = "response")
# raw residuals
( rawres <- residuals(bmod, type = "response") )
( rawres <- troutegg$ratio - predprob )
# standardized deviance residuals
devres <- rstandard(bmod, type = "deviance")
# standardized pearson residuals
pearres <- rstandard(bmod, type = "pearson")
# ----------
par(mfrow=c(2,3))
plot(rawres ~ linpred, xlab = "linpred", ylab = "raw resid")
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(pearres ~ linpred, xlab = "linpred", ylab = "st. pearson resid")
plot(rawres ~ predprob, xlab = "predprob", ylab = "raw resid")
plot(devres ~ predprob, xlab = "predprob", ylab = "st. deviance resid")
plot(pearres ~ predprob, xlab = "predprob", ylab = "st. pearson resid")
par(mfrow=c(1,2))
plot(devres ~ linpred, xlab = "linpred", ylab = "st. deviance resid")
plot(bmod, 1)
setwd("//media//kswada//MyFiles//R//nes96")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("nes96", package = "faraway")
str(nes96)
head(nes96)
levels(party)
party <- nes96$PID
levels(party)
levels(party) <- c("Democrat", "Democrat", "Independent", "Independent", "Independent", "Republican", "Republican")
inca <- c(1.5, 4, 6, 8, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 16, 18.5, 21, 23.5, 27.5, 32.5, 37.5, 42.5, 47.5, 55, 67.5, 82.5, 97.5, 115)
rnes96 <- data.frame(party, income, education = nes96$educ, age = nes96$age)
income <- inca[unclass(nes96$income)]
# For simplicity, we consider only the age, education level and income group of the respondents
rnes96 <- data.frame(party, income, education = nes96$educ, age = nes96$age)
car::some(rnes96)
summary(rnes96)
egp <- group_by(rnes96, education, party) %>% summarise(count = n()) %>% group_by(education) %>% mutate(etotal = sum(count), proportion = count / etotal)
ggplot(egp, aes(x = eduation, y = proportion, group = party, linetype = party)) + geom_line()
egp <- group_by(rnes96, education, party) %>% summarise(count = n()) %>% group_by(education) %>% mutate(etotal = sum(count), proportion = count / etotal)
group_by(rnes96, education, party)
group_by(rnes96, education, party) %>% summarise(count = n())
help("Deprecated")
help(LRstats)
egp <- group_by(rnes96, education, party) %>% dplyr::summarise(count = n()) %>% group_by(education) %>% mutate(etotal = sum(count), proportion = count / etotal)
ggplot(egp, aes(x = eduation, y = proportion, group = party, linetype = party)) + geom_line()
ggplot(egp, aes(x = education, y = proportion, group = party, linetype = party)) + geom_line()
igp <- mutate(rnes96, income gp = cut_number(income, 7)) %>% group_by(incomegp, party) %>% summarise(count = n()) %>% group_by(incomegp) %>%
mutate(etotal = sum(count), proportion = count / etotal)
ggplo(igp, aes(x = incomegp, y = proportion, group = party, linetype = party)) + geom_line()
igp <- mutate(rnes96, incomegp = cut_number(income, 7)) %>% group_by(incomegp, party) %>% summarise(count = n()) %>% group_by(incomegp) %>%
mutate(etotal = sum(count), proportion = count / etotal)
ggplo(igp, aes(x = incomegp, y = proportion, group = party, linetype = party)) + geom_line()
ggplot(igp, aes(x = incomegp, y = proportion, group = party, linetype = party)) + geom_line()
igp <- mutate(rnes96, incomegp = cut_number(income, 7)) %>% group_by(incomegp, party) %>% summarise(count = n()) %>% group_by(incomegp) %>%
mutate(etotal = sum(count), proportion = count / etotal)
ggplot(igp, aes(x = incomegp, y = proportion, group = party, linetype = party)) + geom_line()
#
igp <- mutate(rnes96, incomegp = cut_number(income, 7)) %>% group_by(incomegp, party) %>% dplyr::summarise(count = n()) %>% group_by(incomegp) %>%
mutate(etotal = sum(count), proportion = count / etotal)
ggplot(igp, aes(x = incomegp, y = proportion, group = party, linetype = party)) + geom_line()
library(nnet)
mmod <- multinom(party ~ age + education + income, rnes96)
summary(mmod)
mmodi <- step(mmod, direction = "both")
mmod, direction = "both")
summary(mmodi)
mmode$edf
mmode <- multinom(party = age + income, rnes96)
mmod$edf
mmod$edf - mmode$edf
mmode$edf
pchisq(deviance(mmode) - deviance(mmod), mmod$edf - mmode$edf, lower = F)
mmode <- multinom(party ~ age + income, rnes96)
mmode$edf
pchisq(deviance(mmode) - deviance(mmod), mmod$edf - mmode$edf, lower = FALSE)
inclevels <- 0:110
preds <- data.frame(income = inclevels, predict(mmodi, data.frame(income = inclevels, type = "probs")))
library(tidyr)
lpred <- gather(preds, party, probability, -income)
ggplot(lpred, aes(x = income, y = probability, group = party, linetype = party)) + geom_line()
lpred
preds
party
lpred <- gather(preds, party, probability, -income)
ggplot(lpred, aes(x = income, y = probability, group = party, linetype = party)) + geom_line()
xtabs(~ predict(mmodi) + rnes96$party)
summary(mmodi)
table(party)
library(nnet)
mmod <- multinom(party ~ age + education + income, rnes96)
summary(mmod)
rnes96 <- data.frame(party, income, education = nes96$educ, age = nes96$age)
car::some(rnes96)
library(nnet)
mmod <- multinom(party ~ age + education + income, rnes96)
summary(mmod)
mmodi <- step(mmod, direction = "both")
summary(mmodi)
mmode <- multinom(party ~ age + income, rnes96)
pchisq(deviance(mmode) - deviance(mmod), mmod$edf - mmode$edf, lower = FALSE)
car::some(rnes96)
predict(mmodi)
pchisq(deviance(mmode) - deviance(mmod), mmod$edf - mmode$edf, lower = FALSE)
inclevels
preds
preds <- data.frame(income = inclevels, predict(mmodi, data.frame(income = inclevels, type = "probs")))
preds
xtabs(~ predict(mmodi) + rnes96$party)
(284 + 0 + 159) / nrow(rnes96)
sumamry(mmodi)
summary(mmodi)
cc <- c(0, -1.17493, -0.95036)
exp(cc) / sum(exp(cc))
sum(exp(cc))
predict(mmodi, data.frame(income = 0), type = "probs")
( pp <- predict(mmodi, data.frame(income = c(0, 1)), type = "probs") )
log(pp[1,1] * pp[2,2] / (pp[1,2] * pp[2,1]))
log(pp[1,1] * pp[2,3] / (pp[1,3] * pp[2,1]))
preds <- data.frame(income = inclevels, predict(mmodi, data.frame(income = inclevels), type = "probs"))
# ----------
library(tidyr)
lpred <- gather(preds, party, probability, -income)
ggplot(lpred, aes(x = income, y = probability, group = party, linetype = party)) + geom_line()
library(MASS)
mlda0 <- lda(party ~ age + education + income, data = rnes96)
summary(mlda0)
mlda0
help(lda)
mlda <- update(mlda0, -education)
mlda <- update(mlda0, . ~ . - education)
mlda <- update(mlda0, . ~ . - education)
mlda0
mlda
preds <- predict(mlda)
head(preds$posterior)
xtabs(~ predict(mlda)$class + rnes96$party)
library(MASS)
pomod <- polr(party ~ age + education + income, rnes96)
pomod
pchisq(deviance(pomod) - deviance(mmodi), pomod$edf - mmodi$edf, lower = FALSE)
deviance(pomod)
deviance(mmodi)
deviance(mmod)
pomod$edf - mmod$edf
pchisq(deviance(pomod) - deviance(mmod), mmod$edf - pomod$edf, lower = FALSE)
pchisq(deviance(mmod) - deviance(pomod), mmod$edf - pomod$edf, lower = FALSE)
deviance(mmod)
deviance(pomod)
pchisq(deviance(mmod) - deviance(pomod), mmod$edf - pomod$edf, lower = FALSE)
c(deviance(mmod), mmod$edf)
c(deviance(pomod), pomod$edf)
pomodi <- step(pomod, direction = "both")
pomodi
c(deviance(pomod), pomod$edf)
c(deviance(pomodi), pomodi$edf)
pchisq(deviance(pomod) - deviance(pomodi), pomodi$edf - pomod$edf, lower = FALSE)
pchisq(deviance(pomodi) - deviance(pomod), pomod$edf - pomodi$edf, lower = FALSE)
pim <- with(rnes96, prop.table(table(income, party), 1))
( pim <- with(rnes96, prop.table(table(income, party), 1)) )
logit(pim[,1] - logit(pim[,1] + pim[,2]))
logit(pim[,1]) - logit(pim[,1] + pim[,2])
( tmp <- logit(pim[,1]) - logit(pim[,1] + pim[,2]) )
hist(tmp)
hist(tmp, include.lowest = TRUE)
hist(tmp, include.lowest = TRUE, add = density())
hist(tmp, include.lowest = TRUE)
plot(density(tmp), add = TRUE)
plot(density(tmp))
hist(tmp, include.lowest = TRUE)
plot(density(tmp))
summary(pomodi)
ilogit(0.0209)
ilogit(1.292) - ilogit(0.209)
inclevels <- seq(0, 100, by = 20)
predict(pomodi, data.frame(income = inclevels, row.names = inclevels), type = "probs")
( df <- predict(pomodi, data.frame(income = inclevels, row.names = inclevels), type = "probs") )
( tmp <- logit(df[,"Democrat"]) - logit(df[,"Democrat"] + df[,"Independent"]) )
logit(df[,"Democrat"] + df[,"Independent"]) - logit(df[,"Democrat"] + df[,"Independent"] + df[,"Republican"])
c(deviance(mmodi), mmodi$edf)
c(deviance(pomodi), pomodi$edf)
pchisq(deviance(pomodi) - deviance(mmodi), mmodi$edf - pomodi$edf, lower = FALSE)
summary(pomodi)
plot(x, dlogis(x), type = "l")
abline(v = c(0.209, 1.292))
abline(v = c(0.209, 1.292) - 50*0.013120, lty = 2)
abline(v = c(0.209, 1.292) - 100*0.013120, lty = 5)
x <- seq(-4, 4, by = 0.05)
plot(x, dlogis(x), type = "l")
abline(v = c(0.209, 1.292))
abline(v = c(0.209, 1.292) - 50*0.013120, lty = 2)
abline(v = c(0.209, 1.292) - 100*0.013120, lty = 5)
par(mfrow=c(1,1))
plot(x, dlogis(x), type = "l")
abline(v = c(0.209, 1.292))
abline(v = c(0.209, 1.292) - 50*0.013120, lty = 2)
abline(v = c(0.209, 1.292) - 100*0.013120, lty = 5)
opmod <- polr(party ~ income, method = "probit", rnes96)
opmod
c(deviance(mmod), mmod$edf)
c(deviance(pomod), pomod$edf)
c(deviance(opmod), opmod$edf)
opmodi <- polr(party ~ income, method = "probit", rnes96)
opmodi
# ----------
c(deviance(mmod), mmod$edf)
c(deviance(pomodi), pomodi$edf)
c(deviance(opmodi), opmodi$edf)
summary(pomodi)
summary(opmodi)
pred_pomodi <- predict(pomodi, data.frame(income = inclevels, row.names = inclevels), type = "probs")
pred_opmodi <- predict(opmodi, data.frame(income = inclevels, row.names = inclevels), type = "probs")
head(pred_pomodi)
head(pred_opmodi)
( dems <- pnorm(0.128 - inclevels * 0.008182) )
( demind <- pnorm(0.798 - inclevels * 0.008182) )
phmodi <- polr(party ~ income, method = "cloglog", rnes96)
phmodi
summary(pomodi)
summary(opmodi)
summary(phmodi)
c(deviance(mmod), mmod$edf)
c(deviance(pomodi), pomodi$edf)
c(deviance(opmodi), opmodi$edf)
c(deviance(phmodi), phmodi$edf)
inclevels <- seq(0, 100, by = 20)
pred_pomodi <- predict(pomodi, data.frame(income = inclevels, row.names = inclevels), type = "probs")
pred_opmodi <- predict(opmodi, data.frame(income = inclevels, row.names = inclevels), type = "probs")
pred_phmodi <- predict(phmodi, data.frame(income = inclevels, row.names = inclevels), type = "probs")
head(pred_pomodi)
head(pred_opmodi)
head(pred_phmodi)
library(VGAM)
nmodi <- vglm(party ~ income, family = cumulative(parallel = FALSE), rnes96)
nmodi
summary(nmodi)
pmodi <- vglm(party ~ income, family = cumulative(parallel = TRUE), rnes96)
c(deviance(pomodi), pomodi$edf)
c(deviance(pmodi), pmodi$edf)
c(deviance(nmodi), nmodi$edf)
names(pmodi)
summary(pmodi)
names(summary(pmodi))
attr(pmodi)
attributes(pmodi)
1 - pchisq(deviance(pmodi) - deviance(nmodi), 1)
summary(nmodi)
(1.148270 - 0.328868) / (0.010486 - 0.016186)
setwd("//media//kswada//MyFiles//R//wheat")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
wheat <- read.csv(file = "//media//kswada//MyFiles//references//AnalysisOfCategoricalDataWithR//Chapter3//wheat.csv")
str(wheat)
head(wheat)
car::some(wheat)
stars(x = wheat[order(wheat$type),-1], ncol = 20, key.loc = c(10, 0), draw.segments=TRUE, label = NULL, cex=0.75)
wheat2 <- data.frame(kernel = 1:nrow(wheat), wheat[,2:6],
class.new = ifelse(test = wheat$class == "hrw", yes = 0, no = 1))
head(wheat2)
# ----------
# Colors by condition:
wheat.colors <- ifelse(test = wheat$type=="Healthy", yes = "black", no = ifelse(test = wheat$type=="Sprout", yes = "red", no = "green"))
# Line type by condition:
wheat.lty<-ifelse(test = wheat$type=="Healthy", yes = "solid", no = ifelse(test = wheat$type=="Sprout", yes = "longdash", no = "dotdash"))
parcoord(x = wheat2, col = wheat.colors, lty = wheat.lty)  # Plot
legend(x = 6.15, y = 0.75, legend = c("Healthy", "Sprout", "Scab"), lty = c("solid", "longdash", "dotdash"), col=c("black", "red", "green"), cex=0.8, bty="n")
parcoord(x = wheat2, col = 1, lty = wheat.lty) #Plot
legend(x = 6.15, y = 0.75, legend = c("Healthy", "Sprout", "Scab"), lty = c("solid", "longdash", "dotdash"),
col=1, cex=0.8, bty="n")
wheat[wheat$weight == min(wheat2$weight),]  # 269
order(wheat$size)  # 268 has the 2nd largest size
wheat[269,]  # scab
wheat.colors<-ifelse(test = wheat$type=="Healthy", yes = "black",
no = ifelse(test = wheat$type=="Sprout", yes = "red", no = "green"))
wheat.colors[269]<-"purple"
line.width<-c(rep(x = 1, times = 268), 10, rep(x = 1, times = 6))
parcoord(x = wheat2, col = wheat.colors, lwd = line.width, lty = wheat.lty,
main = "Parallel coordinate plot for wheat data - highlight kernel 269")
legend(locator(1), legend=c("Healthy", "Sprout", "Scab", "Kernel 269"), lty = c("solid", "longdash", "dotted", "dotted"),
col=c("black", "red", "green", "purple"), cex=0.75, bty="n", lwd = c(1, 1, 1, 10))
# Sort by wheat type
wheat[wheat$weight == min(wheat2$weight),]  # 269
wheat[269,]  # scab
wheat.colors <- ifelse(test = wheat$type=="Healthy", yes = "black", no = ifelse(test = wheat$type=="Sprout", yes = "red", no = "green"))
wheat.colors[269] <- "purple"
line.width <- c(rep(x = 1, times = 268), 10, rep(x = 1, times = 6))
parcoord(x = wheat2, col = wheat.colors, lwd = line.width, lty = wheat.lty,  main = "Parallel coordinate plot for wheat data - highlight kernel 269")
legend(locator(1), legend=c("Healthy", "Sprout", "Scab", "Kernel 269"), lty = c("solid", "longdash", "dotted", "dotted"),
col=c("black", "red", "green", "purple"), cex=0.75, bty="n", lwd = c(1, 1, 1, 10))
wheat.colors2 <- ifelse(test = wheat$type=="Healthy", yes = 1, no = ifelse(test = wheat$type=="Sprout", yes = 2, no = 3))
wheat3 <- data.frame(wheat.colors2, wheat2)
parcoord(x = wheat3[order(wheat.colors2),], col = wheat.colors[order(wheat.colors2)],  main = "Parallel coordinate plot for wheat data - sort by Type")
levels(wheat$type)
library(nnet)
mod.fit <- multinom(formula = type ~ class + density + hardness + size + weight + moisture, data = wheat)
summary(mod.fit)
mmodi <- step(mod.fit, direction = "both")
summary(mmodi)
library(iplots)
ipcp(wheat3[order(wheat.colors2),])
install.packages("iplots",dep=T)
library(iplots)
save <- princomp(formula = ~ density + class.new + hardness + size + weight + moisture, data = wheat2,  cor = TRUE, scores = TRUE)
summary(save, loadings = TRUE, cutoff = 0.0)
par(pty = "s")
#bubble.color<-ifelse(wheat2$class.new == 1, yes = "black", no = "blue")  # Can also see separation of SRW and HRW kernels - use instead of wheat.colors
wheat.colors<-ifelse(test = wheat$type=="Healthy", yes = "black",
no = ifelse(test = wheat$type=="Sprout", yes = "red", no = "green"))
symbols(x = save$scores[,1], y = save$scores[,2], circles = save$scores[,3]-min(save$scores[,3]),
inches=0.25, xlab = "Principal component 1", ylab = "Principal component 2", fg = wheat.colors,
main = "Bubble plot for first three principal components \n Wheat data")  # Note that circles can not take on a negative value!
abline(h = 0, lty = 1, lwd = 2)
abline(v = 0, lty = 1, lwd = 2)
text(x = save$scores[,1], y = save$scores[,2], col = 2, cex = 0.5)  # Put kernel number on plot
legend(locator(1), legend=c("Healthy", "Sprout", "Scab"), pch = c(1,1,1),
col=c("black", "red", "green"), cex=1, bty="n")
summary(save, loadings = TRUE, cutoff = 0.0)
psych::describe(wheat)
psych::pairs.panels(wheat)
symbols(x = save$scores[,1], y = save$scores[,2], circles = save$scores[,3]-min(save$scores[,3]),
inches=0.25, xlab = "Principal component 1", ylab = "Principal component 2", fg = wheat.colors,
main = "Bubble plot for first three principal components \n Wheat data")  # Note that circles can not take on a negative value!
help(symbols)
par(pty = "s")
# bubble.color<-ifelse(wheat2$class.new == 1, yes = "black", no = "blue")  # Can also see separation of SRW and HRW kernels - use instead of wheat.colors
wheat.colors <- ifelse(test = wheat$type=="Healthy", yes = "black", no = ifelse(test = wheat$type=="Sprout", yes = "red", no = "green"))
symbols(x = save$scores[,1], y = save$scores[,2], circles = save$scores[,3]-min(save$scores[,3]),
inches=0.25, xlab = "Principal component 1", ylab = "Principal component 2", fg = wheat.colors,
main = "Bubble plot for first three principal components \n Wheat data")  # Note that circles can not take on a negative value!
abline(h = 0, lty = 1, lwd = 2)
abline(v = 0, lty = 1, lwd = 2)
text(x = save$scores[,1], y = save$scores[,2], col = 2, cex = 0.5)  # Put kernel number on plot
legend(locator(1), legend=c("Healthy", "Sprout", "Scab"), pch = c(1,1,1),
col=c("black", "red", "green"), cex=1, bty="n")
psych::pairs.panels(wheat)
class(mod.fit)
methods(class = multinom)
sqrt(vcov(mod.fit)[2,2])
sum.fit <- summary(mod.fit)
test.stat <- sum.fit$coefficients/sum.fit$standard.errors
p.value <- 2 * (1 - pnorm(q = abs(test.stat), mean = 0, sd = 1))
round(test.stat,2)
round(p.value,2)
vcov(mod.fit)
sqrt(vcov(mod.fit)[2,2])
vcov(mod.fit)[2,2]
sqrt(vcov(mod.fit)[2,2])
mod.fit.Ho <- multinom(formula = type ~ density + hardness + size + weight + moisture, data=wheat)
anova(mod.fit.Ho, mod.fit)
library(package = car)
Anova(mod.fit)
sqrt(vcov(mod.fit)[2,2])
# Wald tests for one beta - usually not done since it tests only one parameter
sum.fit <- summary(mod.fit)
test.stat <- sum.fit$coefficients/sum.fit$standard.errors
p.value <- 2 * (1 - pnorm(q = abs(test.stat), mean = 0, sd = 1))
round(test.stat,2)
round(p.value,2)
Anova(mod.fit)
qchisq(p = 0.95, df = 2)
G.sq.Ho<-mod.fit.Ho$deviance
G.sq.Ha<-mod.fit$deviance
G.sq<-G.sq.Ho-G.sq.Ha
p.value<-1-pchisq(q = G.sq, df = 2)
data.frame(G.sq.Ho, G.sq.Ha, G.sq, p.value, df = 2)
anova(mod.fit.Ho, mod.fit)
pi.hat <- predict(object = mod.fit, newdata = wheat, type = "probs")
head(pi.hat)
head(predict(object = mod.fit, newdata = wheat, type = "class"))
predict(object = mod.fit, newdata = wheat[1,], type = "class")  # default - this is helpful for discriminant analysis purposes
expl.var <- c(1,0, as.numeric(wheat[1,2:6]))
round(expl.var, 4)
expl.var <- c(1,0, as.numeric(wheat[1,2:6]))
round(expl.var, 4)
beta.hat <- coefficients(mod.fit)
scab.part <- exp(sum(beta.hat[1,] * expl.var))
sprout.part <- exp(sum(beta.hat[2,] * expl.var))
pi.hat.scab <- scab.part/(1 + scab.part + sprout.part)
pi.hat.sprout <- sprout.part/(1 + scab.part + sprout.part)
pi.hat.healthy <- 1/(1 + scab.part + sprout.part)
round(data.frame(pi.hat.healthy, pi.hat.scab, pi.hat.sprout), 4)
x1 <- 0
x2 <- wheat[1,2]
x3<-wheat[1,3]
x4 <- wheat[1,4]
x5 <- wheat[1,5]
x6<-wheat[1,6]
# Parts of character string
scab<-"exp(b20 + b21*x1 + b22*x2 + b23*x3 + b24*x4 + b25*x5 + b26*x6)"
sprout<-"exp(b30 + b31*x1 + b32*x2 + b33*x3 + b34*x4 + b35*x5 + b36*x6)"
g.healthy <- paste("1 / (1 + ", scab, "+", sprout, ")")
g.healthy
calc.healthy <- deltaMethod(object =  mod.fit, g = g.healthy,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
names(calc.healthy)
calc.healthy$Estimate  # pi^_Healthy
calc.healthy$SE        # sqrt(Var^(pi^_Healthy))
calc.healthy$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.healthy$SE
g.healthy <- paste("1 / (1 + ", scab, "+", sprout, ")")
g.healthy
calc.healthy <- deltaMethod(object =  mod.fit, g = g.healthy,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
names(calc.healthy)
calc.healthy$Estimate  # pi^_Healthy
calc.healthy$SE        # sqrt(Var^(pi^_Healthy))
alpha <- 0.05
calc.healthy$Estimate + qnorm(p = c(alpha/2, 1-alpha/2)) * calc.healthy$SE
g.scab <- paste(scab, "/ (1 + ", scab, "+", sprout, ")")
calc.scab <- deltaMethod(object =  mod.fit, g = g.scab,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
calc.scab
g.sprout <- paste(sprout, "/ (1 + ", scab, "+", sprout, ")")
calc.sprout <- deltaMethod(object =  mod.fit, g = g.sprout,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
calc.sprout$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.sprout$SE
mod.fit.nom.density<-multinom(formula = type ~ density, data = wheat)
summary(mod.fit.nom.density)
beta.hat<-coefficients(mod.fit.nom.density)
# Create plotting area first to make sure get the whole region with respect to x-axis
#  pdf(file = "c:\\figures\\Figure3.3color.pdf", width = 7, height = 6, colormodel = "cmyk")   # Create plot for book
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)), ylab = expression(hat(pi)), xlab = "Density",
xlim = c(min(wheat$density), max(wheat$density)), col = "black", lty = "solid", lwd = 2, n = 1000, type = "n",
panel.first = grid(col = "gray", lty = "dotted"))
# Plot each pi_j
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "black", lty = "solid", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Healthy"]), max(wheat$density[wheat$type == "Healthy"])))  # Healthy
curve(expr = exp(beta.hat[1,1] + beta.hat[1,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "green", lty = "dotdash", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Scab"]), max(wheat$density[wheat$type == "Scab"])))  # Scab
curve(expr = exp(beta.hat[2,1] + beta.hat[2,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "red", lty = "longdash", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Sprout"]), max(wheat$density[wheat$type == "Sprout"])))  # Sprout
legend(x = 1.4, y = 0.8, legend=c("Healthy", "Sprout", "Scab"), lty=c("solid","longdash","dotdash"),
col=c("black","red","green"), bty="n", lwd = c(2,2,2), seg.len = 4)
density.values<-seq(from = 0.8, to = 1.6, by = 0.1)
data.frame(density.values, round(predict(object = mod.fit.nom.density, newdata = data.frame(density = density.values), type = "probs"), 2))
# Black-and-white version of plot
# pdf(file = "c:\\figures\\Figure3.3BW.pdf", width = 7, height = 6, colormodel = "cmyk")   # Create plot for book
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)), ylab = expression(hat(pi)), xlab = "Density",
xlim = c(min(wheat$density), max(wheat$density)), col = "black", lty = "solid", lwd = 2, n = 1000, type = "n")
# Plot each pi_j
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "black", lty = "solid", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Healthy"]), max(wheat$density[wheat$type == "Healthy"])))  # Healthy
curve(expr = exp(beta.hat[1,1] + beta.hat[1,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "black", lty = "dotdash", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Scab"]), max(wheat$density[wheat$type == "Scab"])))  # Scab
curve(expr = exp(beta.hat[2,1] + beta.hat[2,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "black", lty = "longdash", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Sprout"]), max(wheat$density[wheat$type == "Sprout"])))  # Sprout
legend(x = 1.4, y = 0.8, legend=c("Healthy", "Sprout", "Scab"), lty=c("solid","longdash","dotdash"),
col=c("black","black","black"), bty="n", lwd = c(2,2,2), seg.len = 4)
# dev.off()  # Create plot for book
predict.data<-data.frame(class = "hrw", density = c(mean(wheat$density), mean(wheat$density)), hardness = mean(wheat$hardness),
size = mean(wheat$size), weight = mean(wheat$weight), moisture = mean(wheat$moisture))
pi.hat<-predict(object = mod.fit, newdata = predict.data, type = "probs")
head(pi.hat)
pi.hat[,1]
# Create plotting area first to make sure get the whole region with respect to x-axis
curve(expr = predict(object = mod.fit, newdata = data.frame(class = "hrw", density = x,
hardness = mean(wheat$hardness), size = mean(wheat$size), weight = mean(wheat$weight),
moisture = mean(wheat$moisture)), type = "probs")[,1], ylab = expression(hat(pi)), xlab = "Density",
xlim = c(min(wheat$density), max(wheat$density)), col = "black", lty = "solid", lwd = 2, n = 1000,
panel.first = grid(col = "gray", lty = "dotted"))
curve(expr = predict(object = mod.fit, newdata = data.frame(class = "hrw", density = x,
hardness = mean(wheat$hardness), size = mean(wheat$size), weight = mean(wheat$weight),
moisture = mean(wheat$moisture)), type = "probs")[,2], ylab = expression(hat(pi)), xlab = "Density",
xlim = c(min(wheat$density), max(wheat$density)), col = "green", lty = "dotdash", lwd = 2, n = 1000,
add = TRUE, panel.first = grid(col = "gray", lty = "dotted"))
curve(expr = predict(object = mod.fit, newdata = data.frame(class = "hrw", density = x,
hardness = mean(wheat$hardness), size = mean(wheat$size), weight = mean(wheat$weight),
moisture = mean(wheat$moisture)), type = "probs")[,3], ylab = expression(hat(pi)), xlab = "Density",
xlim = c(min(wheat$density), max(wheat$density)), col = "red", lty = "longdash", lwd = 2, n = 1000,
add = TRUE, panel.first = grid(col = "gray", lty = "dotted"))
legend(locator(1), legend=c("Healthy", "Sprout", "Scab"), lty=c("solid","longdash","dotdash"), col=c("black","red","green"), bty="n", lwd = c(2,2,2))
# ------------------------------------------------------------------------------
# Confidence intervals for pi_j
car::scatterplot(wheat)
help(scatterplot)
