plot(resid(l2))
graphics.off()
par(mrfow=c(2,1))
plot(resid(m3))
plot(resid(l1))
graphics.off()
par(mfrow=c(2,1))
plot(resid(m3))
plot(resid(l1))
graphics.off()
par(mfrow=c(2,1))
plot(resid(m3))
plot(resid(l1, level = 1))
graphics.off()
par(mfrow=c(2,1))
plot(resid(m3))
plot(resid(l2, level = 1))
graphics.off()
par(mfrow=c(3,1), mar = c(1,1,1,1))
plot(resid(m3))
plot(resid(l2, level = 1))
plot(resid(l2, level = 1, type = "p"))
graphics.off()
par(mfrow=c(3,1), mar = c(2,2,2,2))
plot(resid(m3))
plot(resid(l2, level = 1))
plot(resid(l2, level = 1, type = "p"))
res <- with(hodges, prind) - fitted(m3)
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
# gamlss() residuals are the normalized quantile residuals, which for a normal distribution with constant variance sigma^2 are the standardized residuals
plot(resid(m3))
# gamlss() models have anormal distribution with constant variancve var(mu-hat) = 1, so the Pearson's residuals are y - y-hat
res <- with(hodges, prind) - fitted(m3)
plot(res)
# lme() residuals
plot(resid(l2, level = 1))
# lme() residuals also have the option to produce the Pearson residuals = ( y - y-hat ) / sqrt(var(mu-hat))
plot(resid(l2, level = 1, type = "p"))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
# gamlss() residuals are the normalized quantile residuals, which for a normal distribution with constant variance sigma^2 are the standardized residuals
plot(resid(m3))
# gamlss() models have anormal distribution with constant variancve var(mu-hat) = 1, so the Pearson's residuals are y - y-hat
res <- with(hodges, prind) - fitted(m3)
plot(res)
# lme() residuals
plot(resid(l2, level = 1))
r1 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 1), sigma = l2$sigma))
plot(resid(l2, level = 1, type = "p") ~ r1)
graphics.off()
par(mfrow=c(1,2), mar = c(2,2,2,2))
r1 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 1), sigma = l2$sigma))
plot(resid(l2, level = 1, type = "p") ~ r1)
plot(resid(m3) ~ r1)
graphics.off()
par(mfrow=c(1,1))
r0 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 0), sigma = l2$sigma))
plot(resid(l2, level = 0, type = "p") ~ r0)
summary(getSmo(md))
summary(getSmo(m3))
plot(getSmo(m3))
ranef(getSmo(m3))
# fitted coefficients
coef(getSmo(m3))
intervals(getSmo(m3))
anova(getSmo(m3))
library(gamlss.mix)
library(gamlss.mx)
library(gamlss.mx)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "np", random = ~1 | state, data = hodges, trace = FALSE)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "np", random = ~1 | state, data = hodges, trace = FALSE)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "np", random = ~1 | state, data = hodges)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "np", random = ~1 | state, data = hodges)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "np", random = ~1 | state, data = hodges)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "np", random = ~1 | state, data = hodges)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gp", random = ~1 | state, data = hodges)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gp", random = ~1 | state, data = hodges)
mgq10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gq", random = ~1 | state, data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gq", random = ~1 | state, data = hodges)
mgq10
mgq20
mgq10
mgq20
getSmo(mgq10)
names(mgq10)
mgq10$parameters
mgq10$sigma.coefficients
help(gamlssNP)
getSigmab(getSmo(mgq10))
# Fitting a normal random intercept for mu with K = 10, 20, using Gaussian quadrature
mgq10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gq", random = ~1 | state, data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gq", random = ~1 | state, data = hodges)
# ----------
mgq10
mgq20
mgq10
getSigmab(getSmo(mgq10))
getSmo(mgq10)
mgq10$mu.coefficients
mgq10$mu.coefficients[2]
mgq20$mu.coefficients[2]
getSigmab(l1)
getSigmab(l1)
getSigmab(l2)
mgq10$mu.coefficients[2]
mgq20$mu.coefficients[2]
l1$sigma
l2$sigma
fitted(mgq10, "sigma")
mgq10$sigma.coefficients
mgq20$sigma.coefficients
names(mgq10)
summary(mgq10)
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
# gamlss() residuals are the normalized quantile residuals, which for a normal distribution with constant variance sigma^2 are the standardized residuals
plot(resid(mgq10))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mgq10))
plot(resid(mgq20))
# lme() residuals
plot(resid(l2, level = 1))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mgq10))
plot(resid(mgq20))
# lme() residuals
plot(resid(l2, level = 1))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mgq10))
plot(resid(mgq20))
plot(resid(l2, level = 1, type = "p"))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(mgq20) ~ unclass(state), data = hodges, pch = 5, col = "blue")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(mgq20) ~ unclass(state), data = hodges, pch = 5, col = "blue")
points(fitted(mgq10, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "red")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
fitted(mgq10)
points(fitted(mgq10, level=2) ~ unclass(state), data = hodges, pch = 5, col = "red")
mgq10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gq", random = ~1 | state, data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gq", random = ~1 | state, data = hodges)
mgq10 <- gamlssNP(prind ~ 1, K = 10, random = ~1 | state, mixture = "gq", data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges)
mgq10
mgq20
predict(mgq10)
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(predict(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
predict(mgq10)
points(predict(mgq10) ~ state, data = hodges, pch = 5, col = "red")
fitted(mgq10)
nrow(hodges)
fitted(mgq10, level = 2)
help(gamlssNP)
mgq10$ebp
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "blue")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "blue")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
lines(fitted(m0), lty = 2, col = "gray")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l2, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
lines(fitted(m0), lty = 2, col = "gray")
mNO <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges, family = NO)
mLOGNO <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges, family = LOGNO)
mBCT <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges, family = BCT)
mNO
mgq20
mNO
mgq20
mLOGNO
mBCT
GAIC(mNO, mLOGNO, mBCT, k = log(length(hodges)))
mgq20$mu.coefficients[2]
mNO$mu.coefficients[2]
mLOGNO$mu.coefficients
mLOGNO$mu.coefficients[2]
mBCT$mu.coefficients[2]
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mNO))
plot(resid(mLOGNO))
plot(resid(mBCT))
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mNO$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mLOGNO$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
lines(fitted(m0), lty = 2, col = "gray")
library(gamlss.mx)
# We consider a Box-Cox t (BCT) distribution model, which allows for both skewness and kurtosis in the conditional distribution of Y
# and allows for differences between states, in the location, scale and shape of the conditional distribution of Y,
# by including a random effect term in each of the models for the parameters mu, sigma, nu and tau.
m0 <- gamlss(prind ~ random(state), data = hodges, family = BCT, trace = FALSE)
m1 <- gamlss(prind ~ random(state), sigma.fo = ~random(state), data = hodges, family = BCT, trace = FALSE)
m2 <- gamlss(prind ~ random(state), sigma.fo = ~random(state), nu.fo = ~random(state), data = hodges, family = BCT, trace = FALSE)
m3 <- gamlss(prind ~ random(state), sigma.fo = ~random(state), nu.fo = ~random(state), tau.fo = ~random(state), data = hodges, family = BCT, trace = FALSE)
# ----------
AIC(mNO, mLOGNO, mBCT, m0, m1, m2, m3)
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
points(m0$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "blue")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "darkgreen")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "green")
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//canadian_weather")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  canadian weather
#   - Daily temperature and precipitation at 35 different locations in Canada averaged over 1960 to 1994
# ------------------------------------------------------------------------------
data("CanadianWeather", package = "fda")
str(CanadianWeather)
data(climhyd, package = "astsa")
str(climhyd)
head(climhyd)
inf <- log(climhyd$Inflow)
prec <- sqrt(climhyd$Precip)
# ------------------------------------------------------------------------------
# Spectral analysis:  Coherence between all the weather variables and transformed inflow
#   - Coherence:  correlation indexed by frequency
#   - Squared coherence:
#        An important example of the application of the cross-spectrum is to the problem of predicting an output series y(t) from
#        some input series x(t) through a linear filter relation such as the three-point moving average.
#        A measure of the strength of such a relation is the squared coherence.
# ------------------------------------------------------------------------------
dat <- cbind(climhyd, inf, prec)
# Display all the squared coherencies suppressing the confidence intervals
sr <- mvspec(dat, spans = c(7, 7), taper = 0.5, plot.type = "coh", ci = -1)
# -->
# high coherence between sqrt precipitation and logged inflow series
# suggests a lagged regression relation between the two series.
# ----------
# We used L = 19
L <- 19
( m <- (L - 1)/2 )
sr2 <- mvspec(dat, kernel("daniell", m), plot.type = "coh", ci = -1)
setwd("//media//kswada//MyFiles//R//climhyd")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  climhyd
# ------------------------------------------------------------------------------
data(climhyd, package = "astsa")
str(climhyd)
head(climhyd)
inf <- log(climhyd$Inflow)
prec <- sqrt(climhyd$Precip)
# ------------------------------------------------------------------------------
# Spectral analysis:  Coherence between all the weather variables and transformed inflow
#   - Coherence:  correlation indexed by frequency
#   - Squared coherence:
#        An important example of the application of the cross-spectrum is to the problem of predicting an output series y(t) from
#        some input series x(t) through a linear filter relation such as the three-point moving average.
#        A measure of the strength of such a relation is the squared coherence.
# ------------------------------------------------------------------------------
dat <- cbind(climhyd, inf, prec)
# Display all the squared coherencies suppressing the confidence intervals
sr <- mvspec(dat, spans = c(7, 7), taper = 0.5, plot.type = "coh", ci = -1)
# -->
dat <- cbind(climhyd, inf, prec)
# Display all the squared coherencies suppressing the confidence intervals
sr <- mvspec(dat, spans = c(7, 7), taper = 0.5, plot.type = "coh", ci = -1)
# -->
# high coherence between sqrt precipitation and logged inflow series
# suggests a lagged regression relation between the two series.
# ----------
# We used L = 19
L <- 19
( m <- (L - 1)/2 )
sr2 <- mvspec(dat, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 19
( m <- (L - 1)/2 )
sr2 <- mvspec(dat, kernel("daniell", m), plot.type = "coh", ci = -1)
sr$df
install.packages("timsac", dep = T)
library(timsac)
data(Airpollution)
perars(Airpollution, ni = 6, lag = 2, ksw = 1)
plot(Airpollution)
tmp <- perars(Airpollution, ni = 6, lag = 2, ksw = 1)
tmp
plot(tmp)
sgnl <- rnorm(1003)
x <- matrix(0, nrow = 1000, ncol = 2)
x[, 1] <- sgnl[4:1003]
# x[i,2] = 0.9*x[i-3,1] + 0.2*N(0,1)
x[, 2] <- 0.9*sgnl[1:1000] + 0.2*rnorm(1000)
mulspe(x, lag = 100, window = "Hanning", plot.scale = TRUE)
data(Canadianlynx)
plot(Canadianlynx)
z <- unimar(Canadianlynx, max.order = 20)
z$arcoef
z
plot(daic)
plot(z$daic)
acf2(Canadianlynx)
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  econ5
# ------------------------------------------------------------------------------
data(econ5, package = "astsa")
str(econ5)
car::some(econ5)
# ------------------------------------------------------------------------------
# Data transformation
# ------------------------------------------------------------------------------
# First logging and then removing the linear trend
U <- resid(lm(log(econ5$unemp) ~ time(log(econ5$unemp))))
G <- resid(lm(log(econ5$gnp) ~ time(log(econ5$gnp))))
C <- resid(lm(log(econ5$consum) ~ time(log(econ5$consum))))
x <- cbind(G, C, U)
MTSplot(x)
# ----------
Ud <- diff(econ5$unemp)
Gd <- diff(econ5$govinv)
Cd <- diff(econ5$consum)
dat <- cbind(Gd, Cd, Ud)
ar <- array(0, dim = c(3,3,2))
ar[, , 1] <- matrix(c(0.4, 0, 0.3,
0.2, -0.1, -0.5,
0.3, 0.1, 0), nrow = 3, ncol = 3, byrow = TRUE)
ar[, , 2] <- matrix(c(0, -0.3, 0.5,
0.7, -0.4, 1,
0, -0.5, 0.3), nrow = 3, ncol = 3, byrow = TRUE)
x <- matrix(rnorm(200*3), nrow = 200, ncol = 3)
y <- mfilter(x, ar, "recursive")
y
tmp <- sglfre(y, lag = 20, invar = 1, outvar = 2)
tmp
plot(tmp$gain)
nrow(y)
nrow(tmp$coh)
plot(tmp$coh)
plot(tmp$coh, type = "l")
MTSplot(tmp)
library(MTS)
MTSplot(tmp)
MTSplot(matrix(tmp))
tmp
MTSplot(matrix(y))
tmp
head(y)
plot(x, type = "l")
MTSplot(x)
MTSplot(y)
tmp$phase
MTSplot(y)
setwd("//media//kswada//MyFiles//R//powerplant")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS", "timsac")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data(PowerPlant, package = "timsac")
data(PowerPlant)
data(Powerplant, package = "timsac")
str(Powerplant)
head(Powerplant)
help(Powerplant)
dim(Powerplant)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTS::MTSplot(Powerplant)
par(cex = 2, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTS::MTSplot(Powerplant)
apply(Powerplant, 2, FUN = ndiffs)
MTS::MTSplot(diff(Powerplant))
MTS::MTSplot(Powerplant)
sr <- mvspec(Powerplant, spans = c(7, 7), taper = 0.5, plot.type = "coh", ci = -1)
colnames(Powerplant) <- c("command", "temperature", "fuel")
sr <- mvspec(Powerplant, spans = c(7, 7), taper = 0.5, plot.type = "coh", ci = -1)
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 19
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
sr$df
nrow(Powerplant)
nextn(500)
L <- 3
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 7
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 9
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 13
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 11
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 9
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 7
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
L <- 9
( m <- (L - 1)/2 )
sr2 <- mvspec(Powerplant, kernel("daniell", m), plot.type = "coh", ci = -1)
sr <- mvspec(Powerplant, spans = c(7, 7), taper = 0.5, plot.type = "coh", ci = -1)
sr <- mvspec(Powerplant, spans = c(7, 7), taper = 0.25, plot.type = "coh", ci = -1)
graphics.off()
MTS::MTSplot(Powerplant)
apply(Powerplant, 2, FUN = ndiffs)
MTS::MTSplot(diff(Powerplant))
acf(Powerplant)
acf(diff(Powerplant))
acf(diff(Powerplant[,c(2,3,1)]))
acf(diff(Powerplant[,c(2,3,1)]))
acf(Powerplant[,c(2,3,1)])
acf(log(Powerplant[,c(2,3,1)]))
acf(Powerplant[,c(2,3,1)])
astsa::lag2.plot(Powerplant[,c(2,3,1)], max.lag = 24)
astsa::lag2.plot(PowerPlant$command, Powerplant$fuel, max.lag = 24)
astsa::lag2.plot(Powerplant$command, Powerplant$fuel, max.lag = 24)
Powerplant$command
Powerplant$fuel
astsa::lag2.plot(Powerplant[,"command"], Powerplant[,"fuel"], max.lag = 24)
acf(Powerplant[,c(2,3,1)])
acf(diffPowerplant[,c(2,3,1)]))
acf(diff(Powerplant[,c(2,3,1)]))
out.15 <- stoch.reg(Powerplant, cols.full = c(1,5), cols.red = 5, alpha, L, M, plot.which = "F.stat")
mod_lag <- astsa::LagReg(input = Powerplant[,"command"], output = Powerplant[,"fuel"], L = L, M = 100, threshold = 0.01)
L <- 25
mod_lag <- astsa::LagReg(input = Powerplant[,"command"], output = Powerplant[,"fuel"], L = L, M = 100, threshold = 0.01)
MTSplot(Powerplant)
mod_lag <- astsa::LagReg(input = Powerplant[,"command"], output = Powerplant[,"Temperature"], L = L, M = 100, threshold = 0.01)
mod_lag <- astsa::LagReg(input = Powerplant[,"command"], output = Powerplant[,"temperature"], L = L, M = 100, threshold = 0.01)
mod_lag <- astsa::LagReg(input = diff(Powerplant[,"command"]), output = diff(Powerplant[,"temperature"]), L = L, M = 100, threshold = 0.01)
z <- mulbar(Powerplant, max.order = 10)
z$pacoef.for
z$pacoef.back
z$pacoef.for
z$pacoef.back
z$pacoef.back
z$pacoef.back
names(z)
z$v.bay
plot(z)
z <- mulbar(Powerplant, max.order = 10, plot = TRUE)
z$mean
z$v
z$v.bay
z <- decomp(Powerplant, trade = TRUE)
z <- decomp(Powerplant[,"temperature"], trade = TRUE)
z <- decomp(Powerplant[,"command"], trade = TRUE)
fpec(Powerplant, max.order = 10)
tmp <- fpec(Powerplant, max.order = 10)
names(tmp)
tmp$fpec
