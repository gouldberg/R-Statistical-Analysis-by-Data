xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
# ------------------------------------------------------------------------------
# Model validation:  sample semi-variogram
mydata <- data.frame(res, DF$Xkm, DF$Ykm)
coordinates(mydata) <- c("DF.Xkm","DF.Ykm")
Vari <- variogram(res ~ 1, mydata)
plot(Vari)
mod_obj <- M3
# ------------------------------------------------------------------------------
# Model validation:  independence (violation by spatial dependence)
# ------------------------------------------------------------------------------
# Check a clustering of points of a particular size.
# Bubble plot of the residuals:  Grey and black circles correspond to negative and positive residuals, respectively.
res <- resid(mod_obj)
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[res > 0]  <- gray(0.5)
MyCol[res <= 0] <- gray(0.2)
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
mod_obj <- M5
# ------------------------------------------------------------------------------
# Model validation:  independence (violation by spatial dependence)
# ------------------------------------------------------------------------------
# Check a clustering of points of a particular size.
# Bubble plot of the residuals:  Grey and black circles correspond to negative and positive residuals, respectively.
res <- resid(mod_obj)
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[res > 0]  <- gray(0.5)
MyCol[res <= 0] <- gray(0.2)
xyplot(Ykm ~ Xkm, data = DF,
main = list(label = "Residuals", cex = 1.5),
xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
mod_obj <- M3
# ------------------------------------------------------------------------------
# Model validation:  independence (violation by spatial dependence)
# ------------------------------------------------------------------------------
# Check a clustering of points of a particular size.
# Bubble plot of the residuals:  Grey and black circles correspond to negative and positive residuals, respectively.
res <- resid(mod_obj)
MyCex <- abs(res) / max(abs(res))
res
resid(mod_obj)
mod_obj <- M3$gam
# ------------------------------------------------------------------------------
# Model validation:  independence (violation by spatial dependence)
# ------------------------------------------------------------------------------
# Check a clustering of points of a particular size.
# Bubble plot of the residuals:  Grey and black circles correspond to negative and positive residuals, respectively.
res <- resid(mod_obj)
res
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[res > 0]  <- gray(0.5)
MyCol[res <= 0] <- gray(0.2)
xyplot(Ykm ~ Xkm, data = DF,
main = list(label = "Residuals", cex = 1.5),
xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
mod_obj <- M3$gam
res <- resid(mod_obj)
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[res > 0]  <- gray(0.5)
MyCol[res <= 0] <- gray(0.2)
xyplot(Ykm ~ Xkm, data = DF,
main = list(label = "Residuals", cex = 1.5),
xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
library(sp)
library(gstat)
mydata <- data.frame(res, DF$Xkm, DF$Ykm)
coordinates(mydata) <- c("DF.Xkm","DF.Ykm")
Vari <- variogram(res ~ 1, mydata)
plot(Vari)
# -->
# we first examine the short-range correlation (small distances).
# There seems to be an increase in the semi-variogram values at sites separated by more than 150 km.
# However, this pattern may disappear as we include more covariates and interactions.
mod_obj <- M3$gam
par(mfrow = c(1, 1))
plot(resid(mod_obj) ~ fitted(mod_obj), xlab = "Fitted values", ylab = "Residuals")
lines(lowess(fitted(mod_obj), resid(mod_obj)), col = "blue", lty = 2)
abline(h = 0, v = 0, lty = 2, col = "darkgray")
par(mfrow = c(1, 2), mar = c(5, 5, 3, 3))
hist(resid(mod_obj), breaks = 25, main = "", xlab = "Residuals")
car::densityPlot(resid(mod_obj))
mod_obj <- M3$gam
n  <- length(DF$Dens)
ID <- 1:n
MD <- data.frame(MeanDepth = seq(from = min(DF$MeanDepth), to = max(DF$MeanDepth), length = 100))
P <- predict(mod_obj, newdata = MD, type = "terms")
Dif <- vector(length = n)
for (i in 1:n) {
print(i)
mod_obj.i <- mgcv::gam(Dens ~ s(MeanDepth), data = DF, subset = ID[-i])
P.i <- predict(mod_obj.i, newdata = MD, type = "terms")
Dif[i] <- sum((P[1:100] - P.i[1:100])^2)
}
par(mfrow=c(1,1))
plot(Dif, type = "h",  xlab = "Observation number",  ylab = "Change in smoother")
P
par(mar = c(5,6,3,3))
plot(x = DF$MeanDepth, y = DF$Dens, cex = 3*(Dif/max(Dif))^(1/4), pch = 16, cex.lab = 1.5, col = "darkgray")
idx <- c(1,2,3,6)
sapply(1:length(idx), function(x) points(DF$MeanDepth[idx[x]], DF$Dens[idx[x]], col = "blue", pch=16))
par(mfrow = c(1, 2), mar = c(5, 5, 3, 3))
boxplot(resid(mod_obj) ~ factor(DF$Period), xlab = "Period", ylab = "Residuals")
abline(h = 0)
car::densityPlot(resid(mod_obj), g = factor(DF$Period), xlab = "Period", ylab = "Residuals")
M1 <- glm(TotAbund ~ MeanDepth, data = DF, family = poisson(link = "log"))
summary(M1)
M2 <- glm(TotAbund ~ MeanDepth * fPeriod,  data = DF,  family = poisson)
summary(M2)
DF$LogSA <- log(DF$SweptArea)
M3 <- glm(TotAbund ~ MeanDepth * factor(Period) + offset(LogSA), data = DF,  family = poisson)
summary(M3)
M1 <- glm(TotAbund ~ MeanDepth, data = DF, family = poisson(link = "log"))
M2 <- glm(TotAbund ~ MeanDepth * fPeriod,  data = DF,  family = poisson)
DF$LogSA <- log(DF$SweptArea)
M3 <- glm(TotAbund ~ MeanDepth * factor(Period) + offset(LogSA), data = DF,  family = poisson)
# ------------------------------------------------------------------------------
# Visualization:  Y vs. X
# ------------------------------------------------------------------------------
# Observed Total Abundance values plotted versus Mean Depth
par(mfrow=c(1,1), mar = c(5,5,2,2))
MyData <- data.frame(MeanDepth = seq(804, 4865, length = 25))
P1 <- predict(M1, newdata = MyData, type = "response")
plot(x = DF$MeanDepth, y = DF$TotAbund, ylim = c(0,1300), xlab = "Mean depth (km)", ylab = "Total abundance values", cex.lab = 1.5)
lines(MyData$MeanDepth, P1, lwd = 3)
range(DF$MeanDepth)
HL <- seq(804, 4865, length = 25)
Beta <- coef(M1)
for (i in 1:25){
mu <- exp(Beta[1] + Beta[2] * HL[i])
yi <- rpois(50, lambda= mu)
points(jitter(rep(HL[i], 50)), jitter(yi), col = grey(0.5),  pch = 16, cex = 1)
}
lines(MyData$MeanDepth, P1, lwd = 3)
# ------------------------------------------------------------------------------
# Visualization:  in 3D
# ------------------------------------------------------------------------------
# 3-D scatterplot
library(scatterplot3d)
x <- seq(804, 4865, length = 25)
y <- exp(coef(M1)[1] + coef(M1)[2]*x)
y
z <- 0 * x
ymeas = rpois(length(y),lambda=y)
# plot(x,ymeas,type="p",xlab="Covariate",ylab="Observed values")
# lines(x,y)
rr = scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="black",
col.grid="black", pch=20, zlim=c(0, 0.05), type="l", lwd=3,
# ylim = c(9,1200),
cex.lab = 1.5, xlab="Mean depth (km)", ylab="Possible values",zlab="Probability")
MyX = c(1000, 2000, 3000, 4000, 5000)
for (i in 1:5){
xi = MyX[i]
yi = exp(coef(M1)[1] + coef(M1)[2] * xi)
yseq = round(seq(0,500,by=10))
zi = dpois(yseq, lambda=yi)
rb = cbind(xi,yseq,zi)
rr$points3d(rb, col = 1, type="h", pch=30)
rdat <- cbind(DF$MeanDepth,DF$TotAbund, rep(0,nrow(DF)))
#rr$points3d(rdat, col = 1,type="p")
}
1 - M1$deviance / M1$null.deviance
1 - M2$deviance / M2$null.deviance
1 - M3$deviance / M3$null.deviance
beta1 <- coef(M1)[1]
beta2 <- coef(M1)[2]
eta <- beta1 + beta2 * DF$MeanDepth
mu  <- exp(eta)
y <- DF$TotAbun
# ----------
# residual deviance = twice the difference between the log likelihood of a model that provides a perfect fit and the model under study
sum(y * log(y/mu) - (y - mu))
2 * sum(y * log(y/mu) - (y - mu))
M1$deviance
# ----------
# loglikelihood
logLik(M1)
sum(DF$TotAbun * eta - mu - lgamma(DF$TotAbun + 1))
lmtest::lrtest(M1, M2, M3)
lmtest::lrtest(M3, M3nbin)
vcdExtra::LRstats(M1, M2, M3, sortby = "BIC")
library(MASS)
# ----------
# estimate theta first
( nbin <- glm.nb(TotAbund ~ MeanDepth + fPeriod + offset(LogSA), data = DF) )
( theta <- nbin$theta )
# -->
# dispersion parameter is 1.953821
# Far better than Poisson model
# ----------
mod.nbin <- glm(TotAbund ~ MeanDepth + fPeriod + offset(LogSA), data = DF, family = negative.binomial(theta))
summary(mod.nbin)
# ----------
library(effects)
plot(allEffects(mod.nbin), band.colors = "blue", lwd=3, ylab = "Number of articles", main="", ylim=c(0, log(1000)))
plot_resid(data = DF, mod = mod.nbin, y = "TotAbund")
plot_resid(data = DF, mod = mod.nbin, y = "TotAbund")
plot_resid <- function(data, mod, y){
EP <- resid(mod, type = "pearson")
mu <- predict(mod, type = "response")
E <- data[,y] - mu
phi <- sum(residuals(mod, type = "pearson")^2)/df.residual(mod)
EP2 <- E / sqrt(phi * mu)
op <- par(mfrow=c(2,2))
plot(x = mu, y = E, main = "Response Residuals")
abline(h = 0, lty=2, col="gray");  lines(lowess(mu, E), col="blue");
plot(x = mu, y = EP, main = "Pearson Residuals")
abline(h = 0, lty=2, col="gray");  lines(lowess(mu, EP), col="blue");
plot(x = mu, y = EP2, main = "Pearosn Residuals Scaled")
abline(h = 0, lty=2, col="gray");  lines(lowess(mu, EP2), col="blue");
ED <- try(resid(mod, type="deviance"), silent=TRUE)
if( class(ED) == "try-error" ){
print(ED)
}
else {
plot(x = mu, y = ED, main = "Deviance Residuals")
abline(h = 0, lty=2, col="gray");  lines(lowess(mu, ED), col="blue");
par(op)
}
}
plot_resid(data = DF, mod=mod_obj, y = "TotAbund")
library(MASS)
# ----------
# estimate theta first
( nbin <- glm.nb(TotAbund ~ MeanDepth + fPeriod + offset(LogSA), data = DF) )
( theta <- nbin$theta )
# -->
# dispersion parameter is 1.953821
# Far better than Poisson model
# ----------
mod.nbin <- glm(TotAbund ~ MeanDepth + fPeriod + offset(LogSA), data = DF, family = negative.binomial(theta))
summary(mod.nbin)
# ----------
library(effects)
plot(allEffects(mod.nbin), band.colors = "blue", lwd=3, ylab = "Number of articles", main="", ylim=c(0, log(1000)))
plot_resid(data = DF, mod = mod.nbin, y = "TotAbund")
plot(allEffects(mod.nbin), band.colors = "blue", lwd=3, ylab = "Number of articles", main="", ylim=c(0, log(1000)))
plot_resid(data = DF, mod = mod.nbin, y = "TotAbund")
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
mod_obj <- mod.nbgam
par(mfrow = c(1, 1))
plot(resid(mod_obj) ~ fitted(mod_obj), xlab = "Fitted values", ylab = "Residuals")
lines(lowess(fitted(mod_obj), resid(mod_obj)), col = "blue", lty = 2)
abline(h = 0, v = 0, lty = 2, col = "darkgray")
# -->
# close to normality !!
par(mfrow = c(1, 2), mar = c(5, 5, 3, 3))
hist(resid(mod_obj), breaks = 25, main = "", xlab = "Residuals")
car::densityPlot(resid(mod_obj))
library(mgcv)
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
# mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = negbin(theta = c(1,10)), data = DF)
summary(mod.nbgam)
# -->
# effective degree of freedoms are 2.81 and 3.019 for each smoothers
mod.nbgam$family$getTheta(TRUE)
# -->
# The estimated value of k (theta) is 2.048
# The period effect is significant, and both smoothers are significant.
# Dispersion parameter is almost 1.
# ----------
# For comparison, single smoother
mod.nbgam2 <- gam(TotAbund ~ s(MeanDepth) + fPeriod + offset(LogSA), family = nb(theta = 2.048), data = DF)
AIC(mod.nbgam, mod.nbgam2)
mod.nbgam2 <- gam(TotAbund ~ s(MeanDepth) + fPeriod + offset(LogSA), family = nb(theta = 2.048), data = DF)
AIC(mod.nbgam, mod.nbgam2)
graphics.off()
par(mfrow=c(1,2), mar = c(5,6,3,2))
plot(mod.nbgam, select = 1, main = "Period 1")
plot(mod.nbgam, select = 2, main = "Period 2")
graphics.off()
par(mfrow=c(1,2), mar = c(5,6,3,2))
plot(mod.nbgam, select = 1, main = "Period 1", shade = TRUE)
plot(mod.nbgam, select = 2, main = "Period 2", shade = TRUE)
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
summary(mod.nbgam)
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
mod_obj <- mod.nbgam
# ------------------------------------------------------------------------------
# Model validation:  normality and homogeneity
# residuals vs. fitted values
# ------------------------------------------------------------------------------
# residuals vs. fitted values
par(mfrow = c(1, 1))
plot(resid(mod_obj) ~ fitted(mod_obj), xlab = "Fitted values", ylab = "Residuals")
lines(lowess(fitted(mod_obj), resid(mod_obj)), col = "blue", lty = 2)
abline(h = 0, v = 0, lty = 2, col = "darkgray")
# -->
# close to normality !!
# ------------------------------------------------------------------------------
# Model validation:  normality and homogeneity
# distribution of standardized residuals
# ------------------------------------------------------------------------------
# density plot and histogram
par(mfrow = c(1, 2), mar = c(5, 5, 3, 3))
hist(resid(mod_obj), breaks = 25, main = "", xlab = "Residuals")
car::densityPlot(resid(mod_obj))
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
mod_obj <- mod.nbgam
res <- resid(mod_obj)
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[E5 > 0]  <- gray(0.5)
MyCol[E5 <= 0] <- gray(0.2)
xyplot(Ykm ~ Xkm, data = DF,
main = list(label = "Residuals", cex = 1.5),
xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
library(sp)
library(gstat)
mydata <- data.frame(res, DF$Xkm, DF$Ykm)
coordinates(mydata) <- c("DF.Xkm","DF.Ykm")
Vari <- variogram(res ~ 1, mydata)
plot(Vari)
res <- resid(mod_obj)
res
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[E5 > 0]  <- gray(0.5)
MyCol[E5 <= 0] <- gray(0.2)
xyplot(Ykm ~ Xkm, data = DF,
main = list(label = "Residuals", cex = 1.5),
xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
MyCex <- abs(res) / max(abs(res))
MyCol <- vector(length = length(res))
MyCol[res > 0]  <- gray(0.5)
MyCol[res <= 0] <- gray(0.2)
xyplot(Ykm ~ Xkm, data = DF,
main = list(label = "Residuals", cex = 1.5),
xlab = list(label = "X-coordinates", cex = 1.5),
ylab = list(label = "Y-coordinates", cex = 1.5),
aspect = "iso", pch = 16, col = MyCol, cex = 3 * (MyCex)^(1/6))
library(sp)
library(gstat)
mydata <- data.frame(res, DF$Xkm, DF$Ykm)
coordinates(mydata) <- c("DF.Xkm","DF.Ykm")
Vari <- variogram(res ~ 1, mydata)
plot(Vari)
lmtest::lrtest(M3, M3nbin)
library(mgcv)
DF$fPeriod <- as.factor(DF$Period)
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
mod_obj <- mod.nbgam
n  <- length(DF$TotAbund)
ID <- 1:n
MD <- expand.grid(MeanDepth = seq(from = min(DF$MeanDepth), to = max(DF$MeanDepth), length = 50),
fPeriod = as.factor(c(1,2)),
LogSA = seq(from = min(DF$LogSA), to = max(DF$LogSA), length = 50))
P <- predict(mod_obj, newdata = MD, type = "terms")
Dif <- vector(length = n)
for (i in 1:n) {
print(i)
mod_obj.i <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF, subset = ID[-i])
P.i <- predict(mod_obj.i, newdata = MD, type = "terms")
Dif[i] <- sum((P[1:5000] - P.i[1:5000])^2)
}
par(mfrow=c(1,1))
plot(Dif, type = "h",  xlab = "Observation number",  ylab = "Change in smoother")
n  <- length(DF$TotAbund)
ID <- 1:n
MD <- expand.grid(MeanDepth = seq(from = min(DF$MeanDepth), to = max(DF$MeanDepth), length = 50),
fPeriod = as.factor(c(1,2)),
LogSA = seq(from = min(DF$LogSA), to = max(DF$LogSA), length = 50))
P <- predict(mod_obj, newdata = MD, type = "terms")
Dif <- vector(length = n)
for (i in 1:n) {
print(i)
mod_obj.i <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF, subset = ID[-i])
P.i <- predict(mod_obj.i, newdata = MD, type = "terms")
Dif[i] <- sum((P[1:5000] - P.i[1:5000])^2)
}
par(mfrow=c(1,1))
plot(Dif, type = "h",  xlab = "Observation number",  ylab = "Change in smoother")
M1 <- glm(TotAbund ~ MeanDepth, data = DF, family = poisson(link = "log"))
M2 <- glm(TotAbund ~ MeanDepth * fPeriod,  data = DF,  family = poisson)
DF$LogSA <- log(DF$SweptArea)
M3 <- glm(TotAbund ~ MeanDepth * factor(Period) + offset(LogSA), data = DF,  family = poisson)
# ----------
mod_obj <- M3
# ------------------------------------------------------------------------------
# Model validation:  Assess spatial dependence in the Pearson residuals, check spatial positioning of the sites before adding covariate Period
# ------------------------------------------------------------------------------
# We have additional covariates that could be added to the model, the categorical variable Period, for one.
# We can also add the interaction between Mean Depth and Period.
Mypch <- DF$Period
Mypch[DF$Period == 2] <- 16
xyplot(Ykm ~ Xkm, aspect = "iso", data = DF, pch = Mypch, col = 1, xlab = "X-coordinate", ylab = "Y-coordinate")
xyplot(Ykm ~ Xkm, aspect = "iso", data = DF, pch = Mypch, col = 1, xlab = "X-coordinate", ylab = "Y-coordinate")
M1 <- glm(TotAbund ~ MeanDepth, data = DF, family = poisson(link = "log"))
M2 <- glm(TotAbund ~ MeanDepth * fPeriod,  data = DF,  family = poisson)
DF$LogSA <- log(DF$SweptArea)
M3 <- glm(TotAbund ~ MeanDepth * factor(Period) + offset(LogSA), data = DF,  family = poisson)
# ------------------------------------------------------------------------------
# Heterogeneous Negative Binomial regression
# ------------------------------------------------------------------------------
library(msme)
# A feature of the nbinomial function is that it allows for the dispersion parameter alpha to be parameterized.
# That is, coefficients can be determined for the dispersion parameter.
mod.nbH <- nbinomial(TotAbund ~ MeanDepth + fPeriod,
formula2 = ~ MeanDepth + fPeriod,
offset = DF$LogSA,
family = "negBinomial",
mean.link = "log",
scale.link = "log_s",
data = DF)
summary.msme(mod.nbH)
mod.pgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = poisson,  data = DF)
summary(mod.pgam)
# -->
# In a Gaussian GAM, cross validation is applied to find the optimal amount of smoothing for a smoother.
# In this process the generalized cross-validation (GCV) is used. This is because somewhere in the underlying equations there is an
# unknown variance term for the residuals.
# When a Poisson distribution is used, there is no extra variance parameter, and the so-called Un-Biased Risk Estimator (UBRE) is used by the
# cross validation process to find the optimal amount of smoothing.
# However, if you use family = quasiPoisson, an extra parameter is estimated for the variance, and teh code will use GCV again.
# ----------
# Calcualte overdispersion
( phi <- sum(residuals(mod.pgam, type = "pearson")^2 / mod.pgam$df.residual) )
# -->
# By allowing for a non-linear depth effect, the overdispersion is reduced compared to a Poisson GLM with offset,
# from 121.69 to 100.43.
# ------------------------------------------------------------------------------
# Plot smoothers
# ------------------------------------------------------------------------------
# To plot the smoothers
par(mfrow = c(1,2))
plot(mod.pgam)
plot(mod.pgam, shade = TRUE)
par(mfrow = c(1,2))
plot(mod.pgam,select = c(1), main ="Period 1")
par(mfrow = c(1,2))
plot(mod.pgam,select = c(1), main ="Period 1")
plot(mod.pgam,select = c(2), main ="Period 2")
# ----------
par(mfrow = c(2,2))
plot(mod.pgam, all.terms = TRUE, resid = TRUE, scale = FALSE)
# ----------
par(mfrow = c(1,2))
plot(mod.pgam, shade = TRUE, scale = FALSE)
par(mfrow = c(2,2))
plot(mod.pgam, all.terms = TRUE, resid = TRUE, scale = FALSE)
library(effects)
# Main effect (default is response, not linked)
eff <- effects::allEffects(mod_obj)
# ----------
# plot main effets of each variable (default is reponse)
# plot(eff)
plot(predictorEffects(mod_obj))
plot(eff, type = "response")
plot(predictorEffects(mod_obj, residuals = TRUE), partial.residuals = list(cex = 0.35, col = gray(0.5), lty = 2))
DF$fPeriod <- as.factor(DF$Period)
mod.nbgam <- mgcv::gam(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), family = nb(), data = DF)
mod_obj <- mod.nbgam
MeanDepth.1 <- DF$MeanDepth[DF$fPeriod=="1"]
MeanDepth.2 <- DF$MeanDepth[DF$fPeriod=="2"]
MLSA1 <- mean(DF$LogSA[DF$fPeriod=="1"])
MLSA2 <- mean(DF$LogSA[DF$fPeriod=="2"])
ND1 <- data.frame(MeanDepth = seq(min(MeanDepth.1), max(MeanDepth.1), by = 1), fPeriod = "1",  LogSA = MLSA1)
ND2 <- data.frame(MeanDepth = seq(min(MeanDepth.2), max(MeanDepth.2), by = 1), fPeriod = "2",  LogSA = MLSA2)
PM1.1 <- predict(mod_obj,newdata = ND1, se = TRUE)
PM1.2 <- predict(mod_obj,newdata = ND2, se = TRUE)
AllY <- DF$TotAbun
AllX <- DF$MeanDepth
AllPeriod <- DF$Period
AllPch <- c(1,16)[AllPeriod]
AllMD.1 <- ND1$MeanDepth
AllMD.2 <- ND2$MeanDepth
AllFit.1 <- c(PM1.1$fit)
AllFit.2 <- c(PM1.2$fit)
AllSE.1 <- c(PM1.1$se.fit)
AllSE.2 <- c(PM1.2$se.fit)
xyplot(AllY ~ AllX ,
strip = function(bg='white', ...) strip.default(bg='white', ...),
scales = list(alternating = T, x = list(relation = "same"), y = list(relation = "free")),
xlab = "Mean depth (m)",
ylab = "Total abundance",
panel=function(x,y, subscripts,...){
x1 <- AllMD.1
x2 <- AllMD.2
y1 <- AllFit.1
y2 <- AllFit.2
se1 <- AllSE.1
se2 <- AllSE.2
panel.grid(h=-1, v= 2)
z1.low <- exp(y1 - 1.96*se1)
z1.up  <- exp(y1 + 1.96*se1)
z2.low <- exp(y2 - 1.96*se2)
z2.up  <- exp(y2 + 1.96*se2)
panel.polygon(c(x1,rev(x1)),c(z1.low,rev(z1.up)), col=grey(0.4),border=NULL)
panel.polygon(c(x2,rev(x2)),c(z2.low,rev(z2.up)), col=grey(0.7), border=NULL)
panel.points(x,y, col = 1, pch=AllPch[subscripts],cex=1)
panel.lines(x1,exp(y1),lwd=3,lty=1,col=1)
panel.lines(x2,exp(y2),lwd=3,lty=1,col=1)
})
mod.nbgam <- mgcv::gamm(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), weights = varIdent(~ 1 | IMD), family = nb(), data = DF)
mod.nbgam <- mgcv::gamm(TotAbund ~ s(MeanDepth, by = fPeriod) + fPeriod + offset(LogSA), weights = varIdent(form =~ 1 | IMD), family = nb(), data = DF)
summary(DF1)
