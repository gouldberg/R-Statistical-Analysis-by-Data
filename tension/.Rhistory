# factor scores
plot(res_scores[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary factor analysis loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"ML3"], type = "l", lty = 3, col = gray(0.7))
# fit a 2D-fPCA on the music tension data.
fpca <- fdata2pc(ftension1, ncomp = 2)
pcscores <- fpca$x[,1:2]
cols <- c("darkgray", "black", "blue")[as.numeric(cond)]
graphics.off()
par(mfrow = c(1,2), mar = c(2,2,2,2))
plot(fpca$rotation[1,]$argvals, fpca$rotation$data[1,], type = "l",
ylim = c(-0.3, 0.3), xlab = "Time",  ylab = "Loadings", main = "Functional PCA Loadings",
lwd = 2, col = "red", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(fpca$rotation$argvals, fpca$rotation$data[2,], type = "l", col = "coral", lwd = 2, lty = 2)
legend("topright", legend = c("PC1", "PC2"), lty = c(1,2), col = c("red", "coral"), cex = 1.2)
plot(pcscores, type = "n", asp = 1, main = "Functional PC Scores", cex.main = 2)
abline(h = 0, v = 0, lty = 2, col = "gray")
text(pcscores, col = cols, cex = 1.2)
legend("topright", legend = c("Auditory", "Visual", "Auditory & Visual"), text.col = c("darkgray", "black", "blue"), cex = 1.2)
fpca_m <- fdata2pc(ftension1, ncomp = 10)
pc1_loadings <- fpca_m$rotation$data[1,]
pc2_loadings <- fpca_m$rotation$data[2,]
pc3_loadings <- fpca_m$rotation$data[3,]
pc4_loadings <- fpca_m$rotation$data[4,]
pc5_loadings <- fpca_m$rotation$data[5,]
pc_scores1 <- fpca_m$x[,1]
pc_scores2 <- fpca_m$x[,2]
pc_scores3 <- fpca_m$x[,3]
pc_scores4 <- fpca_m$x[,4]
pc_scores5 <- fpca_m$x[,5]
subject_scores1 <- pc1_loadings %*% t(pc_scores1)
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores3 <- pc3_loadings %*% t(pc_scores3)
subject_scores4 <- pc4_loadings %*% t(pc_scores4)
subject_scores5 <- pc5_loadings %*% t(pc_scores5)
subject_scores12 <- subject_scores1 + subject_scores2
subject_scores13 <- subject_scores12 + subject_scores3
subject_scores14 <- subject_scores13 + subject_scores4
subject_scores15 <- subject_scores14 + subject_scores5
dim(subject_scores12)
# factor analysis scores
plot(res_scores_f[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"Comp.2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
graphics.off()
par(mfrow = c(3,1), mar = c(2,2,2,2))
# factor analysis scores
plot(res_scores_f[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"Comp.2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
plot(res_scores_f[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
plot(res_scores_f[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"ML3"], type = "l", lty = 3, col = gray(0.7))
# factor analysis scores
plot(res_scores_f[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"ML3"], type = "l", lty = 3, col = gray(0.7))
graphics.off()
par(mfrow = c(3,1), mar = c(2,2,2,2))
# factor analysis scores
plot(res_scores_f[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"ML3"], type = "l", lty = 3, col = gray(0.7))
# PCA loadings
plot(res_scores[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores_f[,"Comp.2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores_f[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
plot(res_scores[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
graphics.off()
par(mfrow = c(3,1), mar = c(2,2,2,2))
# factor analysis scores
plot(res_scores_f[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores_f[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores_f[,"ML3"], type = "l", lty = 3, col = gray(0.7))
# PCA loadings
plot(res_scores[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"Comp.2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
# factor analysis scores
plot(res_scores_f[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary factor analysis scores", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores_f[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores_f[,"ML3"], type = "l", lty = 3, col = gray(0.7))
# PCA loadings
plot(res_scores[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"Comp.2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
graphics.off()
par(mfrow = c(3,1), mar = c(2,2,2,2))
# factor analysis scores
plot(res_scores_f[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary factor analysis scores", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores_f[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores_f[,"ML3"], type = "l", lty = 3, col = gray(0.7))
# PCA loadings
plot(res_scores[,"Comp.1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-8, 9), main = "ordinary PCA loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"Comp.2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
# Funcational PCA loadings
plot(res_scores[,"ML1"], type = "l", lty = 1, col = "red", lwd = 2, ylim = c(-3, 3), main = "ordinary factor analysis loadings", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(res_scores[,"ML2"], type = "l", lty = 2, col = "coral", lwd = 2)
lines(res_scores[,"ML3"], type = "l", lty = 3, col = gray(0.7))
( pred <- data.frame(m1$scores[,1:5] %*% t(m1$loadings[,1:5])) )
colnames(pred) <- colnames(tens) <- paste0("X", 1:29)
plot(fpca$rotation[1,]$argvals, fpca$rotation$data[1,], type = "l",
ylim = c(-0.3, 0.3), xlab = "Time",  ylab = "Loadings", main = "Functional PCA Loadings",
lwd = 2, col = "red", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(fpca$rotation$argvals, fpca$rotation$data[2,], type = "l", col = "coral", lwd = 2, lty = 2)
legend("topright", legend = c("PC1", "PC2"), lty = c(1,2), col = c("red", "coral"), cex = 1.2)
dimnames(tens)[[2]] <- colnames(tens)
dimnames(tens)[[2]] <- colnames(tens)
par(mfcol = c(2, 2), mar = c(2,2,2,2))
idx <- 19
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
( pred_f <- resFA3_scores %*% t(resFA3$weights) )
( pred <- data.frame(m1$scores[,1:5] %*% t(m1$loadings[,1:5])) )
( pred <- data.frame(m1$scores[,1:5] %*% t(m1$loadings[,1:5])) )
colnames(pred) <- colnames(tens) <- paste0("X", 1:29)
res_scores <- data.frame(m1$scores)
( pred_f <- resFA3_scores %*% t(resFA3$weights) )
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
par(mfcol = c(3, 2), mar = c(2,2,2,2))
idx <- 19
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
dimnames(tens)[[2]] <- colnames(tens)
par(mfcol = c(3, 2), mar = c(2,2,2,2))
idx <- 19
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 14
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 18
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 18", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 10
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "negative: 10", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 17
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
# scores for first component is alomost 0
plot(ftensionNP$fdata.est[c(idx)], main = "positive - negative: 17", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
resFA3_scores
resFA3 <- fa(polcor, nfactors = 3, rotate = "oblimin", fm = "ml")
resFA4 <- fa(polcor, nfactors = 4, rotate = "oblimin", fm = "ml")
( pred_f <- resFA3_scores %*% t(resFA3$weights) )
resFA3_scores <- factor.scores(tens, f = resFA3, method = "Thurstone")$scores
( pred_f <- resFA3_scores %*% t(resFA3$weights) )
res_scores_f <- data.frame(resFA3_scores)
idx <- 14
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred_f[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(tens[,idx], type = "l", col = "darkgray", lty = 2, lwd = 2, ylim = c(-3, 2))
lines(pred[,idx], type = "l", lty = 1, lwd = 2, col = "blue")
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
rm(list=ls())
data(sp500w, package = "astsa")
str(sp500w)
sp500w
psych::describe(sp500w)
hist(sp500w, breaks = seq(-0.3, 0.2, 0.01))
graphics.off()
par(mfrow = c(2,1))
plot(sp500w, type = "l")
plot(sp500w, type = "h")
# ----------
forecast::ndiffs(sp500w)
# convert to ts object
sp500w_c <- ts(sp500w, start = 2003, freq = 52)
# ------------------------------------------------------------------------------
# data exploration:  time series decomposition by stats::decompose
# ------------------------------------------------------------------------------
par(mfrow = c(1,1))
dec <- decompose(sp500w_c, type = "multiplicative")
plot(dec)
# ----------
dec <- decompose(sp500w_c, type = "additive")
plot(dec)
dec <- decompose(diff(sp500w_c), type = "additive")
plot(dec)
dec <- decompose(log(diff(sp500w_c)), type = "additive")
plot(dec)
dec <- decompose(diff(log(sp500w_c)), type = "additive")
dec <- decompose(diff(sp500w_c), type = "additive")
plot(dec)
dec <- decompose(sp500w_c, type = "multiplicative")
plot(dec)
dec <- decompose(diff(sp500w_c), type = "additive")
plot(dec)
library(gamlss)
f1 <- fitDist(sp500w, type = "realline", k = 2, trace = TRUE)
# ----------
# shows GAIC from best model to worst model
# JSUo:  Original Johnson's Su Distribution  (4 parameter model)
f1$fits
f1$fails
# ----------
# Repeat with k = 3.84 and k = log(length(Rdax)) corresponding to criteria X^2(1, 0.05) and Schwartz Bayesian Criteria (SBC), respectively
f2 <- fitDist(sp500w, type = "realline", k = 3.84, trace = TRUE)
f3 <- fitDist(sp500w, type = "realline", k = log(length(sp500w)), trace = TRUE)
f2$fits
f2$fails
f3$fits
f3$fails
# ----------
# plot the best JSUo
histDist(sp500w, family = "JSUo", nbins = 30, line.wd = 2.5)
library(gamlss.mx)
# mixture = "np":  nonparametric finite mixtures
# sigma.fo = ~ MASS:  different sigma for each
sp.1 <- gamlssNP(formula = Close ~ 1, mixture = "np", K = 1, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.2 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 2, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.3 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 3, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.4 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 4, tol = 1, data = sp500w, family = NO, plot.opt = 0)
# ----------
GAIC(sp.1, sp.2, sp.3, sp.4)
GAIC(sp.1, sp.2, sp.3, sp.4, k = log(length(sp500w)))
# -->
# best model:  mixed 2 or 3 normal distributions
# ----------
sp.3
head(sp.3$post.prob[[1]])
# ----------
# residual plot of the finite mixture model
plot(sp.3)
fit_gmx <- gamlssMXfits(formula = Close ~ 1, K = 3, sigma.fo = ~ MASS, data = sp500w, family = NO, plot.opt = 0)
fit_gmx
# ------------------------------------------------------------------------------
# Plot fitted values
# ------------------------------------------------------------------------------
week_x <- seq(-0.3, 0.3, by = 0.001)
mu <- c(-0.002344, 0.004639, -0.003436)
sig <- c(exp(-2.51), exp(-4.379), exp(-3.507))
pi <- c(0.02929457, 0.5428803, 0.4278252)
fyNO <- dMX(y = week_x,
mu = mu,
sigma = sig,
pi = pi,
family = list("NO", "NO", "NO"))
plot(fyNO ~ week_x, type="l")
# ----------
fyNO1 <- dnorm(x = week_x,mean = mu[1], sd = sqrt(sig[1]))
fyNO2 <- dnorm(x = week_x,mean = mu[2], sd = sqrt(sig[2]))
fyNO3 <- dnorm(x = week_x,mean = mu[3], sd = sqrt(sig[3]))
plot(week_x, fyNO1, type="l", lty = 2, col = "black", xlim = c(-0.3, 0.3), ylim = c(0, 5))
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
week_x <- seq(-0.3, 0.3, by = 0.001)
mu <- c(-0.002344, 0.004639, -0.003436)
sig <- c(exp(-2.51), exp(-4.379), exp(-3.507))
pi <- c(0.02929457, 0.5428803, 0.4278252)
fyNO <- dMX(y = week_x,
mu = mu,
sigma = sig,
pi = pi,
family = list("NO", "NO", "NO"))
plot(fyNO ~ week_x, type="l")
fn <- getpdfMX(fit_gmx)
par(mfrow = c(1,1))
MASS::truehist(sp500w$Close, nbins = 30, col = "grey", xlab = "weekly return")
lines(week_x, fn(week_x), lty = 1, lwd = 2, col = "blue")
# In each interval, one fits a polynomial regression, typically the order is 3, and this is called cubic splines.
# Also a related method is smoothing splines, which minimizes a compromise between the fit and the degree of smoothness
par(mfrow=c(1,1))
# plot(sp500w)
plot(sp500w_c)
# spar = 0.5 to emphasize the mid-term effect, and spar = 1 to emphasize the trend
lines(smooth.spline(time(sp500w_c), sp500w_c, spar = 0.25), lwd = 2, col = "blue")
lines(smooth.spline(time(sp500w_c), sp500w_c, spar = 0.5), lwd = 2, col = "red")
lines(smooth.spline(time(sp500w_c), sp500w_c, spar = 1), lwd = 2, col = "black")
plot(fyNO ~ week_x, type="l")
fyNO1 <- dnorm(x = week_x,mean = mu[1], sd = sqrt(sig[1]))
fyNO2 <- dnorm(x = week_x,mean = mu[2], sd = sqrt(sig[2]))
fyNO3 <- dnorm(x = week_x,mean = mu[3], sd = sqrt(sig[3]))
plot(week_x, fyNO1, type="l", lty = 2, col = "black", xlim = c(-0.3, 0.3), ylim = c(0, 5))
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion")
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
# ----------
fn <- getpdfMX(fit_gmx)
par(mfrow = c(1,1))
MASS::truehist(sp500w$Close, nbins = 30, col = "grey", xlab = "weekly return")
lines(week_x, fn(week_x), lty = 1, lwd = 2, col = "blue")
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion")
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion", cex = 2)
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion", cex.main = 2)
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
graphics.off()
par(mfrow = c(1, 1))
# acf2:  produces a simultaneous plot (and a printout) of the sample ACF and PACF
# The zero lag value of the ACF is removed.
astsa::acf2(sp500w, 52, main = "S&P500 weekly returns")
L1 <- 3
L2 <- 52*1+1
L3 <- 52*2+1
L4 <- 52*4+1
L5 <- 52*8+1
par(mfrow=c(2,3))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
astsa::mvspec(sp500w, kernel("daniell", (L1-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L2-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L3-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L4-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L5-1)/2), log = "no")
L1 <- 3
L2 <- 26*1+1
L3 <- 26*2+1
L4 <- 26*4+1
L5 <- 26*8+1
m1 <- (L1 - 1) / 2
m2 <- (L2 - 1) / 2
m3 <- (L3 - 1) / 2
m4 <- (L4 - 1) / 2
m5 <- (L5 - 1) / 2
( ker1 <- kernel("modified.daniell", c(m1, m1)) )
( ker2 <- kernel("modified.daniell", c(m2, m2)) )
( ker3 <- kernel("modified.daniell", c(m3, m3)) )
( ker4 <- kernel("modified.daniell", c(m4, m4)) )
( ker5 <- kernel("modified.daniell", c(m5, m5)) )
plot(ker5)
graphics.off()
par(mfrow=c(2,3))
astsa::mvspec(sp500w, kernel = ker1, taper = 0.1, log = "no")
astsa::mvspec(sp500w, kernel = ker2, taper = 0.1, log = "no")
astsa::mvspec(sp500w, kernel = ker3, taper = 0.1, log = "no")
astsa::mvspec(sp500w, kernel = ker4, taper = 0.1, log = "no")
astsa::mvspec(sp500w, kernel = ker5, taper = 0.1, log = "no")
nextn(length(soi))
nextn(sp500w_c)
nextn(length(sp500w_c))
length(sp500w_c)
library(astsa)
sarima(sp500w_c, p = 15, d = 0, q = 12, no.constant = FALSE)
library(tsDyn)
# ----------
# Self Threshold Autoregressive model
# m:  embedding dimensions
# thDelay:  time delay for the threshold variable (as multiple of embedding time delay d)
# th:  threshold value (if missing, a search over a reasonable grid is tried)
u <- setar(sp500w_c, m = 4, thDelay = 0, th = -0.01)
par(mfrow = c(3,3))
plot(u)
# -->
# threshold = 5 ...?
# ----------
plot(u2)
# ?plot.setar
y <- ts(sp500w, start = 2003, freq = 52)
# depmixS4, uses the EM algorithm, but does not provide standard errors.
library(depmixS4)
model <- depmix(y ~ 1, nstates = 3, data = data.frame(y))
model
# ----------
# Estimation results
set.seed(2)
summary(fm <- fit(model))
set.seed(2)
summary(fm <- fit(model))
# ----------
para.mle <- as.vector(getpars(fm)[-c(1:3)])
# for the label switch
permu <- matrix(c(0, 0, 1, 0, 1, 0, 1, 0, 0), 3, 3)
# transition matrix
( mtrans.mle <- permu %*% round(t(matrix(para.mle[1:9], 3, 3)), 3) %*% permu )
# -->
# note that 2 --> 2 transition is almost 0
# and 1 --> 3 is almost 0, too.
# 3 fitted normals: N(mu1 = 0.04, sigma1 = 0.14),  N(mu2 = -0.034, sigma2 = 0.009),  N(mu3 = -0.003, sigma3 = 0.044)
( norms.mle <- round(matrix(para.mle[10:15], 2, 3), 3) %*% permu )
culer <- 4 - posterior(fm)[,1]
culer[culer == 3] <- 4
graphics.off()
layout(matrix(c(1,2,1,3), 2), heights = c(1, 0.75))
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.6, 0.6, 0))
# S&P 500 weekly returns with estimated regimes labeled as a number, 1, 2, or 3
# The minimum value of -20% during the financial crisis has been truncated to improve the graphics.
plot(y, main = "", ylab = "S&P500 Weekly Returns", type = "h", col = gray(0.7), ylim = c(-0.11, 0.11))
text(y, col = culer, labels = 4 - posterior(fm)[,1])
acf(y ^ 2, xlim = c(0.02, 0.5), ylim = c(-0.09, 0.5), panel.first = grid(lty = 2))
# ----------
# Histogram of the data with the 3 estimated normal densities superimposed
hist(y, breaks = 25, prob = TRUE, main = "", border = gray(0.7))
culer <- c(1,2,4)
pi.hat <- colSums(posterior(fm)[-1,2:4]) / length(y)
for(i in 1:3){
mu <- norms.mle[1,i]
sig <- norms.mle[2,i]
x <- seq(-0.15, 0.12, by = 0.001)
lines(x, pi.hat[4-i] * dnorm(x, mean = mu, sd = sig), col = culer[i])
}
# -->
# Note that regime 2 appears to represent a somewhat large-in-magnitude negative return, and may be a lone dip,
# or the start of end of a highly volatile period.
( norms.mle <- round(matrix(para.mle[10:15], 2, 3), 3) %*% permu )
set.seed(666)
nboot <- 100
nobs <- length(y)
para.star <- matrix(NA, nrow = nboot, ncol = 15)
( respst <- para.mle[10:15] )
( trst <- para.mle[1:9] )
# ----------
for(j in 1:nboot){
mod <- simulate(model)
y.star <- as.vector(mod@response[[1]][[1]]@y)
dfy <- data.frame(y.star)
mod.star <- depmix(y.star ~ 1, data = dfy,  respst = respst, trst = trst, nst = 3)
fm.star <- fit(mod.star, emcontrol = em.control(tol = 1e-5), verbose = FALSE)
para.star[j,] <- as.vector(getpars(fm.star)[-(1:3)])
}
para.star
# ----------
# bootstrapped std errors
SE <- sqrt(apply(para.star, 2, var) + (apply(para.star, 2, mean) - para.mle)^2)
mtrans.mle
( SE.mtrans.mle <- permu %*% round(t(matrix(SE[1:9], 3, 3)), 3) %*% permu )
norms.mle
( SE.norms.mle <- round(matrix(SE[10:15], 2, 3), 3) %*% permu )
# -->
# States 1 and 3 represnet clusters of regular or high volatility, respectively.
# Note that there is a large amount of uncertainty in the fitted normals,
# and in the transition matrix involving transitions from state 2 to states 1 or 3.
mtrans.mle
( SE.mtrans.mle <- permu %*% round(t(matrix(SE[1:9], 3, 3)), 3) %*% permu )
mtrans.mle
( SE.mtrans.mle <- permu %*% round(t(matrix(SE[1:9], 3, 3)), 3) %*% permu )
norms.mle
( SE.norms.mle <- round(matrix(SE[10:15], 2, 3), 3) %*% permu )
