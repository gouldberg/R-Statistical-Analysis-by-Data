# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
head(gr)
gr <- gr[,c("unemp", "prinv", "prinv")]
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
gr <- gr[,c("unemp", "prinv", "prinv")]
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
gr <- gr[,c("unemp", "prinv", "prinv")]
gr
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
gr
as.matrix(gr)
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
as.matrix(gr)
gr <- gr[,c("unemp", "prinv", "prinv")]
# ------------------------------------------------------------------------------
# Cross spectra and power contribution by multivariate AR model
# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
gr <- diff(log(ts))
gr <- diff(log(econ5))
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
gr <- gr[,c("unemp", "prinv", "prinv")]
gr <- scale(gr[,c("unemp", "prinv", "prinv")])
# ------------------------------------------------------------------------------
# Cross spectra and power contribution by multivariate AR model
# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
gr <- scale(gr[,c("unemp", "prinv", "prinv", "gnp")])
# ------------------------------------------------------------------------------
# Cross spectra and power contribution by multivariate AR model
# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
gr <- scale(gr[,c("unemp", "prinv", "govinv")])
# ------------------------------------------------------------------------------
# Cross spectra and power contribution by multivariate AR model
# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
gr <- scale(gr[,c("unemp", "prinv", "govinv")])
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
# -->
# highly correlated data ...
# ----------
# Cross spectra and power contribution
graphics.off()
# v:  innovation variance matrix
marspc(z$arcoef, v = z$v)
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
gr <- scale(gr)
# ------------------------------------------------------------------------------
# Cross spectra and power contribution by multivariate AR model
# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
# highly correlated data ...
# ----------
# Cross spectra and power contribution
graphics.off()
# v:  innovation variance matrix
marspc(z$arcoef, v = z$v)
# ----------
# Cross spectra and power contribution
graphics.off()
# v:  innovation variance matrix
marspc(z$arcoef, v = z$v)
names(gr)
head(gr)
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
# gr <- scale(gr)
# ------------------------------------------------------------------------------
# Cross spectra and power contribution by multivariate AR model
# ------------------------------------------------------------------------------
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
# -->
# highly correlated data ...
# ----------
# Cross spectra and power contribution
graphics.off()
# v:  innovation variance matrix
marspc(z$arcoef, v = z$v)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\econ5")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  econ5
# ------------------------------------------------------------------------------
econ5 <- read.table("econ5.txt", header = T, sep = "\t")
str(econ5)
car::some(econ5)
gr <- diff(log(ts(econ5, start = 1948, frequency = 4)))
# gr <- scale(gr)
# vars fit vector AR models via least squares.
library(vars)
# ----------
# "none" fits no constant and no trend
summary(VAR(gr, p = 1, type = "none"))
VARselect(gr, lag.max = 10, type = "none")
summary(fit <- VAR(x, p = 4, type = "none"))
summary(fit <- VAR(gr, p = 4, type = "none"))
gr <- gr[,"unemp", "gnp", "govinv", "prinv"]
# ------------------------------------------------------------------------------
# VAR model
# ------------------------------------------------------------------------------
# vars fit vector AR models via least squares.
library(vars)
# ----------
# detrended time series
# "none" fits no constant and no trend
VARselect(gr, lag.max = 10, type = "none")
summary(fit <- VAR(gr, p = 4, type = "none"))
# ------------------------------------------------------------------------------
# data:  econ5
# ------------------------------------------------------------------------------
data(econ5, package = "astsa")
str(econ5)
car::some(econ5)
# ------------------------------------------------------------------------------
# Data transformation
# ------------------------------------------------------------------------------
# First logging and then removing the linear trend
U <- resid(lm(log(econ5$unemp) ~ time(log(econ5$unemp))))
G <- resid(lm(log(econ5$gnp) ~ time(log(econ5$gnp))))
C <- resid(lm(log(econ5$consum) ~ time(log(econ5$consum))))
x <- cbind(G, U, C)
MTSplot(x)
# ------------------------------------------------------------------------------
# Select VAR model by VARselect
# ------------------------------------------------------------------------------
# vars fit vector AR models via least squares.
library(vars)
# ----------
# detrended time series
# "none" fits no constant and no trend
VARselect(x, lag.max = 10, type = "none")
summary(fit <- VAR(x, p = 2, type = "none"))
car::some(econ5)
gr <- cbind(U, G, C, G, P)
gr
U <- resid(lm(log(econ5$unemp) ~ time(log(econ5$unemp))))
G <- resid(lm(log(econ5$gnp) ~ time(log(econ5$gnp))))
C <- resid(lm(log(econ5$consum) ~ time(log(econ5$consum))))
G <- resid(lm(log(econ5$govinv) ~ time(log(econ5$govinv))))
P <- resid(lm(log(econ5$prinv) ~ time(log(econ5$prinv))))
gr <- cbind(U, G, C, G, P)
gr
MTSplot(gr)
acf2(gr[,"unemp"], max.lag = 50)
acf2(gr[,"U"], max.lag = 50)
acf(gr, max.lag = 50)
gr <- ts(apply(gr, 2, scale), freq = 4)
L <- c(7,7)
gr.spec <- mvspec(gr, spans = L, taper = 0.25, lty = 1:5, lwd = 2, plot = FALSE)
graphics.off()
par(mfrow = c(1,1))
plot(gr.spec, log = "no", main = "Individual Spectra", lty = 1:5, lwd = 2)
abline(v = seq(0.25, 2.0, by = 0.25), lty = 2, col = "darkgray")
legend("topright", colnames(econ5), lty = 1:5, lwd = 2)
# scaling for comparison of spectra
gr <- ts(apply(gr, 2, scale), freq = 4)
gr <- cbind(U, G, C, G, P)
gr <- ts(apply(gr, 2, scale), freq = 4)
L <- c(7,7)
gr.spec <- mvspec(gr, spans = L, taper = 0.25, lty = 1:5, lwd = 2, plot = FALSE)
graphics.off()
par(mfrow = c(1,1))
plot(gr.spec, log = "no", main = "Individual Spectra", lty = 1:5, lwd = 2)
abline(v = seq(0.25, 2.0, by = 0.25), lty = 2, col = "darkgray")
legend("topright", colnames(econ5), lty = 1:5, lwd = 2)
out.12 <- stoch.reg(gr, cols.full = c(1,2), cols.red = 1, alpha, L, M, plot.which = "F.stat")
acf(gr, max.lag = 50)
# ----------
# First logging and then removing the linear trend
U <- resid(lm(log(econ5$unemp) ~ time(log(econ5$unemp))))
G <- resid(lm(log(econ5$gnp) ~ time(log(econ5$gnp))))
C <- resid(lm(log(econ5$consum) ~ time(log(econ5$consum))))
G <- resid(lm(log(econ5$govinv) ~ time(log(econ5$govinv))))
P <- resid(lm(log(econ5$prinv) ~ time(log(econ5$prinv))))
gr <- cbind(U, G, C, G, P)
MTSplot(gr)
# ------------------------------------------------------------------------------
# auto-correlation and partial-autocorrelation
# cross-correlation
# ------------------------------------------------------------------------------
acf2(gr[,"U"], max.lag = 50)
acf(gr, max.lag = 50)
VARselect(gr, lag.max = 10, type = "none")
library(vars)
# ----------
# detrended time series
# "none" fits no constant and no trend
VARselect(gr, lag.max = 10, type = "none")
gr
VARselect(gr, lag.max = 10, type = "none")
VARselect(gr[,c(1,2,3)], lag.max = 10, type = "none")
VARselect(gr, lag.max = 10, type = "none")
VARselect(scale(gr), lag.max = 10, type = "none")
VARselect(gr, lag.max = 10, type = "none")
head(gr)
VARselect(gr[,c("U","G","C","P")], lag.max = 10, type = "none")
U <- resid(lm(log(econ5$unemp) ~ time(log(econ5$unemp))))
G <- resid(lm(log(econ5$gnp) ~ time(log(econ5$gnp))))
C <- resid(lm(log(econ5$consum) ~ time(log(econ5$consum))))
GI <- resid(lm(log(econ5$govinv) ~ time(log(econ5$govinv))))
P <- resid(lm(log(econ5$prinv) ~ time(log(econ5$prinv))))
gr <- cbind(U, G, C, GI, P)
MTSplot(gr)
# ------------------------------------------------------------------------------
# auto-correlation and partial-autocorrelation
# cross-correlation
# ------------------------------------------------------------------------------
acf2(gr[,"U"], max.lag = 50)
acf(gr, max.lag = 50)
VARselect(gr[,c("U","G","C","P")], lag.max = 10, type = "none")
summary(fit <- VAR(gr[,c("U","G","C","P")], p = 2, type = "none"))
VARselect(gr[,c("U","G","C")], lag.max = 10, type = "none")
summary(fit <- VAR(gr[,c("U","G","C")], p = 3, type = "none"))
VARselect(gr[,c("U","G","C")], lag.max = 10, type = "none")
summary(fit <- VAR(gr[,c("U","G","C")], p = 2, type = "none"))
acf(resid(fit), lag.max = 20)
acf(resid(fit), 20)$acf
acfs(resid(fit), lag.max = 20)
acf2(resid(fit), lag.max = 20)
acf(resid(fit), lag.max = 20)
vars::serial.test(fit, lags.pt = 12, type = "PT.adjusted")
summary(fit <- VAR(gr[,c("U","G","C")], p = 2, type = "none"))
library(marima)
model <- define(kvar = 3, ar = C(1,2), ma = c(1))
arp <- model$ar.pattern
map <- model$ma.pattern
model <- define(kvar = 3, ar = C(1,2), ma = c(1))
model <- define.model(kvar = 3, ar = C(1,2), ma = c(1))
arp <- model$ar.pattern
map <- model$ma.pattern
arp <- model$ar.pattern
model <- define.model(kvar = 3, ar = C(1,2), ma = c(1))
model <- define.model(kvar = 3, ar = C(1,2), ma = c(1))
help(define.model)
model <- define.model(kvar = 3, ar = c(1,2), ma = c(1))
arp <- model$ar.pattern
map <- model$ma.pattern
map
help(marima)
MTSplot(gr)
fit <- marima(as.matrix(gr), ar.pattern = arp, ma.pattern = map, means = c(1,1,1))
fit <- marima(as.matrix(gr), ar.pattern = arp, ma.pattern = map, means = c(1,1,1), penalty = 1)
as.matrix(gr)
fit <- marima(as.matrix(gr[,c("U", "G", "C")]), ar.pattern = arp, ma.pattern = map, means = c(1,1,1), penalty = 1)
innov <- t(resid(fit))
plot.ts(innov)
acf(innov, na.action = na.pass)
summary(fit)
fit
names(fit)
fit
U <- resid(umod <- lm(log(econ5$unemp) ~ time(log(econ5$unemp))))
G <- resid(gmod <- lm(log(econ5$gnp) ~ time(log(econ5$gnp))))
C <- resid(cmod <- lm(log(econ5$consum) ~ time(log(econ5$consum))))
GI <- resid(gimod <- lm(log(econ5$govinv) ~ time(log(econ5$govinv))))
P <- resid(pmod <- lm(log(econ5$prinv) ~ time(log(econ5$prinv))))
gr <- cbind(U, G, C, GI, P)
MTSplot(gr)
pred <- ts(t(fitted(fit)[,1] + umod$coef[1] + umod$coef[2] * time(econ$unemp))
pred <- t(fitted(fit)[,1]) + umod$coef[1] + umod$coef[2] * time(econ$unemp)
t(fitted(fit)[,1])
fitted(fit)[,1]
fit
fitted(fit)
fitted(fit)[1,]
pred <- t(fitted(fit)[1,]) + umod$coef[1] + umod$coef[2] * time(econ$unemp)
pred <- t(fitted(fit)[1,]) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
fitted(fit)[1,]
t(fitted(fit)[1,])
umod$coef[1] + umod$coef[2] * time(econ5$unemp)
umod$coef[1] + umod$coef[2] * time(econ5$unemp)
pred <- ts(fitted(fit)[1,]), start = start(econ5), freq = frequency(econ5)) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
pred <- ts(fitted(fit)[1,], start = start(econ5), freq = frequency(econ5)) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
ts(fitted(fit)[1,], start = start(econ5), freq = frequency(econ5))
fitted(fit)[1,]
start(econ5)
econ5
str(econ5)
umod$coef[1]
umod$coef[1] + umod$coef[2] * time(econ5$unemp)
pred <- ts(fitted(fit)[1,], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
plot(pred)
points(econ5$unemp)
points(econ5$unemp)
plot(pred)
points(econ5$unemp)
econ5$unemp
plot(pred)
points(econ5$unemp)
points(econ5$unemp, pch = "**")
help(points)
plot(pred)
points(econ5$unemp, type = "p")
plot(econ5$unemp, type = "p")
lines(pred)
pred
plot(econ5$unemp, type = "p")
lines(pred)
plot(pred)
points(econ5$unemp)
tmp <- points(econ5$unemp)
tmp
plot(pred)
points(ts(econ5$unemp, start = 1))
plot(pred)
ts(econ5$unemp, start = 1)
point(ts(econ5$unemp, start = 1))
tmp <- points(ts(econ5$unemp, start = 1))
tmp
names(tmp)
plot(pred, lwd = 2, col = 4)
points(ts(econ5$unemp, start = 1))
points(econ5$unemp)
points(cmort)
innov <- t(resid(fit))
plot.ts(innov)
acf(innov, na.action = na.pass)
summary(fit <- VAR(gr[,c("U","G","C")], p = 2, type = "none"))
fitted(fit)
pred <- ts(fitted(fit)[,"U"], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
ts(fitted(fit)[,"U"], start = 1)
umod$coef[1] + umod$coef[2] * time(econ5$unemp)
ts(fitted(fit)[,"U"], start = 1)
umod$coef[2] * time(econ5$unemp)
umod$coef[1]
pred <- ts(fitted(fit)[,"U"], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)[3:161]
plot(pred, lwd = 2, col = 4)
points(econ5$unemp)
econ5$unemp
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred, lwd = 2, col = 4)
umod$coef[1]
umod$coef[2] * time(econ5$unemp)[3:161]
umod$coef[1] + umod$coef[2] * time(econ5$unemp)[3:161]
ts(fitted(fit)[,"U"], start = 1)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred, lwd = 2, col = 4)
points(log(econ5$unemp))
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred, lwd = 2, col = 4)
points(log(econ5$unemp)[3:161])
fit <- marima(as.matrix(gr[,c("U", "G", "C")]), ar.pattern = arp, ma.pattern = map, means = c(1,1,1), penalty = 1)
ts(fitted(fit)[1,], start = 1)
umod$coef[1] + umod$coef[2] * time(econ5$unemp)
pred <- ts(fitted(fit)[1,], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
plot(pred, lwd = 2, col = 4)
points(log(econ5$unemp))
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred, lwd = 2, col = 4)
points(log(econ5$unemp))
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred, lwd = 2, col = 4)
points(log(econ5$unemp)[3:161])
pred_var <- ts(fitted(fit)[,"U"], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)[3:161]
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_var, lwd = 2, col = 4)
points(log(econ5$unemp)[3:161])
pred_varma <- ts(fitted(fit)[1,], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_var, lwd = 2, col = 4)
lines(pred_varma, lwd = 2, col = 4)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_var, lwd = 2, col = 4)
pred_var <- ts(fitted(fit)[,"U"], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)[3:161]
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_var, lwd = 2, col = 4)
points(log(econ5$unemp)[3:161])
pred_var <- ts(fitted(fit)[,"U"], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)[3:161]
summary(fit <- VAR(gr[,c("U","G","C")], p = 2, type = "none"))
pred_var <- ts(fitted(fit)[,"U"], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)[3:161]
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_var, lwd = 2, col = 4)
points(log(econ5$unemp)[3:161])
fit <- marima(as.matrix(gr[,c("U", "G", "C")]), ar.pattern = arp, ma.pattern = map, means = c(1,1,1), penalty = 1)
pred_varma <- ts(fitted(fit)[1,], start = 1) + umod$coef[1] + umod$coef[2] * time(econ5$unemp)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_var, lwd = 2, col = 4)
lines(pred_varma, lwd = 2, col = 4)
points(log(econ5$unemp))
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(pred_varma, lwd = 2, col = "black")
lines(c(NA, NA, pred_var), lwd = 2, col = "blue")
points(log(econ5$unemp))
sum(abs(log(econ5$unemp) - pred_varma)) / 161
sum(abs(log(econ5$unemp)[3:161] - pred_var)) / 159
sum(abs(log(econ5$unemp) - pred_varma)) / 161
abs(log(econ5$unemp) - pred_varma)
sum(abs(log(econ5$unemp)[3:161] - pred_varma))[3:161] / 159
sum(abs(log(econ5$unemp)[3:161] - pred_var)) / 159
sum(abs(log(econ5$unemp)[3:161] - pred_varma))[3:161] / 159
log(econ5$unemp)[3:161]
sum(abs(log(econ5$unemp)[3:161] - pred_varma[3:161])) / 159
sum(abs(log(econ5$unemp)[3:161] - pred_var)) / 159
sum(abs(log(econ5$unemp)[3:161] - pred_varma[3:161])) / 159
sum(abs(log(econ5$unemp)[3:161] - pred_var)) / 159
gr <- cbind(U, G, C, GI, P)
library(TSSS)
# Yule-Walker Method of Fitting Multivariate AR Model Fitting
z <- marfit(as.matrix(gr), lag = 20)
names(z)
z$aic
# AR(4) is AIC minimum
z$maice.order
z$arcoef
# covariance matrix
round(z$v, 4)
# correlation matrix
D <- diag(sqrt(diag(z$v)))
solve(D) %*% z$v %*% solve(D)
# ----------
# Cross spectra and power contribution
graphics.off()
# v:  innovation variance matrix
marspc(z$arcoef, v = z$v)
# ----------
# Cross spectra and power contribution
graphics.off()
# v:  innovation variance matrix
marspc(z$arcoef, v = z$v)
