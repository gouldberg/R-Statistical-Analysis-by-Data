ggplot(data = small, aes(x = x, y = y, color = id)) + geom_point(size = 0.4) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax, color = id), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, color = id), size = 1, shape = 13, data = DATA) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
} else {
ggplot(data = small, aes(x = x, y = y)) + geom_point(size = 0.4, aes(shape = id)) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, shape = id), size = 1,  data = DATA) +
scale_shape_manual(values=1:N) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
}
}
plotplm(femod, N = 10, seed = 4, lgth = .05)
plotplm(femod, N = 20, seed = 4, lgth = .05)
plotplm(femod, N = 20, seed = 10, lgth = .05)
plotplm(femod, N = 20, seed = 4, lgth = .3)
plotplm(femod, N = 20, seed = 4, lgth = .05)
femod
plotplm(plm(frate ~ beertax), N = 20, seed = 4, lgth = .05)
plotplm(plm(frate ~ beertax, data = Fatalities), N = 20, seed = 4, lgth = .05)
plotplm(plm(log(crmrte) ~ lprbarr + lprbconv + lprbpris + lavgsen + lpolpc, data = crime4.p), N = 20, seed = 4, lgth = .05)
setwd("//media//kswada//MyFiles//R//tobinq")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("TobinQ", package = "pder")
install.packages("pder", dep = T)
data("TobinQ", package = "pder")
str(TobinQ)
dim(TobinQ)
pTobinQ <- pdata.frame(TobinQ)
pdim(pTobinQ)
index(pTobinQ)
pdim(pTobinQ)
Qeq <- ikn ~ qn
Q.pooling <- plm(Qeq, pTobinQ, model = "pooling")
Q.within <- update(Q.pooling, model = "wihin")
Q.between <- update(Q.pooling, model = "between")
Q.within <- update(Q.pooling, model = "within")
Q.between <- update(Q.pooling, model = "between")
summary(Q.pooling)
summary(Q.within)
summary(Q.between)
summary(Q.pooling)
summary(Q.within)
summary(Q.between)
stargazer::stargazer(Q.pooling, Q.within, Q.between, intercept.bottom = FALSE, type = "text")
coeftest(Q.within)
coeftest(Q.within, vcov = vcovHC(Q.within), type = "HCO", cluster = "state")
par(mfrow = c(2,2))
plot(fixef(Q.within, tyoe = "level"), type = "h", xlab = "state", ylab = "", main = "individual intercepts")
plot(fixef(Q.within, type = "dfirst"), type = "h", xlab = "state", ylab = "", main = "individual effects in deviations from the 1st individual" )
plot(fixef(Q.within, type = "dmean"), type = "h", xlab = "state", ylab = "", main = "individual effects in deviations from mean")
par(mfrow = c(2,2))
plot(fixef(Q.within, tyoe = "level"), type = "h", xlab = "cusip", ylab = "", main = "individual intercepts")
plot(fixef(Q.within, type = "dfirst"), type = "h", xlab = "cusip", ylab = "", main = "individual effects in deviations from the 1st individual" )
plot(fixef(Q.within, type = "dmean"), type = "h", xlab = "cusip", ylab = "", main = "individual effects in deviations from mean")
pTobinQ <- pdata.frame(TobinQ)
# ----------
pdim(pTobinQ)
index(pTobinQ)
# ----------
Qeq <- ikn ~ qn
# Estimate the Swamy and Arora model
Q.swar <- plm(Qeq, pTobinQ, model = "random", random.method = "swar")
# Same Swamy and Arora model
# random.method = c("within", "between"):  use the within residuals to estimate sigma(v) and the between residuals to estimate sigma(eta)
# random.dfcor = c(2,2):  indicating what is the denominator of the two quadratic forms
#  - 0: the number of observations is used (NT, N)
#  - 1: the numerators of the theoretical formulas are used (N(T - 1), N)
#  - 2: the number of estimated parameters are deduced (N(T - 1) - K, N - K - 1)
Q.swar2 <- plm(Qeq, pTobinQ, model = "random", random.method = c("within", "between"), random.dfcor = c(2,2))
Q.swar2 <- plm(Qeq, pTobinQ, model = "random", random.models = c("within", "between"), random.dfcor = c(2,2))
summary(Q_swar)
summary(Q_swar2)
summary(Q.swar2)
summary(Q.swar)
summary(Q.swar2)
summary(Q.swar)
summary(Q.swar2)
ercomp(Qeq, pTobinQ)
summary(Q.swar)
ercomp(Qeq, pTobinQ)$theta
Q.walhus <- update(Q.swar, random.method = "swar")
Q.amemiya <- update(Q.swar, random.method = "amemiya")
Q.nerlove <- update(Q.swar, random.method = "nerlove")
Q.models <- list(swar = Q.swar, walhus = Q.walhus, amemiya = Q.amemiya, nerlove = Q.nerlove)
# ----------
sapply(Q.models, function(x) ercomp(X)$theta)
sapply(Q.models, coef)
sapply(Q.models, function(x) ercomp(X)$theta)
sapply(Q.models, function(x) ercomp(x)$theta)
sapply(Q.models, coef)
stargazer::stargazer(Q.walhus, Q.between, Q.amemiya)
stargazer::stargazer(Q.walhus, Q.between, Q.amemiya, type = "text")
sapply(list(pooling = Q.pooling, within = Q.within, between = Q.between, swar = Q.swar),
function(x) coef(summary(x))["qn", c("Estimate", "Std.Error")])
sapply(list(pooling = Q.pooling, within = Q.within, between = Q.between, swar = Q.swar),
function(x) coef(summary(x))["qn", c("Estimate", "Std. Error")])
summary(pTobinQ$qn)
lag(pTobinQ$qn)
index(pTobinQ)
between(pTobinQ$qn)
Between(pTobinQ$qn)
Within(pTobinQ$qn)
summary(pTobinQ$qn)
SxxW <- sum(Within(pTobinQ$qn) ^ 2)
SxxB <- sum((Between(pTobinQ$qn) - mean(pTobinQ$qn)) ^ 2)
SxxTot <- sum((pTobinQ$qn - mean(pTobinQ$qn)) ^ 2)
# The weight of Within model
( pondW <- SxxW / SxxTot )
# OLS estimator
pondW * coef(Q.Within)[["qn"]] + (1 - ponW) * coef(Q.between)[["qn"]]
Q.Within
Q.within
pondW * coef(Q.within)[["qn"]] + (1 - ponW) * coef(Q.between)[["qn"]]
pondW * coef(Q.within)[["qn"]] + (1 - pondW) * coef(Q.between)[["qn"]]
T <- 35
N <- 188
smtx2 <- deviance(W.between) * T / (N - 2)
sidios2 <- deviance(Q.within) / (N * (T - 1) - 1)
( phi <- sqrt(disios2 / smtx2) )
T <- 35
N <- 188
smtx2 <- deviance(W.between) * T / (N - 2)
smtx2 <- deviance(Q.between) * T / (N - 2)
sidios2 <- deviance(Q.within) / (N * (T - 1) - 1)
( phi <- sqrt(disios2 / smtx2) )
( phi <- sqrt(sidios2 / smtx2) )
( pondW  <- SxxW / (SxxW + phi ^ 2 * SxxB) )
coef(Q.within)[["qn"]] + (1 - pondW) * coef(Q.between)[["qn"]]
pondW * coef(Q.within)[["qn"]] + (1 - pondW) * coef(Q.between)[["qn"]]
setwd("//media//kswada//MyFiles//R//tobinq")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  TobinQ
# ------------------------------------------------------------------------------
data("TobinQ", package = "pder")
str(TobinQ)
dim(TobinQ)
baw <- FALSE
library(ggplot2)
plotplm <- function(x, N = 10, seed = 1, lgth = 0.1){
mydata <- model.frame(x)
onames <- names(mydata)
names(mydata) <- c("y", "x")
LGTH <- (max(mydata$x) - min(mydata$x)) ^ 2 +
(max(mydata$y) - min(mydata$y)) ^ 2
lgth <- lgth * sqrt(LGTH) / 2
seed <- set.seed(seed)
theids <- sample(unique(index(mydata)[[1]]), N)
small <- subset(mydata, index(mydata)[[1]] %in% theids)
small <- cbind(small, id = index(small)[[1]])
ymean <- with(small, tapply(y, id, mean)[as.character(theids)])
xmean <- with(small, tapply(x, id, mean)[as.character(theids)])
within <- update(x, model = "within")
alpha <- mean(mydata[[1]]) - coef(within) * mean(mydata[[2]])
beta <- as.numeric(coef(within))
random <- update(within, model = "random")
between <- update(within, model = "between")
ols <- update(within, model = "pooling")
FE <- fixef(within)[as.character(theids)]
DATA <- data.frame(id = names(FE), FE = as.numeric(FE), slope = beta,
xmean = xmean, ymean = ymean,
xmin = xmean - lgth / sqrt(1 + beta ^ 2),
xmax = xmean + lgth / sqrt(1 + beta ^ 2),
ymin = ymean - lgth * beta / sqrt(1 + beta ^ 2),
ymax = ymean + lgth * beta / sqrt(1 + beta ^ 2))
MODELS <- data.frame(models = c("ols", "random", "within", "between"),
intercept = c(coef(ols)[1], coef(random)[1], alpha, coef(between)[1]),
slope = c(coef(ols)[2], coef(random)[2], coef(within), coef(between)[2]))
if (! baw){
ggplot(data = small, aes(x = x, y = y, color = id)) + geom_point(size = 0.4) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax, color = id), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, color = id), size = 1, shape = 13, data = DATA) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
} else {
ggplot(data = small, aes(x = x, y = y)) + geom_point(size = 0.4, aes(shape = id)) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, shape = id), size = 1,  data = DATA) +
scale_shape_manual(values=1:N) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
}
}
plotplm(plm(ikn ~ qn, data = pTobinQ), N = 20, seed = 4, lgth = .05)
data("RiceFarms", package = "splm")
str(RiceFarms)
dim(RiceFarms)
Rice <- pdata.frame(RiceFarmes, index = "id")
pdim(Rice)
Rice <- pdata.frame(RiceFarms, index = "id")
# ----------
pdim(Rice)
index(Rice)
Q.swar <- plm(log(goutput) ~ log(seed) + log(totlabor) + log(size), data = Rice, model = "random", random.method = "swar")
Q.swar2 <- plm(log(goutput) ~ log(seed) + log(totlabor) + log(size), data = Rice, model = "random", random.models = c("within", "between"), random.dfcor = c(2,2))
summary(Q.swar)
summary(Q.swar2)
summary(Q.swar)
ercomp(Qeq, Rice)
Q.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
Q.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
# Estimate the Swamy and Arora model
Q.swar <- plm(Q.eq, data = Rice, model = "random", random.method = "swar")
# Same Swamy and Arora model
# random.models = c("within", "between"):  use the within residuals to estimate sigma(v) and the between residuals to estimate sigma(eta)
# random.dfcor = c(2,2):  indicating what is the denominator of the two quadratic forms
#  - 0: the number of observations is used (NT, N)
#  - 1: the numerators of the theoretical formulas are used (N(T - 1), N)
#  - 2: the number of estimated parameters are deduced (N(T - 1) - K, N - K - 1)
Q.swar2 <- plm(Q.eq, data = Rice, model = "random", random.models = c("within", "between"), random.dfcor = c(2,2))
# ----------
summary(Q.swar)
ercomp(Q.eq, Rice)
ercomp(Qeq, Rice)$theta
ercomp(Q.eq, Rice)$theta
library(pglm)
help(pglm)
rice.ml <- pglm(Q.eq, data = Rice, family = gaussian)
summary(rice.ml)
summary(Q.swar)
Q.walhus <- update(Q.swar, random.method = "swar")
Q.amemiya <- update(Q.swar, random.method = "amemiya")
Q.nerlove <- update(Q.swar, random.method = "nerlove")
Q.models <- list(swar = Q.swar, walhus = Q.walhus, amemiya = Q.amemiya, nerlove = Q.nerlove)
sapply(Q.models, function(x) ercomp(x)$theta)
sapply(Q.models, coef)
R1 <- pdata.frame(RiceFarms, index = c(id = "id", time = NULL, group = "region"))
R2 <- pdata.frame(RiceFarms, index = c(id = "id", group = "region"))
R3 <- pdata.frame(RiceFarms, index = c(id = "id", group = "region"))
head(index(R1))
# ----------
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
# Estimate the Swamy and Arora model
r.swar <- plm(rice.eq, data = Rice, model = "random", random.method = "swar")
# Same Swamy and Arora model
# random.models = c("within", "between"):  use the within residuals to estimate sigma(v) and the between residuals to estimate sigma(eta)
# random.dfcor = c(2,2):  indicating what is the denominator of the two quadratic forms
#  - 0: the number of observations is used (NT, N)
#  - 1: the numerators of the theoretical formulas are used (N(T - 1), N)
#  - 2: the number of estimated parameters are deduced (N(T - 1) - K, N - K - 1)
r.swar2 <- plm(rice.eq, data = Rice, model = "random", random.models = c("within", "between"), random.dfcor = c(2,2))
# ----------
summary(r.swar)
# -->
# theta = 0.225:  part of the individual mean that is removed from each variable for the GLS estimator = 22.5%
# This implies that the GLS estimator is closer to the OLS estimator (theta = 0) than to the Within estimator (theta = 1)
# ----------
# This can be obtained from ercomp()
ercomp(r.eq, Rice)
ercomp(r.eq, Rice)$theta
r.amemiya <- update(r.swar, random.method = "amemiya")
nswar <- plm(rice.eq, data = R1, model = "random", effect = "nested", random.method = "swar", index = c(group = "region"))
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
nswar <- plm(rice.eq, data = R1, model = "random", effect = "nested", random.method = "swar", index = c(group = "region"))
summary(nswar)
namem <- update(nswar, random.method = "amemiya")
nwalhus <- update(nswar, random.method = "walhus")
iswar <- update(nswar, effect = "individual")
iwith <- update(nswar, model = "within", effect = "individual")
library(texreg)
help(texreg)
library(texreg)
screenreg(list("fe-id", = iwith, "re-id" = iswar, "Swamy_Arora" = nswar, "Wallas-Hussein" = nwalhus, "Amemiya" = namem), digits ~ 3)
screenreg(list("fe-id" = iwith, "re-id" = iswar, "Swamy_Arora" = nswar, "Wallas-Hussein" = nwalhus, "Amemiya" = namem), digits ~ 3)
screenreg(list("fe-id" = iwith, "re-id" = iswar, "Swamy_Arora" = nswar, "Wallas-Hussein" = nwalhus, "Amemiya" = namem), digits = 3)
Rice <- pdata.frame(RiceFarms, index = "id")
# ----------
pdim(Rice)
index(Rice)
rice.w <- plm(rice.eq, model = "within")
rice.p <- update(rice.w, model = "pooling")
rice.wd <- update(rice.eq, effect = "towways")
pFtest(rice.w, rice.p)
Rice <- pdata.frame(RiceFarms, index = "id")
# ----------
pdim(Rice)
index(Rice)
# ----------
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
# ----------
rice.w <- plm(rice.eq, model = "within")
rice.p <- update(rice.w, model = "pooling")
rice.wd <- update(rice.eq, effect = "towways")
# ----------
# The test of the null hypothesis of no time effects but in the presence of individual effects
pFtest(rice.w, rice.p)
rice.w <- plm(rice.eq, model = "within")
rice.w <- plm(rice.eq, data = Rice, model = "within")
rice.p <- update(rice.w, model = "pooling")
rice.wd <- plm(rice.eq, data = Rice, effect = "towways")
rice.wd <- plm(rice.eq, data = Rice, effect = "twoways")
pFtest(rice.w, rice.p)
pFtest(rice.wd, rice.p)
pFtest(rice.p, rice.w)
pFtest(rice.wd, rice.p)
pFtest(rice.wd, rice.w)
plmtest(rice.p)
plmtest(rice.p, effect = "time")
plmtest(rice.p, effect = "twoways")
plmtest(rice.p, effect = "time")
plmtest(rice.p, effect = "twoways", type = "kw")
plmtest(rice.p, effect = "twoways")
# ----------
rice.w <- plm(rice.eq, data = Rice, model = "within")
rice.r <- update(rice.w, model = "random")
# ----------
# The test of the null hypothesis of no individual effects
phtest(rice.w, rice.r)
rice.w <- plm(rice.eq, data = Rice, model = "within")
rice.b <- update(rice.w, model = "between")
cp <- intersect(names(coef(rice.b)), names(coef(rice.w)))
dcoef <- coef(rice.w)[cp] - coef(rice.b)[cp]
V <- vcov(rice.w)[cp, cp] + vcov(rice.b)[cp, cp]
as.numeric(t(dcoef) %*% solve(V) %*% dcoef)
( test.stats <- as.numeric(t(dcoef) %*% solve(V) %*% dcoef) )
pchisq(test.stats, df = 3)
1 - pchisq(test.stats, df = 3)
cor(fixef(rice.w), between(log(Rice$goutput)))
piest(rice.w)
piest(rice.eq, data = RiceFarms, index = "id")
aneweytest(rice.eq, data = RiceFarms, index = "id")
pwtest(rice.eq, Rice)
bsy.LM <- matrix(ncol = 3, nrow = 2)
tests <- c("J", "RE", "AR")
dimnames(bsy.LM) <- list(c("LM test", "p-value"), tests)
for(i in test){
mytest <- pbsytest(rice.eq, data = Rice, test = i)
bsy.LM[1:2, i] <- c(mytest$statistic, mytest$p.value)
}
round(bsy.LM, 6)
bsy.LM <- matrix(ncol = 3, nrow = 2)
tests <- c("J", "RE", "AR")
dimnames(bsy.LM) <- list(c("LM test", "p-value"), tests)
for(i in tests){
mytest <- pbsytest(rice.eq, data = Rice, test = i)
bsy.LM[1:2, i] <- c(mytest$statistic, mytest$p.value)
}
round(bsy.LM, 6)
pbltest(rice.eq, Rice, alternative = "onesided")
RiceFarms <- transform(RiceFarms, phosphate = phosphate / 1000, pesticide = as.numeric(pesticide > 0))
# ----------
fm <- log(goutput) ~ log(seed) + log(urea) + phosphate + log(totlabor) + log(size) + pesticide + varieties + region + time
gglsmodrice <- pggls(fm, RiceFarms, model = "pooling", index = "id")
summary(gglsmodrice)
modrice <- plm(fm, RiceFarms, model = "pooling", index = "id")
modrice_ggls <- pggls(fm, RiceFarms, model = "pooling", index = "id")
summary(modrice)
summary(modrice_ggls)
screenreg(list("ols-pool" = modrice, "ggls-pool" = modrice_ggls), digits = 3)
library(texreg)
screenreg(list("ols-pool" = modrice, "ggls-pool" = modrice_ggls), digits = 3)
stargazer::stargazer(modrice, modrice_ggls)
summary(modrice_ggls)
lmtest::waldtest(gglmodrice, "region")
lmtest::waldtest(modrice_ggls, "region")
modrice_ggls_fe <- pggls(update(fm, .~. - region), RiceFarms, index = "id")
sumamry(modrice_ggls_fe)
summary(modrice_ggls_fe)
phtest(modrice_ggls, modrice_ggls_fe)
modrice_ggls_fe2 <- pggls(update(fm, .~. - region), model = "pooling", RiceFarms, index = "id")
phtest(modrice_ggls_fe2, modrice_ggls_fe)
modrice_ggls_2 <- pggls(update(fm, .~. - region), model = "pooling", RiceFarms, index = "id")
phtest(modrice_ggls_2, modrice_ggls_fe)
data("riceww", package = "splm")
str(riceww)
riceww
dim(riceww)
library(spdep)
ricelw <- mat2listw(riceww)
ricelw
help(mat2listw)
list(ricelw)
names(ricelw)
ricelw$style
ricelw$neighbours
ricelw$weights
dim(ricelw$weights)
str(ricelw$weights)
Rice <- pdata.frame(RiceFarms, index = "id")
pdim(Rice)
index(Rice)
pdim(Rice)
riceprod <- log(goutput) ~ log(seed) + log(totlabor) + log(size) + region + time
rice.sem <- spreml(riceprod, data = Rice, w = riceww, lag = FALSE, errors = "sem")
help(spreml)
library(spdep)
rice.sem <- spreml(riceprod, data = Rice, w = riceww, lag = FALSE, errors = "sem")
library(splm)
rice.sem <- spreml(riceprod, data = Rice, w = riceww, lag = FALSE, errors = "sem")
Rice
riceww
summary(rice.sem)
Rice <- pdata.frame(RiceFarms, index = "id")
# ----------
pdim(Rice)
index(Rice)
summary(log(Rice$goutput))
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
plotplm(plm(rice.eq, data = Rice), N = 20, seed = 4, lgth = .05)
plotplm(plm(rice.eq, data = Rice), N = 6, seed = 4, lgth = .05)
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
Rice
head(Rice)
plotplm(plm(rice.eq, data = Rice, group = "region"), N = 6, seed = 4, lgth = .05)
plotplm(plm(rice.eq, data = Rice), N = 6, seed = 4, lgth = .05)
R1 <- pdata.frame(RiceFarms, index = c(id = "id", time = NULL, group = "region"))
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
plotplm(plm(rice.eq, data = R1), N = 6, seed = 4, lgth = .05)
plotplm(plm(rice.eq, data = R1), N = 3, seed = 4, lgth = .05)
plotplm(plm(rice.eq, data = R1), N = 10, seed = 4, lgth = .05)
baw <- FALSE
library(ggplot2)
plotplm <- function(x, N = 10, seed = 1, lgth = 0.1){
mydata <- model.frame(x)
onames <- names(mydata)
names(mydata) <- c("y", "x")
LGTH <- (max(mydata$x) - min(mydata$x)) ^ 2 +
(max(mydata$y) - min(mydata$y)) ^ 2
lgth <- lgth * sqrt(LGTH) / 2
seed <- set.seed(seed)
theids <- sample(unique(index(mydata)[[1]]), N)
small <- subset(mydata, index(mydata)[[1]] %in% theids)
small <- cbind(small, id = index(small)[[1]])
ymean <- with(small, tapply(y, id, mean)[as.character(theids)])
xmean <- with(small, tapply(x, id, mean)[as.character(theids)])
within <- update(x, model = "within")
alpha <- mean(mydata[[1]]) - coef(within) * mean(mydata[[2]])
beta <- as.numeric(coef(within))
random <- update(within, model = "random")
between <- update(within, model = "between")
ols <- update(within, model = "pooling")
FE <- fixef(within)[as.character(theids)]
DATA <- data.frame(id = names(FE), FE = as.numeric(FE), slope = beta,
xmean = xmean, ymean = ymean,
xmin = xmean - lgth / sqrt(1 + beta ^ 2),
xmax = xmean + lgth / sqrt(1 + beta ^ 2),
ymin = ymean - lgth * beta / sqrt(1 + beta ^ 2),
ymax = ymean + lgth * beta / sqrt(1 + beta ^ 2))
MODELS <- data.frame(models = c("ols", "random", "within", "between"),
intercept = c(coef(ols)[1], coef(random)[1], alpha, coef(between)[1]),
slope = c(coef(ols)[2], coef(random)[2], coef(within), coef(between)[2]))
if (! baw){
ggplot(data = small, aes(x = x, y = y, color = id)) + geom_point(size = 0.4) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax, color = id), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, color = id), size = 1, shape = 13, data = DATA) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
} else {
ggplot(data = small, aes(x = x, y = y)) + geom_point(size = 0.4, aes(shape = id)) +
geom_segment(aes(x = xmin, xend = xmax, y = ymin, yend = ymax), data = DATA) +
geom_abline(aes(intercept = intercept, slope = slope, lty = models), data = MODELS) +
geom_point(aes(x = xmean, y = ymean, shape = id), size = 1,  data = DATA) +
scale_shape_manual(values=1:N) +
xlab(onames[2]) + ylab(onames[1]) +
theme(legend.text = element_text(size = 6),
legend.title= element_text(size = 8),
axis.title = element_text(size = 8))
}
}
R1 <- pdata.frame(RiceFarms, index = c(id = "id", time = NULL, group = "region"))
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
plotplm(plm(rice.eq, data = R1), N = 10, seed = 4, lgth = .05)
plotplm(plm(rice.eq, data = R1), N = 2, seed = 4, lgth = .05)
plotplm(plm(rice.eq, data = R1), N = 3, seed = 4, lgth = .05)
names(RiceFarms)
R1 <- pdata.frame(RiceFarms, index = c(id = "id", time = "time"))
rice.eq <- log(goutput) ~ log(seed) + log(totlabor) + log(size)
plotplm(plm(rice.eq, data = R1), N = 3, seed = 4, lgth = .05)
data("HousePricesUS", package = "pder")
str(HousePricesUS)
dim(HousePricesUS)
php <- pdata.frame(HousePricesUS)
pdim(php)
index(php)
head(index(php))
cbind("rho" = pcdtest(diff(log(php$price)), test = "rho")$statistic,
"|rho|" = pcdtest(diff(log(php$price)), test = "absrho")$statistic)
regions.names <- c("New Engl", "Mideast", "Southeast", "Great Lks", "Plains", "Southwest", "Rocky Mnt", "Far West")
corr.table.hp <- cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
corr.table.hp <- plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
corr.table.hp <- plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
help(cortab)
corr.table.hp <- plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
cortab
regions.names <- c("New Engl", "Mideast", "Southeast", "Great Lks", "Plains", "Southwest", "Rocky Mnt", "Far West")
corr.table.hp <- plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
diff(log(php$price))
corr.table.hp <- plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
library(plm)
corr.table.hp <- plm::cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
corr.table.hp <- cortab(diff(log(php$price)), grouping = php$region, groupnames = reegions.names)
