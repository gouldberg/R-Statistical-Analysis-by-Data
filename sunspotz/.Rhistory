setwd("//media//kswada//MyFiles//R//sunspotz")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  sunspotz
# ------------------------------------------------------------------------------
data(sunspotz, package = "astsa")
str(sunspotz)
head(sunspotz)
# ------------------------------------------------------------------------------
# Spectral analysis:  Raw periodogram
#   - It is often convenient to calculate the DFTs(periodogram) using the fast Fourier transformation algorithm (FFT)
#     FFT utilizes a number of redendancies in the calculation of the DFT when n is highly composite, that is, an integer with many factors of 2,3,5,...,
#     the best case being when n = 2^p
#     To accomodate this property, we can pad the centered (or detrended) data of length n to the next highly composite integer by adding zeros.
#     sunspotz data has 459 observartions, and 480 months will be used in the spectral analyses by default
# ------------------------------------------------------------------------------
nextn(length(sunspotz))
par(mfrow=c(2,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
sun.per <- astsa::mvspec(sunspotz, log = "no")
abline(v = 6/480, lty = 2, lwd = 1)
abline(v = 44/480, lty = 2, lwd = 1)
abline(v = 48/480, lty = 2, lwd = 1)
sun.per$spec[3]
sun.per$spec[22]
sun.per$spec[24]
# ------------------------------------------------------------------------------
# Confidence intervals
# ------------------------------------------------------------------------------
# Periodgram is not a consistent estimator of the spectral density, so the estimator is susceptible to large uncertainties.
df <- 2
U <- qchisq(0.025, df)
L <- qchisq(0.975, df)
df * sun.per$spec[3] / L
df * sun.per$spec[3] / U
df * sun.per$spec[22] / L
df * sun.per$spec[22] / U
df * sun.per$spec[24] / L
df * sun.per$spec[24] / U
data(sunspotz, package = "astsa")
str(sunspotz)
head(sunspotz)
# ------------------------------------------------------------------------------
# Spectral analysis:  smoothed periodogram by modified Daniell kernel
# ------------------------------------------------------------------------------
m <- 3
m <- 1
# obtain coefficients of modefied Daniell kernel
( ker <- kernel("modified.daniell", c(m, m)) )
plot(ker)
# ----------
# taper:  generally have a shape that enhances the center of the data relative to the extremities, such as a cosine bell of the form
#  - taper = 0.1:  tapering the upper and lower 10% of the data
graphics.off()
par(mfrow=c(1,1))
taper <- 0.1
sun.smo <- astsa::mvspec(sunspotz, kernel = ker, taper = taper, log = "no")
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
sun.per <- astsa::mvspec(sunspotz, log = "no")
# ------------------------------------------------------------------------------
# Find best autoregression order by by AIC, AICc, BIC
# ------------------------------------------------------------------------------
n <- length(sunspotz)
AIC <- rep(0, 40) -> AICc -> BIC
# var.pred:  the prediction variance, an estimate of the portion of the variance of the time series
# that is not explained by the autoregressive model
for(k in 1:40){
sigma2 <- ar(sunspotz, order = k, aic = FALSE)$var.pred
BIC[k] <- log(sigma2) + (k * log(n) / n)
AICc[k] <- log(sigma2) + ((n + k) / (n - k - 2))
AIC[k] <- log(sigma2) + ((n + 2 * k) / n)
}
# AICc is nearly identical to BIC, so we plot only AIC and BIC
# We added +1 to the BIC to reduce white space in the graphic
IC <- cbind(AIC, BIC + 1)
ts.plot(IC, type =c("o"), xlab = "p", ylab = "AIC / BIC")
# ------------------------------------------------------------------------------
# Spectral analysis:  Autoregressive spectral estimator for sunspotz
#   - Often, the periodicities in the sunspot series are investigated by fitting an autoregressive spectrum of sufficiently high order.
# ------------------------------------------------------------------------------
graphics.off()
# spec.ar() to fit the best model via AIC and plot the resulting spectrum
spaic <- spec.ar(sunspotz, log = "no")
# ----------
spaic$method
# -->
# AR(16) spectrum
# ----------
which.max(spaic$spec)
spaic$freq[which.max(spaic$spec)]
480 * spaic$freq[which.max(spaic$spec)]
# -->
# 46 months = 3.83 year is the most predominant cycle
# ----------
# estimates and AICs
( sun.ar <- ar(sunspotz, order.max = 40) )
sun.ar$aic
plot(1:40, sun.ar$aic[-1], type = "o")
# -->
# No likelihood is calculated here, so the use of the term AIC is loose.
spaic <- spec.ar(sunspotz, log = "no")
spaic$method
# -->
# AR(16) spectrum
# ----------
which.max(spaic$spec)
spaic$freq[which.max(spaic$spec)]
480 * spaic$freq[which.max(spaic$spec)]
# -->
# 46 months = 3.83 year is the most predominant cycle
# estimates and AICs
( sun.ar <- ar(sunspotz, order.max = 40) )
sun.ar$aic
plot(1:40, sun.ar$aic[-1], type = "o")
# -->
# No likelihood is calculated here, so the use of the term AIC is loose.
spaic <- spec.ar(sunspotz, log = "no")
spaic <- spec.ar(sunspotz, log = "no", meethod = "burg")
# spec.ar() to fit the best model via AIC and plot the resulting spectrum
spaic <- spec.ar(sunspotz, log = "no", method = "burg")
spaic <- spec.ar(sunspotz, method = "burg")
spaic <- spec.ar(sunspotz, log = "no", method = "burg")
spaic <- spec.ar(sunspotz, log = "no")
which.max(spaic$spec)
spaic$freq[which.max(spaic$spec)]
480 * spaic$freq[which.max(spaic$spec)]
nextn(sunspots)
length(sunspotz)
nextn(length(sunspotz))
spaic$freq[which.max(spaic$spec)]
1/0.096
1 / spaic$freq[which.max(spaic$spec)]
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
sun.per <- astsa::mvspec(sunspotz, log = "no")
abline(v = 6/480, lty = 2, lwd = 1)
abline(v = 44/480, lty = 2, lwd = 1)
abline(v = 48/480, lty = 2, lwd = 1)
44/480
1/0.091
data("chicken", package = "astsa")
str(chicken)
car::some(chicken)
MTSplot(chicken)
acf2(chiken)
acf2(chicken)
forecast::ndiffs(chicken)
acf2(diff(chicken))
mvspec(chicken)
mvspec(chiken, spans = c(3,3), taper = 0.1)
mvspec(chicken, spans = c(3,3), taper = 0.1)
mvspec(chicken)
spec.ar(chicken, method ="burg")
spec.ar(chicken, method ="burg". log = "no")
spec.ar(chicken, method = "burg". log = "no")
spec.ar(chicken)
spec.ar(chicken, log = "no")
spec.ar(chicken, log = "no", method = "yule-walker")
spec.ar(chicken, log = "no", method = "burg")
mvspec(chicken, spans = c(3,3), taper = 0.1)
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
spec.ar(diff(chicken), log = "no", method = "yule-walker")
spec.ar(diff(chicken), log = "no", method = "burg")
spec.ar(diff(chicken), log = "no", method = "yule-walker")
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
spec.ar(diff(chicken), log = "no", method = "yule-walker")
spec.ar(diff(chicken), log = "no", method = "burg")
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
mvspec(chicken)
mvspec(diff(chicken))
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
mvspec(diff(chicken))
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
mvspec(diff(chicken))
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
spec.ar(diff(chicken), log = "no", method = "yule-walker")
spec.ar(diff(chicken), log = "no", method = "burg")
mvspec(diff(chicken))
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
spec.ar(diff(chicken), log = "no", method = "yule-walker")
spec.ar(diff(chicken), log = "no", method = "burg")
MTSplot(chicken)
car::some(chicken)
plot(diff(chicken), type = "l")
acf2(diff(chicken))
sarima(chicken, p = 2, d = 1, q = 0)
acf2(diff(chicken))
sarima(chicken, p = 2, d = 1, q = 0, P = 0, D = 1, Q = 1, S = 12)
mvspec(diff(chicken))
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
spec.ar(diff(chicken), log = "no", method = "yule-walker")
mvspec(diff(chicken), spans = c(3,3), taper = 0.1)
mvspec(diff(chicken), spans = c(3,3))
spec.ar(diff(chicken), log = "no", method = "yule-walker")
spec.ar(diff(chicken), log = "no", method = "burg")
