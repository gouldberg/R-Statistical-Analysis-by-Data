triplot.rda(spechem.physio, site.sc = "lc", scaling = 1, cex.char2 = 0.8, pos.env = 3, mar.percent = 0)
text(-0.58, 0.64, "a", cex = 2)
summary(spechem.physio, axes = 0)
spe.hel <- decostand(spe, "hellinger")
spe.rda <- rda(spe.hel ~ ., env3)
vif.cca(spe.rda)
spechem.physio <- rda(spe.hel, envchem, envtopo)
vif.cca(spechem.physio)
sort(vif.cca(spe.rda), decreasing = TRUE)
sort(vif.cca(spechem.physio), decreasing = TRUE)
spe.rda.all <- rda(spe.hel ~ ., data = env2)
# Global adjusted R^2
( R2a.all <- RsquareAdj(spe.rda.all)$adj.r.squared )
# Forward selection using forward.sel()
adespatial::forward.sel(spe.hel, env2, adjR2thresh = R2a.all)
install.packages("adespatial", dep = T)
# Forward selection using forward.sel()
adespatial::forward.sel(spe.hel, env2, adjR2thresh = R2a.all)
mod0 <- rda(spe.hel ~ 1, data = env2)
step.forward <- vegan::ordistep(mod0, scope = formula(spe.rda.all), direction = "forward", permutations = how(nperm = 499))
RsquareAdj(step.forward)
step.forward
RsquareAdj(step.forward)
( R2a.all <- RsquareAdj(spe.rda.all)$adj.r.squared )
step.backward
step.backward <- vegan::ordistep(spe.rda.all, permutations = how(nperm = 499))
RsquareAdj(step.backward)
step2.forward
step2.forward <- vegan::ordiR2step(mod0, scope = formula(spe.rda.all), direction = "forward", R2scope = TRUE, permutations = how(nperm = 199))
# ----------
step2.forward
RsquareAdj(step2.forward)
step3.forward
RsquareAdj(step3.forward)
mod00 <- rda(spe.hel ~ 1, data = env3)
spe.rda2.all <- rda(spe.hel ~ ., data = env3)
# ----------
step3.forward <- vegan::ordiR2step(mod00, scope = formula(spe.rda2.all), direction = "forward", permutations = how(nperm = 199))
# ----------
step3.forward
RsquareAdj(step3.forward)
mod0p <- rda(spe.hel ~ Condition(slo), data = env2)
mod1p <- rda(spe.hel ~ . + Condition(slo), data = env2)
step.p.forward <- ordiR2step(mod0p,  scope = formula(mod1p), direction = "forward", permutations = how(nperm = 199))
# ----------
step.p.forward
RsquareAdj(step.p.forward)
( spe.rda.pars <- rda(spe.hel ~ ele + oxy + bod, data = env2) )
summary(spe.rda.pars)
anova(spe.rda.pars, permutations = how(nperm = 999))
anova(spe.rda.pars, permutations = how(nperm = 999))
anova(spe.rda.pars, by = "axis", permutations = how(nperm = 999))
spe.rda.pars$CA$eig
mean(spe.rda.pars$CA$eig)
spe.rda.pars$CA$eig
mean(spe.rda.pars$CA$eig)
spe.rda.pars$CA$eig[spe.rda.pars$CA$eig > mean(spe.rda.pars$CA$eig)]
vif.cca(spe.rda.all)
vif.cca(spe.rda.pars)
par(mfrow = c(2, 1))
# Scaling 1
triplot.rda(spe.rda.pars, site.sc = "lc", scaling = 1, cex.char2 = 0.8, pos.env = 2, mult.spe = 0.9, mult.arrow = 0.92, mar.percent = 0.01)
# Scaling 2
triplot.rda(spe.rda.pars, site.sc = "lc", scaling = 2, cex.char2 = 0.8, pos.env = 2, mult.spe = 1.1, mar.percent = -0.02)
# Scaling 1
plot(spe.rda.pars, scaling = 1, display = c("sp", "lc", "cn"), main = "Triplot RDA spe.hel ~ ele+oxy+bod - scaling 1 - lc scores")
spe4.sc <- scores(spe.rda.pars, choices = 1:2, scaling = 1, display = "sp")
arrows(0, 0, spe4.sc[, 1] * 0.92, spe4.sc[, 2] * 0.92, length = 0, lty = 1, col = "red")
# Scaling 2
plot(spe.rda.pars, display = c("sp", "lc", "cn"), main = "Triplot RDA spe.hel ~ ele+oxy+bod - scaling 2 - lc scores")
spe5.sc <- scores(spe.rda.pars, choices = 1:2, display = "sp")
arrows(0, 0, spe5.sc[, 1] * 0.9, spe5.sc[, 2] * 0.9, length = 0, lty = 1, col = "red")
# New site 1 is made from rounded means of species in sites 1 to 15
site1.new <- round(apply(spe[1:15, ], 2, mean))
# New site 2 is made from rounded means of species in sites 16 - 29
site2.new <- round(apply(spe[16:29, ], 2, mean))
( obj.new <- t(cbind(site1.new, site2.new)) )
# Hellinger transformation of the new sites
obj.new.hel <- decostand(obj.new, "hel")
# ----------
# Calibration
calibrate(spe.rda.pars, obj.new.hel)
env2[7:9, c(1, 9, 10)]
env2[22:24, c(1, 9, 10)]
par(mfrow = c(1, 3), mar = c(1, 1, 1, 1))
showvarparts(2, bg = c("red", "blue"))
showvarparts(3, bg = c("red", "blue", "yellow"))
showvarparts(4, bg = c("red", "blue", "yellow", "green"))
( spe.part.all <- varpart(spe.hel, envchem, envtopo) )
graphics.off();  par(mfrow=c(1,1))
plot(spe.part.all, digits = 2, bg = c("red", "blue"))
# Separate forward selection in each subset of environmental variables
spe.chem <- rda(spe.hel, envchem)
R2a.all.chem <- RsquareAdj(spe.chem)$adj.r.squared
forward.sel(spe.hel, envchem, adjR2thresh = R2a.all.chem, nperm = 9999)
# ----------
spe.topo <- rda(spe.hel, envtopo)
R2a.all.topo <- RsquareAdj(spe.topo)$adj.r.squared
forward.sel(spe.hel, envtopo, adjR2thresh = R2a.all.topo, nperm = 9999)
# ----------
# Parsimonious subsets of explanatory variables, based on forward selections
names(envchem)
envchem.pars <- envchem[, c(4, 6, 7)]
names(envtopo)
envtopo.pars <- envtopo[, c(1, 2)]
# ----------
# Variation partitioning
( spe.part <- varpart(spe.hel, envchem.pars, envtopo.pars) )
plot(spe.part, digits = 2, bg = c("red", "blue"), Xnames = c("Chemistry", "Physiography"), id.size = 0.7)
plot(spe.part.all, digits = 2, bg = c("red", "blue"))
plot(spe.part, digits = 2, bg = c("red", "blue"), Xnames = c("Chemistry", "Physiography"), id.size = 0.7)
plot(spe.part.all, digits = 2, bg = c("red", "blue"))
# Test of fraction [a+b]
anova(rda(spe.hel, envchem.pars), permutations = how(nperm = 999))
# Test of fraction [b+c]
anova(rda(spe.hel, envtopo.pars), permutations = how(nperm = 999))
# Test of fraction [a+b+c]
env.pars <- cbind(envchem.pars, envtopo.pars)
anova(rda(spe.hel, env.pars), permutations = how(nperm = 999))
# Test of fraction [a]
anova(rda(spe.hel, envchem.pars, envtopo.pars), permutations = how(nperm = 999))
# Test of fraction [c]
anova(rda(spe.hel, envtopo.pars, envchem.pars), permutations = how(nperm = 999))
envchem.pars2 <- envchem[, c(6, 7)]
( spe.part2 <- varpart(spe.hel, envchem.pars2, envtopo.pars) )
plot(spe.part2, digits = 2)
anova(rda(spe.hel, envtopo.pars), permutations = how(nperm = 999))
env.pars <- cbind(envchem.pars, envtopo.pars)
anova(rda(spe.hel, env.pars), permutations = how(nperm = 999))
# Test of fraction [a]
anova(rda(spe.hel, envchem.pars, envtopo.pars), permutations = how(nperm = 999))
anova(rda(spe.hel, envtopo.pars, envchem.pars), permutations = how(nperm = 999))
plot(spe.part, digits = 2, bg = c("red", "blue"), Xnames = c("Chemistry", "Physiography"), id.size = 0.7)
plot(spe.part.all, digits = 2, bg = c("red", "blue"))
anova(rda(spe.hel, envchem.pars, envtopo.pars), permutations = how(nperm = 999))
plot(spe.part2, digits = 2)
( spe.part2 <- varpart(spe.hel, envchem.pars2, envtopo.pars) )
plot(spe.part, digits = 2, bg = c("red", "blue"), Xnames = c("Chemistry", "Physiography"), id.size = 0.7)
ele.fac <- gl(3, 9, labels = c("high", "mid", "low"))
# Creation of a factor mimicking 'pH'
pH.fac <- as.factor(c(1, 2, 3, 2, 3, 1, 3, 2, 1, 2, 1, 3, 3, 2, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 3, 3))
# Is the two-way factorial design balanced?
table(ele.fac, pH.fac)
ele.pH.helm <- model.matrix(~ ele.fac * pH.fac, contrasts = list(ele.fac = "contr.helmert", pH.fac = "contr.helmert"))[, -1]
ele.pH.helm
ele.pH.helm2 <- model.matrix(~ ele.fac + pH.fac, contrasts = list(ele.fac = "contr.helmert", pH.fac = "contr.helmert"))[, -1]
colnames(ele.pH.helm2)
colnames(ele.pH.helm)
apply(ele.pH.helm, 2, sum)
crossprod(ele.pH.helm)
cell.fac <- gl(9, 3)
cell.fac
( cell.fac <- gl(9, 3) )
spe.hel.d1 <- dist(spe.hel[1:27, ])
( spe.hel.cell.MHV <- betadisper(spe.hel.d1, cell.fac) )
anova(spe.hel.cell.MHV)     # Parametric test (not recommended here)
permutest(spe.hel.cell.MHV)
( spe.hel.ele.MHV <- betadisper(spe.hel.d1, ele.fac) )
anova(spe.hel.ele.MHV)     # Parametric test (not recommended here)
permutest(spe.hel.ele.MHV) # Permutation test
# Factor "pH"
interaction.rda <- rda(spe.hel[1:27, ], ele.pH.helm[, 5:8], ele.pH.helm[, 1:4])
anova(interaction.rda, permutations = how(nperm = 999))
factor.ele.rda <- rda(spe.hel[1:27, ], ele.pH.helm[, 1:2], ele.pH.helm[, 3:8])
anova(factor.ele.rda, permutations = how(nperm = 999), strata = pH.fac)
factor.pH.rda <- rda(spe.hel[1:27, ], ele.pH.helm[, 3:4], ele.pH.helm[, c(1:2, 5:8)])
anova(factor.pH.rda, permutations = how(nperm = 999), strata = ele.fac)
ele.rda.out <- rda(spe.hel[1:27, ]~ ., as.data.frame(ele.fac))
summary(ele.rda.out)
plot(ele.rda.out, scaling = 1, display = "wa", main = "Multivariate ANOVA, factor elevation - scaling 1 - wa scores")
ordispider(ele.rda.out, ele.fac, scaling = 1, label = TRUE, col = "blue")
spe.sc1 <- scores(ele.rda.out, scaling = 1, display = "species")
arrows(0, 0, spe.sc1[, 1] * 0.3, spe.sc1[, 2] * 0.3, length = 0.1, angle = 10, col = "red")
text(spe.sc1[, 1] * 0.3, spe.sc1[, 2] * 0.3, labels = rownames(spe.sc1), pos = 4, cex = 0.8, col = "red")
adonis2(spe.hel[1:27, ] ~ ele.fac * pH.fac, method = "euc", by = "term")
( dfs.df <- poly(dfs, 2) )
colnames(dfs.df) <- c("dfs", "dfs2")
# Verify that the polynomial terms are orthogonal
cor(dfs.df)
forward.sel(spe.hel, dfs.df)
adespatial::forward.sel(spe.hel, dfs.df)
# RDA and test
spe.dfs.rda <- rda(spe.hel ~ ., as.data.frame(dfs.df))
anova(spe.dfs.rda)
graphics.off();  par(mfrow = c(1,1));
triplot.rda(spe.dfs.rda, site.sc = "lc", scaling = 2, plot.sites = FALSE, pos.env = 1, mult.arrow = 0.9, move.origin = c(-0.25, 0), mar.percent = 0)
triplot.rda(spe.dfs.rda, site.sc = "wa", scaling = 2, plot.sites = FALSE, pos.env = 1, mult.arrow = 0.9, move.origin = c(-0.25, 0), mar.percent = 0)
plot(spe.dfs.rda, scaling = 2, display = c("sp", "lc", "cn"), main = "Triplot RDA spe ~ dfs+dfs2 - scaling 2 - lc scores")
spe6.sc <- scores(spe.dfs.rda, choices = 1:2, scaling = 2, display = "sp")
arrows(0, 0, spe6.sc[, 1] * 0.9, spe6.sc[, 2] * 0.9, length = 0, lty = 1, col = "red")
par(mfrow = c(2, 2))
plot(spa, asp = 1, col = "brown", cex = spe$Satr, xlab = "x (km)", ylab = "y (km)", main = "Brown trout")
lines(spa, col = "light blue")
plot(spa, asp = 1, col = "brown", cex = spe$Thth, xlab = "x (km)", ylab = "y (km)", main = "Grayling")
lines(spa, col = "light blue")
plot(spa, asp = 1, col = "brown", cex = spe$Alal, xlab = "x (km)", ylab = "y (km)", main = "Bleak")
lines(spa, col = "light blue")
plot(spa, asp = 1, col = "brown", cex = spe$Titi, xlab = "x (km)", ylab = "y (km)", main = "Tench")
lines(spa, col = "light blue")
summary(spe.dfs.rda)
RsquareAdj(spe.dfs.rda)$adj.r.squared
spe.part.dfs <- varpart(spe.hel, as.data.frame(dfs.df))
RsquareAdj(spe.dfs.rda)$adj.r.squared
source("./functions/polyvars.R")
env.square <- polyvars(env2, degr = 2)
names(env.square)
spe.envsq.fwd <- adespatial::forward.sel(spe.hel, env.square, adjR2thresh = R2ad)
spe.envsq.fwd
env.square <- polyvars(env2, degr = 2)
names(env.square)
# ----------
# full second-degree terms
spe.envsq.rda <- rda(spe.hel ~ ., env.square)
R2ad <- RsquareAdj(spe.envsq.rda)$adj.r.squared
spe.envsq.fwd <- adespatial::forward.sel(spe.hel, env.square, adjR2thresh = R2ad)
spe.envsq.fwd
envsquare.red <- env.square[, sort(spe.envsq.fwd$order)]
( spe.envsq.fwd.rda <- rda(spe.hel ~., envsquare.red) )
RsquareAdj(spe.envsq.fwd.rda)
summary(spe.envsq.fwd.rda)
RsquareAdj(spe.envsq.fwd.rda)
RsquareAdj(spe.dfs.rda)
summary(spe.envsq.fwd.rda)
RsquareAdj(spe.envsq.fwd.rda)
R2ad
graphics.off();  par(mfrow = c(1,1));
triplot.rda(spe.envsq.fwd.rda, site.sc = "lc", scaling = 2, plot.sites = FALSE, pos.env = 1, mult.arrow = 0.9, mult.spe = 0.9, mar.percent = 0)
colnames(ele.pH.helm) <- c("ele1", "ele2", "pH1", "pH2", "ele1pH1", "ele1pH2", "ele2pH1", "ele2pH2" )
covariables <- ele.pH.helm[, 3:8]
spe.bray27 <- vegdist(spe[1:27, ], "bray")
covariables
bray.ele.dbrda <-  dbrda(sqrt(spe.bray27) ~ ele.pH.helm[, 1:2] + Condition(covariables))
anova(bray.ele.dbrda, permutations = how(nperm = 999))
ele.fac. <- ele.fac
bray.env.cap <- capscale(spe[1:27, ] ~ ele.fac. + Condition(covariables), data = as.data.frame(ele.pH.helm), distance = "bray", add = "lingoes", comm = spe[1:27, ])
anova(bray.env.cap, permutations = how(nperm = 999))
anova(bray.env.cap, permutations = how(nperm = 999))
triplot.rda(bray.env.cap, site.sc = "wa", scaling = 1)
myRDA <- function(Y, X)
{
# ----------------------------------------------
## 1. Preparation of the data
Y.mat <- as.matrix(Y)
Yc <- scale(Y.mat, scale = FALSE)
X.mat <- as.matrix(X)
Xcr <- scale(X.mat)
# Dimensions
n <- nrow(Y)
p <- ncol(Y)
m <- ncol(X)
# ----------------------------------------------
## 2. Computation of the multivariate linear regression
# Matrix of regression coefficients (eq. 11.9)
B <- solve(t(Xcr) %*% Xcr) %*% t(Xcr) %*% Yc
# Matrix of fitted values (eq. 11.10)
Yhat <- Xcr %*% B
# Matrix of residuals
Yres <- Yc - Yhat
# ----------------------------------------------
## 3. PCA on fitted values
# Covariance matrix (eq. 11.12)
S <- cov(Yhat)
# Eigenvalue decomposition
eigenS <- eigen(S)
# How many canonical axes?
kc <- length(which(eigenS$values > 0.00000001))
# Eigenvalues of canonical axes
ev <- eigenS$values[1 : kc]
# Total variance (inertia) of the centred matrix Yc
trace = sum(diag(cov(Yc)))
# Orthonormal eigenvectors (contributions of response
# variables, scaling 1)
U <- eigenS$vectors[, 1 : kc]
row.names(U) <- colnames(Y)
# Site scores (vegan's wa scores, scaling 1; eq.11.17)
F <- Yc %*% U
row.names(F) <- row.names(Y)
# Site constraints (vegan's 'lc' scores, scaling 1;
# eq. 11.18)
Z <- Yhat %*% U
row.names(Z) <- row.names(Y)
# Canonical coefficients (eq. 11.19)
CC <- B %*% U
row.names(CC) <- colnames(X)
# Explanatory variables
# Species-environment correlations
corXZ <- cor(X, Z)
# Diagonal matrix of weights
D <- diag(sqrt(ev / trace))
# Biplot scores of explanatory variables
coordX <- corXZ %*% D    # Scaling 1
coordX2 <- corXZ         # Scaling 2
row.names(coordX) <- colnames(X)
row.names(coordX2) <- colnames(X)
# Scaling to sqrt of the relative eigenvalue
# (for scaling 2)
U2 <- U %*% diag(sqrt(ev))
row.names(U2) <- colnames(Y)
F2 <- F %*% diag(1/sqrt(ev))
row.names(F2) <- row.names(Y)
Z2 <- Z %*% diag(1/sqrt(ev))
row.names(Z2) <- row.names(Y)
# Unadjusted R2
R2 <- sum(ev/trace)
# Adjusted R2
R2a <- 1 - ((n - 1)/(n - m - 1)) * (1 - R2)
# ----------------------------------------------
# 4. PCA on residuals
# Write your own code as in Chapter 5. It could begin with :
#     eigenSres <- eigen(cov(Yres))
#     evr <- eigenSres$values
# ----------------------------------------------
# 5. Output
result <-
list(trace, R2, R2a, ev, CC, U, F, Z, coordX,
U2, F2, Z2, coordX2)
names(result) <-
c("Total_variance", "R2", "R2adj", "Can_ev",
"Can_coeff", "Species_sc1", "wa_sc1", "lc_sc1",
"Biplot_sc1", "Species_sc2", "wa_sc2", "lc_sc2",
"Biplot_sc2")
result
}
doubs.myRDA <- myRDA(spe.hel, env2)
summary(doubs.myRDA)
doubs.myRDA$R2adj
doubs.myRDA
names(doubs.myRDA)
spe.hel <- decostand(spe, "hellinger")
# MFA on 3 groups of variables: Regroup the 3 tables (Hellinger-transformed species, physiographic variables, chemical variables)
tab3 <- data.frame(spe.hel, envtopo, envchem)
dim(tab3)
tab3
# Number of variables in each group
( grn <- c(ncol(spe), ncol(envtopo), ncol(envchem)) )
graphics.off()
t3.mfa <- FactoMineR::MFA(tab3, group = grn,
type = c("c", "s", "s"),
ncp = 2,
name.group = c("Fish community", "Physiography", "Water quality"),
graph = FALSE)
t3.mfa
t3.mfa
summary(t3.mfa)
t3.mfa$ind
plot(t3.mfa, choix = "axes", habillage = "group", shadowtext = TRUE)
plot(t3.mfa, choix = "ind", partial = "all", habillage = "group")
plot(t3.mfa, choix = "var", habillage = "group", shadowtext = TRUE)
plot(t3.mfa, choix = "group")
rvp <- t3.mfa$group$RV
rvp[1, 2] <- coeffRV(spe.hel, scale(envtopo))$p.value
rvp[1, 3] <- coeffRV(spe.hel, scale(envchem))$p.value
rvp[2, 3] <- coeffRV(scale(envtopo), scale(envchem))$p.value
round(rvp[-4, -4], 6)
rvp[1, 2] <- ade4::coeffRV(spe.hel, scale(envtopo))$p.value
?coeffRV
library(FactoMineR)
rvp <- t3.mfa$group$RV
rvp[1, 2] <- coeffRV(spe.hel, scale(envtopo))$p.value
rvp[1, 3] <- coeffRV(spe.hel, scale(envchem))$p.value
rvp[2, 3] <- coeffRV(scale(envtopo), scale(envchem))$p.value
round(rvp[-4, -4], 6)
rvp
rvp
# ----------
rvp[1, 2] <- coeffRV(spe.hel, scale(envtopo))$p.value
rvp[1, 3] <- coeffRV(spe.hel, scale(envchem))$p.value
rvp[2, 3] <- coeffRV(scale(envtopo), scale(envchem))$p.value
round(rvp[-4, -4], 6)
rvp
rvp <- t3.mfa$group$RV
rvp
env3
summary(spe.cca)
( spe.cca <- vegan::cca(spe ~ ., env3) )
summary(spe.cca)
RsquareAdj(spe.cca)
par(mfrow = c(1,2))
plot(spe.cca, scaling = 1, display = c("sp", "lc", "cn"), main = "Triplot CCA spe ~ env3 - scaling 1")
plot(spe.cca, display = c("sp", "lc", "cn"), main = "Triplot CCA spe ~ env3 - scaling 2")
plot(spe.cca, scaling = 1, display = c("lc", "cn"), main = "Biplot CCA spe ~ env3 - scaling 1")
graphics.off()
par(mfrow = c(1,2))
# Note that the response variables (species) are represented by points and thus arrows are not available for them.
# ----------
# CCA scalng 1 biplot without species (using lc site scores)
# scaling 1 focuses on the distance relationships among sites, but the presence of species with extreme scores renders the plot
# difficult to interpret beyond trivialities.
plot(spe.cca, scaling = 1, display = c("lc", "cn"), main = "Biplot CCA spe ~ env3 - scaling 1")
# -->
# scaling 1:
# One can see two well-defined groups of sites, one linked to high elevation and very steep slope (sites 1-7 and 10)
# and another with the highest oxygen contents (sites 11 - 15).
# The remaining sites are distributed among vaarious conditions towards more eutrophic waters.
# Remember that this is a constrained ordination of the fish community data,
# not a PCA of the site environmental variables.
# ----------
plot(spe.cca, display = c("sp", "cn"), main = "Triplot CCA spe ~ env3 - scaling 2")
anova(spe.cca, permutations = how(nperm = 999))
anova(spe.cca, by = "axis", permutations = how(nperm = 999))
help(forward.sel)
cca.step.forward <- ordistep(cca(spe ~ 1, data = env3), scope = formula(spe.cca),
direction = "forward",
permutations = how(nperm = 199))
cca.step.forward
spe.cca.pars <- cca(spe ~ ele + oxy + bod, data = env3)
# ----------
anova(spe.cca.pars, permutations = how(nperm = 999))
anova(spe.cca.pars, permutations = how(nperm = 999), by = "axis")
# ----------
# R-square
RsquareAdj(spe.cca.pars)
RsquareAdj(spe.cca)
vif.cca(spe.cca)
vif.cca(spe.cca.pars)
ordirgl(spe.cca.pars, type = "t", scaling = 1)
install.packages("vegan3d", dep = t)
library(vegan3d)
# plot of the sites only (wa scores)
ordirgl(spe.cca.pars, type = "t", scaling = 1)
ordirgl(spe.cca.pars, scaling = 1, col = "purple")
ordirgl(spe.cca.pars, scaling = 1, col = "purple")
help(ordirgl)
ordirgl(spe.cca.pars, type = "t", scaling = 1, bg = "w")
gr <- cutree(hclust(vegdist(spe.hel, "euc"), "ward.D2"), 4)
ordirgl(spe.cca.pars, type = "t", scaling = 1, ax.col = "black", col = gr + 1)
ordirgl(spe.cca.pars, gr, scaling = 1)
orglspider(spe.cca.pars, gr, scaling = 1)
gr <- cutree(hclust(vegdist(spe.hel, "euc"), "ward.D2"), 4)
ordirgl(spe.cca.pars, type = "t", scaling = 1, ax.col = "black", col = gr + 1)
# connect sites to cluster centrokds
orglspider(spe.cca.pars, gr, scaling = 1)
gs <- cutree(hclust(vegdist(t(spe), method = "jaccard"), "ward.D2"), k = 4)
ordirgl(spe.cca.pars, display = "species", type = "t", col = gs + 1)
ordirgl(spe.cca.pars, type = "t", scaling = 2)
orgltext(spe.cca.pars, display = "species", type = "t", scaling = 2, col = "cyan")
spe.hel <- decostand(spe, "hellinger")
# Ward clustering result of Hellinger-transformed species data, cut into 4 groups
gr <- cutree(hclust(vegdist(spe.hel, "euc"), "ward.D2"), k = 4)
# Environmental matrix with only 3 variables (ele, oxy and bod)
env.pars2 <- as.matrix(env2[, c(1, 9, 10)])
# Verify multivariate homogeneity of within-group covariance matrices using the betadisper() function {vegan}
# null: the multivariate group dispersion matrices are homogeneous
env.pars2.d1 <- dist(env.pars2)
( env.MHV <- betadisper(env.pars2.d1, gr) )
anova(env.MHV)
permutest(env.MHV)	# Permutational test
help(betadisper)
( env.MHV <- betadisper(env.pars2.d1, gr) )
# Log transform ele and bod
env.pars3 <- cbind(log(env2$ele), env2$oxy, log(env2$bod))
colnames(env.pars3) <- c("ele.ln", "oxy", "bod.ln")
rownames(env.pars3) <- rownames(env2)
env.pars3.d1 <- dist(env.pars3)
# ----------
( env.MHV2 <- betadisper(env.pars3.d1, gr) )
# ----------
permutest(env.MHV2)
# -->
# This time the within-group covariance matrices are homogeneous.
# function Wilks.test() of package rrcov, χ2 test
rrcov::Wilks.test(env.pars3, gr)
lw <-  manova(env.pars3 ~ as.factor(gr))
summary(lw, test = "Wilks")
env.pars3.df <- as.data.frame(env.pars3)
( spe.lda <- lda(gr ~ ele.ln + oxy + bod.ln, data = env.pars3.df) )
library(MASS)
env.pars3.df <- as.data.frame(env.pars3)
( spe.lda <- lda(gr ~ ele.ln + oxy + bod.ln, data = env.pars3.df) )
summary(spe.lda)
( spe.lda <- lda(gr ~ ele.ln + oxy + bod.ln, data = env.pars3.df) )
summary(spe.lda)
spe.lda$means
( C <- spe.lda$scaling )
spe.lda
( C <- spe.lda$scaling )
newo <- data.frame(c(6.8, 5.5), c(9, 10), c(0.8, 1))
colnames(newo) <- colnames(env.pars3)
newo
# ----------
( predict.new <- predict(spe.lda, newdata = newo) )
predict.new$posterior
env.pars3.sc <- as.data.frame(scale(env.pars3.df))
# ----------
spe.lda2 <- lda(gr ~ ., data = env.pars3.sc)
# ----------
# group means
spe.lda2$means
# Compute the canonical eigenvalues
spe.lda2$svd^2
( C2 <- spe.lda2$scaling )
# ----------
# Compute the canonical eigenvalues
spe.lda2$svd^2
( Fp2 <- predict(spe.lda2)$x )
# Classification of the objects
( spe.class2 <- predict(spe.lda2)$class )
# Posterior probabilities of the objects to belong to the groups
# (rounded for easier interpretation)
( spe.post2 <- round(predict(spe.lda2)$posterior, 2) )
# Contingency table of prior versus predicted classifications
( spe.table2 <- table(gr, spe.class2) )
source("./functions/plot.lda.R")
plot.lda(lda.out = spe.lda2, groups = gr, plot.sites = 2, plot.centroids = 1, mul.coef = 2.35)
( spe.lda.jac <- lda(gr ~ ele.ln + oxy + bod.ln, data = env.pars3.sc, CV = TRUE) )
summary(spe.lda.jac)
# ----------
# Numbers and proportions of correct classification
spe.jac.class <- spe.lda.jac$class
spe.jac.table <- table(gr, spe.jac.class)
diag(prop.table(spe.jac.table, 1))
diag(prop.table(spe.table2, 1))
