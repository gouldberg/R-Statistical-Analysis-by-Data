for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
k <- seq(-999, 999, by = 1)
# C: autocovariance
C <- seq(-0.999, 0.999, by = 0.001) * 10
C <- rgamma(1, 10, n = length(k))
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
C <- rgamma(1, 10, n = length(k))
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
C
C
rnorm(1,10)
rnorm(1,10, 100)
help(rgamma)
help(rnorm)
help(rgamma)
C <- rgamma(n = length(k), shape = 10, rate = 1)
C
k <- seq(-999, 999, by = 1)
# C: autocovariance
C <- seq(-0.999, 0.999, by = 0.001) * 10
C <- rgamma(n = length(k), shape = 10, rate = 1)
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
k <- seq(-99, 99, by = 1)
# C: autocovariance
C <- seq(-0.99, 0.99, by = 0.01) * 10
C <- rgamma(n = length(k), shape = 10, rate = 1)
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
C <- rgamma(n = length(k), shape = 1, rate = 1)
C
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
C <- seq(-0.99, 0.99, by = 0.01) * 10
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
C <- rnorm(n = length(k), mean = 0, sd = 10)
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
sort(rnorm(n = length(k), mean = 0, sd = 10))[1:100]
C <- c(sort(rnorm(n = length(k), mean = 0, sd = 10))[1:100], sort(rnorm(n = length(k), mean = 0, sd = 10), decreasing = TRUE)[1:100])
C
k
C <- c(sort(rnorm(n = length(k), mean = 0, sd = 10))[1:99], 0, sort(rnorm(n = length(k), mean = 0, sd = 10), decreasing = TRUE)[1:99])
C
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f, rowSums(output), type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
f[501:1000]
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f[501:1000], rowSums(output)[501:1000], type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
C <- sort(rgamma(n = length(k), shape = 1, rate = 1))
# frequency domain:  -0.5 <= f <= 0.5
f <- seq(-0.5, 0.5, by = 0.001)
output <- matrix(0, nrow = length(f), ncol = length(C))
for(i in 1:length(f)){
for(j in 1:length(C)){
# p(f) = Ck * exp(-2 * pi + i * k * f)
output[i,j] <- C[j] * exp(-2 * pi * complex(re=0, im=1) * k[j] * f[i])
}
}
# ----------
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(f[501:1000], rowSums(output)[501:1000], type = "l", xlab = "frequency", ylab = "", main = "Power Spectral Density Function")
abline(v = 0, lty = 2)
x1 <- 2 * cos(2 * pi * 1:100 * 6 / 100) + 3 * sim(2 * pi * 1:100 * 6 / 100)
x2 <- 4 * cos(2 * pi * 1:100 * 10 / 100) + 5 * sim(2 * pi * 1:100 * 10 / 100)
x3 <- 6 * cos(2 * pi * 1:100 * 40 / 100) + 5 * sim(2 * pi * 1:100 * 40 / 100)
x <- x1 + x2 + x3
# ----------
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega = 6/100~~~A^2=13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega = 10/100~~~A^2=41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega = 40/100~~~A^2=85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
x1 <- 2 * cos(2 * pi * 1:100 * 6 / 100) + 3 * sim(2 * pi * 1:100 * 6 / 100)
x2 <- 4 * cos(2 * pi * 1:100 * 10 / 100) + 5 * sim(2 * pi * 1:100 * 10 / 100)
x3 <- 6 * cos(2 * pi * 1:100 * 40 / 100) + 5 * sim(2 * pi * 1:100 * 40 / 100)
x <- x1 + x2 + x3
# ----------
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega = 6/100~~~A^2=13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega = 10/100~~~A^2=41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega = 40/100~~~A^2=85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2=13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega==10/100~~~A^2=41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega==40/100~~~A^2=85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
x1 <- 2 * cos(2 * pi * 1:100 * 6 / 100) + 3 * sim(2 * pi * 1:100 * 6 / 100)
x2 <- 4 * cos(2 * pi * 1:100 * 10 / 100) + 5 * sim(2 * pi * 1:100 * 10 / 100)
x3 <- 6 * cos(2 * pi * 1:100 * 40 / 100) + 5 * sim(2 * pi * 1:100 * 40 / 100)
x <- x1 + x2 + x3
x1 <- 2 * cos(2 * pi * 1:100 * 6 / 100) + 3 * sin(2 * pi * 1:100 * 6 / 100)
x2 <- 4 * cos(2 * pi * 1:100 * 10 / 100) + 5 * sin(2 * pi * 1:100 * 10 / 100)
x3 <- 6 * cos(2 * pi * 1:100 * 40 / 100) + 5 * sin(2 * pi * 1:100 * 40 / 100)
x <- x1 + x2 + x3
# ----------
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2=13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega==10/100~~~A^2=41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega==40/100~~~A^2=85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
graphics.off()
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2=13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega==10/100~~~A^2=41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega==40/100~~~A^2=85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
x1 <- 2 * cos(2 * pi * 1:100 * 6 / 100) + 3 * sin(2 * pi * 1:100 * 6 / 100)
x2 <- 4 * cos(2 * pi * 1:100 * 10 / 100) + 5 * sin(2 * pi * 1:100 * 10 / 100)
x3 <- 6 * cos(2 * pi * 1:100 * 40 / 100) + 5 * sin(2 * pi * 1:100 * 40 / 100)
x <- x1 + x2 + x3
graphics.off()
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2=13))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2=13))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100))
graphics.off()
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2==13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega==10/100~~~A^2==41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega==40/100~~~A^2==85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
t <- 1:100
omega <- 6/100
x1 <- 2 * cos(2 * pi * omega * t) + 3 * sin(2 * pi * omega * t)
omega <- 10/100
x2 <- 4 * cos(2 * pi * omega * t) + 5 * sin(2 * pi * omega * t)
omega <- 40/100
x3 <- 6 * cos(2 * pi * omega * t) + 5 * sin(2 * pi * omega * t)
x <- x1 + x2 + x3
# ----------
graphics.off()
par(mfrow = c(2,2))
plot.ts(x1, ylim = c(-10, 10), main = expression(omega==6/100~~~A^2==13))
plot.ts(x2, ylim = c(-10, 10), main = expression(omega==10/100~~~A^2==41))
plot.ts(x3, ylim = c(-10, 10), main = expression(omega==40/100~~~A^2==85))
plot.ts(x, ylim = c(-16, 16), main = "sum")
mvspec(x1)
graphics.off()
par(mfrow = c(2,2))
mvspec(x1)
mvspec(x2)
mvspec(x3)
mvspec(x)
fft(x1)
Mod(2 * fft(x1) / 100)
P <- Mod(2 * fft(x1) / length(t))^2
Fr <- 0:99 / length(t)
plot(Fr, P, type = "l", xlab = "frequency", ylab = "scaled periodogram")
graphics.off()
par(mfrow = c(1,1))
P <- Mod(2 * fft(x1) / length(t))^2
Fr <- 0:99 / length(t)
plot(Fr, P, type = "l", xlab = "frequency", ylab = "scaled periodogram")
graphics.off()
par(mfrow = c(1,1))
P <- Mod(2 * fft(x) / length(t))^2
Fr <- 0:99 / length(t)
plot(Fr, P, type = "l", xlab = "frequency", ylab = "scaled periodogram")
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram")
graphics.off()
par(mfrow = c(2,2))
mvspec(x1)
mvspec(x2)
mvspec(x3)
mvspec(x)
P <- Mod(fft(x))^2
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram")
mvspec(x)
P <- Mod(fft(x) / length(t))^2
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram")
P <- Mod(fft(x) / length(t))
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram")
P <- Mod(fft(x))
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram")
mvspec(x)
P <- 2 * Mod(fft(x))
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram")
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram", xlim = c(0, 0.5), ylim = c(0, 1500))
P <- 2 * Mod(fft(x))
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram", xlim = c(0, 0.5), ylim = c(0, 1500))
P <- Mod(2 * fft(x))
Fr <- 0:99 / length(t)
plot(Fr, P, type = "o", xlab = "frequency", ylab = "scaled periodogram", xlim = c(0, 0.5), ylim = c(0, 1500))
data(star, package = "astsa")
str(star)
head(star)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(star)
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
MTSplot(star, ylab = "star magnitude", xlab = "day")
plot(star, ylab = "star magnitude", xlab = "day")
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot(star, ylab = "star magnitude", xlab = "day")
acf2(star, lag.max = 6, plot=TRUE)
par(mfrow = c(1,1))
acf2(star, lag.max = 6, plot=TRUE)
star
acf(star, lag.max = 6, plot=TRUE)
acf2(star, lag = 6, plot=TRUE)
acf2(star, lag = 6)
acf2(star)
graphics.off()
par(mfrow = c(1, 1))
astsa::acf2(star)
forecast::ndiffs(star)
astsa::lag1.plot(star, max.lag = 24)
astsa::acf2(star)
star.per <- astsa::mvspec(star, log = "no")
abline(v = 1/4, lty = 2)
nextn(length(star))
star.per <- astsa::mvspec(star, log = "yes")
par(mfrow=c(2,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
star.per <- astsa::mvspec(star, log = "no")
star.per <- astsa::mvspec(star, log = "yes")
length(star)
length(star)
nextn(length(star))
star.per$spec[40]
df <- 2
U <- qchisq(0.025, df)
L <- qchisq(0.975, df)
df * star.per$spec[40] / L
df * star.per$spec[40] / U
df * star.per$spec[10] / L
df * star.per$spec[10] / U
Freq <- (1:n -1) / n
n <- length(star)
Per <- Mod(fft(star - mean(star))) ^ 2 / n
Freq <- (1:n -1) / n
( Per <- Mod(fft(star - mean(star))) ^ 2 / n )
( Freq <- (1:n -1) / n )
( Freq <- (1:n-1) / n )
n <- length(star)
( Per <- Mod(fft(star - mean(star))) ^ 2 / n )
( Freq <- (1:n-1) / n )
plot(Freq[1:50], Per[1:50], type = "h", lwd = 3, ylab = "Periodogram", xlab = "Frequency")
# ----------
u <- which.max(Per[1:50])
uu <- which.max(Per[1:50][-u])
1 / Freq[22]
1 / Freq[26]
text(0.05, 7000, "24 day cycle")
text(0.027, 9000, "29 day cycle")
y <- cbind(1:50, Freq[1:50], Per[1:50])
y[order(y[,3]),]
graphics.off()
par(mfrow = c(2,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot(star, ylab = "star magnitude", xlab = "day")
plot(Freq[1:50], Per[1:50], type = "h", lwd = 3, ylab = "Periodogram", xlab = "Frequency")
( u <- which.max(Per[1:50]) )
( uu <- which.max(Per[1:50][-u]) )
1 / Freq[u]
1 / Freq[uu]
1 / Freq[u]
1 / Freq[uu]
1 / Freq[u]
1 / Freq[uu]
text(0.05, 7000, "24 day cycle")
text(0.027, 9000, "29 day cycle")
# ----------
graphics.off()
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot.ts(x <- 2 * cos(2 * pi * alpha * t) * cos(2 * pi * delta * t))
lines(cos(2 * pi * (alpha - delta) * t) + cos(2 * pi * (alpha - delta) * t), col = 2)
Px <- Mod(fft(x))^2
plot(0:199/200, Px, type = "o")
graphics.off()
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot.ts(x <- 2 * cos(2 * pi * alpha * t) * cos(2 * pi * delta * t))
t <- 1:200
alpha <- 0.2
delta <- 0.01
# ----------
graphics.off()
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot.ts(x <- 2 * cos(2 * pi * alpha * t) * cos(2 * pi * delta * t))
lines(cos(2 * pi * (alpha - delta) * t) + cos(2 * pi * (alpha - delta) * t), col = 2)
graphics.off()
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot.ts(x <- 2 * cos(2 * pi * alpha * t) * cos(2 * pi * delta * t))
lines(cos(2 * pi * (alpha - delta) * t) + cos(2 * pi * (alpha + delta) * t), col = 2)
Px <- Mod(fft(x))^2
plot(0:199/200, Px, type = "o")
y <- cbind(1:50, Freq[1:50], Per[1:50])
y[order(y[,3]),]
( u <- which.max(Per[1:50]) )
( uu <- which.max(Per[1:50][-u]) )
1 / Freq[u]
Freq[u]
y <- cbind(1:50, Freq[1:50], Per[1:50])
y[order(y[,3]),]
graphics.off()
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot.ts(x <- 2 * cos(2 * pi * alpha * t) * cos(2 * pi * delta * t))
# the same
lines(cos(2 * pi * (alpha - delta) * t) + cos(2 * pi * (alpha + delta) * t), col = 2)
x
t <- 1:200
alpha <- 0.2
delta <- 0.01
# ----------
x <- 2 * cos(2 * pi * alpha * t) * cos(2 * pi * delta * t)
x2 <- cos(2 * pi * (alpha - delta) * t) + cos(2 * pi * (alpha + delta) * t)
# ----------
graphics.off()
par(mfrow = c(1,1), mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot.ts(x)
# the same
lines(x2, col = 2)
Px <- Mod(fft(x))^2
plot(0:199/200, Px, type = "o")
par(mfrow = c(3,1))
arma.spec(log = "no", main = "White Noise")
arma.spec(ma = 0.5, log = "no", main = "Moving Average")
arma.spec(ar = c(1, -0.9), log = "no", main = "Autoregression")
arima.sim(p = 1, d = 0, q = 1)
help(arima.sim)
ts.sim <- arima.sim(list(ar = order = c(1, 0, 1), ar = 0.7), n = 200)
ts.plot(ts.sim)
par(mfrow = c(2,1))
ts.sim <- arima.sim(list(ar = order = c(1, 0, 1), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1, 0, 1), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim)
mvspec(ts.sim, log = "no")
par(mfrow = c(2,1), mar = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2), mgp = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
par(mfrow = c(2,1), mar = c(2,2,2,2), mgp = c(2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2), mgp = c(2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2), mgp = c(1,1,1))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2), mgp = c(0,0,0))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
help(mvspec)
# ------------------------------------------------------------------------------
# Raw periodogram for ARIMA model:  arima.sim --> mvspec
# ------------------------------------------------------------------------------
par(mfrow = c(2,1), mar = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(2, 1, 2), ar = 0.7, ma = 0.2), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
ts.sim <- arima.sim(list(order = c(2, 1, 2), ar = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
ts.sim <- arima.sim(list(order = c(2, 1, 2), ma = 0.7), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
help(arima)
help(arima.sim)
ts.sim <- arima.sim(list(order = c(2, 1, 2), ar = c(0.7, -0.2), ma = c(0.4, -0.2), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
par(mfrow = c(2,1), mar = c(2,2,2,2))
ts.sim <- arima.sim(list(order = c(2, 1, 2), ar = c(0.7, -0.2), ma = c(0.4, -0.2)), n = 200)
ts.sim <- arima.sim(list(order = c(1, 1, 1), ar = c(0.7), ma = c(0.4)), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
ts.sim <- arima.sim(list(order = c(2, 1, 2), ar = c(0.7, -0.2), ma = c(0.4, -0.2)), n = 200)
ts.plot(ts.sim)
mvspec(ts.sim, log = "yes")
help(fft)
rm(list=ls())
data(salttemp, package = "astsa")
data(salt, package = "astsa")
data(saltemp, package = "astsa")
data(salt, package = "astsa")
str(soltemp)
str(saltemp)
str(salt)
head(saltemp)
head(salt)
par(mfrow = c(2,1))
ts.plot(saltemp, salt)
ts.plot(saltemp, salt)
par(mfrow = c(1,1))
ts.plot(saltemp, salt)
