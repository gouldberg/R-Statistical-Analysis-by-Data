pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
# ----------
# compute counterfactual mean divorve (mu)
mu <- link(mod3, data = pred_data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
# ----------
# simulate counterfactual divorce outcomes
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
# ----------
# display predictions, hiding raw data with type = "n"
plot(Divorce ~ Marriage.s, data = d, type = "n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
R.avg <- mean(d$Marriage.s)
A.seq <- seq(from = -3, to=3.5, length.out = 30)
pred.data2 <- data.frame(
Marriage.s = R.avg,
MedianAgeMarriage.s = A.seq
)
mu <- link(mod3, data = pred.data2)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
A.sim <- sim(mod3, data = pred.data2, n = 1e4)
A.PI <- apply(A.sim, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, type = "n")
mtext("Marriage.s = 0")
lines(A.seq, mu.mean)
shade(mu.PI, A.seq)
shade(A.PI, A.seq)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
# ----------
# compute counterfactual mean divorve (mu)
mu <- link(mod3, data = pred_data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
mu <- link(mod3, data = pred.data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
# simulate counterfactual divorce outcomes
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
plot(Divorce ~ Marriage.s, data = d, type = "n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
R.avg <- mean(d$Marriage.s)
A.seq <- seq(from = -3, to=3.5, length.out = 30)
pred.data2 <- data.frame(
Marriage.s = R.avg,
MedianAgeMarriage.s = A.seq
)
mu <- link(mod3, data = pred.data2)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
A.sim <- sim(mod3, data = pred.data2, n = 1e4)
A.PI <- apply(A.sim, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, type = "n")
mtext("Marriage.s = 0")
lines(A.seq, mu.mean)
shade(mu.PI, A.seq)
shade(A.PI, A.seq)
# so it uses original data
mu <- link(mod3)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
divorce.sim <- sim(mod3, n = 1e4)
divorce.PI <- apply(divorce.sim, 2, PI)
# ----------
plot(mu.mean ~ d$Divorce, col = rangi2, ylim = range(mu.PI), xlab = "Observed divorce", ylab = "Predicted divorce")
abline(a = 0, b = 1, lty = 2)
for(i in 1:nrow(d)) lines(rep(d$Divorce[i], 2), c(mu.PI[1,i], mu.PI[2, i]), col = rangi2)
identity(x = d$Divorce, y = mu.mean, labels = d$Loc, cex = 0.8)
identify(x = d$Divorce, y = mu.mean, labels = d$Loc, cex = 0.8)
divorce.resid <- d$Divorce - mu.mean
o <- order(divorce.resid)
dotchart(divorce.resid[o], labels = d$Loc[o], xlim = c(-6,5), cex = 0.6)
abline(v = 0, col = col.alpha("black", 0.2))
for(i in 1:nrow(d)){
j <- o[i]
lines(d$Divorce[j] - c(mu.PI[1,j], mu.PI[2,j]), rep(i,2))
points(d$Divorce[j] - c(divorce.PI[1,j], divorce.PI[2,j]), rep(i,2), pch = 3, cex = 0.5, col = "gray")
}
rm(list=ls())
gra
graphics.off()
data("chredlin", package = "faraway")
install.packages("faraway", dep=T)
data("chredlin", package = "faraway")
str(chredlin)
data("chredlin", package = "faraway")
str(chredlin)
# ------------------------------------------------------------------------------
# basics
# ------------------------------------------------------------------------------
psych::describe(chredlin)
psych::describe(chredlin)
psych::describe(chredlin)
summary(chredlin)
psych::describe(chredlin)
summary(lm(involact ~ race, data = chredlin))
psych::describe(chredlin)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)),
groups=FALSE,
strip = strip.custom(bg = 'white',
par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE),
y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data", cex = 1.5))
print(P)
}
MyVar <- c("race", "fire", "theft", "age", "involact", "income")
Mydotplot(chredlin[, MyVar])
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)),
groups=FALSE,
strip = strip.custom(bg = 'white',
par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE),
y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data", cex = 1.5))
print(P)
}
MyVar <- c("race", "fire", "theft", "age", "involact", "income")
Mydotplot(chredlin[, MyVar])
data("chredlin", package = "faraway")
str(chredlin)
# ------------------------------------------------------------------------------
# Assess collineartity among continuous variables:  multi-panel scatterplots
# ------------------------------------------------------------------------------
Mypairs <- function(Z) {
MyVarx <- colnames(Z)
pairs(Z, labels = MyVarx,
cex.labels =  2,
lower.panel = function(x, y, digits=2, prefix="", cex.cor = 7) {
panel.cor(x, y, digits, prefix, cex.cor)},
upper.panel =  function(x, y) points(x, y,
pch = 16, cex = 0.8,
col = gray(0.1)))
#print(P)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor = 6)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) { cex <- 0.9/strwidth(txt) } else {
cex = cex.cor}
text(0.5, 0.5, txt, cex = cex * r)
}
MyVar <- c("race", "fire", "theft", "age", "involact", "income")
Mypairs(chredlin[, MyVar])
psych::pairs.panels(chredlin)
ggplot(chredlin, aes(race, fire)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(race, theft)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
# -->
# We see that there is indeed a relationship between the fire rate and the percentage of minorities.
# We also see that there is large outlier that may have a disproportionate effect on the relationship between the theft rate and the percentage of minorities.
# race vs. income,  fire vs. theft, race vs, race are moderately correlated.
psych::pairs.panels(chredlin)
psych::pairs.panels(chredlin, method = "spearman", stars = TRUE)
library(ggplot2)
ggplot(chredlin, aes(race, fire)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
psych::pairs.panels(chredlin, method = "spearman", stars = TRUE)
ggplot(chredlin, aes(race, theft)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(race, fire)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(race, involact)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(fire, involact)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(theft, involact)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(age, involact)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(income, involact)) + geom_point() + stat_smooth(method = "lm", col = "blue") + stat_smooth(method = "loess", col = "red")
ggplot(chredlin, aes(side, involact)) + geom_point(position = position_jitter(width = .2, height = 0))
ggplot(chredlin, aes(side, involact)) + geom_point(position = position_jitter(width = .2, height = 0))
str(chredlin)
library(car)
formula <- ~ race + fire + theft + age + income + involact
scatterplotMatrix(formula, data = mammalsleep,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
scatterplotMatrix(formula, data = chredlin,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ race + fire + theft + age + income + involact | side
scatterplotMatrix(formula, data = chredlin,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
lmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
car::vif(lmod)
summary(lmod)
car::vif(lmod)
plot(lmod, 1:2)
car::residualPlots(lmod)
termplot(lmod, partial.resid = TRUE, terms = 1:2, se = TRUE, rug = TRUE)
par(mfrow = c(2,2))
plot(lmod)
resi <- residuals(linmod)
# resi <- resid(linmod)
summary(resi)
car::densityPlot(resi)
resi <- residuals(linmod)
linmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
# linmod <- lm(involact ~ race + fire + theft + age + income, data = chredlin)
# ------------------------------------------------------------------------------
# model diagnostics:  residuals
# ------------------------------------------------------------------------------
resi <- residuals(linmod)
# resi <- resid(linmod)
summary(resi)
car::densityPlot(resi)
car::residualPlots(linmod)
residualPlot(linmod, groups = chredlin$side)
confint(linmod)
confint.default(linmod, level = 0.95)
car::Confint(linmod)
library(effects)
eff <- effects::allEffects(linmod)
eff
# ----------
# plot main effets of each variable
plot(eff)
plot(predictorEffects(linmod))
predictorEffects(linmod)
plot(predictorEffects(linmod))
predictorEffects(linmod)
plot(eff)
summary(linmod)
stand.resid4 <- rstandard(linmod)
# studentized Residuals
stud.resid4 <- rstudent(linmod)
# ----------
par(mfrow=c(2,1))
plot(stand.resid4, ylim = c(min(-3, stand.resid4), max(3, stand.resid4)), main = "Standardized residuals", type = "h")
abline(h = c(3,2,0,-2,-3), lty = "dotted", col = c("red", "blue", "gray", "blue", "red"))
plot(stud.resid4, ylim = c(min(-3, stud.resid4), max(3, stud.resid4)), main = "Studentized residuals", type = "h")
abline(h = c(3,2,0,-2,-3), lty = "dotted", col = c("red", "blue", "gray", "blue", "red"))
car::influenceIndexPlot(linmod, vars = c("studentized"))
car::outlierTest(linmod)
par(mfrow = c(1,1))
influencePlot(linmod)
op <- par(mar = c(5, 4, 1, 1) + .1, cex.lab = 1.2)
res <- car::influencePlot(linmod, scale = 8)
k <- length(coef(linmod))
n <- nrow(data)
text(x = c(2, 3) * k / n, y = -1.8, c("2k/n", "3k/n"), cex = 1.2)
idx <- which(rownames(data) %in% rownames(res))
cbind(data[idx,], res)
op <- par(mar = c(5, 4, 1, 1) + .1, cex.lab = 1.2)
res <- car::influencePlot(linmod, scale = 8)
k <- length(coef(linmod))
n <- nrow(chredlin)
text(x = c(2, 3) * k / n, y = -1.8, c("2k/n", "3k/n"), cex = 1.2)
idx <- which(rownames(chredlin) %in% rownames(res))
cbind(chredlin[idx,], res)
car::influenceIndexPlot(linmod, vars = c("Cook", "studentized", "hat"), id.n = 4)
infl <- influence.measures(linmod)
summary(infl)
head(infl$infmat)
dfbetas <- data.frame(infl$infmat[,2:7])
head(dfbetas)
var <- "dfb.race"
op <- par(mar = c(5, 5, 1, 1) + .1)
cols <- as.numeric(chredli$side)
plot(dfbetas[,var], type = "h", col = cols, xlab = "Observation index", ylab = expression(delta * beta[var]), cex.lab = 1.3)
points(dfbetas[,var], col = cols)
var <- "dfb.race"
op <- par(mar = c(5, 5, 1, 1) + .1)
cols <- as.numeric(chredli$side)
cols <- as.numeric(chredlin$side)
plot(dfbetas[,var], type = "h", col = cols, xlab = "Observation index", ylab = expression(delta * beta[var]), cex.lab = 1.3)
points(dfbetas[,var], col = cols)
big = abs(dfbetas[,var]) > .25
idx <- 1:nrow(dfbetas)
text(idx[big], dfbetas[big, var], label = rownames(dfbetas)[big], cex = 0.9, pos = ifelse(dfbetas[big, var] > 0, 3, 1), xpd = TRUE)
abline(h = c(-0.25, 0, .25), col = "gray")
par(op)
car::scatterplotMatrix(dfbetas, smooth = FALSE, id = TRUE, showLabels=list(method = "mahal", n = 2, cex = 1.2, location = "lr"),
ellipse = TRUE, levels = 0.95, robust = FALSE, diagonal = "histogram", col = gray(0.6))
mod_obj <- linmod
summary(mod_obj)
car::crPlots(mod_obj, ~ race, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ race, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ fire, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ fire, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ theft, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ theft, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ age, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ age, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ poly(log(income),3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + log(income) + poly(log(income), 3), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income),3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 3), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income),3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 2), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income),2), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj2, ~ poly(log(income),2), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 4), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 4), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 3), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 5), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 5), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 4), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 4), smooth = list(span = 0.5), id = TRUE)
plot(Effect(c("race", "theft"), linmod4),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("race", "theft"), linmod),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("race", "side"), linmod),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("race", "theft"), linmod),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("log(income)", "race"), linmod),
confint = list(style = "bands"),
#     confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("income", "race"), linmod),
confint = list(style = "bands"),
#     confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
fitp <- cbind(linmod$model, pred = predict(linmod))
head(fitp)
colnames(fitp) <- c("involact", "race", "fire", "theft", "age", "logincome", "pred")
# ----------
library(ggplot2)
graphics.off()
gg1 <- ggplot(fitp, aes(x = race, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg1
gg1 + facet_grid(~ side)
gg2 <- ggplot(fitp, aes(x = logincome, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 + facet_grid(~ type)
gg2
anova(linmod)
anova(lm(involact ~ race + fire + theft + age + log(income), data = chredling))
anova(lm(involact ~ race + fire + theft + age + log(income), data = chredlin))
car::Anova(linmod)
( listcombo <- unlist(sapply(0:4, function(x) combn(4, x, simplify = FALSE)), recursive = FALSE) )
( predterms <- lapply(listcombo, function(x) paste(c("race", c("fire", "theft", "age", "log(income)")[x]), collapse = "+")) )
coefm <- matrix(NA, 16, 2)
for(i in 1:16){
lmi <- lm(as.formula(paste("involact ~ ", predterms[[i]])), data = chredlin)
# "race"'s estimated coefficient and pvalue
coefm[i,] <- summary(lmi)$coef[2,c(1,4)]
}
rownames(coefm) <- predterms
colnames(coefm) <- c("beta", "pvalue")
# ----------
round(coefm, 4)
# -->
# We can see that the value of coefficient for race varies somewhat with a high value about double the low value.
lmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
# ----------
lm.influence(lmod)
# lm.influence
( diags <- data.frame(lm.influence(lmod)$coef) )
# influence.measures
( diags2 <- data.frame(influence.measures(lmod)$infmat) )
ggplot(diags, aes(row.names(diags), race)) + geom_linerange(aes(ymax = 0, ymin = race)) +
theme(axis.text.x = element_text(angle = 90)) + xlab("ZIP") + geom_hline(yintercept = 0)
ggplot(diags2, aes(row.names(diags), dfb.race)) + geom_linerange(aes(ymax = 0, ymin = dfb.race)) +
theme(axis.text.x = element_text(angle = 90)) + xlab("ZIP") + geom_hline(yintercept = 0)
# Scatter plot of leave-one-out change by both of fire and theft
ggplot(diags, aes(fire, theft)) + geom_text(label = row.names(diags))
car::influencePlot(lmod)
chredlin[c("60607", "60610"),]
# -->
# These are high theft and fire zip codes.
# ----------
( tmp <- match(c("60607", "60610"), row.names(chredlin)) )
lmode <- lm(involact ~ race + fire + theft + age + log(income), chredlin, subset = -c(tmp))
summary(lmode)
# -->
# theft and age are no longer significant at the 5% level.
# The coefficient for race is reduced compared to the full data fit but remains statistically significant.
# So we have verified that our conclusions are also robust to the exclusion of one or perhaps two cases from the data.
# ------------------------------------------------------------------------------
# Removing outliers and "theft" variable
# ------------------------------------------------------------------------------
modalt <- lm(involact ~ race + fire + log(income) + age, data = chredlin, subset = -c(tmp))
summary(modalt)
# -->
# In this model, race no longer meets the threshold for significance....  --> model uncertainty
# ----------
summary(lm(involact ~ race + fire + theft + age, subset = (side == "s"), data = chredlin))
summary(lm(involact ~ race + fire + theft + age, subset = (side == "n"), data = chredlin))
# -->
# We see that race is significant in the north, but not in the south.
# By dividing the data into smaller and smaller subsets it is possible to dilute the significance of any predictor.
# On the other hand, it is important not to aggregate all data without regard to whether it is reasonable.
summary(lm(involact ~ race + fire + theft + age, subset = (side == "s"), data = chredlin))
summary(lm(involact ~ race + fire + theft + age, subset = (side == "n"), data = chredlin))
library(mgcv)
# It seems reasonable that the predictors would have a multiplicative rather than additive effect on the mean response
# In the standard linear model, this would be achieved by logging the response, but that is not possible when some response values are zero.
# We avoid that obstable by using the log in the link.
twmod <- gam(involact ~ race + fire + theft + age + log(income), family = tw(link = "log"), data = chredlin)
summary(twmod)
twmod$fit
xgrid <- seq(1e-10, 1.25, len = 100)
p <- 1.108
phi <- 0.30847
# expexted mean response
( mu <- twmod$fit[1] )
# the mean of Poisson
( poismean <- mu ^ (2-p) / (phi * (2 - p)) )
# probability of a zero response
( p0 <- exp(-poismean) )
( twden <- exp(ldTweedie(xgrid, mu, p = p, phi = phi)[,1]) )
( dmax <- max(twden * (1 - p0)) )
plot(xgrid, twden * (1 - p0), type = "l", xlab = "x", ylab = "Density")
segments(0, 0, 0, dmax, lwd = 2)
text(0.05, dmax, paste0("p=", signif(p0, 3)))
summary(twmod)
summary(twmod)
twmod$fit
linmod2 <- lm(involact ~ race + fire + age + income, data = chredlin)
summary(linmod2)
linmod2 <- lm(involact ~ race + fire + age + theft, data = chredlin)
summary(linmod2)
linmod2 <- lm(involact ~ -1 + race + fire + age + theft, data = chredlin)
summary(linmod2)
stargazer::stargazer(linmod, linmod2, twmod, type = "text")
# intercept only model
linmod0 <- update(linmod, . ~ 1)
summary(linmod0)
anova(linmod0, linmod)
anova(linmod, linmod2)
anova(linmod, twmod)
anova(linmod, twmod)
Anova(linmod, twmod)
AIC(linmod, linmod2, twmod)
library(AICcmodavg)
mynames <- paste0("M", as.character(1:3))
myaicc <- aictab(cand.set = list(linmod, linmod2, twmod),
modnames = mynames, sort = TRUE, second.ord = TRUE)
mynames <- paste0("M", as.character(1:2))
# second.ord = TRUE/FALSE:  AICc/AIC is computed
myaicc <- aictab(cand.set = list(linmod, linmod2),
modnames = mynames, sort = TRUE, second.ord = TRUE)
as.data.frame(myaicc)
linmod3 <- lm(involact ~ race + fire + age, data = chredlin)
summary(linmod3)
linmod4 <- lm(involact ~ race + fire + theft + age + log(income) + side, data = chredlin)
summary(linmo4)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ -1 + race + fire + theft + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + log(income) + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + log(income) * age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + log(income) * age, data = chredlin)
summary(linmod4)
myaicc <- aictab(cand.set = list(linmod, linmod2, linmod3, linmod4),
modnames = mynames, sort = TRUE, second.ord = TRUE)
as.data.frame(myaicc)
mynames <- paste0("M", as.character(1:4))
# second.ord = TRUE/FALSE:  AICc/AIC is computed
myaicc <- aictab(cand.set = list(linmod, linmod2, linmod3, linmod4),
modnames = mynames, sort = TRUE, second.ord = TRUE)
as.data.frame(myaicc)
confset(cand.set = list(linmod, linmod2, linmod3, linmod4), modnames = mynames, level = 0.75)
evidence(myaicc)
myaicc2 <- as.data.frame(myaicc)[,-7]
myaicc2$Eratio <- round(max(myaicc2$AICcWt) / myaicc2$AICcWt, 3)
data.frame(Model = myaicc2$Modnames, round(myaicc2[,-1], 3))
