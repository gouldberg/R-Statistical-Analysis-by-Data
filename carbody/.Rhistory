ks$x0n
sqrt(ks$P0n)
graphics.off()
par(mfrow = c(1, 1))
Time <- 1:num
plot(Time, y, main = "Precdict, Filter, Smooth", ylim = c(-0.6, 1))
lines(ks$xp, col = "blue", lwd = 2)
# lines(ks$xp + 2 * sqrt(ks$Pp), lty = 2, col = 4)
# lines(ks$xp - 2 * sqrt(ks$Pp), lty = 2, col = 4)
lines(ks$xf, col = "red", lwd = 2, lty = 2)
# lines(ks$xf + 2 * sqrt(ks$Pf), lty = 2, col = 4)
# lines(ks$xf - 2 * sqrt(ks$Pf), lty = 2, col = 4)
lines(ks$xs, col = 3, lwd = 1, lty = 2)
# lines(ks$xs + 2 * sqrt(ks$Ps), lty = 2, col = 4)
# lines(ks$xs - 2 * sqrt(ks$Ps), lty = 2, col = 4)
# -->
# Note that one-step-aheaad prediction is more uncertain than the corresponding filtered value,
# which, in turn, is more uncertain than the corresponding smoother value
# Also, in each case, the error variances stabilize quickly
# ----------
# Initial value info.
ks$x0n
sqrt(ks$P0n)
data(globtemp, package = "astsa")
str(globtemp)
# ------------------------------------------------------------------------------
# Filtering and Smoothing:  apply a priori parameter
# ------------------------------------------------------------------------------
# filter and smooth  (Ksmooth0 does both)
# Ksmooth0 calls Kfilter0 for the filtering part.
# These scripts use a Cholesky-type decomposition of Q and R;  they are denoted by cQ and cR
# A: time-invariant observation matrix
# mu0: initial state mean vector
# Sigma0:  initial state covariance matrix
# Phi:  state transition matrix
# cQ:  Cholesky-type decomposition of state error covariance matrix Q
# cR:  Cholesky-type decomposition of observation error covariance matrix R
num <- length(globtemp)
ks <- astsa::Ksmooth0(num, y = globtemp, A = 1, mu0 = globtemp[1], Sigma0 = 1, Phi = 1, cQ = 1, cR = 1)
# letters p, f, s denote prediction, filter, and smooth, respectively
names(ks)
# ----------
graphics.off()
par(mfrow = c(1, 1))
Time <- 1:num
plot(Time, y, main = "Precdict, Filter, Smooth", ylim = c(-0.6, 1))
lines(ks$xp, col = "blue", lwd = 2)
# lines(ks$xp + 2 * sqrt(ks$Pp), lty = 2, col = 4)
# lines(ks$xp - 2 * sqrt(ks$Pp), lty = 2, col = 4)
lines(ks$xf, col = "red", lwd = 2, lty = 2)
# lines(ks$xf + 2 * sqrt(ks$Pf), lty = 2, col = 4)
# lines(ks$xf - 2 * sqrt(ks$Pf), lty = 2, col = 4)
lines(ks$xs, col = 3, lwd = 1, lty = 2)
# lines(ks$xs + 2 * sqrt(ks$Ps), lty = 2, col = 4)
# lines(ks$xs - 2 * sqrt(ks$Ps), lty = 2, col = 4)
# -->
# Note that one-step-aheaad prediction is more uncertain than the corresponding filtered value,
# which, in turn, is more uncertain than the corresponding smoother value
# Also, in each case, the error variances stabilize quickly
# ----------
# Initial value info.
ks$x0n
sqrt(ks$P0n)
graphics.off()
par(mfrow = c(1, 1))
Time <- 1:num
plot(Time, y, main = "Precdict, Filter, Smooth", ylim = c(-0.6, 1))
num <- length(globtemp)
ks <- astsa::Ksmooth0(num, y = globtemp, A = 1, mu0 = globtemp[1], Sigma0 = 1, Phi = 1, cQ = 1, cR = 1)
names(ks)
names(ks)
# ----------
graphics.off()
par(mfrow = c(1, 1))
Time <- 1:num
plot(Time, y, main = "Precdict, Filter, Smooth", ylim = c(-0.6, 1))
lines(ks$xp, col = "blue", lwd = 2)
plot(Time, globtemp, main = "Precdict, Filter, Smooth", ylim = c(-0.6, 1))
lines(ks$xp, col = "blue", lwd = 2)
# lines(ks$xp + 2 * sqrt(ks$Pp), lty = 2, col = 4)
# lines(ks$xp - 2 * sqrt(ks$Pp), lty = 2, col = 4)
lines(ks$xf, col = "red", lwd = 2, lty = 2)
# lines(ks$xf + 2 * sqrt(ks$Pf), lty = 2, col = 4)
# lines(ks$xf - 2 * sqrt(ks$Pf), lty = 2, col = 4)
lines(ks$xs, col = 3, lwd = 1, lty = 2)
# lines(ks$xs + 2 * sqrt(ks$Ps), lty = 2, col = 4)
# lines(ks$xs - 2 * sqrt(ks$Ps), lty = 2, col = 4)
help(Ksmooth0)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\carbody")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  car body coating process data
# ------------------------------------------------------------------------------
dat <- read.csv("carbody_dat.txt", header = TRUE, skip = 2, sep = "\t")
str(dat)
car::some(dat)
# ----------
dat_s <- data.frame(scale(dat))
head(dat_s)
library(lavaan)
cormat <- cor(dat_s)
library("qgraph")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s))
cormat <- cor(dat_s[,-c("centmaku", "makuwid")])
cormat <- cor(dat_s[,c(-"centmaku", -"makuwid")])
cormat <- cor(dat_s %>% dplyr::select(-centmaku, -makuwid))
library("qgraph")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s))
head(dat_s)
summary(dat_)
summary(dat_s)
psych::describe(dat_s)
dat_s2 <- dat_s %>% dplyr::select(-centmaku, -makuwid)
cormat <- cor(dat_ss)
library("qgraph")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_ss))
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
help(qgraph)
names(cornet)
cornet$Edgelist
cornet$Edgelist
cornet$graphAttributes
names(cornet$Arguments)
cornet$Arguments$Nodes$names
cornet$Arguments$Nodes
cornet$labels
names(cornet)
cornet$graphAttributes
cornet$graphAttributes$Nodes
cornet$graphAttributes$Nodes$names
head(dat_s2)
cornet$Edgelist
bind_rows(cornet$Edgelist)
ed[match(df$from, ed)]
ed <- cornet$graphAttributes$Nodes$names
ed[match(df$from, ed)]
match(df$from, ed)
df$from
df <- bind_rows(cornet$Edgelist)
df
df$from
ed[match(df$from, ed)]
match(df$from, ed)
ed <- data.frame(num = 1:length(ed), ed = ed)
ed
cornet$Edgelist
ed <- cornet$graphAttributes$Nodes$names
# ----------
df <- bind_rows(cornet$Edgelist)
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
df %>% filter(from == "hukituke", to == "tochaku")
df %>% filter(from == "hukituke", to == "tochaku")
df <- data.frame(bind_rows(cornet$Edgelist))
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
df %>% filter(from == "hukituke", to == "tochaku")
df <- data.frame(bind_rows(cornet$Edgelist))
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
df %>% filter(from == "toryotemp", to == "tochaku")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.01,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
cornet$Edgelist
ed <- cornet$graphAttributes$Nodes$names
# ----------
df <- data.frame(bind_rows(cornet$Edgelist))
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "temp", to == "toryotemp")
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "tochaku", to == "fukituke")
df %>% filter(from == "fukituke", to == "tochaku")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.01,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
cornet$Edgelist
ed <- cornet$graphAttributes$Nodes$names
df <- data.frame(bind_rows(cornet$Edgelist))
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
df %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "tochaku", to == "fukituke")
df %>% filter(from == "fukituke", to == "tochaku")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
cornet$Edgelist
ed <- cornet$graphAttributes$Nodes$names
# ----------
df <- data.frame(bind_rows(cornet$Edgelist))
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
df %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "tochaku", to == "fukituke")
df %>% filter(from == "fukituke", to == "tochaku")
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
cornet$Edgelist
ed <- cornet$graphAttributes$Nodes$names
# ----------
df <- data.frame(bind_rows(cornet$Edgelist))
df$from <- ed[match(df$from, 1:length(ed))]
df$to <- ed[match(df$to, 1:length(ed))]
head(df)
df %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
centralityPlot(cornet)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2))
help(qgraph)
pcornet <- qgraph(cormat, layout = "spring",,
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
pcornet <- qgraph(cormat, layout = "spring",
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
ed_p <- pcornet$graphAttributes$Nodes$names
df_p <- data.frame(bind_rows(pcornet$Edgelist))
df_p$from <- ed_p[match(df_p$from, 1:length(ed_p))]
df_p$to <- ed_p[match(df_p$to, 1:length(ed_p))]
head(df_p)
df_p %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
pcornet <- qgraph(cormat, layout = "spring", minimum = 0.01
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
cornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "cor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
ed_p <- pcornet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_p <- data.frame(bind_rows(pcornet$Edgelist))
df_p$from <- ed_p[match(df_p$from, 1:length(ed_p))]
df_p$to <- ed_p[match(df_p$to, 1:length(ed_p))]
head(df_p)
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
pcornet <- qgraph(cormat, layout = "spring", minimum = 0.01,
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
ed_p <- pcornet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_p <- data.frame(bind_rows(pcornet$Edgelist))
df_p$from <- ed_p[match(df_p$from, 1:length(ed_p))]
df_p$to <- ed_p[match(df_p$to, 1:length(ed_p))]
head(df_p)
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
# ----------
# degree centrality (strength):  number of edges connected with a node
centralityPlot(cornet)
pcornet <- qgraph(cormat, layout = "spring", minimum = 0.01,
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
ed_p <- pcornet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_p <- data.frame(bind_rows(pcornet$Edgelist))
df_p$from <- ed_p[match(df_p$from, 1:length(ed_p))]
df_p$to <- ed_p[match(df_p$to, 1:length(ed_p))]
head(df_p)
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
pcornet <- qgraph(cormat, layout = "spring", minimum = 0.2,
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
ed_p <- pcornet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_p <- data.frame(bind_rows(pcornet$Edgelist))
df_p$from <- ed_p[match(df_p$from, 1:length(ed_p))]
df_p$to <- ed_p[match(df_p$to, 1:length(ed_p))]
head(df_p)
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
pcornet <- qgraph(cormat, layout = "spring", minimum = 0.1,
graph = "pcor",
color = c("white", "gray"), labels = colnames(dat_s2))
# ----------
ed_p <- pcornet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_p <- data.frame(bind_rows(pcornet$Edgelist))
df_p$from <- ed_p[match(df_p$from, 1:length(ed_p))]
df_p$to <- ed_p[match(df_p$to, 1:length(ed_p))]
head(df_p)
df %>% filter(from == "toryotemp", to == "temp")
df_p %>% filter(from == "toryotemp", to == "temp")
df %>% filter(from == "toryotemp", to == "tochaku")
df_p %>% filter(from == "toryotemp", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
centralityPlot(pcornet)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = )
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 1)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 10)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 1000)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.01)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
tuning = 0)
ed_g <- glassonet$graphAttributes$Nodes$names
df_g <- data.frame(bind_rows(glassonet$Edgelist))
df_g$from <- ed[match(df_g$from, 1:length(ed_g))]
df_g$to <- ed[match(df_g$to, 1:length(ed_g))]
head(df_g)
df_g %>% filter(from == "toryotemp", to == "temp")
df_g %>% filter(from == "toryotemp", to == "tochaku")
df_g %>% filter(from == "fukituke", to == "tochaku")
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
tuning = 0)
# ----------
ed_g <- glassonet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_g <- data.frame(bind_rows(glassonet$Edgelist))
df_g$from <- ed[match(df_g$from, 1:length(ed_g))]
df_g$to <- ed[match(df_g$to, 1:length(ed_g))]
head(df_g)
df_g %>% filter(from == "toryotemp", to == "temp")
df_g %>% filter(from == "toryotemp", to == "tochaku")
df_g %>% filter(from == "fukituke", to == "tochaku")
df_g %>% filter(from == "fukituke", to == "tochaku")
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
df_g %>% filter(from == "fukituke", to == "tochaku")
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
tuning = 0)
# ----------
ed_g <- glassonet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_g <- data.frame(bind_rows(glassonet$Edgelist))
df_g$from <- ed[match(df_g$from, 1:length(ed_g))]
df_g$to <- ed[match(df_g$to, 1:length(ed_g))]
head(df_g)
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
df_g %>% filter(from == "fukituke", to == "tochaku")
centralityPlot(glassonet)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
tuning = 1)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
tuning = 0.1)
# ----------
ed_g <- glassonet$graphAttributes$Nodes$names
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
tuning = 0)
# ----------
ed_g <- glassonet$graphAttributes$Nodes$names
# ----------
# show edge weitht between from - to
df_g <- data.frame(bind_rows(glassonet$Edgelist))
df_g$from <- ed[match(df_g$from, 1:length(ed_g))]
df_g$to <- ed[match(df_g$to, 1:length(ed_g))]
head(df_g)
df %>% filter(from == "fukituke", to == "tochaku")
df_p %>% filter(from == "fukituke", to == "tochaku")
df_g %>% filter(from == "fukituke", to == "tochaku")
# ----------
# degree centrality (strength):  number of edges connected with a node
centralityPlot(glassonet)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.01)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.0001)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.02)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.05)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.1)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
lambda.min.ratio = 0.5)
glassonet <- qgraph(cormat, layout = "spring", sampleSize = nrow(dat_s2),
graph = "glasso",
color = c("white", "gray"), labels = colnames(dat_s2),
gamma = 0)
library(bnlearn)
install.packages("bnlearn", dep = T)
library(bnlearn)
fitBN <- hc(dat_s2, restart = 10, pertrn = 100)
fitBN <- hc(dat_s2, restart = 10, perturb = 100)
estrength <- arc.strength(fitBN, dat_s2, "bic-g")
head(estrength[order(estrength[,3],), 5])
head(estrength[order(estrength[,3]),], 5)
strength.plot(fitBN, estrength, main = "Bayesian Network", shape = "ellipse")
install.packages("Rgraphviz", dep = T)
help(strength.plot)
strength.plot(fitBN, estrength)
estrength
names(fitBN)
fitBN$nodes
fitBN$arcs
names(fitBN)
fitBN$learning
nrow(dat_s)
set.seed(123)
bootnet <- boot.strength(dat_s2, R = 500, algorithm = "hc")
head(bootnet)
bootnet
bootnet %>% filter(to == "tochaku")
estrength
estrength %>% filter(to == "tochaku")
bootnet %>% filter(to == "tochaku")
source('http://bioconductor.org/biocLite.R')
install.packages("BiocManager", dep = T)
library(BiocManager)
BiocManager::install()
