num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + shikirei : area + shikirei : num_exchange, data = dat)
# ------------------------------------------------------------------------------
# model diagnostics:  residuals
# ------------------------------------------------------------------------------
car::residualPlots(mod0)
car::residualPlots(mod_step1)
car::residualPlots(mod4)
# -->
# mod_step1 and mod4 is better than mod0 and mod1
# ----------
par(mfrow = c(2,2))
plot(mod5)
# ------------------------------------------------------------------------------
# identify influential observations
# ------------------------------------------------------------------------------
infl <- influence.measures(mod5)
infl
# ----------
library(car)
par(mfrow = c(1,1))
car::influencePlot(mod4,
id=list(method="noteworthy", n=10, cex=1, col=carPalette()[1], location="lr"))
idx <- c(54, 166, 180, 253, 378, 405, 406, 640, 744, 761)
dat[idx,]
# compare to predicted price
predict(mod5)[idx]
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\odakyu")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  odakyu
# ------------------------------------------------------------------------------
dat <- read.csv("odakyu_dat.txt", header = TRUE, sep = "\t")
str(dat)
car::some(dat)
# ----------
dat$floor <- as.factor(dat$floor)
dat$ac <- as.factor(dat$ac)
dat$closet <- as.factor(dat$closet)
dat$flooring <- as.factor(dat$flooring)
dat$balcony <- as.factor(dat$balcony)
# ----------
# total minutes
dat$min_tot <- dat$bus_min + dat$walk_min + dat$train_min
# price including train fares for 20 days per month
dat$price_tot <- dat$price + dat$train_fare * 20
# price per area
dat$price_ave <- dat$price / dat$area
dat$price_tot_ave <- dat$price_tot / dat$area
# bus
dat <- dat %>% mutate(bus_flg = ifelse(bus_min > 0, 1, 0))
dat$bus_flg <- as.factor(dat$bus_flg)
# ----------
mod0 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations + train_fare +
bus_flg + ac + closet + flooring + balcony + floor, data = dat)
mod1 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area, data = dat)
mod_step1
mod4 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + balcony : years + shikirei : area + shikirei : num_exchange, data = dat)
mod5 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + shikirei : area + shikirei : num_exchange, data = dat)
summary(mod5)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\odakyu")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  odakyu
# ------------------------------------------------------------------------------
dat <- read.csv("odakyu_dat.txt", header = TRUE, sep = "\t")
str(dat)
car::some(dat)
# ----------
dat$floor <- as.factor(dat$floor)
dat$ac <- as.factor(dat$ac)
dat$closet <- as.factor(dat$closet)
dat$flooring <- as.factor(dat$flooring)
dat$balcony <- as.factor(dat$balcony)
# ----------
# total minutes
dat$min_tot <- dat$bus_min + dat$walk_min + dat$train_min
# price including train fares for 20 days per month
dat$price_tot <- dat$price + dat$train_fare * 20
# price per area
dat$price_ave <- dat$price / dat$area
dat$price_tot_ave <- dat$price_tot / dat$area
# bus
dat <- dat %>% mutate(bus_flg = ifelse(bus_min > 0, 1, 0))
dat$bus_flg <- as.factor(dat$bus_flg)
# ----------
mod0 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations + train_fare +
bus_flg + ac + closet + flooring + balcony + floor, data = dat)
mod1 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area, data = dat)
mod_step1
mod4 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + balcony : years + shikirei : area + shikirei : num_exchange, data = dat)
mod5 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + shikirei : area + shikirei : num_exchange, data = dat)
car::residualPlots(mod5)
mod_step1
car::residualPlots(mod5)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\odakyu")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  odakyu
# ------------------------------------------------------------------------------
dat <- read.csv("odakyu_dat.txt", header = TRUE, sep = "\t")
str(dat)
car::some(dat)
# ----------
dat$floor <- as.factor(dat$floor)
dat$ac <- as.factor(dat$ac)
dat$closet <- as.factor(dat$closet)
dat$flooring <- as.factor(dat$flooring)
dat$balcony <- as.factor(dat$balcony)
# ----------
# total minutes
dat$min_tot <- dat$bus_min + dat$walk_min + dat$train_min
# price including train fares for 20 days per month
dat$price_tot <- dat$price + dat$train_fare * 20
# price per area
dat$price_ave <- dat$price / dat$area
dat$price_tot_ave <- dat$price_tot / dat$area
# bus
dat <- dat %>% mutate(bus_flg = ifelse(bus_min > 0, 1, 0))
dat$bus_flg <- as.factor(dat$bus_flg)
# ------------------------------------------------------------------------------
# data exploration:  Assess Higher Dimension Collinearity by based on VIF (Variance Inflation Factor)
# ------------------------------------------------------------------------------
# FUNCTIONS
corvif <- function(dataz) {
dataz <- as.data.frame(dataz)
#vif part
form    <- formula(paste("fooy ~ ",paste(strsplit(names(dataz)," "),collapse=" + ")))
dataz   <- data.frame(fooy=1 + rnorm(nrow(dataz)) ,dataz)
lm_mod  <- lm(form,dataz)
cat("\n\nVariance inflation factors\n\n")
print(myvif(lm_mod))
}
myvif <- function(mod) {
v <- vcov(mod)
assign <- attributes(model.matrix(mod))$assign
if (names(coefficients(mod)[1]) == "(Intercept)") {
v <- v[-1, -1]
assign <- assign[-1]
} else warning("No intercept: vifs may not be sensible.")
terms <- labels(terms(mod))
n.terms <- length(terms)
if (n.terms < 2) stop("The model contains fewer than 2 terms")
if (length(assign) > dim(v)[1] ) {
diag(tmp_cor)<-0
if (any(tmp_cor==1.0)){
return("Sample size is too small, 100% collinearity is present")
} else {
return("Sample size is too small")
}
}
R <- cov2cor(v)
detR <- det(R)
result <- matrix(0, n.terms, 3)
rownames(result) <- terms
colnames(result) <- c("GVIF", "Df", "GVIF^(1/2Df)")
for (term in 1:n.terms) {
subs <- which(assign == term)
result[term, 1] <- det(as.matrix(R[subs, subs])) * det(as.matrix(R[-subs, -subs])) / detR
result[term, 2] <- length(subs)
}
if (all(result[, 2] == 1)) {
result <- data.frame(GVIF=result[, 1])
} else {
result[, 3] <- result[, 1]^(1/(2 * result[, 2]))
}
invisible(result)
}
# ----------
# including min_tot, but excluding other minutes data
obj_var <- c("shikirei", "area", "years",
"num_exchange", "num_stations",
"train_fare", "km", "min_tot",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
# corvif:  Each covariate is used in turn as a response variable with all other variables as covariates
# the R^2 is extracted and the VIF is calculated
corvif(dat[,obj_var])
# -->
# the variable with GVIF > 3.0:  train_fare and km
# ----------
# excluding km
obj_var <- c("shikirei", "area", "years",
"num_exchange", "num_stations",
"train_fare", "min_tot",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
obj_var <- c("shikirei", "area", "years",
"num_exchange", "num_stations",
"min_tot",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
obj_var <- c("shikirei", "area", "years",
"num_exchange", "num_stations",
"train_fare", "min_tot",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
obj_var <- c("shikirei", "area", "years",
"num_exchange", "num_stations",
"min_tot",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
obj_var <- c("bus_min", "walk_min", "shikirei", "area", "years",
"train_min", "num_exchange", "num_stations",
"train_fare", "km",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
obj_var <- c("bus_min", "walk_min", "shikirei", "area", "years",
"train_min", "num_exchange", "num_stations",
"train_fare",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
# excluding train_fare
obj_var <- c("bus_min", "walk_min", "shikirei", "area", "years",
"train_min", "num_exchange", "num_stations",
"floor", "ac", "closet", "flooring", "balcony", "bus_flg")
corvif(dat[,obj_var])
# excluding bus_flg
obj_var <- c("bus_min", "walk_min", "shikirei", "area", "years",
"train_min", "num_exchange", "num_stations",
"floor", "ac", "closet", "flooring", "balcony")
corvif(dat[,obj_var])
mod0 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations + train_fare +
bus_flg + ac + closet + flooring + balcony + floor, data = dat)
summary(mod0)
mod1 <- lm(price ~ area + years + shikirei + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + flooring + balcony + floor, data = dat)
summary(mod1)
mod1 <- lm(price ~ area + years + shikirei + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + floor, data = dat)
summary(mod1)
intercept_only_model <- lm(price ~ 1, data = dat)
total_model <- lm(price ~ (area + years + shikirei + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + flooring + balcony + floor)^2, data = dat)
mod_step1 <- stepAIC(intercept_only_model, direction = 'both', scope = formula(total_model))
summary(mod_step1)
mod_inter <- lm(price ~ area + years + shikirei + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + balcony + floor +
area : (floor + num_exchange + shikirei + num_stations + closet) +
num_exchange : num_stations,
data = dat)
summary(mod_inter)
AIC(mod1, mod_inter)
par(mfrow = c(2,2))
plot(mod_inter)
par(mfrow = c(2,2))
plot(mod_inter)
car::residualPlots(mod_inter)
lattice::bwplot(dat$station ~ resid(mod_inter))
lattice::bwplot(dat$tokyo_flg ~ resid(mod_inter))
dat$tokyo_flg <- tokyo_flg[match(dat$station, station)]
dat$ward23_flg <- ward23_flg[match(dat$station, station)]
dat$tokyo_ward23_flg <- paste0(dat$tokyo_flg, dat$ward23_flg)
table(dat$tokyo_ward23_flg)
mod_inter_pol <- lm(price ~ poly(area,2) + years + shikirei + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + balcony + floor +
area : (floor + num_exchange + shikirei + num_stations + closet) +
num_exchange : num_stations,
data = dat)
summary(mod_inter_pol)
mod_inter_ns <- lm(price ~ area + years + shikirei +
bus_min + walk_min + ac + closet + balcony + floor +
area : (floor + shikirei + closet),
data = dat)
summary(mod_inter_ns)
library(nlme)
mod_inter_ns_lmlist <- lmList(price ~ area + years + shikirei +
bus_min + walk_min + ac + closet + balcony + floor +
area : (floor + shikirei + closet) | station,
data = dat)
mod_inter_ns_lmlist <- lmList(price ~ area + years + shikirei +
bus_min + walk_min + ac + closet + balcony + floor +
area : (floor + shikirei + closet) | station,
data = dat)
print(mod_inter_ns_lmlist)
par(mfrow = c(1,1))
car::densityPlot(coef(mod_inter_ns_lmlist)[,"(Intercept)"])
rownames(coef(mod_inter_ns_lmlist))[order((coef(mod_inter_ns_lmlist)[,"(Intercept)"]), decreasing = T)]
lattice::xyplot(coef(mod_inter_ns_lmlist)[,"area"] ~ coef(mod_inter_ns_lmlist)[,"(Intercept)"], cex = 1.5, pch = 20)
pairs(mod_inter_ns_lmlist)
form_mod_inter <- price ~ area + years + shikirei + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + balcony + floor +
area : (floor + num_exchange + shikirei + num_stations + closet) +
num_exchange : num_stations
# ----------
# default model (= mod_inter) by gls (REML estimation)
library(nlme)
gls0 <- gls(form_mod_inter, data = dat)
gls0 <- gls(form_mod_inter, data = dat)
printCoefmat(coef(summary(gls0)))
vf1 <- varFixed(~ area)
vf2 <- varIdent(form = ~ 1 | station)
vf3 <- varPower(form = ~ area)
vf32 <- varPower(form = ~ area | station)
vf4 <- varExp(form = ~ area)
vf42 <- varExp(form = ~ area | station)
vf5 <- varComb(varIdent(form = ~ 1 | station), varExp(form = ~ area))
# ----------
# fit model
gls1 <- update(gls0, weights = vf1, data = dat)
gls2 <- update(gls0, weights = vf2, data = dat)
gls3 <- update(gls0, weights = vf3, data = dat)
gls32 <- update(gls0, weights = vf32, data = dat)
gls4 <- update(gls0, weights = vf4, data = dat)
gls42 <- update(gls0, weights = vf42, data = dat)
gls5 <- update(gls0, weights = vf5, data = dat)
printCoefmat(coef(summary(gls1)))
gls5$modelStruct$varStruct
AIC(gls0, gls1, gls2, gls3, gls32, gls4, gls42, gls5)
plot(gls0, which = c(1), col = dat$station, ylim = c(-5, 7))
plot(gls0, which = c(1), col = dat$station, ylim = c(-5, 7))
plot(gls5, which = c(1), col = dat$station, ylim = c(-5, 7))
plot(gls0, which = c(1), col = dat$station, ylim = c(-5, 7))
plot(gls5, which = c(1), col = dat$station, ylim = c(-5, 7))
plot(gls0, which = c(1), col = dat$station, ylim = c(-5, 7))
plot(gls5, which = c(1), col = dat$station, ylim = c(-5, 7))
lattice::bwplot(resid(gls0, type = "n") ~ station, data = dat, ylim = c(-4, 7))
lattice::bwplot(resid(gls5, type = "n") ~ station, data = dat, ylim = c(-4, 7))
lattice::bwplot(resid(gls0, type = "n") ~ station, data = dat, ylim = c(-4, 7))
lattice::bwplot(resid(gls5, type = "n") ~ station, data = dat, ylim = c(-4, 7))
plot(gls0, sqrt(abs(resid(., type = "n"))) ~ fitted(.), type = c("p", "smooth"))
plot(gls5, sqrt(abs(resid(., type = "n"))) ~ fitted(.), type = c("p", "smooth"))
plot(gls0, sqrt(abs(resid(., type = "n"))) ~ fitted(.), type = c("p", "smooth"))
plot(gls0, sqrt(abs(resid(., type = "n"))) ~ fitted(.), type = c("p", "smooth"))
plot(gls5, sqrt(abs(resid(., type = "n"))) ~ fitted(.), type = c("p", "smooth"))
lmecont <- lmeControl(maxIter = 1000, msMaxIter = 1000, tolerance = 1e-6, niterEM = 100, msMaxEval = 500)
# station specific intercept
lme0 <- lme(form_mod_inter, random = ~ 1 | station, data = dat, control = lmecont)
printCoefmat(summary(lme0)$tTable, has.Pvalue = TRUE, P.value = TRUE)
summary(lme0)
2449.206^2 / (2440.206^2 + 7357.951^2)
anova.res <- anova(gls0, lme0)
anova.res[["p-value"]][2] / 2
lme0_2 <- lme(form_mod_inter, random = ~ 1 + area | station, data = dat, control = lmecont)
summary(lme0_2)
# note that correlation of intercept and area is -0.971
AIC(lme0, lme0_2)
lme1 <- update(lme0_2, weights = vf1, data = dat, control = lmecont)
lme2 <- update(lme0_2, weights = vf2, data = dat, control = lmecont)
lme3 <- update(lme0_2, weights = vf3, data = dat, control = lmecont)
lme32 <- update(lme0_2, weights = vf32, data = dat, control = lmecont)
lme4 <- update(lme0_2, weights = vf4, data = dat, control = lmecont)
lme42 <- update(lme0_2, weights = vf42, data = dat, control = lmecont)
lme5 <- update(lme0_2, weights = vf5, data = dat, control = lmecont)
# ----------
printCoefmat(summary(lme1)$tTable, has.Pvalue = TRUE, P.value = TRUE)
printCoefmat(summary(lme2)$tTable, has.Pvalue = TRUE, P.value = TRUE)
printCoefmat(summary(lme3)$tTable, has.Pvalue = TRUE, P.value = TRUE)
printCoefmat(summary(lme32)$tTable, has.Pvalue = TRUE, P.value = TRUE)
printCoefmat(summary(lme4)$tTable, has.Pvalue = TRUE, P.value = TRUE)
printCoefmat(summary(lme42)$tTable, has.Pvalue = TRUE, P.value = TRUE)
printCoefmat(summary(lme5)$tTable, has.Pvalue = TRUE, P.value = TRUE)
# ----------
AIC(gls0, gls1, gls2, gls3, gls32, gls4, gls42, gls5,
lme0, lme0_2, lme1, lme2, lme3, lme32, lme4, lme42, lme5)
form_mod_inter_modify <- price ~ area + shikirei +
bus_min + walk_min + train_min + ac + balcony +
area : shikirei
lme5_2 <- lme(form_mod_inter_modify, weights = vf5, random = ~ 1 + area | station, data = dat, control = lmecont)
AIC(gls0, gls1, gls2, gls3, gls32, gls4, gls42, gls5,
lme0, lme0_2, lme1, lme2, lme3, lme32, lme4, lme42, lme5, lme5_2)
plot(lme5, sqrt(abs(resid(., type = "n", level = 1))) ~ fitted(.), type = c("p", "smooth"), ylim = c(-1, 3))
plot(lme5, sqrt(abs(resid(., type = "n", level = 0))) ~ fitted(.), type = c("p", "smooth"), ylim = c(-1, 3))
plot(lme5, sqrt(abs(resid(., type = "n", level = 1))) ~ fitted(.), type = c("p", "smooth"), ylim = c(-1, 3))
bwplot(resid(gls5, type = "n") ~ station, data = dat, ylim = c(-5,5))
library(lattice)
bwplot(resid(gls0, type = "n") ~ station, data = dat, ylim = c(-5,5))
bwplot(resid(gls0, type = "n") ~ station, data = dat, ylim = c(-5,5))
bwplot(resid(gls5, type = "n") ~ station, data = dat, ylim = c(-5,5))
bwplot(resid(lme5, type = "n", level = 1) ~ station, data = dat, ylim = c(-5,5))
bwplot(resid(lme5, type = "n", level = 1) ~ station, data = dat, ylim = c(-5,5))
aug.Pred <- augPred(lme5,
primary = ~area,
level = 0:1)
head(aug.Pred)
table(aug.Pred$.type)
# ----------
graphics.off()
lattice::xyplot(price ~ area | .groups, data = aug.Pred %>% filter(.groups == "machida", .type == "original"))
lattice::xyplot(price ~ area | .type, data = aug.Pred %>% filter(.groups == "machida"))
lattice::xyplot(price ~ area, data = aug.Pred %>% filter(.groups == "chitose_funabashi"))
plot(aug.Pred, layout = c(4, 4, 2), col = c("black", "blue"), lty = c(1,3), lwd = c(3, 1),
key = list(lines = list(col = c("black", "blue"), lty = c(1,3), lwd = c(3, 1)),
text = list(c("Marginal", "station-specific")),
columns = 2))
mod1_gam <- gam(price ~ s(area) + years + s(shikirei) + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + flooring + balcony + floor, data = dat)
library(mgcv)
mod1_gam <- gam(price ~ s(area) + years + s(shikirei) + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + closet + flooring + balcony + floor, data = dat)
summary(mod1_gam)
mod1_gam <- gam(price ~ s(area, by = flooring) + years + s(shikirei) + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + balcony + floor, data = dat)
summary(mod1_gam)
par(mfrow = c(2,2))
plot(mod1_gam)
gls4_gam <- gamm(price ~ s(area, by = flooring) + years + s(shikirei) + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + balcony + floor,
weight = varExp(form = ~ area + shikirei), data = dat, control = lmecont)
# + random intercept model: without shikirei
lme1_gam <- gamm(price ~ s(area, by = flooring) + years + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + balcony + floor,
weight = varExp(form = ~ area),
random = list(station = ~ 1), data = dat, control = lmecont)
# + random intercept + slope  model: adding area
# add shikirei to variance structure
lme2_gam <- gamm(price ~ s(area, by = flooring) + years + num_exchange + num_stations +
bus_min + walk_min + train_min + ac + balcony + floor,
weight = varExp(form = ~ area + shikirei),
random = list(station = ~ 1 + area), data = dat, control = lmecont)
summary(lme2_gam$gam)
anova(lme2_gam$gam)
summary(lme2_gam$lme)
lme2_gam$lme$modelStruct$varStruct
par(mfrow = c(2,2))
plot(lme1_gam$gam)
plot(lme2_gam$gam)
# ----------
bwplot(resid(lme5_2, type = "n", level = 1) ~ station, data = dat, ylim = c(-5,5))
bwplot(resid(gls4_gam$gam, type = "scaled.pearson") ~ station, data = dat, ylim = c(-5, 5))
bwplot(resid(gls4_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
bwplot(resid(lme1_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
bwplot(resid(lme2_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
# ----------
AIC(gls0, gls1, gls2, gls3, gls32, gls4, gls42, gls5,
lme0, lme0_2, lme1, lme2, lme3, lme32, lme4, lme42, lme5, lme5_2,
mod1_gam, lme1_gam$lme, lme2_gam$lme)
# -->
# lme2_gam is best
# ------------------------------------------------------------------------------
# Compare predicted values
# ------------------------------------------------------------------------------
pred_mod_inter <- predict(mod_inter)
pred_gls5 <- predict(gls5)
pred_lme5 <- predict(lme5)
pred_lme52 <- predict(lme5_2)
pred_lme2gam <- predict(lme2_gam$gam)
pred_lme2gam2 <- predict(lme2_gam$lme)
tmp <- data.frame(id = 1:nrow(dat), station = dat$station,
price = dat$price,
pred_mod_inter = pred_mod_inter,
pred_gls5 = pred_gls5,
pred_lme5 = pred_lme5,
pred_lme52 = pred_lme52,
pred_lme2gam = pred_lme2gam,
pred_lme2gam2 = pred_lme2gam2)
tmp <- tmp %>% mutate(dif1 = round(pred_mod_inter - price, 0),
dif2 = round(pred_gls5 - price, 0),
dif3 = round(pred_lme5 - price, 0),
dif4 = round(pred_lme52 - price, 0),
dif5 = round(pred_lme2gam - price, 0),
dif6 = round(pred_lme2gam2 - price, 0))
# outliers
idx <- c(54, 166, 180, 253, 378, 405, 406, 640, 744, 761)
tmp %>% filter(id %in% idx)
# ----------
# mean absolute error
myfunc <- function(df) sum(abs(df))/nrow(dat)
apply(tmp[,c("dif1", "dif2", "dif3", "dif4", "dif5", "dif6")], 2, myfunc)
# -->
# model lme2_gam is the best
# ----------
car::densityPlot(tmp$dif3)
car::densityPlot(tmp$dif6)
# ----------
# lme5_2 is unstable (interval of area include 0)
intervals(lme5_2, which = "fixed")
# lme2_gam is stable
intervals(lme2_gam$lme, which = "fixed")
myfunc <- function(df) sum(abs(df))/nrow(dat)
apply(tmp[,c("dif1", "dif2", "dif3", "dif4", "dif5", "dif6")], 2, myfunc)
tmp %>% filter(id %in% idx)
myfunc <- function(df) sum(abs(df))/nrow(dat)
apply(tmp[,c("dif1", "dif2", "dif3", "dif4", "dif5", "dif6")], 2, myfunc)
bwplot(resid(lme2_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
bwplot(resid(lme2_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
graphics.off()
bwplot(resid(lme2_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
E <- resid(lme2_gam$lme, type = "n")
E
E <- c(resid(lme2_gam$lme, type = "n"))
hist(E)
qqnorm(E)
qqline(E)
shapiro.test(E)
bwplot(resid(lme5_2, type = "n", level = 1) ~ station, data = dat, ylim = c(-5,5))
bwplot(resid(gls4_gam$gam, type = "scaled.pearson") ~ station, data = dat, ylim = c(-5, 5))
bwplot(resid(lme2_gam$lme, type = "n") ~ station, data = dat, ylim = c(-5, 5))
qqnorm(E)
qqline(E)
