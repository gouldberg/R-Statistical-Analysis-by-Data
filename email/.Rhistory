designIPW <- svydesign(ids = ~ 1, weights = ~ IPW, data = data)
balanceTableIPW <- data.frame()
for (var in 1:length(covariateNames)) {
balanceFormula <- paste("logLoginsPerExaminee ~ ", covariateNames[var], sep = "")
maxEffBaseline <- max(abs(coef(svyglm(balanceFormula, designAN))[-1]))
maxEffIPW <- max(abs(coef(svyglm(balanceFormula, designIPW))[-1]))
balanceTableIPW <- rbind(balanceTableIPW, c(var, maxEffBaseline, maxEffIPW))
}
names(balanceTableIPW) <- c("variable", "coefBaseline", "coefIPW")
balanceTableIPW$variable <- covariateNames
balanceTableIPW$coefBaseline <- balanceTableIPW$coefBaseline / sqrt(coef(svyvar( ~ logLoginsPerExaminee, designAN)))
balanceTableIPW$coefIPW <- balanceTableIPW$coefIPW / sqrt(coef(svyvar(~ logLoginsPerExaminee, designIPW)))
balanceTableIPW$coef <- balanceTable$coef
# ----------
balanceTableIPW
designIPW <- svydesign(ids = ~ 1, weights = ~ IPW, data = data)
balanceTableIPW <- data.frame()
for (var in 1:length(covariateNames)) {
balanceFormula <- paste("logLoginsPerExaminee ~ ", covariateNames[var], sep = "")
maxEffBaseline <- max(abs(coef(svyglm(balanceFormula, designAN))[-1]))
maxEffIPW <- max(abs(coef(svyglm(balanceFormula, designIPW))[-1]))
balanceTableIPW <- rbind(balanceTableIPW, c(var, maxEffBaseline, maxEffIPW))
}
names(balanceTableIPW) <- c("variable", "coefBaseline", "coefIPW")
balanceTableIPW$variable <- covariateNames
balanceTableIPW$coefBaseline <- round(balanceTableIPW$coefBaseline / sqrt(coef(svyvar( ~ logLoginsPerExaminee, designAN))), 4)
balanceTableIPW$coefIPW <- round(balanceTableIPW$coefIPW / sqrt(coef(svyvar(~ logLoginsPerExaminee, designIPW))), 4)
balanceTableIPW$coef <- balanceTable$coef
# ----------
balanceTableIPW
designIPW <- svydesign(ids = ~ 1, weights = ~ IPW, data = data)
balanceTableIPW <- data.frame()
for (var in 1:length(covariateNames)) {
balanceFormula <- paste("logLoginsPerExaminee ~ ", covariateNames[var], sep = "")
maxEffBaseline <- max(abs(coef(svyglm(balanceFormula, designAN))[-1]))
maxEffIPW <- max(abs(coef(svyglm(balanceFormula, designIPW))[-1]))
balanceTableIPW <- rbind(balanceTableIPW, c(var, maxEffBaseline, maxEffIPW))
}
names(balanceTableIPW) <- c("variable", "coefBaseline", "coefIPW")
balanceTableIPW$variable <- covariateNames
balanceTableIPW$coefBaseline <- round(balanceTableIPW$coefBaseline / sqrt(coef(svyvar( ~ logLoginsPerExaminee, designAN))), 4)
balanceTableIPW$coefIPW <- round(balanceTableIPW$coefIPW / sqrt(coef(svyvar(~ logLoginsPerExaminee, designIPW))), 4)
balanceTableIPW$coef_balance <- balanceTable$coef_balance
# ----------
balanceTableIPW
balanceTableIPW %>% filter(coef_balance > 0.1)
modelOutcome_IPW <- svyglm(formula = meanScale2014 ~ logLoginsPerExaminee,
design = designIPW, family = gaussian)
summary(modelOutcome_IPW)
coef(modelOutcome_IPW)[2] * sqrt(coef(svyvar( ~ logLoginsPerExaminee, designIPW))) / sqrt(coef(svyvar(~ meanScale2014, designIPW)))
modelOutcome_IPW_lNl <- svyglm(formula = meanScale2014 ~ logLoginsPerExaminee +
I(logLoginsPerExaminee ^ 2) + I(logLoginsPerExaminee ^ 3),
design = designIPW, family = gaussian)
modelOutcome_IPW_Nl <- svyglm(formula = meanScale2014 ~ logLoginsPerExaminee +
I(logLoginsPerExaminee ^ 2) + I(logLoginsPerExaminee ^ 3),
design = designIPW, family = gaussian)
summary(modelOutcome_IPW_Nl)
anova(modelOutcome_IPW_Nl, modelOutcome_IPW)
data$Charter2 <- scale(as.numeric(data$Charter == "Yes"), scale = F)
# recreate the design because Charter changed
designIPW <- svydesign(ids = ~ 1, weights = ~ IPW, data = data)
modelOutcome_IPW_DR <- svyglm(formula = meanScale2014 ~ logLoginsPerExaminee +
Charter2 + Charter2 : logLoginsPerExaminee,
design = designIPW, family = gaussian)
summary(modelOutcome_IPW_DR)
summary(modelOutcome_IPW_Nl)
summary(modelOutcome_IPW_DR)
coef(modelOutcome_IPW_DR)[2] * sqrt(coef(svyvar( ~ logLoginsPerExaminee, designIPW))) / sqrt(coef(svyvar(~ meanScale2014, designIPW)))
rm(list=ls())
graphics.off()
# setwd("//media//kswada//MyFiles//R//email")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\email")
packages <- c("dplyr", "tidyverse")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  email
# ------------------------------------------------------------------------------
email <- read_csv("Kevin_Hillstrom_MineThatData_E-MailAnalytics_DataMiningChallenge_2008.03.20.csv")
str(email)
dim(email)
car::some(email)
male_df <- email %>% filter(segment != "Womens E-Mail") %>% mutate(treatment = if_else(segment == "Mens E-Mail", 1, 0))
# ----------
# biased data:  more treated for potential users (history and recency)
set.seed(1)
obs_rate_c <- 0.5
obs_rate_t <- 0.5
biased_data <- male_df %>% mutate(obs_rate_c = if_else((history > 300) | (recency < 6) | (channel == "Multichannel"), obs_rate_c, 1),
obs_rate_t = if_else((history > 300) | (recency < 6) | (channel == "Multichannel"), 1, obs_rate_t),
random_number = runif(n = NROW(male_df))) %>% as.data.frame()
head(biased_data)
biased_data <- biased_data %>% filter((treatment == 0 & random_number < obs_rate_c) | (treatment == 1 & random_number < obs_rate_t))
head(biased_data)
covariateNames0 <- colnames(biased_data)
covariateNames0 <- setdiff(covariateNames0, c("spend", "treat"))
covariateNames0
covariateNames0 <- setdiff(covariateNames0, c("spend", "treatment"))
balanceTable_0 <- data.frame()
for (var in 1:length(covariateNames0)) {
formula0 <- paste("logLoginsPerExaminee ~ ", covariateNames0[var], sep = "")
# ----------
# (-1) removes intercept
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff <- max(abs(coef(lm(formula0, data))[-(1)]))
balanceTable_0 <- rbind(balanceTable_0, c(var, maxEff))
}
names(balanceTable_0) <- c("variable", "coef_to_treat")
balanceTable_0$variable <- covariateNames0
balanceTable_0 <- data.frame()
for (var in 1:length(covariateNames0)) {
formula0 <- paste("logLoginsPerExaminee ~ ", covariateNames0[var], sep = "")
# ----------
# (-1) removes intercept
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff <- max(abs(coef(lm(formula0, biased_data))[-(1)]))
balanceTable_0 <- rbind(balanceTable_0, c(var, maxEff))
}
names(balanceTable_0) <- c("variable", "coef_to_treat")
balanceTable_0$variable <- covariateNames0
balanceTable_0 <- data.frame()
for (var in 1:length(covariateNames0)) {
formula0 <- paste("treatment ~ ", covariateNames0[var], sep = "")
# ----------
# (-1) removes intercept
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff <- max(abs(coef(lm(formula0, biased_data))[-(1)]))
balanceTable_0 <- rbind(balanceTable_0, c(var, maxEff))
}
names(balanceTable_0) <- c("variable", "coef_to_treat")
balanceTable_0$variable <- covariateNames0
balanceTable_0$coef_to_treat <- balanceTable_0$coef_to_treat / sd(biased_data$treatment)
balanceTable_0$coef_to_treat <- round(balanceTable_0$coef_to_treat, 4)
balanceTable_to_treat
covariateNames0 <- colnames(biased_data)
covariateNames0 <- setdiff(covariateNames0, c("spend", "treatment"))
balanceTable_0 <- data.frame()
for (var in 1:length(covariateNames0)) {
formula0 <- paste("treatment ~ ", covariateNames0[var], sep = "")
# ----------
# (-1) removes intercept
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff <- max(abs(coef(lm(formula0, biased_data))[-(1)]))
balanceTable_0 <- rbind(balanceTable_0, c(var, maxEff))
}
names(balanceTable_0) <- c("variable", "coef_to_treat")
balanceTable_0$variable <- covariateNames0
# ----------
# standardize coefficients with respect to sd of outcome
balanceTable_0$coef_to_treat <- balanceTable_0$coef_to_treat / sd(biased_data$treatment)
balanceTable_0$coef_to_treat <- round(balanceTable_0$coef_to_treat, 4)
balanceTable_0
sd(biased_data$treatment)
covariateNames0 <- colnames(biased_data)
covariateNames0 <- setdiff(covariateNames0, c("spend", "treatment"))
balanceTable_02 <- data.frame()
for (var in 1:length(covariateNames0)) {
formula02 <- paste("spend ~ ", covariateNames0[var], sep = "")
# ----------
# (-1) removes intercept
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff <- max(abs(coef(lm(formula02, biased_data))[-(1)]))
balanceTable_02 <- rbind(balanceTable_02, c(var, maxEff))
}
names(balanceTable_02) <- c("variable", "coef_to_outcome")
balanceTable_02$variable <- covariateNames0
balanceTable_02$coef_to_outcome <- balanceTable_02$coef_to_outcome / sd(data$spend)
balanceTable_02$coef_to_outcome <- round(balanceTable_02$coef_to_outcome, 4)
balanceTable_02
balanceTable_init <- balanceTable_0 %>% left_join(., balanceTable_02, by = "variable")
balanceTable_init
balanceTable_init %>% filter(coef_to_treat > 0.1 | coef_to_outcome > 0.1)
covariate_selected <- balanceTable_init %>% filter(coef_to_treat > 0.1 | coef_to_outcome > 0.1) %>% dplyr::select(variable) %>% pull()
covariate_selected
col_type <- sapply(1:length(covariate_selected), function(x) class(biased_data[,covariate_selected[x]]))
( col_obj <- names(biased_data[,covariate_selected])[col_type %in% c("integer", "numeric")] )
( cor_among_voc <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 != Var2) %>% filter(abs(Freq) > 0.4) )
( col_obj <- names(biased_data[,covariate_selected])[col_type %in% c("integer", "numeric")] )
( cor_among_voc <- biased_data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 != Var2) %>% filter(abs(Freq) > 0.4) )
balanceTable_init
library(MatchIt)
# need to set seed
set.seed(12345)
# ----------
# Matching by propensity score
# including variables of selection-bias sources
# method = "near":  nearest neighbor matching
# default distance measure is "logit" (logistic regression)
# replace = TRUE:  each control unit can be matched only once
formula1 <- treatment ~ recency + history + channel
# ----------
# IT TAKES TIME !!!:  2 - 3 min
m_mod_ori <- matchit(formula = formula1, data = male_df, method = "nearest", replace = TRUE)
m_mod_biased <- matchit(formula = formula1, data = biased_data, method = "nearest", replace = TRUE)
m_mod_list <- list(m_mod_ori, m_mod_biased)
m_mod_name <- c("m_mod_ori", "m_mod_biased")
# select model
m_mod <- m_mod_list[[1]]
m_mod <- m_mod_list[[2]]
# ----------
summary(m_mod)
m_mod$distance
length(m_mod$distance)
matched_data_ori <- match.data(m_mod_ori)
matched_data_biased <- match.data(m_mod_biased)
# ----------
head(matched_data_biased)
matched_data_list <- list(matched_data_ori, matched_data_biased)
matched_data_name <- c("matched_data_ori", "matched_data_biased")
# select model
matched_data <- matched_data_list[[1]]
matched_data <- matched_data_list[[2]]
m_mod_list <- list(m_mod_ori, m_mod_biased_data)
m_mod_name <- c("m_mod_ori", "m_mod_biased_data")
# select model
m_mod <- m_mod_list[[1]]
m_mod <- m_mod_list[[2]]
# ------------------------------------------------------------------------------
# Assess covariate balance
# ------------------------------------------------------------------------------
library(cobalt)
# Standardized mean difference between Treated and Controlled of each covariate
# Adjusted:  after matching
# Unadjusted:  raw data
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std", size = 5, col = c(gray(0.7), "blue"))
bal.tab(m_mod)
balanceTable_init
with(biased_data, by(history, treat, mean))
with(biased_data, by(history, treatment, mean))
mean0 <- with(biased_data, by(history, treatment, mean))[1]
mean0
( mean1 - mean0 ) / ( sd(tmp0$history) + sd(tmp1$history) )
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$history)
mean1 <- mean(tmp1$history)
( mean1 - mean0 ) / ( sd(tmp0$history) + sd(tmp1$history) )
( mean1 - mean0 ) / sd(biased_data$history)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
( mean1 - mean0 ) / sd(biased_data$history)
( mean1_m - mean0_m ) / sd(matched_data_biased$history)
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$history)
mean1 <- mean(tmp1$history)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$history)
mean1_m <- mean(tmp1_m$history)
( mean1 - mean0 ) / sd(biased_data$history)
( mean1_m - mean0_m ) / sd(matched_data_biased$history)
# ----------
bal.tab(m_mod)
tmp <- love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std", size = 5, col = c(gray(0.7), "blue"))
names(tmp)
tmp$coordinates
name$scales
tmp$sclaes
tmp$scalse
tmp$scales
tmp$data
( mean1 - mean0 ) / sd(biased_data$history)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
tmp0_m
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
tmp1_m
mean0_m <- mean(tmp0_m$history)
mean1_m <- mean(tmp1_m$history)
( mean1_m - mean0_m )
( mean1 - mean0 )
( mean1_m - mean0_m ) / ( sd(tmp0_m$history) + sd(tmp1_m$history) )
( mean1 - mean0 ) / ( sd(tmp0$history) + sd(tmp1$history) )
( mean1_m - mean0_m ) / sqrt(( sd(tmp0_m$history) + sd(tmp1_m$history) ))
( mean1 - mean0 ) / sd(biased_data$history)
# ( mean1_m - mean0_m ) / sd(matched_data_biased$history)
( mean1_m - mean0_m ) / ( sd(tmp0_m$history) + sd(tmp1_m$history) )
mean0_m2 <- mean(tmp0_m$history, weights = distance)
mean1_m2 <- mean(tmp1_m$history, weights = distance)
( mean1_m2- mean0_m2 ) / sd(matched_data_biased$history)
sd(matched_data_biased$history)
( mean1_m2- mean0_m2 )
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$history)
mean1_m <- mean(tmp1_m$history)
mean0_m2 <- mean(tmp0_m$history, weights = distance)
mean1_m2 <- mean(tmp1_m$history, weights = distance)
( mean1_m - mean0_m )
( mean1_m2- mean0_m2 )
mean0_m2 <- mean(tmp0_m$history, weight = distance)
mean1_m2 <- mean(tmp1_m$history, weight = distance)
( mean1_m2- mean0_m2 )
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$history)
mean1 <- mean(tmp1$history)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$history)
mean1_m <- mean(tmp1_m$history)
( mean1 - mean0 ) / sd(biased_data$history)
# ( mean1_m - mean0_m ) / sd(matched_data_biased$history)
( mean1_m - mean0_m ) / ( sd(tmp0_m$history) + sd(tmp1_m$history) )
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$recency)
mean1 <- mean(tmp1$recency)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$recency)
mean1_m <- mean(tmp1_m$recency)
( mean1 - mean0 ) / sd(biased_data$recency)
# ( mean1_m - mean0_m ) / sd(matched_data_biased$recency)
( mean1_m - mean0_m ) / ( sd(tmp0_m$recency) + sd(tmp1_m$recency) )
help("love.plot")
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$history)
mean1 <- mean(tmp1$history)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$history)
mean1_m <- mean(tmp1_m$history)
( mean1 - mean0 ) / sd(biased_data$history)
# ( mean1_m - mean0_m ) / sd(matched_data_biased$history)
( mean1_m - mean0_m ) / sd(biased_data$history)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std", size = 5, col = c(gray(0.7), "blue"))
( mean1 - mean0 ) / sd(biased_data$history)
( mean1_m - mean0_m ) / sd(biased_data$history)
sd(biased_data$history)
sd(matched_data_biased$history)
mean1_m / sd(tmp0_m$history) - mean0_m / sd(tmp1_m$history)
mean1_m / sd(tmp1_m$history) - mean0_m / sd(tmp0_m$history)
( mean1 - mean0 ) / sd(biased_data$history)
mean1_m / sd(tmp1_m$history) - mean0_m / sd(tmp0_m$history)
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$recency)
mean1 <- mean(tmp1$recency)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$recency)
mean1_m <- mean(tmp1_m$recency)
( mean1 - mean0 ) / sd(biased_data$recency)
mean1_m / sd(tmp1_m$history) - mean0_m / sd(tmp0_m$history)
mean1_m / sd(tmp1$history) - mean0_m / sd(tmp0$history)
mean1_m / sd(tmp1_m$history) - mean0_m / sd(tmp0_m$history)
mean1 / sd(tmp1$history) - mean0 / sd(tmp0$history)
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$history)
mean1 <- mean(tmp1$history)
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$history)
mean1_m <- mean(tmp1_m$history)
( mean1 - mean0 ) / sd(biased_data$history)
mean1 / sd(tmp1$history) - mean0 / sd(tmp0$history)
mean1 / sd(tmp1$history) - mean0 / sd(tmp0$history)
mean1_m / sd(tmp1_m$history) - mean0_m / sd(tmp0_m$history)
( mean1 - mean0 ) / sd(biased_data$history)
mean1_m / sd(tmp1_m$history) - mean0_m / sd(tmp0_m$history)
balanceTable_init
formula1 <- formula("treatment ~ history + recency + channel")
mod <- lm(formula = formula1, data = biased_data)
summary(mod)
car::vif(mod)
car::residualPlots(mod)
biased_data$GPS <- dnorm(biased_data$treatment,
mean = fitted(mod), sd = sd(biased_data$treatment))
car::densityPlot(biased_data$GPS)
biased_data$strataGPS <- with(biased_data, cut(GPS, include.lowest = T, labels = 1:5,
breaks = quantile(GPS, probs = seq(0, 1, 0.2))))
lattice::histogram(~ GPS | strataGPS, data = biased_data)
with(biased_data, by(GPS, strataGPS, summary))
balanceTable <- data.frame()
for (var in 1:length(covariateNames)) {
formula_base <- paste("treatment ~ ", covariateNames[var], sep = "")
formula_balance <- paste("treatment ~ strataGPS + ", covariateNames[var], sep = "")
# ----------
# regress dose on covariate without weights
# -(1:5):  remove intercept and strataGPS2 - 5
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff_base <- max(abs(coef(lm(formula_base, biased_data))[-(1)]))
maxEff_balance <- max(abs(coef(lm(formula_balance, biased_data))[-(1:5)]))
balanceTable <- rbind(balanceTable, c(var, maxEff_base, maxEff_balance))
}
names(balanceTable) <- c("variable", "coef_base", "coef_balance")
balanceTable$variable <- covariateNames
covariateNmaes <- c("recency", "history", "channel")
balanceTable <- data.frame()
for (var in 1:length(covariateNames)) {
formula_base <- paste("treatment ~ ", covariateNames[var], sep = "")
formula_balance <- paste("treatment ~ strataGPS + ", covariateNames[var], sep = "")
# ----------
# regress dose on covariate without weights
# -(1:5):  remove intercept and strataGPS2 - 5
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff_base <- max(abs(coef(lm(formula_base, biased_data))[-(1)]))
maxEff_balance <- max(abs(coef(lm(formula_balance, biased_data))[-(1:5)]))
balanceTable <- rbind(balanceTable, c(var, maxEff_base, maxEff_balance))
}
names(balanceTable) <- c("variable", "coef_base", "coef_balance")
balanceTable$variable <- covariateNames
covariateNames <- c("recency", "history", "channel")
balanceTable <- data.frame()
for (var in 1:length(covariateNames)) {
formula_base <- paste("treatment ~ ", covariateNames[var], sep = "")
formula_balance <- paste("treatment ~ strataGPS + ", covariateNames[var], sep = "")
# ----------
# regress dose on covariate without weights
# -(1:5):  remove intercept and strataGPS2 - 5
# for dummy-coded categorical covariates, the largest coefficient of the dummy codes is selected
maxEff_base <- max(abs(coef(lm(formula_base, biased_data))[-(1)]))
maxEff_balance <- max(abs(coef(lm(formula_balance, biased_data))[-(1:5)]))
balanceTable <- rbind(balanceTable, c(var, maxEff_base, maxEff_balance))
}
names(balanceTable) <- c("variable", "coef_base", "coef_balance")
balanceTable$variable <- covariateNames
balanceTable$coef_base <- round(balanceTable$coef_base / sd(data$logLoginsPerExaminee), 4)
balanceTable$coef_base <- round(balanceTable$coef_base / sd(data$treatment), 4)
balanceTable$coef_balance <- round(balanceTable$coef_balance / sd(data$treatment), 4)
balanceTable$coef_base <- round(balanceTable$coef_base / sd(biased_data$treatment), 4)
balanceTable$coef_balance <- round(balanceTable$coef_balance / sd(biased_data$treatment), 4)
balanceTable
balanceTable %>% filter(coef_balance > 0.1)
designAN <- svydesign(id = ~1, weights = ~1, data = biased_data)
modelOutcome0 <- lm(formula = "meanScale2014 ~ logLoginsPerExaminee + GPS", data = data)
modelOutcome0_svy <- svyglm(formula = "spend ~ treatment + GPS", design = designAN)
modelOutcome1_svy <- svyglm(formula = "spend ~ treatment + GPS + I(GPS ^ 2)", design = designAN)
modelOutcome0 <- lm(formula = "spend ~ treatment + GPS", data = biased_data)
modelOutcome1 <- lm(formula = "spend ~ treatment + GPS + I(GPS ^ 2)", data = biased_data)
stargazer::stargazer(modelOutcome0, modelOutcome1, type = "text")
car::residualPlots(modelOutcome0)
mod_obj <- modelOutcome1_svy
mod_obj <- modelOutcome1_svy
all.effects <- data.frame()
for (dose in quantile(biased_data$treatment, probs = seq(0.01, 1, 0.01)) ) {
# predict outcome given all the GPS for a fixed value of dosage
effects <- predict(mod_obj, type = "response", vcov = T,
newdata = data.frame(treatment = dose, GPS = biased_data$GPS))
# 1/nrow(data):  average effect
effect <- svycontrast(effects, rep(1 / nrow(biased_data), nrow(biased_data)))
all.effects <- rbind(all.effects, data.frame(effect))
}
doseResponses <- data.frame(percentile = seq(1, 100, 1),
treatment = quantile(biased_data$treatment, probs = seq(0.01, 1, 0.01)),
all.effects)
quantile(biased_data$treatment, probs = seq(0.01, 1, 0.01))
quantile(biased_data$treatment, probs = seq(0.01, 1, 0.01))
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std", size = 5, col = c(gray(0.7), "blue"))
tmp0 <- biased_data %>% filter(treatment == 0)
tmp1 <- biased_data %>% filter(treatment == 1)
mean0 <- mean(tmp0$channel == "Multichannel")
mean0 <- mean(tmp1$channel == "Multichannel")
mean0 <- mean(tmp0$channel == "Multichannel")
mean1 <- mean(tmp1$channel == "Multichannel")
mean1
tmp0_m <- matched_data_biased %>% filter(treatment == 0)
tmp1_m <- matched_data_biased %>% filter(treatment == 1)
mean0_m <- mean(tmp0_m$channel == "Multichannel")
mean1_m <- mean(tmp1_m$channel == "Multichannel")
mean1 - mean0
mean1_m - mean0_m
mean1 - mean0 / mean(biased_data$channel == "Multichannel")
# setwd("//media//kswada//MyFiles//R//email")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\email")
packages <- c("dplyr", "tidyverse")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  email
# ------------------------------------------------------------------------------
email <- read_csv("Kevin_Hillstrom_MineThatData_E-MailAnalytics_DataMiningChallenge_2008.03.20.csv")
str(email)
dim(email)
car::some(email)
# ------------------------------------------------------------------------------
# generate biased data
# ------------------------------------------------------------------------------
# excluding Womens E-Mail
# Mens E-Mail as treatment
# RCT data
male_df <- email %>% filter(segment != "Womens E-Mail") %>% mutate(treatment = if_else(segment == "Mens E-Mail", 1, 0))
# ----------
# biased data:  more treated for potential users (history and recency)
set.seed(1)
obs_rate_c <- 0.5
obs_rate_t <- 0.5
biased_data <- male_df %>% mutate(obs_rate_c = if_else((history > 300) | (recency < 6) | (channel == "Multichannel"), obs_rate_c, 1),
obs_rate_t = if_else((history > 300) | (recency < 6) | (channel == "Multichannel"), 1, obs_rate_t),
random_number = runif(n = NROW(male_df))) %>% as.data.frame()
head(biased_data)
biased_data <- biased_data %>% filter((treatment == 0 & random_number < obs_rate_c) | (treatment == 1 & random_number < obs_rate_t))
head(biased_data)
library(MatchIt)
library(MatchIt)
# ----------
formula1 <- treatment ~ recency + history + channel
# select data
data <- male_df
data <- biased_data
m.out_gen <- matchit(formula1, data = data, method = "genetic")
names(m.out_gen)
nrow(data)
data <- data[1:1000,]
m.out_gen <- matchit(formula1, data = data, method = "genetic")
m.out_gen
names(m.out_gen)
m.out_gen$distance
