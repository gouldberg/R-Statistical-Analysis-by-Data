data(pipeline, package = "faraway")
pipeline
help(gls)
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correaltion = corAR1(form = ~ 1 | time))
library(nlme)
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correaltion = corAR1(form = ~ 1 | time))
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correlation = corAR1(form = ~ 1 | time))
summary(mod_glsar)
car::residualPlots(mod_time, type = "response")
summary(mod_glsar)
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correlation = corAR1(form = time))
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correlation = corAR1(form = ~ 1 | time))
help(corAR1)
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correlation = corAR1(form = ~ 1))
summary(mod_glsar)
mod_glsar <- gls(taste ~ Acetic + H2S + Lactic, data = dat, correlation = corAR1(form = ~ time))
summary(mod_glsar)
mod_time <- lm(taste ~ Acetic + H2S + Lactic + time, data = dat)
summary(mod_time)
car::residualPlots(mod_time, type = "response")
serial.test(mod_time)
vars::serial.test(mod_time)
lmtest::dwtest(resid(mod1))
lmtest::dwtest(resid(mod1))
resid(mod1)
lmtest::dwtest(mod1)
lmtest::dwtest(mod_time)
summary(mod_glsar)
fitp <- data.frame(taste, predict(mod_time))
fitp <- data.frame(dat, predict(mod_time))
fitp
fitp <- data.frame(dat, pred = predict(mod_time))
ggplot(fitp, aes(x = time, y = pred)) + geom_point() + geom_smooth()
library(ggplot2)
graphics.off()
ggplot(fitp, aes(x = time, y = pred)) + geom_point() + geom_smooth()
mod_time <- lm(taste ~ H2S + Lactic + time, data = dat)
summary(mod_time)
# -->
# time variable is significant
car::residualPlots(mod_time, type = "response")
fitp <- data.frame(dat, pred = predict(mod_time))
library(ggplot2)
graphics.off()
ggplot(fitp, aes(x = time, y = pred)) + geom_point() + geom_smooth()
car::residualPlots(mod_time, type = "response")
fitp <- data.frame(dat, pred = predict(mod_time))
library(ggplot2)
graphics.off()
ggplot(fitp, aes(x = time, y = pred)) + geom_point() + geom_smooth()
mod_glsar <- gls(taste ~ H2S + Lactic, data = dat, correlation = corAR1(form = ~ 1))
summary(mod_glsar)
summary(mod_time)
crit <- 0.25
abs(dfbeta(mod_time)) >= crit
( abs(dfbeta(mod_time)) >= crit ) * 100
summary(mod_glsar)
lmtest::dwtest(mod_time)
data(gammaarray, pacakge = "faraway")
data(gammaarray, pacakge = "faraway")
library(faraway)
data(gammaarray, pacakge = "faraway")
data(gammaarray, package = "faraway")
data(gammarray, package = "faraway")
data(gammaray, package = "faraway")
gammaray
data(stackloss, package = "faraway")
stackloss
help(stackloss)
mod_glsar <- gls(taste ~ H2S + Lactic, data = dat, method = "ML", correlation = corAR1(form = ~ 1))
summary(mod_glsar)
AIC(mod_glsaar, mod_time)
AIC(mod_glsar, mod_time)
library(mgcv)
gamod <- gam(taste ~ s(Acetic) + s(H2S) + s(Lactic), data = dat)
plot(gamod)
par(mfrow = c(2,2))
plot(gamod, shade = TRUE)
summary(gamod)
gamod <- gam(taste ~ s(Acetic) + s(H2S) + s(Lactic) + s(time), data = dat)
gamod <- gam(taste ~ s(Acetic) + s(H2S) + s(Lactic), data = dat)
par(mfrow = c(2,2))
plot(gamod, shade = TRUE)
# ----------
summary(gamod)
car::symbox(dat$taste)
car::powerTransform(dat$taste)
gamod <- gam(taste^0.55 ~ s(Acetic) + s(H2S) + s(Lactic), data = dat)
par(mfrow = c(2,2))
plot(gamod, shade = TRUE)
summary(gamod)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\stackloss")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
write.table(stackloss, file = "stackloss.txt", row.names = F, quote = F, sep = "\t")
dat <- read.csv("stackloss.txt", header = TRUE, colClasses = "numeric", sep = "\t")
str(dat)
car::some(dat)
help(stackloss)
# ------------------------------------------------------------------------------
# Data exploration:  multi-panel Cleveland dotplot
# ------------------------------------------------------------------------------
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- colnames(dat)
Mydotplot(as.matrix(dat[,MyVar1]))
summary(dat)
psych::describe(dat)
car::densityPlot(dat$stack.loss)
library(ggplot2)
gg <- ggplot(dat, aes(Air.Flow, stack.loss)) + geom_point(size = 1, alpha = 0.5, position = position_jitter(width = 0.05, height = 0.05)) +
stat_smooth(method = "loess", col = "red") + stat_smooth(method = "lm")
gg
library(ggplot2)
gg <- ggplot(dat, aes(Water.Temp, stack.loss)) + geom_point(size = 1, alpha = 0.5, position = position_jitter(width = 0.05, height = 0.05)) +
stat_smooth(method = "loess", col = "red") + stat_smooth(method = "lm")
gg
head(dat)
library(ggplot2)
gg <- ggplot(dat, aes(Acid.Conc, stack.loss)) + geom_point(size = 1, alpha = 0.5, position = position_jitter(width = 0.05, height = 0.05)) +
stat_smooth(method = "loess", col = "red") + stat_smooth(method = "lm")
gg
library(ggplot2)
gg <- ggplot(dat, aes(Acid.Conc., stack.loss)) + geom_point(size = 1, alpha = 0.5, position = position_jitter(width = 0.05, height = 0.05)) +
stat_smooth(method = "loess", col = "red") + stat_smooth(method = "lm")
gg
library(car)
formula <- ~ Acid.Flow + Water.Temp + Acid.Conc. + stack.loss
scatterplotMatrix(formula, data = dat,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
head(dat)
formula <- ~ Air.Flow + Water.Temp + Acid.Conc. + stack.loss
scatterplotMatrix(formula, data = dat,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
help(scatterplotMatrix)
scatterplotMatrix(formula, data = dat,
smooth = TRUE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
psych::pairs.panels(dat, stars = TRUE, method = "spearman")
mod0 <- lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc., data = dat)
summary(mod0)
car::Anova(mod0)
mod1 <- update(mod0, . ~ . - Acid.Conc.)
summary(mod1)
car::Anova(mod1)
anova(mod0, mod1)
AIC(mod0, mod1)
par(mfrow = c(2,2))
plot(mod1)
car::residualPlots(mod1)
mod2 <- lm(stack.loss ~ poly(Air.Flow,2) + poly(Water.Temp,2) + poly(Acid.Conc.,2), data = dat)
summary(mod2)
mod3 <- lm(stack.loss ~ Air.Flow + poly(Water.Temp,2), data = dat)
summary(mod3)
car::Anova(mod3)
anova(mod3, mod1)
plot(mod3)
car::residualPlots(mod3)
car::influenceIndexPlot(mod3, vars = c("Cook", "studentized", "hat"), id.n = 4)
AIC(mod1, mod3)
car::influenceIndexPlot(mod3, vars = c("Cook", "studentized", "hat"), id.n = 4)
summary(mod3)
summary(mod2)
summary(mod3)
car::influenceIndexPlot(mod3, vars = c("Cook", "studentized", "hat"), id.n = 4)
k <- 3
n <- nrow(dat)
2:3 * k / n
obj <- c(1,2,3,4,21)
dat[obj,]
graphics.off()
car::avPlots(mod3, id = TRUE, pch = 20, cex = 1.2, cex.lab = 1.5)
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-3,-4,-21),])
coef(mod_del)
coef(mod3)
crit <- 0.25
abs(dfbeta(mod3)) >= crit
( abs(dfbeta(mod3)) >= crit ) * 100
formula <- ~ Air.Flow + poly(Water.Temp,2)
car::scatterplotMatrix(formula, data = tmp,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
( tmp <- data.frame(dfbeta(mod3)) )
formula <- ~ Air.Flow + poly(Water.Temp, 2)
car::scatterplotMatrix(formula, data = tmp,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
tmp
formula <- ~ Air.Flow + poly.water.Temp..2.1 + poly.Water.Temp..2.2
car::scatterplotMatrix(formula, data = tmp,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
( tmp <- data.frame(dfbeta(mod3)) )
formula <- ~ Air.Flow + poly.Water.Temp..2.1 + poly.Water.Temp..2.2
car::scatterplotMatrix(formula, data = tmp,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.01)
dat
dat$Water.Temp <- dat$Water.Temp + noise
dat <- read.csv("cheddar.txt", header = TRUE, colClasses = "numeric", sep = "\t")
str(dat)
car::some(dat)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod3_2 <- update(mod3, . ~ . - Water.Temp + Water.Temp2)
summary(mod3_2)
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.01)
dat$Water.Temp2 <- dat$Water.Temp + noise
# ----------
mod3_2 <- update(mod3, . ~ . - Water.Temp + Water.Temp2)
mod3
mod3_2 <- update(mod3, . ~ . - Water.Temp + Water.Temp2)
mod3_2 <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
summary(mod3_2)
dat
dat <- read.csv("stackloss.txt", header = TRUE, colClasses = "numeric", sep = "\t")
str(dat)
car::some(dat)
# add noise to Lactic
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.01)
dat$Water.Temp2 <- dat$Water.Temp + noise
# ----------
mod3_2 <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
summary(mod3_2)
p <- matrix(0, 1000, 3)
# change noise level sd = 0.01 and sd 0.1
for(i in 1:1000){
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.01)
# noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.1)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
p[i,] <- broom::tidy(mod)$p.value
}
head(p)
p <- matrix(0, 1000, 4)
# change noise level sd = 0.01 and sd 0.1
for(i in 1:1000){
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.01)
# noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.1)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
p[i,] <- broom::tidy(mod)$p.value
}
head(p)
myfunc <- function(x) sum(x < 0.05) / 1000
apply(p, 2, myfunc)
p <- matrix(0, 1000, 4)
# change noise level sd = 0.01 and sd 0.1
for(i in 1:1000){
# noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.01)
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.1)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
p[i,] <- broom::tidy(mod)$p.value
}
head(p)
# ratio pvalue < 0.05
myfunc <- function(x) sum(x < 0.05) / 1000
apply(p, 2, myfunc)
dat
noise <- rnorm(n = nrow(dat), mean = 0, sd = 1)
dat$Water.Temp2 <- dat$Water.Temp + noise
# ----------
mod3_2 <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
summary(mod3_2)
p <- matrix(0, 1000, 4)
# change noise level sd = 0.01 and sd 0.1
for(i in 1:1000){
noise <- rnorm(n = nrow(dat), mean = 0, sd = 1)
# noise <- rnorm(n = nrow(dat), mean = 0, sd = 2)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
p[i,] <- broom::tidy(mod)$p.value
}
head(p)
myfunc <- function(x) sum(x < 0.05) / 1000
apply(p, 2, myfunc)
dat <- read.csv("cheddar.txt", header = TRUE, colClasses = "numeric", sep = "\t")
str(dat)
car::some(dat)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\stackloss")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  stackloss
# ------------------------------------------------------------------------------
dat <- read.csv("stackloss.txt", header = TRUE, colClasses = "numeric", sep = "\t")
str(dat)
car::some(dat)
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.5)
dat$Water.Temp2 <- dat$Water.Temp + noise
summary(dat$Water.Temp)
sd(dat$Water.Temp)
summary(dat$Water.Temp)
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.2)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod3_2 <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
summary(mod3_2)
p <- matrix(0, 1000, 4)
# change noise level sd = 0.01 and sd 0.1
for(i in 1:1000){
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.2)
# noise <- rnorm(n = nrow(dat), mean = 0, sd = 2)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
p[i,] <- broom::tidy(mod)$p.value
}
head(p)
# ratio pvalue < 0.05
myfunc <- function(x) sum(x < 0.05) / 1000
apply(p, 2, myfunc)
p <- matrix(0, 1000, 4)
# change noise level sd = 0.01 and sd 0.1
for(i in 1:1000){
# noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.2)
noise <- rnorm(n = nrow(dat), mean = 0, sd = 0.4)
dat$Water.Temp2 <- dat$Water.Temp + noise
mod <- lm(stack.loss ~ Air.Flow + poly(Water.Temp2, 2), data = dat)
p[i,] <- broom::tidy(mod)$p.value
}
head(p)
# ratio pvalue < 0.05
myfunc <- function(x) sum(x < 0.05) / 1000
apply(p, 2, myfunc)
library(effects)
plot(predictorEffects(mod3))
fitp <- cbind(mod3$model, pred = predict(mod3))
head(fitp)
library(ggplot2)
graphics.off()
graphics.off()
gg1 <- ggplot(fitp, aes(x = Air.Flow, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg1
head(fitp)
colnames(fitp) <- c("stack.loss", "Air.Flow", "Water.Temp1", "Water.Temp2", "pred")
gg2 <- ggplot(fitp, aes(x = Water.Temp2, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = Water.Temp1, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
fitp <- cbind(mod3$model, pred = predict(mod3))
head(fitp)
colnames(fitp) <- c("stack.loss", "Air.Flow", "Water.Temp1", "Water.Temp2", "pred")
names(fitp)
colnames(fitp) <- c("stack.loss", "Air.Flow", "polyWater.Temp", "pred")
library(ggplot2)
graphics.off()
gg1 <- ggplot(fitp, aes(x = Air.Flow, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg1
gg2 <- ggplot(fitp, aes(x = polywater.Temp, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = polyWater.Temp, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
head(fitp)
colnames(fitp) <- c("stack.loss", "Air.Flow", "polyWater.Temp", "pred")
head(fitp)
gg2 <- ggplot(fitp, aes(x = polyWater.Temp.1, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = polyWater.Temp.1, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = "polyWater.Temp.1", y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = "polyWater.Temp.2", y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = "polyWater.Temp", y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = polyWater.Temp, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
fitp <- cbind(mod3$model, pred = predict(mod3))
head(fitp)
colnames(fitp) <- c("stack.loss", "Air.Flow", "polyWater.Temp", "pred")
graphics.off()
gg1 <- ggplot(fitp, aes(x = Air.Flow, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg1
gg2 <- ggplot(fitp, aes(x = polyWater.Temp, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = poly(Water.Temp,2), y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
fitp <- cbind(mod3$model, pred = predict(mod3))
head(fitp)
gg2 <- ggplot(fitp, aes(x = poly(Water.Temp,2), y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = Water.Temp, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
head(fitp)
gg2 <- ggplot(fitp, aes(x = poly(Water.Temp, 2), y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
fitp <- fortify(cbind(mod3$model, pred = predict(mod3)))
fitp
fitp <- cbind(mod3$model, pred = predict(mod3))
head(fitp)
names(fitp)
gg2 <- ggplot(fitp, aes(x = "poly(Water.Temp, 2)", y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 <- ggplot(fitp, aes(x = poly(Water.Temp, 2), y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
fitp <- cbind(mod3$model, pred = predict(mod3))
head(fitp)
fitp <- cbind(dat, pred = predict(mod3))
head(fitp)
gg2 <- ggplot(fitp, aes(x = Water.Temp, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
rlmod <- rlm(stack.loss ~ Air.Flow + poly(Water.Temp2) + Acid.Conc., data = dat)
library(MASS)
rlmod <- rlm(stack.loss ~ Air.Flow + poly(Water.Temp2) + Acid.Conc., data = dat)
summary(rlmod)
rlmod <- rlm(stack.loss ~ Air.Flow + poly(Water.Temp2), data = dat)
summary(rlmod)
coef(rlmod)
coef(mod3)
rlmod <- rlm(stack.loss ~ Air.Flow + poly(Water.Temp, 2) + Acid.Conc., data = dat)
summary(rlmod)
rlmod <- rlm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat)
summary(rlmod)
coef(rlmod)
coef(mod3)
wts <- rlmod$w
names(wts) <- row.names(dat)
sort(wts)
ltsmod <- ltsreg(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat)
ltsmod
coef(mod3)
coef(rlmod)
coef(ltsmod)
ltsmod <- ltsreg(stack.loss ~ Air.Flow + poly(Water.Temp, 2) + Acid.Conc., data = dat)
ltsmod
# ----------
coef(mod3)
coef(rlmod)
coef(ltsmod)
ltsmod <- ltsreg(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat)
ltsmod
# ----------
coef(mod3)
coef(rlmod)
coef(ltsmod)
ltsmod
names(ltsmod)
ltsmod$crit
ltsmod$sing
help(ltsmod)
help(ltsreg)
ltsmod$bestone
ltsmod$bestone
ltsmod_exact <- ltsreg(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat, method = "S", nsamp = "exact")
ltsmod_exact
ltsmod
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-2,3,4,20,21),])
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-2,3,4,20,21),])
summary(mod_del)
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-2,3,4,20,21),])
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-2,-3,-4,-20,-21),])
summary(mod_del)
coef(mod_del)
coef(mod3)
coef(rlmod)
coef(ltsmod)
coef(mod_del)
coef(mod3)
coef(rlmod)
coef(ltsmod)
coef(mod_del)
car::influenceIndexPlot(mod_del)
names(ltsreg)
names(ltsmod)
ltsmod$terms
ltsmod
sort(wts)
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-3,-4),])
summary(mod_del)
# ----------
coef(mod3)
coef(rlmod)
coef(ltsmod)
coef(mod_del)
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-4,-3,-21),])
summary(mod_del)
# ----------
coef(mod3)
coef(rlmod)
coef(ltsmod)
coef(mod_del)
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-4,-3,-21,-20),])
summary(mod_del)
coef(mod3)
coef(rlmod)
coef(ltsmod)
coef(mod_del)
car::influenceIndexPlot(mod_del)
plot(mod_del)
mod_del <- lm(stack.loss ~ Air.Flow + poly(Water.Temp, 2), data = dat[c(-4,-3),])
summary(mod_del)
# ----------
coef(mod3)
coef(rlmod)
coef(ltsmod)
coef(mod_del)
par(mfrow = c(2,2))
plot(mod_del)
mode.matrix(mod3)
model.matrix(mod3)
