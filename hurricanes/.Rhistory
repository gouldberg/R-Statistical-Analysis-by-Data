abline(v = c(mean(dat1), mean_g1, g1_thre), lty = c(1, 2, 2), col = c("black", "blue", "red"), lwd = 2)
hist(dat2, breaks = brk)
abline(v = c(mean(dat2), mean_g2, g1_thre), lty = c(1, 2, 2), col = c("black", "blue", "red"), lwd = 2)
print(beta_obj)
myfunc <- function(n1, n2, mean_g1, mean_g2, sd_common, alpha){
dat1 <- rnorm(n = n1, mean = mean_g1, sd = sd_common)
dat2 <- rnorm(n = n2, mean = mean_g2, sd = sd_common)
g1_thre <- quantile(g1_mean, 1 - alpha)
obj <- sum(dat2 > g1_thre) / length(dat2)
return(obj)
}
beta <- sapply(1:10000, function(x) { myfunc(n1, n2, mean_g1, mean_g2, sd_common, alpha) } )
summary(beta)
A <- c(15, 9, 18, 14, 18)
B <- c(13, 8, 8, 12, 7)
C <- c(10, 6, 11, 7, 12)
D <- c(10, 7, 3, 5, 7)
( Test <- c(A, B, C, D) )
# ----------
LearningMethod <- c(rep("A", 5), rep("B", 5), rep("C", 5), rep("D", 5))
( LearningMethod <- factor(LearningMethod) )
( df <- data.frame(Test =Test, LearningMethod = LearningMethod) )
A <- c(15, 9, 18, 14, 18)
B <- c(13, 8, 8, 12, 7)
C <- c(10, 6, 11, 7, 12)
D <- c(10, 7, 3, 5, 7)
( Test <- c(A, B, C, D) )
# ----------
LearningMethod <- c(rep("A", 5), rep("B", 5), rep("C", 5), rep("D", 5))
( LearningMethod <- factor(LearningMethod) )
( df <- data.frame(Test = Test, LearningMethod = LearningMethod) )
# ------------------------------------------------------------------------------
# basic analysis
# ------------------------------------------------------------------------------
library(lattice)
xyplot(Test ~ LearningMethod, data = df)
# ----------
boxplot(Test ~ LearningMethod, data = df)
# ------------------------------------------------------------------------------
# Multiple Comparison
# ------------------------------------------------------------------------------
# Null Hypothesis:  mean of paired differences IS zero
# Althernative Hypothesis:  mean of paired difference is DIFFERENT from zero
( output1 <- TukeyHSD(aov(Test~ LearningMethod, data = df)) )
plot(output1)
# -->
# There is difference in mean in C-A and D-A
A <- c(15, 9, 18, 14, 18)
B <- c(13, 8, 8, 12, 7)
C <- c(10, 6, 11, 7, 12)
D <- c(10, 7, 3, 5, 7)
( Test <- c(A, B, C, D) )
# ----------
LearningMethod <- c(rep("A", 5), rep("B", 5), rep("C", 5), rep("D", 5))
( LearningMethod <- factor(LearningMethod) )
( df <- data.frame(Test =Test, LearningMethod = LearningMethod) )
library(lattice)
xyplot(Test ~ LearningMethod, data = df)
library(lattice)
xyplot(Test ~ LearningMethod, data = df)
graphics.off()
library(lattice)
xyplot(Test ~ LearningMethod, data = df)
xyplot(Test ~ LearningMethod, data = df, cex = 2)
xyplot(Test ~ LearningMethod, data = df, cex = 2, pch = 20)
boxplot(Test ~ LearningMethod, data = df)
( output1 <- oneway.test(Test ~ LearningMethod, var.equal = FALSE, data = df) )
( output2 <- aov(Test ~ LearningMethod, data = df) )
( output1 <- oneway.test(Test ~ LearningMethod, var.equal = FALSE, data = df) )
( output1 <- oneway.test(Test ~ LearningMethod, var.equal = FALSE, data = df) )
help(oneway.test)
( output1 <- TukeyHSD(aov(Test~ LearningMethod, data = df)) )
plot(output1)
vx <- c(2.9, 3.0, 2.5, 2.6, 3.2, 3.2, 2.5, 4.4)
vy <- c(3.8, 2.7, 4.0, 2.4)
vz <- c(1.8, 2.4, 2.5, 2.2, 2.0, 3.1)
df <- data.frame(val = c(vx, vy, vz), group = c(rep("x", 8), rep("y", 4), rep("z", 6)))
head(df)
df
par(mfrow = c(1,1))
boxplot(val ~ group, data = df)
aggregate(df$val, by = list(df$group), FUN = "median")
aggregate(df$val, by = list(df$group), FUN = "mean")
aggregate(df$val, by = list(df$group), FUN = "var")
( output <- kruskal.test(x = list(vx, vy, vz)) )
output$p.value
rm(list=ls)
rm(list=ls())
graphics.off()
data(HairEyeColor, package = "datasets")
str(HairEyeColor)
HairEyeColor
str(HairEyeColor)
HairEyeColor
sum(HairEyeColor)
str(HairEyeColor)
library(vcd)
hec <- structable(Eye ~ Sex + Hair, data = HairEyeColor)
hec
hec["Male",]
structable(Hair + Sex ~ Eye, HairEyeColor)
( haireye <- margin.table(HairEyeColor, 1:2) )
mosaic(haireye, labeling = labeling_values)
( hair <- margin.table(haireye, 1) )
prop.table(hair)
round(addmargins(prop.table(haireye, 1), 2), 3)
round(addmargins(prop.table(haireye, 1), 2), 3)
round(addmargins(prop.table(haireye, 2), 1), 3)
round(addmargins(prop.table(haireye)), 3)
library(dplyr)
library(vcdExtra)
# table to case form
dat <- expand.dft(HairEyeColor)
dat <- expand.dft(HairEyeColor)
dat$id <- 1:nrow(dat)
head(dat)
tab <- xtabs(~ Hair + Eye + Sex, data = dat)
tab
tab <- xtabs(~ Hair + Eye + Sex, data = dat)
tab
HairEyeColor
HairEyeColor
HairEyeColor
hec <- structable(Eye ~ Sex + Hair)
structable(Hair + Sex ~ Eye, data = HairEyeColor)
hec <- structable(Eye ~ Sex + Hair, HairEyeColor)
hec
help(structable)
hair
expected <- rep(sum(hair) / 4, 4)
names(expected) <- names(hair)
expected
sum(hari)
sum(hair)
residuals <- (hair - expected) / sqrt(expected)
residuals
exp <- independence_table(haireye)
resids <- (haireye - exp) / sqrt(exp)
round(resids, 2)
exp
round(resids, 2)
( chisq <- sum(resids ^ 2) )
( df <- prod(dim(haireye) - 1) )
( df <- prod(dim(haireye) - 1) )
dim(haireye)
pchisq(chisq, df, lower.tail = FALSE)
chisq.test(haireye)
chisq.test(haireye)
round(residuals(chisq.test(haireye)), 2)
haireye2 <- as.table(haireye[, c("Brown", "Hazel", "Green", "Blue")])
mosaic(haireye2, shade = TRUE)
mosaic(haireye2, shade = TRUE, gp_args = list(interpolate = 1:4))
mosaic(haireye2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digis = 2)
mosaic(haireye2, gp = shading_Friendly, margin = c(right = 1), labeling = labeling_residuals, suppress = 0, digis = 2)
dat
library(gpairs)
# use data frame (not table)
gpairs(dat[,c(1,2,3)], diag.pars = list(fontsize = 20),
mosaic.pars = list(gp = shading_Friendly, gp_args = list(interpolate = 1:4)))
mosaic(haireye, labeling = labeling_values)
mosaic(aperm(haireye, 2:1), labeling = labeling_values)
dat
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\hurricanes")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Hurricanes
# ------------------------------------------------------------------------------
# data("Hurricanes", package = "rethinking")
data <- read.csv(file = "Hurricanes.txt", header = T, sep = "\t")
dim(data)
str(data)
car::some(data)
# ------------------------------------------------------------------------------
# Data exploration:  multi-panel Cleveland dotplot
# ------------------------------------------------------------------------------
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- colnames(data)
Mydotplot(as.matrix(data[,MyVar1]))
# data("Hurricanes", package = "rethinking")
data <- read.csv(file = "Hurricanes.txt", header = T, sep = "\t")
dim(data)
str(data)
car::some(data)
# ------------------------------------------------------------------------------
# Data exploration:  data distribution
# ------------------------------------------------------------------------------
summary(data)
# ----------
psych::describe(data)
# ----------
car::densityPlot(data$deaths)
car::densityPlot(data$damage_norm)
# ----------
table(data$year)
car::densityPlot(data$damage_norm)
psych::describe(data)
MyVar <- c("min_pressure", "damage_norm", "femininity", "deaths")
psych::pairs.panels(data[,MyVar], stars = TRUE)
psych::pairs.panels(data[,MyVar], method = "spearman", stars = TRUE)
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Hair Eye Color
# ------------------------------------------------------------------------------
data(HairEyeColor, package = "datasets")
str(HairEyeColor)
HairEyeColor
HEC <- HairEyeColor[, c("Brown", "Hazel", "Green", "Blue"), ]
# mutual
mosaic(margin.table(HEC, 1:2), expected = ~ Hair + Eye, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
# conditional
mosaic(HEC, expected = ~ Hair * Sex + Eye * Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
# joint
mosaic(HEC, expected = ~ Hair * Eye + Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
mosaic(margin.table(HEC, 1:2), expected = ~ Hair + Eye, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
mosaic(HEC, expected = ~ Hair * Sex + Eye * Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
mosaic(HEC, expected = ~ Hair * Eye + Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
library(MASS)
mod_m <- loglm(~ Hair + Eye + Sex, data = HEC)
# conditional
mod_c <- loglm(~ Hair * Sex + Eye * Sex, data = HEC)
# joint
mod_j <- loglm(~ Hair * Eye + Sex, data = HEC)
LRstats(mod_m, mod_c, mod_j)
haireye
library(ca)
# only available for 2 dimension table
haireye.ca <- ca(haireye)
summary(haireye.ca)
plot(haireye.ca)
mosaic(HEC, expected = ~ Hair * Sex + Eye * Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
mosaic(HEC, expected = ~ Hair * Eye + Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
LRstats(mod_m, mod_c, mod_j)
HEC <- HairEyeColor[, c("Brown", "Hazel", "Green", "Blue"), ]
mosaic(margin.table(HEC, 1:2), expected = ~ Hair + Eye, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
mosaic(HEC, expected = ~ Hair * Sex + Eye * Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
mosaic(HEC, expected = ~ Hair * Eye + Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
# mutual
mod_m <- loglm(~ Hair + Eye + Sex, data = HEC)
# conditional
mod_c <- loglm(~ Hair * Sex + Eye * Sex, data = HEC)
# joint
mod_j <- loglm(~ Hair * Eye + Sex, data = HEC)
# ----------
LRstats(mod_m, mod_c, mod_j)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\hurricanes")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Hurricanes
#   - In 2014, a paper was published that was entitled "Female hurricanes are deadlier than male hurricanes".
#     As the title suggests, the paper claimed that hurricanes with female names have caused greater loss of life, and the explanation
#     given is that people unconsciously rate female hurricanes as less dangerous and so are less likely to evacuate.
#   - Statisticians severely criticized the paper after publication.
#     Here consider the hypothesis that hurricanes with female names are deadlier.
#   - Variables
#        - damage_norm:  Normlized estimate of damage in dollars
#        - min_pressure:  Minimum pressure, a measure of storm strength, low is stronger
# ------------------------------------------------------------------------------
# data("Hurricanes", package = "rethinking")
data <- read.csv(file = "Hurricanes.txt", header = T, sep = "\t")
dim(data)
str(data)
car::some(data)
summary(data)
# ----------
psych::describe(data)
MyVar <- c("min_pressure", "damage_norm", "femininity", "deaths")
cor_mat <- cor(data[,MyVar], method = "spearman")
corrplot(cor_mat, hclust.method = "ward.D2", addrect = TRUE)
library(corrplot)
MyVar <- c("min_pressure", "damage_norm", "femininity", "deaths")
cor_mat <- cor(data[,MyVar], method = "spearman")
corrplot(cor_mat, hclust.method = "ward.D2", addrect = TRUE)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001)
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
library(car)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001)
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001) | female
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c(gray(0.8), "black"), pch = 1:2)
gg <- ggplot(data, aes(min_pressure, deaths)) + geom_point(size = 2, alpha = 0.6) + geom_smooth()
gg
# by group
gg + facet_grid(~ female)
library(ggplot2)
# ----------
# deaths vs. min_pressure
gg <- ggplot(data, aes(min_pressure, deaths)) + geom_point(size = 2, alpha = 0.6) + geom_smooth()
gg
# by group
gg + facet_grid(~ female)
gg <- ggplot(data, aes(damage_norm, deaths)) + geom_point(size = 2, alpha = 0.6) + geom_smooth()
gg
# by group
gg + facet_grid(~ female)
gg <- ggplot(data, aes(femininity, deaths)) + geom_point(size = 2, alpha = 0.6) + geom_smooth()
gg
# by group
gg + facet_grid(~ female)
boxplot(log(deaths + 0.001) ~ female, data = data)
wilcox.test(log(deaths + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(min_pressure + 0.001) ~ female, data = data)
wilcox.test(log(min_pressure + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(damage_norm + 0.001) ~ female, data = data)
wilcox.test(log(damage_norm + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
ggplot(data, aes(as.factor(female), femininity)) + geom_boxplot()
ggplot(data, aes(as.factor(female), deaths)) + geom_violin()
( output1 <- TukeyHSD(aov(I(deaths^0.1) ~ factor(category), data = data)) )
par(mfrow = c(1,1))
plot(output1)
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- colnames(data)
Mydotplot(as.matrix(data[,MyVar1]))
car::densityPlot( ~ deaths, data = data)
# transforming for symmetry  --> 1 / sqrt transformation is good
car::symbox(~ deaths, data = data)
p1 <- car::powerTransform(deaths ~ 1, data = data, family = "bcnPower")
summary(p1)
car::testTransform(p1, lambda = 0.1)
tmp <- data %>% mutate(deaths2 = deaths^0.1)
car::densityPlot( ~ deaths2, data = tmp)
car::densityPlot( ~ damage_norm, data = data)
car::symbox(~ damage_norm, data = data)
p1 <- car::powerTransform(damage_norm ~ 1, data = data, family = "bcnPower")
summary(p1)
car::testTransform(p1, lambda = 0.1)
tmp <- data %>% mutate(damage_norm2 = damage_norm^0.1)
car::densityPlot( ~ damage_norm2, data = tmp)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001) | female
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c(gray(0.8), "black"), pch = 1:2)
boxplot(log(deaths + 0.001) ~ female, data = data)
wilcox.test(log(deaths + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
wilcox.test(log(deaths + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(min_pressure + 0.001) ~ female, data = data)
wilcox.test(log(min_pressure + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(damage_norm + 0.001) ~ female, data = data)
wilcox.test(log(damage_norm + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
ggplot(data, aes(as.factor(female), femininity)) + geom_boxplot()
ggplot(data, aes(as.factor(female), deaths)) + geom_violin()
boxplot(log(deaths + 0.001) ~ factor(category), data = data)
d_list <- split(data$deaths, f = factor(data$category))
kruskal.test(x = d_list)
# TukeyHSD:
# Null Hypothesis:  mean of paired differences IS zero
# Althernative Hypothesis:  mean of paired difference is DIFFERENT from zero
# ( output1 <- TukeyHSD(aov(log(deaths + 0.001) ~ factor(category), data = data)) )
( output1 <- TukeyHSD(aov(I(deaths^0.1) ~ factor(category), data = data)) )
par(mfrow = c(1,1))
plot(output1)
summary(data)
car::densityPlot(data$deaths)
car::densityPlot(data$deaths, groups = data$female)
help(densityPlot)
car::densityPlot(deaths ~ female, data = data)
car::densityPlot(deaths ~ as.factor(female), data = data)
car::densityPlot(damage_norm ~ as.factor(female), data = data)
boxplot(min_pressure ~ female, data = data)
xtabs(~ year + female, data = data)
plot(xtabs(~ year + female, data = data))
vcd::doubledecker(xtabs(~ year + female, data = data))
plot(min_pressure ~ year, data = data)
plot(min_pressure ~ year, data = data, pch = 20)
xyplot(min_pressure ~ year | as.factor(female), data = data)
xyplot(min_pressure ~ year | as.factor(female),
data = data, cex = 2, pch = 20)
xyplot(min_pressure ~ year | as.factor(female),
data = data, cex = 1.2, pch = 20)
xyplot(deaths ~ year | as.factor(female),
data = data, cex = 1.2, pch = 20)
xyplot(femininity ~ year | as.factor(female),
data = data, cex = 1.2, pch = 20)
xyplot(femininity ~ year,
data = data, cex = 1.2, pch = 20)
data <- read.csv(file = "Hurricanes.txt", header = T, sep = "\t")
dim(data)
str(data)
car::some(data)
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- colnames(data)
Mydotplot(as.matrix(data[,MyVar1]))
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- colnames(data)
Mydotplot(as.matrix(data[,MyVar1]))
summary(data)
psych::describe(data)
car::densityPlot(data$deaths)
car::densityPlot(data$deaths)
car::densityPlot(deaths ~ as.factor(female), data = data)
car::densityPlot(damage_norm ~ as.factor(female), data = data)
table(data$year)
vcd::doubledecker(xtabs(~ year + female, data = data))
xyplot(deaths ~ year | as.factor(female),
data = data, cex = 1.2, pch = 20)
xyplot(femininity ~ year,
data = data, cex = 1.2, pch = 20)
car::densityPlot( ~ deaths, data = data)
# transforming for symmetry  --> 1 / sqrt transformation is good
car::symbox(~ deaths, data = data)
car::densityPlot( ~ damage_norm, data = data)
# transforming for symmetry  --> log transformation is good
car::symbox(~ damage_norm, data = data)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001)
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
library(car)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001)
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001) | female
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c(gray(0.8), "black"), pch = 1:2)
gg <- ggplot(data, aes(femininity, deaths)) + geom_point(size = 2, alpha = 0.6) + geom_smooth()
gg
library(ggplot2)
gg <- ggplot(data, aes(min_pressure, deaths)) + geom_point(size = 2, alpha = 0.6) + geom_smooth()
gg
# by group
gg + facet_grid(~ female)
boxplot(log(deaths + 0.001) ~ factor(category), data = data)
boxplot(log(deaths + 0.001) ~ female, data = data)
boxplot(log(deaths + 0.001) ~ female, data = data)
wilcox.test(log(deaths + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(min_pressure + 0.001) ~ female, data = data)
wilcox.test(log(min_pressure + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(deaths + 0.001) ~ factor(category), data = data)
d_list <- split(data$deaths, f = factor(data$category))
kruskal.test(x = d_list)
( output1 <- TukeyHSD(aov(I(deaths^0.1) ~ factor(category), data = data)) )
par(mfrow = c(1,1))
plot(output1)
summary(data)
boxplot(log(deaths + 0.001) ~ female, data = data)
log(data$deaths)
wilcox.test(log(deaths + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
psych::denscribe(data)
psych::describe(data)
car::densityPlot(data$deaths)
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  gala
#   - There are 30 Galapagos islands and 7 variables in the dataset.
#   - Variables
#       - Species: number of species found on the island
#       - Area:  the area of the island (km2)
#       - Elevation:  the highest elevation of the island (m)
#       - Nearest:  the distance from the nearest island (km)
#       - Scruz:  the distance from Santa Cruz Island (km)
#       - Adjacent:  the area of the adjacent island (km2)
#       - Endemics:  number of endemic species
# ------------------------------------------------------------------------------
data("gala", package = "faraway")
str(gala)
dim(gala)
car::some(gala)
