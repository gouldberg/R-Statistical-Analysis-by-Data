setwd("//media//kswada//MyFiles//R//loblolloy")
packages <- c("dplyr", "lattice", "gamair")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# This tutorial is based on
# Chapter 2. GAMs in Practive: mgcv from "Generalized Additive Models An Introduction with R 2nd Edition" (by Simon N. Wood)
# ------------------------------------------------------------------------------
# data:  Loblloly
#   - Contains growth data on Loblolly pine trees, height, in feet (data from the US), and age, in years, are recorded for 14 individual trees.
#     A factor variable Seed, with 14 levels, indicates the identity of individual trees.
# ------------------------------------------------------------------------------
data(Loblolly, package = "gamair")
# Note that this is "nfnGroupedData" class
str(Loblolly)
head(Loblolly)
data(Loblolly, package = "gamair")
# Note that this is "nfnGroupedData" class
str(Loblolly)
head(Loblolly)
# ------------------------------------------------------------------------------
# Data exploration:  multi-panel Cleveland dotplot
# ------------------------------------------------------------------------------
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(DataSelected), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
#               scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- c("height", "age", "Seed")
Mydotplot(Loblolly[,MyVar1])
table(Loblolly$Seed, useNA = "always")
plot(height ~ age, data = Loblolly, ylab = "height", xlab = "age", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(Loblolly$age, Loblolly$height), col = "blue", lwd = 1)
# ------------------------------------------------------------------------------
# data exploration:  continuous Y vs. continuous X  by group   by xyplot
# ------------------------------------------------------------------------------
xyplot(height ~ age, data = Loblolly)
library(ggplot2)
ggplot(Loblolly, aes(x = age, y = height)) + xlab("age") + ylab("height") + geom_point(position = position_jitter(), alpha = 0.3) + stat_smooth()
# ------------------------------------------------------------------------------
# data exploration:  continuous Y vs. continuous X  by scatterplot
# ------------------------------------------------------------------------------
formula <- height ~ age
scatterplot(formula, data = Loblolly)
car::scatterplot(formula, data = Loblolly)
library(ggplot2)
gg <- ggplot(Loblolly, aes(age, height)) +
stat_smooth(method = "loess", size = 2, fill = "blue", alpha = 0.25) +
stat_smooth(method = "lm", color = "red", size = 1.25, se = FALSE) +
labs(y = "height", x = "age")
gg + facet_wrap(~ Seed)
formula = height ~ age | Seed
coplot(formula, data = Loblolly, ylab = "height", xlab = "age", las=1)
# ------------------------------------------------------------------------------
# data exploration:  continuous Y vs. continuous X  by group   by xyplot
# ------------------------------------------------------------------------------
formula = height ~ age | Seed
xyplot(formula, data = Loblolly, type = c("p", "g", "smooth"))
car::scatterplot(formula, data = Loblolly)
formula <- height ~ age | Seed
car::scatterplot(formula, data = Loblolly)
data(Loblolly, package = "gamair")
# Note that this is "nfnGroupedData" class
str(Loblolly)
head(Loblolly)
# ----------
# Seed was "ordered factor" --> changed to non-ordered factor
Loblolly$Seed <- as.factor(as.character(Loblolly$Seed))
# Without centering, polynomial terms can become highly correlated which can cause numerical difficulties
Loblolly$age <- Loblolly$age - mean(Loblolly$age)
lmod <- lm(height ~ poly(age, 3) + Seed, data = Loblolly)
# lmod <- lm(height ~ age + I(age ^ 2) + I(age ^ 3) + Seed, data = Loblolly)
summary(lmod)
# ----------
anova(lmod)
residualPlots(lmod)
car::residualPlots(lmod)
car::residualPlots(lmod, term = ~1)
qqPlot(lmod)
densityPlot(resid(lmod))
libarary(car)
residualPlots(lmod)
residualPlots(lmod, term = ~1)
# -->
# Note that the residuals by seed shows heterogeneity
# ----------
qqPlot(lmod)
densityPlot(resid(lmod))
densityPlots(resid(lmod))
library(car)
residualPlots(lmod)
residualPlots(lmod, term = ~1)
# -->
# Note that the residuals by seed shows heterogeneity
# ----------
qqPlot(lmod)
densityPlot(resid(lmod))
ncvTest(lmod)
plot(predictorEffects(lmod, residuals = TRUE), partial.residuals = list(cex = 0.35, col = gray(0.5), lty = 2))
library(effects)
plot(predictorEffects(lmod, residuals = TRUE), partial.residuals = list(cex = 0.35, col = gray(0.5), lty = 2))
lob.fitp <- cbind(Loblolly, height_pred = predict(lmod, type = "response"))
# lob.fitp <- fortify(lmod)
head(lob.fitp)
library(ggplot2)
graphics.off()
gg <- ggplot(lob.fitp, aes(x = age, y = height_pred)) + theme_bw() + geom_point(colour = "black", size = 1.5)
# gg <- ggplot(lob.fitp, aes(x = poly(age, 3), y = .fitted)) + theme_bw() + geom_point(colour = "black", size = 1.5)
gg + facet_wrap(~ Seed) + stat_smooth()
lmc <- lmeControl(niterEM = 500, msMaxIter = 1000)
m0 <- lme(height ~ age + I(age ^ 2) + I(age ^ 3), data = Loblolly,
random = list(Seed = ~age + I(age ^ 2) + I(age ^ 3)), control = lmc)
library(lme)
library(lme4)
lmc <- lmeControl(niterEM = 500, msMaxIter = 1000)
m0 <- lme(height ~ age + I(age ^ 2) + I(age ^ 3), data = Loblolly,
random = list(Seed = ~age + I(age ^ 2) + I(age ^ 3)), control = lmc)
library(lmer)
library(nlme)
# This produces errors.
# m0 <- lme(height ~ age + I(age ^ 2) + I(age ^ 3) + (1|Seed), data = Loblolly)
# ----------
# default setting method fails without some adjustment
# lme fits start by using the EM algorithm to get reasonble close to the optimal parameter estimates, and then switch to Newton's method,
# which converges more quickly.
# Note that niterEM should rarely be incread from its default 0 when calling gamm (for future reference)
lmc <- lmeControl(niterEM = 500, msMaxIter = 1000)
m0 <- lme(height ~ age + I(age ^ 2) + I(age ^ 3), data = Loblolly,
random = list(Seed = ~age + I(age ^ 2) + I(age ^ 3)), control = lmc)
summary(m0)
mod_obj <- m0
# ------------------------------------------------------------------------------
# Standardized residuals against fitted value and age, with by group (Seed)
# ------------------------------------------------------------------------------
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | Seed, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "p") ~ age | Seed, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, Seed ~ resid(., type = "p"))
qqnorm(mod_obj, ~ ranef(.))
qqnorm(mod_obj, ~ ranef(.))
infl <- influence(mod_obj)
infl
infl
lmc <- lmeControl(niterEM = 500, msMaxIter = 1000)
# Some degree of autocorrelation in the random component of height
# corAR1:  autoregressive process of order 1
m0_2 <- lme(height ~ age + I(age ^ 2) + I(age ^ 3), data = Loblolly,
random = list(Seed = ~age + I(age ^ 2) + I(age ^ 3)),
correlation = corAR1(form = ~ age | Seed), control = lmc)
summary(m0_2)
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | Seed, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, Seed ~ resid(., type = "p"))
mod_obj <- m0_2
# ------------------------------------------------------------------------------
# Standardized residuals against fitted value and age, with by group (Seed)
# ------------------------------------------------------------------------------
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | Seed, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "p") ~ age | Seed, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
library(effects)
plot(predictorEffects(mod_obj))
plot(predictorEffects(mod_obj, residuals = TRUE), partial.residuals = list(cex = 0.35, col = gray(0.5), lty = 2))
lob.fitp <- cbind(Loblolly, height_pred = predict(mod_obj, type = "response"))
# lob.fitp <- fortify(mod_obj)
head(lob.fitp)
library(ggplot2)
graphics.off()
gg <- ggplot(lob.fitp, aes(x = age, y = height_pred)) + theme_bw() + geom_point(colour = "black", size = 1.5)
gg + facet_wrap(~ Seed) + stat_smooth()
# predicted coefficients
fixef(mod_obj)
ranef(mod_obj)
# ----------
# We specify the random effects part of the prediction as ~0 meaning that this term is not present.
predict(mod_obj, re.form = ~ 0)
predict(mod_obj)
# ----------
# Now we specify that the operator is 'a'
predict(mod_obj, newdata = data.frame(Seed = "301", age = 12))
augPred(mod_obj)
plot(augPred(mod_obj))
library(MASS)
# ----------
# mean of 10 groups
dat_mean <- mvrnorm(n = 10, mu = c(0, 0), Sigma = matrix(c(1, 0.7, 0.7, 1), ncol = 2))
dat_mean <- data.frame(x = dat_mean[,1], y = dat_mean[,2], group = 1:10)
plot(y ~ x, groups = as.factor(group), data = dat_mean, pch = 20, cex = 3, col = "black",
main = paste0("10 groups mean, correlation is ", round(cor(dat_mean$x, dat_mean$y), 3)),
xlim = c(-4, 4), ylim = c(-4, 4), cex.main = 2)
abline(lm(y ~ x, data = dat_mean), lty = 2, col = "black")
# ------------------------------------------------------------------------------
# Simulate records by each group
# ------------------------------------------------------------------------------
# sample size
n <- seq(30, 130, by = 10)
# covariance matrix of the variable
# r <- c(-0.4, -0.3, -0.2, 0.3, 0.4, 0.8, 0.4, 0.3, 0.2, 0.4)
r <- rnorm(n = 10, mean = 0.5, sd = 0.2)
# ----------
# by organization
graphics.off()
par(mfrow = c(3,4))
set.seed(122345)
dat_all <- data.frame()
for(i in 1:length(r)){
Sigma1 <- matrix(c(1, r[i], r[i], 1), ncol = 2)
dat <- mvrnorm(n = n[i], mu = c(dat_mean[i,1], dat_mean[i,2]), Sigma = Sigma1)
tmp <- data.frame(x = dat[,1], y = dat[,2], group = i)
dat_all <- rbind(dat_all, tmp)
plot(dat, main = paste0("r = ", round(cor(dat[,1], dat[,2]), 2)), cex.main = 2, cex = 1.2, pch = 20)
abline(h = dat_mean[i,2], lty = 2, col = "black")
abline(v = dat_mean[i,1], lty = 2, col = "black")
}
# ------------------------------------------------------------------------------
# plot all in one
# ------------------------------------------------------------------------------
graphics.off()
plot(y ~ x, groups = as.factor(group), data = dat_all, pch = 1:10, col = 1:10,
main = paste0("Pearson Correlation: ", round(cor(dat_all$x, dat_all$y), 3)), cex = 1.2)
points(y ~ x, data = dat_mean, pch = 20, cex = 3, col = "black")
# ----------
abline(lm(y ~ x, data = dat_all), lwd = 4, col = "black")
for(i in 1:10){ abline(lm(y ~ x, data = dat_all[dat_all$group == i,]), col = i) }
# ------------------------------------------------------------------------------
# bivariate pairs plot
# ------------------------------------------------------------------------------
library(car)
formula <- ~ y + x
scatterplotMatrix(formula, data = dat_all,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
# ----------
# by group
formula <- ~ y + x | as.factor(group)
scatterplotMatrix(formula, data = dat_all,
smooth = FALSE, ellipse = list(levels = 0.5),
id = list(n = 3), col = 1:10, pch = 1:10)
by(dat_all$y, dat_all$group, FUN = mean)
aggregate(dat_all$x, by = list(dat_all$group), FUN = "var")
# ----------
glin <- lm(y ~ x, data = dat_all)
summary(glin)
# ----------
# Analysis of Variance Table by each term
anova(glin)
# ----------
plot(y ~ x, data = dat_all)
abline(glin)
# ----------
glin2 <- lm(y ~ x + group, data = dat_all)
summary(glin2)
# ----------
anova(glin2)
AIC(glin, glin2)
lmemod1 <- lme(y ~ 1, random = ~ 1 | as.factor(group), data = dat_all)
summary(lmemod1)
# ----------
F0 <- fitted(lmemod1, level = 0)
F1 <- fitted(lmemod1, level = 1)
I <- order(dat_all$x)
xs <- sort(dat_all$x)
plot(y ~ x, group = as.factor(dat_all$group), data = dat_all, pch = 1:10, col = 1:10)
lines(xs, F0[I], lwd = 4, type = "l")
for(i in 1:10){
x1 <- dat_all$x[dat_all$group == i]
y1 <- F1[dat_all$group == i]
K <- order(x1)
lines(sort(x1), y1[K])
}
# ------------------------------------------------------------------------------
# The Random Inercept Model
# ------------------------------------------------------------------------------
library(nlme)
lmemod2 <- lme(y ~ x, random = ~ 1 | as.factor(group), data = dat_all)
summary(lmemod2)
summary(glin2)
# -->
# residual variance:  0.84 ^ 2, different from glin2 (1.025 ^ 2)
# variance for random intercept:  0.76 ^ 2
# fixed effects coefficients = 0.420, different from glin2 (0.448)
# ----------
F0 <- fitted(lmemod2, level = 0)
F1 <- fitted(lmemod2, level = 1)
I <- order(dat_all$x)
xs <- sort(dat_all$x)
plot(y ~ x, group = as.factor(dat_all$group), data = dat_all, pch = 1:10, col = 1:10)
lines(xs, F0[I], lwd = 4, type = "l")
for(i in 1:10){
x1 <- dat_all$x[dat_all$group == i]
y1 <- F1[dat_all$group == i]
K <- order(x1)
lines(sort(x1), y1[K])
}
# ------------------------------------------------------------------------------
# The Random Inercept and Slope model
# ------------------------------------------------------------------------------
lmemod3 <- lme(y ~ x, random = ~ 1 + x | as.factor(group), data = dat_all)
summary(lmemod3)
# -->
# residual variance:  0.83 ^ 2 (a little bit smaller)
# variance for random intercept:  0.71 ^ 2
# fixed effects coefficients = 0.420
# ----------
F0 <- fitted(lmemod3, level = 0)
F1 <- fitted(lmemod3, level = 1)
I <- order(dat_all$x)
xs <- sort(dat_all$x)
plot(y ~ x, group = as.factor(dat_all$group), data = dat_all, pch = 1:10, col = 1:10)
lines(xs, F0[I], lwd = 4, type = "l")
for(i in 1:10){
x1 <- dat_all$x[dat_all$group == i]
y1 <- F1[dat_all$group == i]
K <- order(x1)
lines(sort(x1), y1[K])
}
mod_obj <- lmemod1
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | Seed, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
mod_obj <- lmemod1
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | group, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "p") ~ x | group, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
mod_obj <- lmemod3
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | group, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "p") ~ x | group, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, group ~ resid(., type = "p"))
qqnorm(mod_obj, ~ ranef(.))
mod_obj <- lmemod2
qqnorm(mod_obj, ~ ranef(.))
mod_obj <- lmemod3
qqnorm(mod_obj, ~ ranef(.))
mod_obj <- lmemod3
infl <- influence(mod_obj)
infl
lmemod4 <- lme(y ~ x, data = dat_all,
random = list(group = pdDiag(~x)))
summary(lmemod4)
summary(lmemod2)
summary(glin2)
F0 <- fitted(lmemod4, level = 0)
F1 <- fitted(lmemod4, level = 1)
I <- order(dat_all$x)
xs <- sort(dat_all$x)
plot(y ~ x, group = as.factor(dat_all$group), data = dat_all, pch = 1:10, col = 1:10)
lines(xs, F0[I], lwd = 4, type = "l")
for(i in 1:10){
x1 <- dat_all$x[dat_all$group == i]
y1 <- F1[dat_all$group == i]
K <- order(x1)
lines(sort(x1), y1[K])
}
lmemod4 <- lme(y ~ x, data = dat_all,
random = list(group = pdDiag(~x)))
BIC(lmemod1, lmemod2, lmemod3, lmemod4)
anova(lmemod3, lmemod4)
mod_obj <- lmemod4
plot(mod_obj)
plot(mod_obj, resid(., type = "p") ~ fitted(.) | group, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
mod_obj <- lmemod3
ranef(mod_obj)
( rf1 <- ranef(mod_obj)$x )
summary(rf1)
mod_obj <- lmemod3
library(effects)
plot(predictorEffects(mod_obj))
plot(predictorEffects(mod_obj, residuals = TRUE), partial.residuals = list(cex = 0.35, col = gray(0.5), lty = 2))
fitp <- cbind(dat_all, y_pred = predict(mod_obj, type = "response"))
fitp <- fortify(mod_obj)
head(fitp)
graphics.off()
gg <- ggplot(fitp, aes(x = x, y = y_pred)) + theme_bw() + geom_point(colour = "black", size = 1.5)
graphics.off()
gg <- ggplot(fitp, aes(x = x, y = y_pred)) + theme_bw() + geom_point(colour = "black", size = 1.5)
gg + facet_wrap(~ group) + stat_smooth()
fixef(mod_obj)
ranef(mod_obj)
fixef(mod_obj)
ranef(mod_obj)
predict(mod_obj, re.form = ~ 0)
predict(mod_obj)
predict(mod_obj, newdata = data.frame(Seed = "301", age = 12))
predict(mod_obj, newdata = data.frame(group = 10, x = 10))
augPred(mod_obj)
plot(augPred(mod_obj))
mod_obj
library(gtools)
getDependencies("control")
getDependencies("control", available=FALSE, base=TRUE, recommended=TRUE)
getDependencies("control", available=TRUE, base=TRUE, recommended=TRUE)
getDependencies("sysid", available=FALSE, base=TRUE, recommended=TRUE)
getDependencies("sysid", available=TRUE, base=TRUE, recommended=TRUE)
getDependencies("sysid", available=TRUE, base=FALSE, recommended=TRUE)
getDependencies("sysid", available=TRUE, base=TRUE, recommended=TRUE)
getDependencies("timsac", available=FALSE, base=TRUE, recommended=TRUE)
getDependencies("TSSS", available=FALSE, base=TRUE, recommended=TRUE)
