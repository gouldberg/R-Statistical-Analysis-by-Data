model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.3 <- lmer(read ~ grade5 + eth + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
library(AICcmodavg)
mynames <- paste("M", as.character(1:3), sep = "")
myaic <- aictab(cand.set = list(model.1, model.2, model.3),
modnames = mynames, sort = FALSE, second.ord = FALSE)
as.data.frame(myaic)[,1:3]
myaicc <- aictab(cand.set = list(model.1, model.2, model.3),
modnames = mynames, sort = FALSE, second.ord = TRUE)
as.data.frame(myaicc)[,1:3]
print(myaicc)
# print(myaicc, LL = FALSE)
# ------------------------------------------------------------------------------
# Confidence set for the best model
# ------------------------------------------------------------------------------
# With only 3 models, the confidence set is easy to dtermine by inspecting the output.
# However, with additional models. it is convenient to use the confset() function in AICcmodavg
# The default confidence is 95%
confset(cand.set = list(model.1, model.2, model.3), modnames = mynames)
# 75% confidence set
confset(cand.set = list(model.1, model.2, model.3), modnames = mynames, level = 0.75)
# ------------------------------------------------------------------------------
# AICc and Effect Size
# ------------------------------------------------------------------------------
#   - Evidence Ratio:
#        - The difference between the best-fitting model and a worse-fitting model in terms of odds
#          = max(weight of evidence) / weight of evidence of the model
# ------------------------------------------------------------------------------
# The default of the function is to return the evidence ratio for the best-fitting model and the second best-fitting model
evidence(myaicc)
# Compare best-fitting model and "M1"
evidence(myaicc, model.low = "M1")
# ----------
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
library(lmd4)
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
evidence(myaicc)
library(ggplot2)
myx <- scale_x_continuous(breaks = 5:8)
theme_set(theme_bw())
g1 <- ggplot(myaicc, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
scale_y_continuous(limits = c(0,1))
g2 <- ggplot(myaicc, aes(x = Modnames, y = Eratio)) + ylab("Ratio") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
geom_jline(aes(yintercept = 1), linetype = 2)
print(g1)
g2 <- ggplot(myaicc, aes(x = Modnames, y = Eratio)) + ylab("Ratio") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
geom_line(aes(yintercept = 1), linetype = 2)
print(g1)
g1 <- ggplot(myaicc, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
myaicc2
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model")
print(g1)
g1
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt))
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black")
print(g1)
Modnames
str(myaicc2)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(fill = "grey80", colour = "black")
print(g1)
help(geom_bar)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") + geom_bar()
print(g1)
myx <- scale_x_continuous(breaks = 5:8)
theme_set(theme_bw())
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") + geom_bar()
print(g1)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight")
geom_bar(aes(fill = "grey80", colour = "black")) + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight")
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(aes(fill = "grey80", colour = "black")) + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(aes(fill = "grey80", colour = "black")) + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
g2 <- ggplot(myaicc2, aes(x = Modnames, y = Eratio)) + ylab("Ratio") +
geom_bar(fill = "grey80", colour = "black") + xlab("Model") +
geom_line(aes(yintercept = 1), linetype = 2)
print(g2)
g1 <- ggplot(myaicc2, aes(x = Modnames, y = AICcWt)) + ylab("Weight") +
geom_bar(stat = "identity", fill = "grey80", colour = "black") + xlab("Model") +
scale_y_continuous(limits = c(0,1))
print(g1)
g2 <- ggplot(myaicc2, aes(x = Modnames, y = Eratio)) + ylab("Ratio") +
geom_bar(stat = "identity", fill = "grey80", colour = "black") + xlab("Model") +
geom_line(aes(yintercept = 1), linetype = 2)
print(g2)
g2 <- ggplot(myaicc2, aes(x = Modnames, y = Eratio)) + ylab("Ratio") +
geom_bar(stat = "identity", fill = "grey80", colour = "black") + xlab("Model") +
geom_hline(yintercept = 1, linetype = 2)
print(g2)
print(myaicc2, digits = 3)
confset(cand.set = mymodels. modnames = mynames, level = 0.99)
confset(cand.set = mymodels, modnames = mynames, level = 0.99)
confset(cand.set = mymodels, modnames = mynames, level = 0.99)
confset(cand.set = mymodels, modnames = mynames, level = 0.95)
mytab <- as.data.frame(summary(model.2)@coefs)
mytab
mytab <- as.data.frame(summary(model.2)$coefs)
mytab
summary(model.2)
names(summary(model.2)
)
mytab <- as.data.frame(summary(model.2)$coefficients)
mytab
confset(cand.set = mymodels, modnames = mynames, level = 0.95)
print(myaicc2, digits = 3)
summary(model.2)
summary(model.3)
summary(model.2)
summary(model.3)
summary(model.1)
confint(model.1)
mytab <- mytab %>% mutate(LCI = Estimate - 2 * Std.Error, UCI = Estimate - 2 * Std.Error)
print(mytab)
mytab <- as.data.frame(summary(model.1)$coefficients)
mytab
mytab <- mytab %>% mutate(LCI = Estimate - 2 * Std.Error, UCI = Estimate - 2 * Std.Error)
mytab <- as.data.frame(summary(model.1)$coefficients)
mytab
str(mytab)
mytab <- mytab %>% mutate(LCI = Estimate - 2 * Std. Error, UCI = Estimate - 2 * Std. Error)
mytab <- mytab %>% mutate(LCI = Estimate - 2 * 'Std. Error', UCI = Estimate - 2 * 'Std. Error')
mytab$LCI <- mytab$Estimate - 2 * mytab$'Std. Error'
mytab$UCI <- mytab$Estimate + 2 * mytab$'Std. Error'
print(mytab)
confint(model.1)
plotdata <- model.1@frame
( plotdata <- model.1@frame )
( plotdata <- model.1@frame )
plotdata$pred <- model.matrix(model.1) %*% fixef(model.1)
plotdata$grade <- plotdata$grade + 5
# ----------
myx <- scale_x_continuous(breaks = 5:8)
g1 <- ggplot(plotdata, aes(x = grade, y = read, linetype = risk2)) +
stat_summary(fun.y = "mean", geom = "point", cex = 2) +
stat_summary(aes(y = pred), fun.y = "mean", geom = "line") +
myx + opts(legend.position = c(0.54, 0.3), legend.title = theme_blank())
print(g1)
help(opts)
g1 <- ggplot(plotdata, aes(x = grade, y = read, linetype = risk2)) +
stat_summary(fun.y = "mean", geom = "point", cex = 2) +
stat_summary(aes(y = pred), fun.y = "mean", geom = "line") +
myx + theme(legend.position = c(0.54, 0.3), legend.title = theme_blank())
print(g1)
help(theme)
g1 <- ggplot(plotdata, aes(x = grade, y = read, linetype = risk2)) +
stat_summary(fun.y = "mean", geom = "point", cex = 2) +
stat_summary(aes(y = pred), fun.y = "mean", geom = "line") +
myx + theme(legend.position = c(0.54, 0.3), legend.title = element_blank())
print(g1)
g1 <- ggplot(plotdata, aes(x = grade, y = read, linetype = risk2)) +
stat_summary(fun.y = "mean", geom = "point", cex = 2) +
stat_summary(aes(y = pred), fun.y = "mean", geom = "line") +
myx + theme(legend.position = c(0.54, 0.1), legend.title = element_blank())
print(g1)
library(effects)
predictorEffects(model.1)
plotdata$pred
unlit(plotdata$pred)
unlist(plotdata$pred)
as.vector(plotdata$pred))
as.vector(plotdata$pred)
predictorEffects(model.1)
plot(predictorEffects(model.1))
fitp <- fortify(model.1)
fitp <- cbind(model.1, pred = predict(model.1, type = "response"))
head(fitp)
model.1
plot(predictorEffects(model.1, ~grade5))
plot(Effect(c("grade5", "risk2"), model.1),
confint = list(style = "bands"),
lines = list(multiline = TRUE, lty = c(5,4,3,2,1), col = c(gray(0.8), gray(0.6), gray(0.4), gray(0.2), "black")))
print(g1)
print(myaicc2, digits = 3)
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
# ----------
# Extract and sort bootstrap ratios
mystorage.s <- sort(mystorage0[,2])
a <- c(0.1, 0.05, 0.01)
b <- (B + 1) * (1 - a)
myquant <- as.data.frame(mystorage.s[b])
colnames(myquant) <- "quantile"
rownames(myquant) <- c("90%", "95%", "99%")
myquant
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
library(plyr)
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
# ----------
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
library(plyr)
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
help(rdply)
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
refit(model.1, simdv[,1])
simdv <- simulate(model.1)
simdv
nrow(MPLS.LS)
fitted(model.1)
summary(MPLS.LS)
nrow(MPLS.LS)
fitted(model.1)
length(fitted(model.1))
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), na.exclude(MPLS.LS), REML = FALSE)
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exlude)
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
simdv <- simulate(model.1)
simdv
refit(model.1, simdv[,1])
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
# ----------
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
# ------------------------------------------------------------------------------
# Parametric bootstrap
# ------------------------------------------------------------------------------
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
set.seed(1)
B <- 999
library(plyr)
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
set.seed(1)
B <- 999
library(plyr)
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), reift(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), refit(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
library(plyr)
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
mystorage.s <- sort(mystorage0[,2])
a <- c(0.1, 0.05, 0.01)
b <- (B + 1) * (1 - a)
myquant <- as.data.frame(mystorage.s[b])
colnames(myquant) <- "quantile"
rownames(myquant) <- c("90%", "95%", "99%")
myquant
mystorage.s <- sort(mystorage0[,2])
boot.func <- function(){
simdv <- simulate(model.2)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), refit(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
library(plyr)
# rdply:  evaluate expression n times then combine results into a data frame
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
mystorage0
simdv <- simulate(model.2)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), refit(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
simdv <- simulate(model.2)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), refit(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
simdv
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.omit)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.omit)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.omit)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.omit)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.omit)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.omit)
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), refit(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
library(plyr)
# rdply:  evaluate expression n times then combine results into a data frame
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text")
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text", id = NA)
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE, na.action = na.exclude)
boot.func <- function(){
simdv <- simulate(model.1)
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(refit(model.1, simdv[,1]), refit(model.2, simdv[,1]),
refit(model.3, simdv[,1]), refit(model.4, simdv[,1]),
refit(model.5, simdv[,1]), refit(model.6, simdv[,1]))
myaicc <- aictab(mymodels, mynames, sort = F)
b.eratio <- max(myaicc$AICcWt) / myaicc$AiCcWt[1]
}
# ----------
set.seed(1)
B <- 999
library(plyr)
# rdply:  evaluate expression n times then combine results into a data frame
mystorage0 <- rdply(.n = B, .expr = boot.func, .progress = "text", .id = NA)
warnings()
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
# ----------
mynames <- paste0("M", as.character(1:6), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
mynames <- paste0("M", as.character(1:8), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6, model.7, model.8)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
model.7 <- lmer(read ~ grade5 + risk2 + eth + gen + (grade5 | subid), MPLS.LS, REML = FALSE)
model.8 <- lmer(read ~ grade5 * risk2 + grade5 * eth + grade5 * gen + (grade5 | subid), MPLS.LS, REML = FALSE)
mynames <- paste0("M", as.character(1:8), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6, model.7, model.8)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
mynames <- paste0("M", as.character(1:8), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6, model.7, model.8)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
model.7 <- lmer(read ~ grade5 + risk2 + eth + gen + (grade5 | subid), MPLS.LS, REML = FALSE)
model.8 <- lmer(read ~ grade5 * risk2 + grade5 * eth + grade5 * gen + (grade5 | subid), MPLS.LS, REML = FALSE)
mynames <- paste0("M", as.character(1:8), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6, model.7, model.8)
mymodels
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
myaicc2 <- myaicc %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
myaicc2
model.1 <- lmer(read ~ grade5 + risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.2 <- lmer(read ~ grade5 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.3 <- lmer(read ~ grade5 + risk2 + eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.4 <- lmer(read ~ grade5 * risk2 + (grade5 | subid), MPLS.LS, REML = FALSE)
model.5 <- lmer(read ~ grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
model.6 <- lmer(read ~ grade5 * risk2 + grade5 * eth + (grade5 | subid), MPLS.LS, REML = FALSE)
names(MPLS.LS)
model.7 <- lmer(read ~ grade5 + risk2 + eth + gen + (grade5 | subid), MPLS.LS, REML = FALSE)
model.8 <- lmer(read ~ grade5 * risk2 + grade5 * eth + grade5 * gen + (grade5 | subid), MPLS.LS, REML = FALSE)
mynames <- paste0("M", as.character(1:8), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6, model.7, model.8)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc
as.data.frame(myaicc)
myaicc2 <- as.data.frame(myaicc) %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
model.7 <- lmer(read ~ grade5 + risk2 + eth + gen + (grade5 | subid), MPLS.LS, REML = FALSE)
model.8 <- lmer(read ~ grade5 * risk2 + grade5 * eth + grade5 * gen + (grade5 | subid), MPLS.LS, REML = FALSE)
# ----------
mynames <- paste0("M", as.character(1:8), sep = "")
mymodels <- list(model.1, model.2, model.3, model.4, model.5, model.6, model.7, model.8)
myaicc <- aictab(cand.set = mymodels,
modnames = mynames, sort = FALSE, second.ord = TRUE)
myaicc2 <- as.data.frame(myaicc) %>% arrange(AICc) %>% mutate(Cum.Wt = cumsum(AICcWt), Eratio = max(AICcWt) / AICcWt)
print(myaicc2, digits = 3)
confset(cand.set = mymodels, modnames = mynames, level = 0.99)
confset(cand.set = mymodels, modnames = mynames, level = 0.95)
