balanceFormula <- paste(covariateNames, collapse = "+")
balanceFormula <- formula(paste("treat~", balanceFormula, sep=""))
stratification <- matchit(balanceFormula, distance = SSOCS.data2$pScores, data = SSOCS.data2,  method = "subclass", sub.by = "treat", subclass=5)
data.stratification <- match.data(stratification)
data.stratification$treat <- factor(data.stratification$treat, levels = c(0,1), labels = c("Untreated","Treated"))
data.stratification$subclass <- factor(data.stratification$subclass)
xtabs(~treat+subclass, data.stratification)
balance.stratification <- summary(stratification, standardize=T)
balance.stratification
head(balance.stratification)
strataDifferences <- data.frame(balance.stratification$q.table[,3,])
summaryStrataDifferences <- summary(strataDifferences)
strataDifferences <- data.frame(balance.stratification$q.table[,3,])
summaryStrataDifferences <- summary(strataDifferences)
summary(abs(balance.stratification$sum.subclass$"Std. Mean Diff."))
table(abs(balance.stratification$sum.subclass$"Std. Mean Diff.") > 0.1)
library(twang)
# combine the sampling weight with the stratum weight
data.stratification$stratumWeight <- with(data.stratification,  FINALWGT * weights / mean(FINALWGT * weights))
balanceResults <- list()
# loop through strata to perform balance evaluation
for (stratum in 1:5) { #loop through strata
tempData <- data.stratification[data.stratification$subclass==stratum,]
# balance evaluation for continuous covariates
tableBalance <- bal.stat(
data = tempData, estimand = "ATT",
w.all = tempData$stratumWeight, get.ks = F, vars = covariateNames,
treat.var = "treat", sampw = 1, multinom = F)
tableBalance <- tableBalance$results[,1:5]
# store results
balanceResults[[stratum]] <- tableBalance
}
balance.stratification2 <- lapply(balanceResults, summary)
balance.stratification2
library(survey)
surveyDesign <- svydesign(ids=~0,strata=~STRATA,weights=~FINALWGT, data=data.stratification)
surveyDesign <- svydesign(ids = ~ 0, strata = ~ STRATA, weights = ~ FINALWGT, data = data.stratification)
surveyDesignBoot <- as.svrepdesign(surveyDesign, type = c("bootstrap"), replicates = 1000)
( subclassMeans <- svyby(formula = ~ percHarsh, by = ~ treat + subclass, design = surveyDesignBoot, FUN = svymean, covmat = TRUE) )
balance.stratification2
summary(abs(balance.stratification$sum.subclass$"Std. Mean Diff."))
summaryStrataDifferences
strataDifferences
balance.stratification
data.stratification$stratumWeight
( pooledEffects <- svycontrast(subclassMeans, list(
ATE = c(-0.5,0.5,-0.18,0.18,-0.13,0.13,-0.10,0.10,-0.09,0.09),
ATT = c(-0.2,0.2,-0.2,0.2,-0.2,0.2,-0.2,0.2,-0.2,0.2))) )
subclassMeans
subclassbyTreat <- data.frame(xtabs(~ treat + subclass, data.stratification))
names(subclassbyTreat) < -c("treat", "subclass", "N.zs")
print(subclassbyTreat)
subclassbyTreat <- data.frame(xtabs(~ treat + subclass, data.stratification))
names(subclassbyTreat) <- c("treat", "subclass", "N.zs")
print(subclassbyTreat)
table.subclass <- data.frame(xtabs( ~ subclass, data.stratification))
names(table.subclass) <- c("subclass","N.s")
print(table.subclass)
( subclassbyTreat <- merge(subclassbyTreat, table.subclass) )
( prop.treat <- svymean(~treat, surveyDesign) )
subclassbyTreat$pr.Z <- ifelse(subclassbyTreat$treat == "Treated", prop.treat[2], prop.treat[1])
subclassbyTreat$mmwsATE <- with(subclassbyTreat, N.s * pr.Z / N.zs)
print(subclassbyTreat)
subclassbyTreat$mmwsATE <- with(subclassbyTreat, N.s * pr.Z / N.zs)
print(subclassbyTreat)
data.stratification <- merge(data.stratification, subclassbyTreat[,c(1,2,6)]) #merge weights with data.stratification
xtabs(~ mmwsATE + subclass, data.stratification)
data.stratification$mmwsATEFinal <- data.stratification$mmwsATE*data.stratification$FINALWGT
data.stratification$mmwsATEFinal <- data.stratification$mmwsATEFinal / mean(data.stratification$mmwsATEFinal)
#1. obtain the number of people per subclass for the treated
subclassTreat <- data.frame(table(data.stratification$subclass[data.stratification$treat == "Treated"]))
names(subclassTreat) <- c("subclass","N.1s")
print(subclassTreat)
subclassUntreat <-  data.frame(table(data.stratification$subclass[data.stratification$treat == "Untreated"]))
names(subclassUntreat) <- c("subclass","N.0s")
print(subclassUntreat)
( table.subclass <- merge(subclassTreat,subclassUntreat) )
# merge table with the data
data.stratification <- merge(data.stratification, table.subclass)
# obtain proportions treated and untreated
( prop.treat <- svymean(~ treat, surveyDesign) )
data.stratification$mmwsATT <- with(data.stratification, ifelse(treat == "Treated", 1, N.1s * prop.treat[1] / N.0s * prop.treat[2]))
xtabs(~ mmwsATT + subclass, data.stratification)
data.stratification$mmwsATTFinal <- data.stratification$mmwsATT * data.stratification$FINALWGT
data.stratification$mmwsATTFinal <- data.stratification$mmwsATTFinal / mean(data.stratification$mmwsATTFinal)
data.stratification$treat2 <- ifelse(data.stratification$treat == "Treated", 1,0)
library(twang)
# create a numeric treatment indicator, required by twang
data.stratification$treat2 <- ifelse(data.stratification$treat == "Treated", 1, 0)
# balance evaluation
balanceTableMMWS <- bal.stat(
data = data.stratification,
estimand = "ATE",  w.all = data.stratification$mmwsATEFinal, get.ks = F, vars = covariateNames,
treat.var = "treat2", sampw = data.stratification$FINALWGT, multinom = F)
balanceTableMMWS <- balanceTableMMWS$results[,1:5]
balanceTableMMWS$varRatio <- with(balanceTableMMWS, tx.sd^2 / ct.sd^2)
unbalanced.covariatesATE = list(
std.eff.sz = rownames(balanceTableMMWS)[abs(balanceTableMMWS$std.eff.sz) > 0.1],
varRatio = rownames(balanceTableMMWS)[balanceTableMMWS$varRatio < 0.8 | balanceTableMMWS$varRatio > 1.2 ])
# examine balance statistics
summary(balanceTableMMWS)
summaryTableMMWS <- c()
for (var in 1:ncol(balanceTableMMWS)) {
summaryTableMMWS = rbind(summaryTableMMWS, summary(balanceTableMMWS[,var])) }
rownames(summaryTableMMWS) = colnames(balanceTableMMWS)
#write.csv(summaryTableMMWS[,c(1,4,6)], file="summary_balance_MMWSATE.csv")
library(twang)
# create a numeric treatment indicator, required by twang
data.stratification$treat2 <- ifelse(data.stratification$treat == "Treated", 1, 0)
# balance evaluation
balanceTableMMWSATT <- bal.stat(
data = data.stratification,
estimand = "ATT",  w.all = data.stratification$mmwsATTFinal, get.ks = F, vars = covariateNames,
treat.var = "treat2", sampw = data.stratification$FINALWGT, multinom = F)
balanceTableMMWSATT <- balanceTableMMWSATT$results[,1:5]
balanceTableMMWSATT$varRatio <- with(balanceTableMMWSATT, tx.sd^2 / ct.sd^2)
# examine balance statistics
summary(balanceTableMMWSATT)
summaryTableMMWSATT = c()
for (var in 1:ncol(balanceTableMMWSATT)) {
summaryTableMMWSATT = rbind(summaryTableMMWSATT, summary(balanceTableMMWSATT[,var])) }
rownames(summaryTableMMWSATT) = colnames(balanceTableMMWSATT)
# write.csv(summaryTableMMWSATT[,c(1,4,6)], file = "summary_balance_MMWSATT.csv")
unbalanced.covariatesATT <- list(
std.eff.sz = rownames(balanceTableMMWSATT)[abs(balanceTableMMWSATT$std.eff.sz) > 0.1],
varRatio = rownames(balanceTableMMWSATT)[balanceTableMMWSATT$varRatio < 0.8 | balanceTableMMWSATT$varRatio > 1.2 ])
surveyDesignATE <- svydesign(ids = ~ 0, strata = ~ STRATA, weights = ~ mmwsATEFinal, data = data.stratification)
surveyDesignATE <- as.svrepdesign(surveyDesignATE, type = c("bootstrap"), replicates = 1000)
# fit a linear regression model to proportions
modelATE <- svyglm(percHarsh ~ treat, surveyDesignATE, family = gaussian())
summary(modelATE)
# fit a logistic model  to proportions with quasibinomial family to allow for overdispersion
modelATE2 <- svyglm(percHarsh~treat, surveyDesignATE, family = quasibinomial())
summary(modelATE2)
surveyDesignATT <- svydesign(ids = ~ 0, strata = ~ STRATA, weights = ~ mmwsATTFinal, data = data.stratification)
surveyDesignATT <- as.svrepdesign(surveyDesignATT, type = c("bootstrap"), replicates = 1000)
modelATT1 <- svyglm(percHarsh~treat, surveyDesignATT, family=gaussian())
summary(modelATT1)
#fit a logistic model  to proportions with quasibinomial family to allow for overdispersion
modelATT2 <- svyglm(percHarsh~treat, surveyDesignATT, family=quasibinomial())
summary(modelATT2)
surveyDesignATT <- update(surveyDesignATT, C0540 = C0540 - mean(C0540[treat=="Treated"]),
C0568 = C0568 - mean(C0568[treat=="Treated"]),
C0544 = C0544 - mean(C0544[treat=="Treated"]),
C0558 = C0558 - mean(C0558[treat=="Treated"]))
modelATTDR <- svyglm(percHarsh ~ (treat + subclass + FR_SIZE + C0540 + C0158 + C0166 + C0568 + C0540 + C0544 + C0558)^2,  surveyDesignATT, family = gaussian())
summary(modelATTDR)
summary(modelATTDR)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//breastfeeding")
packages <- c("dplyr", "MatchIt", "Matching", "survey")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
load(file="//media//kswada//MyFiles//references//PracticalPropensityScoreMethodsUsingR//Chapter5//Chapter5_data_breastfeeding_example.Rdata")
load(file="//media//kswada//MyFiles//references//PracticalPropensityScoreMethodsUsingR//Chapter5//Chapter5_data_breastfeeding_example.rData")
str(data)
glimpse(data)
covariateNames <- c(
"C0005300", #RACE OF CHILD (MOTHER'S RACIAL/ETHNIC COHORT FROM SCREENER)                CRACE
"C0005400", #SEX OF CHILD
"C0270300", #NUMBER OF JOBS HELD BY MOTHER IN 4TH QTR BEFORE BIRTH OF CHILD             NJOBS01
"C0270600", #USUAL HOURS WORKED BY MOTHER AT ALL JOBS IN 4TH QTR BEFORE BIRTH OF CHILD  NHRJBS01
"C0270700", #USUAL EARNINGS OF MOTHER AT ALL JOBS IN 4TH QTR BEFORE BIRTH OF CHILD      EARNJB01
"C0271800", # COLLECTIVE BARGAINING SET MOTHER'S MAIN JOB WAGES, 4TH QTR BEFORE BIRTH OF CHILD  UNONMN01
"C0328000", #LENGTH OF GESTATION OF CHILD IN WEEKS                                             PST0002
"C0328400", #CHILD DELIVERED BY CESAREAN SECTION?                                          PST0007
"C0329000", # DAYS MOTHER STAYED IN HOSPITAL AT BIRTH OF CHILD                             PST0013
"C0329100", # DAYS CHILD STAYED IN HOSPITAL AFTER DELIVERY                                 PST0014
"R0000700",    #COUNTRY OF BIRTH  OF MOTHER
"R0618300",    #PROFILES ARMED FORCES QUALIFICATION TEST (AFQT) PERCENTILE SCORE - REVISED 1989 AFQT-2
"C0270200", #weeks after birth that mother returned to work (restricted to 12 weeks or less)
"motherAge", #age of mother at child's birth
"classWorker", #CLASS OF WORKER AT CURRENT JOB/MOST RECENT JOB
"familySize" , #FAMILY SIZE
"highestGrade" , #HIGHEST GRADE COMPLETED AS OF MAY 1 SURVEY YEAR (REVISED)
"jobsEver" , #NUMBER OF DIFFERENT JOBS EVER REPORTED AS OF INTERVIEW DATE
"maritalStatus" , #MARITAL STATUS (COLLAPSED)
"residenceRegion", #REGION OF CURRENT RESIDENCE
"ruralUrban"  , #IS R'S CURRENT RESIDENCE URBAN/RURAL?
"totalWelfare",  # TOTAL AMOUNT AFDC FOOD STAMPS OR OTH WELFARE/SSI RECEIVED DURING CAL YR
"weeksWorked", #NUMBER OF WEEKS WORKED IN PAST CALENDAR YEAR
"hoursPerWeek", #hours per week worked in the last calendar year
"maternityLeave", #FRINGE BENEFITS CURRENT JOB/MOST RECENT JOB - MATERNITY/PATERNITY LEAVE
"flexibleSchedule", #job allows flexible schedule
"argueChores",#FREQUENCY R & HUSBAND/PARTNER ARGUE ABOUT-CHORES & RESPONSIBILITIES
"dentalInsurance", #company provides dental insurance
"lifeInsurance", #company provides life insurance
"profitSharing", #company provides profit sharing
"retirement", #company provided retirement plan
"training") #company provided training opportunities
covariateNamesNA <- paste(covariateNames, "NA", sep = "")
# restrict missing indicators to covariates with at least 5% of missing data
covariateNamesNA <- covariateNamesNA[apply(data[,covariateNamesNA], 2, mean) >= 0.05]
# merge covariate names with missing indicator names
covariateNames <- c(covariateNames, covariateNamesNA)
psFormula <- paste(covariateNames, collapse = "+")
psFormula <- formula(paste("childCare ~ ", psFormula, sep = ""))
print(psFormula)
psModel <- glm(psFormula, data, family = binomial())
data$logitPScores <- log(fitted(psModel) / (1 - fitted(psModel)))
library(party)
set.seed(2015)
mycontrols <- cforest_unbiased(ntree = 10000, mtry = 5)
mycforest <- cforest(psFormula, data = data, controls = mycontrols)
# obtain a list of predicted probabilities
predictedProbabilities <- predict(mycforest, type = "prob")
# organize the list into a matrix with two columns for the probability of being in treated and control groups.
# keep only the second column, which are the propensity scores.
pScores <- matrix(unlist(predictedProbabilities),,2,byrow=T)[,2]
# convert propensity scores to logit
data$logitPScores <- log(pScores / (1 - pScores))
hist(data$logitPScores[data$childCare == 0], density = 10, angle = 45, main = "Propensity Scores", xlab = "Shaded = Untreated | Gray = Treated")
hist(data$logitPScores[data$childCare==1], col = gray(0.4, 0.25), add = T)
library(lattice)
# tiff("Chapter5_figure5-2.tif", res=600, compression = "lzw", height=6, width=15, units="in")
bwplot(logitPScores ~ childCare, data = data, ylab = "Propensity Scores", auto.key = TRUE)
# dev.off()
summary(data$logitPScores[data$childCare == 1])
summary(data$logitPScores[data$childCare == 0])
greedyMatching <- matchit(psFormula, distance = data$logitPScores,
data = data,
method = "nearest", ratio = 1, replace = T, caliper = 0.25)
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
# obtain the summary of balance aftdr matching
summary(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
data$childCare <- data$childCare==1 #Maching requires the treatment indicator to be logical (TRUE/FALSE)
greedyMatching2 <- with(data,
Match(Y = C0338600, Tr = childCare, X = logitPScores,
estimand = "ATT", M = 1,
caliper = 0.25, replace = TRUE, ties = TRUE))
balance.greedyMatching2 <- MatchBalance(psFormula, data = data, match.out = greedyMatching2, ks = F, paired = F)
balance.greedyMatching2After <- unlist(balance.greedyMatching2$AfterMatching)
summary(abs(balance.greedyMatching2After[names(balance.greedyMatching2After)=="sdiff"]/100))
table(abs(balance.greedyMatching2After[names(balance.greedyMatching2After)=="sdiff"]/100)>0.1)
greedyMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, m.order = "largest",
method = "nearest", ratio = 1, replace = T, caliper = 0.25)
# diagnose covariate balance
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
# obtain the summary of balance aftdr matching
summary(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
covariateData <- as.matrix(data$logitPScores)
for (c in covariateNames) {
covariateData <- cbind(covariateData, as.numeric(as.matrix(data[,c]))) }
colnames(covariateData) <- c("logitPScores", covariateNames)
covariateData <- as.matrix(data$logitPScores)
for (c in covariateNames) {
covariateData <- cbind(covariateData, as.numeric(as.matrix(data[,c]))) }
colnames(covariateData) <- c("logitPScores", covariateNames)
geneticWeights <- GenMatch(Tr = data$childCare, X = covariateData,
pop.size = 1000, fit.func = "pvals",
estimand = "ATT", replace = T, ties = T)
geneticMatching <- Match(Y = data$C0338600, Tr = data$childCare, X = covariateData,
Weight.matrix = geneticWeights, estimand = "ATT",
M = 1,  replace = TRUE, ties = TRUE)
geneticWeights
balance.geneticMatching <- MatchBalance(psFormula, data = data, match.out = geneticMatching, ks = F, paired = F)
balance.geneticMatchingAfter <- unlist(balance.geneticMatching$AfterMatching)
# summarize only the standized mean differences (they have been multiplied by 100, so I divided by 100)
# see details in ?balanceUV
summary(abs(balance.geneticMatchingAfter[names(balance.geneticMatchingAfter)=="sdiff"]/100))
table(abs(balance.geneticMatchingAfter[names(balance.geneticMatchingAfter)=="sdiff"]/100) > 0.1)
geneticMatching2 <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "genetic", pop.size = 1000,
fit.func = "pvals",
estimand = "ATT", replace = T, ties = T)
( balance.geneticMatching2 <- summary(geneticMatching2, standardize = T) )
# obtain the summary of balance aftdr matching
summary(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff."))
table(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff.") > 0.1)
library(optmatch)
optimalMatching <- matchit(psFormula,vdistance = data$logitPScores,
data = data, method = "optimal", ratio = 1)
# diagnose covariate balance
( balance.optimalMatching <- summary(optimalMatching, standardize=T) )
# obtain the summary of balance after matching
summary(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff.") > 0.1)
library(optmatch)
fullMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "full")
# diagnose covariate balance
( balance.fullMatching <- summary(fullMatching, standardize = T) )
# obtain the summary of balance after matching
summary(abs(balance.fullMatching$"Std. Mean Diff."))
table(abs(balance.fullMatching$sum.matched$"Std. Mean Diff.") > 0.1)
library(optmatch)
fullMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "full")
library(optmatch)
optimalMatching <- matchit(psFormula,vdistance = data$logitPScores,
data = data, method = "optimal", ratio = 1)
( balance.optimalMatching <- summary(optimalMatching, standardize=T) )
# obtain the summary of balance after matching
summary(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff.") > 0.1)
library(optmatch)
fullMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "full")
optimalMatching <- matchit(psFormula, vdistance = data$logitPScores,
data = data, method = "optimal", ratio = 1)
optimalMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "optimal", ratio = 1)
optimalMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "optimal", ratio = 1)
( balance.optimalMatching <- summary(optimalMatching, standardize=T) )
# obtain the summary of balance after matching
summary(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff.") > 0.1)
library(optmatch)
fullMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "full")
( balance.fullMatching <- summary(fullMatching, standardize = T) )
summary(abs(balance.fullMatching$"Std. Mean Diff."))
balance.fullMatching$"Std. Mean Diff."
balance.fullMatching
balance.fullMatching$"Std.Mean Diff."
balance.fullMatching$"Std. Mean Diff."
summary(abs(balance.fullMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.fullMatching$sum.matched$"Std. Mean Diff.") > 0.1)
data.greedyMatching <- match.data(greedyMatching)
library(survey)
design.greedyMatching <- svydesign(ids = ~ 1, weights = ~ weights, data = data.greedyMatching)
model.greedyMatching <- svyglm(C0338600 ~ childCare, design.greedyMatching, family = gaussian())
summary(model.greedyMatching)
balance.greedyMatching2After
balance.greedyMatching2
balance.greedyMatching
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
summary(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
balance.greedyMatching <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F)
( balance.greedyMatching <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F) )
greedyMatching
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
( balance.greedyMatching <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F) )
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
( balance.greedyMatching_2 <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F) )
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
( balance.greedyMatching_2 <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F) )
summary(greedyMatching2, standardize = T) )
summary(greedyMatching2, standardize = T)
( balance.greedyMatching_2After <- unlist(balance.greedyMatching_2$AfterMatching) )
( balance.greedyMatching_2 <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F) )
( balance.greedyMatching_2After <- unlist(balance.greedyMatching_2$AfterMatching) )
( balance.greedyMatching <- summary(greedyMatching2, standardize = T) )
balance.greedyMatching2 <- MatchBalance(psFormula, data = data, match.out = greedyMatching2, ks = F, paired = F)
balance.greedyMatching2After <- unlist(balance.greedyMatching2$AfterMatching)
summary(abs(balance.greedyMatching2After[names(balance.greedyMatching2After)=="sdiff"]/100))
table(abs(balance.greedyMatching2After[names(balance.greedyMatching2After)=="sdiff"]/100) > 0.1)
( balance.geneticMatching <- summary(geneticMatching, standardize = T) )
( balance.greedyMatching <- summary(greedyMatching2, standardize = T) )
( balance.geneticMatching_2 <- summary(geneticMatching, standardize = T) )
balance.geneticMatching <- MatchBalance(psFormula, data = data, match.out = geneticMatching, ks = F, paired = F)
balance.geneticMatchingAfter <- unlist(balance.geneticMatching$AfterMatching)
summary(abs(balance.geneticMatchingAfter[names(balance.geneticMatchingAfter)=="sdiff"]/100))
table(abs(balance.geneticMatchingAfter[names(balance.geneticMatchingAfter)=="sdiff"]/100) > 0.1)
( balance.geneticMatching2 <- summary(geneticMatching2, standardize = T) )
MatchBalance(psFormula, data = data, match.out = geneticMatching2, ks = F, paired = F)
summary(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff."))
table(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.optimalMatching <- summary(optimalMatching, standardize=T) )
( balance.optimalMatching <- summary(optimalMatching, standardize=T) )
balance.geneticMatching2 <- MatchBalance(psFormula, data = data, match.out = optimalMatching, ks = F, paired = F)
summary(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.fullMatching <- summary(fullMatching, standardize = T) )
summary(abs(balance.fullMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.fullMatching$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.fullMatching <- summary(fullMatching, standardize = T) )
table(abs(balance.fullMatching$sum.matched$"Std. Mean Diff.") > 0.1)
summary(abs(balance.fullMatching$sum.matched$"Std. Mean Diff."))
fullMatching <- matchit(psFormula, distance = data$logitPScores,
data = data, method = "full")
# diagnose covariate balance
( balance.fullMatching <- summary(fullMatching, standardize = T) )
# obtain the summary of balance after matching
summary(abs(balance.fullMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.fullMatching$sum.matched$"Std. Mean Diff.") > 0.1)
summary(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.optimalMatching$sum.matched$"Std. Mean Diff.") > 0.1)
summary(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff."))
table(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.geneticMatching2 <- summary(geneticMatching2, standardize = T) )
summary(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff."))
table(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.geneticMatching2 <- summary(geneticMatching2, standardize = T) )
summary(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff."))
table(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.geneticMatching2 <- summary(geneticMatching2, standardize = T) )
summary(abs(balance.geneticMatching2$sum.matched$"Std. Mean Diff."))
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
summary(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff."))
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
( balance.greedyMatching_2 <- MatchBalance(psFormula, data = data, match.out = greedyMatching, ks = F, paired = F) )
# ( balance.greedyMatching_2After <- unlist(balance.greedyMatching_2$AfterMatching) )
summary(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
( balance.greedyMatching <- summary(greedyMatching, standardize = T) )
summary(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff."))
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
balance.greedyMatching$sum.matched
table(abs(balance.greedyMatching$sum.matched$"Std. Mean Diff.") > 0.1)
table(abs(balance.greedyMatching2After[names(balance.greedyMatching2After)=="sdiff"]/100) > 0.1)
data.greedyMatching <- match.data(greedyMatching)
library(survey)
design.greedyMatching <- svydesign(ids = ~ 1, weights = ~ weights, data = data.greedyMatching)
# estimate the ATT
model.greedyMatching <- svyglm(C0338600 ~ childCare, design.greedyMatching, family = gaussian())
summary(model.greedyMatching)
summary(greedyMatching2)
summary(geneticMatching)
geneticMatchingBA <- Match(Y = data$C0338600, Tr = data$childCare, X = covariateData,
BiasAdjust = T, Z = covariateData,
Weight.matrix = geneticWeights, estimand = "ATT",
M = 1,  replace = TRUE, ties = TRUE)
summary(geneticMatchingBA)
data.geneticMatching2 <- match.data(geneticMatching2)
# estimate the treatment effect
library(survey)
design.geneticMatching2 <- svydesign(ids = ~ 1, weights = ~ weights,
data = data.geneticMatching2)
# fit regression model
model.geneticMatching2 <- svyglm(C0338600~childCare, design.geneticMatching2, family=gaussian())
summary(model.geneticMatching2)
data.optimalMatching <- match.data(optimalMatching)
library(survey)
design.optimalMatching <- svydesign(ids = ~ subclass, weights = ~ weights,
data = data.optimalMatching)
# fit regression model
model.optimalMatching <- svyglm(C0338600 ~ childCare, design.optimalMatching, family=gaussian())
summary(model.optimalMatching)
data.fullMatching <- match.data(fullMatching)
# estimate the treatment effect
library(survey)
design.fullMatching <- svydesign(ids = ~ 1, weights = ~ weights,
data = data.fullMatching)
# fit regression model
model.fullMatching <- svyglm(C0338600 ~ childCare, design.fullMatching, family = gaussian())
summary(model.fullMatching)
design.fullMatching2 <- svydesign(ids = ~ subclass, weights = ~ weights, data = data.fullMatching)
design.fullMatching2 <- as.svrepdesign(design.fullMatching2, type="bootstrap", replicates=1000)
# fit regression model
model.fullMatching2 <- svyglm(C0338600 ~ childCare, design.fullMatching2, family = gaussian())
summary(model.fullMatching2)
# estimate doubly robust ATT
outcomeModelDR <- svyglm(C0338600~,design.fullMatching2)
# Estimate ATT with a doubly-robust method
weightedMeansDR <- predict(outcomeModelDR, newdata=data.frame(BYS33K=0:1, pScores=0.1221), vcov = TRUE, type = "response")
(ATT2006DR <- svycontrast(weightedMeansDR, c(-1,1)))
data.fullMatching <- match.data(fullMatching)
# estimate the treatment effect
library(survey)
design.fullMatching <- svydesign(ids = ~ 1, weights = ~ weights,
data = data.fullMatching)
# fit regression model
model.fullMatching <- svyglm(C0338600 ~ childCare, design.fullMatching, family = gaussian())
summary(model.fullMatching)
# ----------
# estimate treatment effects adjusting for cluster effects
design.fullMatching2 <- svydesign(ids = ~ subclass, weights = ~ weights, data = data.fullMatching)
design.fullMatching2 <- as.svrepdesign(design.fullMatching2, type="bootstrap", replicates=1000)
# fit regression model
model.fullMatching2 <- svyglm(C0338600 ~ childCare, design.fullMatching2, family = gaussian())
summary(model.fullMatching2)
# estimate doubly robust ATT
outcomeModelDR <- svyglm(C0338600~,design.fullMatching2)
# Estimate ATT with a doubly-robust method
weightedMeansDR <- predict(outcomeModelDR, newdata=data.frame(BYS33K=0:1, pScores=0.1221), vcov = TRUE, type = "response")
(ATT2006DR <- svycontrast(weightedMeansDR, c(-1,1)))
design.fullMatching2 <- svydesign(ids = ~ subclass, weights = ~ weights, data = data.fullMatching)
design.fullMatching2 <- as.svrepdesign(design.fullMatching2, type="bootstrap", replicates=1000)
model.fullMatching2 <- svyglm(C0338600 ~ childCare, design.fullMatching2, family = gaussian())
summary(model.fullMatching2)
outcomeModelDR <- svyglm(C0338600 ~ , design.fullMatching2)
library(rbounds)
install.packages("rbounds", dependencies = T)
library(rbounds)
psens(geneticMatching, Gamma = 3, GammaInc = .1)
outcomeModelDR <- svyglm(C0338600~,design.fullMatching2)
data.geneticMatching2 <- match.data(geneticMatching2)
# estimate the treatment effect
library(survey)
design.geneticMatching2 <- svydesign(ids = ~ 1, weights = ~ weights,
data = data.geneticMatching2)
# fit regression model
model.geneticMatching2 <- svyglm(C0338600~childCare, design.geneticMatching2, family=gaussian())
summary(model.geneticMatching2)
data.fullMatching <- match.data(fullMatching)
# estimate the treatment effect
library(survey)
design.fullMatching <- svydesign(ids = ~ 1, weights = ~ weights,
data = data.fullMatching)
# fit regression model
model.fullMatching <- svyglm(C0338600 ~ childCare, design.fullMatching, family = gaussian())
summary(model.fullMatching)
design.fullMatching2 <- svydesign(ids = ~ subclass, weights = ~ weights, data = data.fullMatching)
design.fullMatching2 <- as.svrepdesign(design.fullMatching2, type = "bootstrap", replicates = 1000)
# fit regression model
model.fullMatching2 <- svyglm(C0338600 ~ childCare, design.fullMatching2, family = gaussian())
summary(model.fullMatching2)
summary(model.fullMatching)
summary(model.fullMatching2)
summary(model.fullMatching)
summary(model.fullMatching2)
summary(model.fullMatching)
summary(model.fullMatching2)
summary(model.fullMatching)
summary(model.fullMatching2)
outcomeModelDR <- svyglm(C0338600 ~ ChildCare, design.fullMatching2)
