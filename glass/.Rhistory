# Multiple coherency
# stoch.reg:  frequency domain stochasitc regression  --> plot.which = "coh"
# 1: Temp   5: Precip
graphics.off()
coh.15 <- stoch.reg(Y, cols.full = c(1,5), cols.red = NULL, alpha, L, M, plot.which = "coh")
text(0.45, 0.98, plt.name[6], cex = 1.2)
title(main = c("Inflow with", "Temp and Precip"))
# -->
# The additional contribution of temperature to the model seems somewhat marginal
# because the multiple coherence seems only slightly better than the univariate coherence with precipitation.
M <- 100
# Number of inputs (Temp and Precip)
nq <- 2
# ----------
# Multiple coherency
# stoch.reg:  frequency domain stochasitc regression  --> plot.which = "coh"
# 1: Temp   5: Precip
graphics.off()
coh.15 <- stoch.reg(Y, cols.full = c(1,5), cols.red = NULL, alpha, L, M, plot.which = "coh")
L
Y <- climhyd
# log inflow and sqrt precipitation
Y[,6] <- log(Y[,6])
Y[,5] <- sqrt(Y[,5])
# ----------
L <- 25
# Spectral Matrix
par(mfrow = c(1,1))
Yspec <- mvspec(Y, spans = L, kernel = "daniell", detrend = TRUE, demean = FALSE, taper = 0.1)
Yspec$spec
# ----------
# effective sample size
( n <- Yspec$n.used )
# fundamental freqs
( Fr <- Yspec$freq )
# number of frequencies inputs (Temp and Precip)
( n.freq <- length(Fr) )
# 0.05 - the bandwidth
Yspec$bandwidth
( Yspec$bandwidth * sqrt(12) )
alpha <- 0.001
Fq <- qf(1 - alpha, 2, L- 2)
# 0.001 threshold corresponding to the F-statistic, separately, for each possible predictor of inflow.
cn <- Fq / (L - 1 + Fq)
plt.name <- c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)")
par(mfrow = c(2,3),  cex.lab = 1.2)
# The coherencies are listed as 1,2,...,15 = choose(6,2)
for(i in 11:15){
plot(Fr, Yspec$coh[,i], type = "l", ylab = "Sq Coherence", xlab = "Frequency", ylim = c(0,1), main = c("Inflow with", names(climhyd[i - 10])))
abline(h = cn)
text(0.45, 0.98, plt.name[i-10], cex = 1.2)
}
# -->
# Transformed (square root) precipidation produces the most consistently high squared coherence values
# at all frequencies (L = 25),
# with the seasonal period contributing most significantly.
# Other inputs, with the exception of wind speed, also appear to be plausible contributions.
graphics.off()
L <- 5
mod_lag <- astsa::LagReg(input = prec.t.pw[2:454], output = inf.t.fil[2:454], L = L, M = 100, threshold = 0.0001)
# ------------------------------------------------------------------------------
# Lagged regression
# ------------------------------------------------------------------------------
inf.t.fil <- as.ts(inf.t.fil)
prec.t.pw <- as.ts(prec.t.pw)
clim.t.pw <- ts.intersect(inf = inf, Inf1 = stats::lag(inf, -1),
prec = stats::lag(prec.t.pw, 0))
( u.t.pw <- lm(clim.t.pw[,1] ~ clim.t.pw[,2:3], na.action = na.omit) )
summary(u.t.pw)
coef(u.t.pw)
# ------------------------------------------------------------------------------
# Asssess residuals
# ------------------------------------------------------------------------------
acf2(resid(u.t.pw))
# ------------------------------------------------------------------------------
# ARIMAX model
# ------------------------------------------------------------------------------
mod10 <- sarima(clim.t.pw[,1], 12, 0, 12, P = 0, D = 1, Q = 1, S = 12, xreg = clim.t.pw[,2:3])
mod10
# ------------------------------------------------------------------------------
# 1-step-ahead predictions
# ------------------------------------------------------------------------------
pred <- inf.t.fil + resid(mod10$fit)
graphics.off()
par(mfrow = c(1,1))
ts.plot(pred, inf.t.fil, col = c('skyblue', "black"), lwd = c(2,2))
graphics.off()
# estimated regression or impulse response function
# L:  degree of smoothing
# M:  must be even, number of terms used in the lagged regression
# threshold:  the cut-off used to set small (in absolute value) regression coefficients equal to zero
L <- 25
mod_lag <- astsa::LagReg(input = prec, output = inf, L = L, M = 100, threshold = 0.01)
# ----------
names(mod_lag)
# beta for s = 0 to 4
mod_lag$betas[50:53,]
mod_lag$fit
# ----------
# residuals
car::scatterplot(time(mod_lag$fit), data.frame(mod_lag$fit)$resids)
# ------------------------------------------------------------------------------
# Examine inverse relation  --> BAD FIT ..
# ------------------------------------------------------------------------------
L <- 25
mod_lag2 <- astsa::LagReg(input = inf, output = prec, L = L, M = 100, inverse = TRUE,  threshold = 0.01)
inf <- as.ts(inf)
prec <- as.ts(prec)
clim <- ts.intersect(inf = inf, prec = stats::lag(prec, 0), prec1 = stats::lag(prec, 1),
prec2 = stats::lag(prec, 2), prec3 = stats::lag(prec, 3), prec4 = stats::lag(prec, 4))
( u <- lm(clim[,1] ~ clim[,2:6], na.action = NULL) )
summary(u)
coef(u)
data(climhyd, package = "astsa")
str(climhyd)
head(climhyd)
inf <- log(climhyd$Inflow)
prec <- sqrt(climhyd$Precip)
# ------------------------------------------------------------------------------
# Regression with lagged variables:  impulse response function
#   - The high coherence between sqrt precipitation and logged inflow series suggests
#     a lagged regression relation between the two series.
# ------------------------------------------------------------------------------
graphics.off()
# estimated regression or impulse response function
# L:  degree of smoothing
# M:  must be even, number of terms used in the lagged regression
# threshold:  the cut-off used to set small (in absolute value) regression coefficients equal to zero
L <- 25
mod_lag <- astsa::LagReg(input = prec, output = inf, L = L, M = 100, threshold = 0.01)
# ----------
names(mod_lag)
# beta for s = 0 to 4
mod_lag$betas[50:53,]
mod_lag$fit
# ----------
# residuals
car::scatterplot(time(mod_lag$fit), data.frame(mod_lag$fit)$resids)
# ------------------------------------------------------------------------------
# Examine inverse relation  --> BAD FIT ..
# ------------------------------------------------------------------------------
L <- 25
mod_lag2 <- astsa::LagReg(input = inf, output = prec, L = L, M = 100, inverse = TRUE,  threshold = 0.01)
# ------------------------------------------------------------------------------
# Lagged regression
# ------------------------------------------------------------------------------
inf <- as.ts(inf)
prec <- as.ts(prec)
clim <- ts.intersect(inf = inf, prec = stats::lag(prec, 0), prec1 = stats::lag(prec, 1),
prec2 = stats::lag(prec, 2), prec3 = stats::lag(prec, 3), prec4 = stats::lag(prec, 4))
( u <- lm(clim[,1] ~ clim[,2:6], na.action = NULL) )
summary(u)
coef(u)
graphics.off()
# estimated regression or impulse response function
# L:  degree of smoothing
# M:  must be even, number of terms used in the lagged regression
# threshold:  the cut-off used to set small (in absolute value) regression coefficients equal to zero
L <- 25
mod_lag <- astsa::LagReg(input = prec, output = inf, L = L, M = 100, threshold = 0.01)
# ----------
names(mod_lag)
# beta for s = 0 to 4
mod_lag$betas[50:53,]
mod_lag$fit
# ----------
# residuals
car::scatterplot(time(mod_lag$fit), data.frame(mod_lag$fit)$resids)
# ------------------------------------------------------------------------------
# Examine inverse relation  --> BAD FIT ..
# ------------------------------------------------------------------------------
L <- 25
mod_lag2 <- astsa::LagReg(input = inf, output = prec, L = L, M = 100, inverse = TRUE,  threshold = 0.01)
# ------------------------------------------------------------------------------
# Lagged regression
# ------------------------------------------------------------------------------
inf <- as.ts(inf)
prec <- as.ts(prec)
clim <- ts.intersect(inf = inf, prec = stats::lag(prec, 0), prec1 = stats::lag(prec, 1),
prec2 = stats::lag(prec, 2), prec3 = stats::lag(prec, 3), prec4 = stats::lag(prec, 4))
( u <- lm(clim[,1] ~ clim[,2:6], na.action = NULL) )
summary(u)
coef(u)
mod0 <- sarima(clim[,1], 1, 0, 1, xreg = clim[,2:6])
mod0
# ----------
# excluding MA terms
mod1 <- sarima(clim[,1], 1, 0, 0, xreg = clim[,2:6])
mod1
# ----------
mod0$AICc
mod1$AICc
# transform prec
fit.prec <- sarima(prec, p = 0, d = 0, q = 0, P = 0, D = 1, Q = 1, S = 12)
prec.t <- resid(fit.prec$fit)
# ----------
# transfrom inf
fit.inf <- sarima(inf, p = 0, d = 0, q = 0, P = 0, D = 1, Q = 1, S = 12)
inf.t <- resid(fit.inf$fit)
# ------------------------------------------------------------------------------
# Prewhitened flow residuals
# ------------------------------------------------------------------------------
( sma_coef <- fit.prec$ttable[1,1] )
inf.pw <- stats::filter(inf, filter = c(1, rep(0, 11), -sma_coef), sides = 1)
# ------------------------------------------------------------------------------
# Cross-correlation
# ------------------------------------------------------------------------------
# This is better profile:  prec.t vs. inf.pw
acf(ts.intersect(cbind(prec.t, inf.pw)), ylab = "CCF", na.action = na.omit, panel.first = grid())
# ----------
acf(ts.intersect(cbind(prec.t, inf.t)), ylab = "CCF", na.action = na.omit, panel.first = grid())
acf(cbind(prec, inf))
# ------------------------------------------------------------------------------
# model for prec.t and prewhiten prec.t
# ------------------------------------------------------------------------------
acf2(prec.t, max.lag = 50)
sarima(prec.t, p = 1, d = 0, q = 0)
fit.prec.t <- arima(prec.t, order = c(1, 0, 0))
# ----------
prec.t.pw <- resid(fit.prec.t)
# ------------------------------------------------------------------------------
# Apply same transformation to inf.t
# ------------------------------------------------------------------------------
( ar1 <- coef(fit.prec.t)[1] )
inf.t.fil <- stats::filter(inf.t, filter = c(1, -ar1), sides = 1)
# ------------------------------------------------------------------------------
# Cross-correlation
# ------------------------------------------------------------------------------
acf(ts.intersect(cbind(prec.t.pw, inf.t.fil)), ylab = "CCF", na.action = na.omit, panel.first = grid())
# ------------------------------------------------------------------------------
# impulse response function
# ------------------------------------------------------------------------------
graphics.off()
L <- 5
mod_lag <- astsa::LagReg(input = prec.t.pw[2:454], output = inf.t.fil[2:454], L = L, M = 100, threshold = 0.0001)
# ------------------------------------------------------------------------------
# Lagged regression
# ------------------------------------------------------------------------------
inf.t.fil <- as.ts(inf.t.fil)
prec.t.pw <- as.ts(prec.t.pw)
clim.t.pw <- ts.intersect(inf = inf, Inf1 = stats::lag(inf, -1),
prec = stats::lag(prec.t.pw, 0))
( u.t.pw <- lm(clim.t.pw[,1] ~ clim.t.pw[,2:3], na.action = na.omit) )
summary(u.t.pw)
coef(u.t.pw)
acf2(resid(u.t.pw))
# ------------------------------------------------------------------------------
# ARIMAX model
# ------------------------------------------------------------------------------
mod10 <- sarima(clim.t.pw[,1], 12, 0, 12, P = 0, D = 1, Q = 1, S = 12, xreg = clim.t.pw[,2:3])
mod10
# ------------------------------------------------------------------------------
# 1-step-ahead predictions
# ------------------------------------------------------------------------------
pred <- inf.t.fil + resid(mod10$fit)
graphics.off()
par(mfrow = c(1,1))
ts.plot(pred, inf.t.fil, col = c('skyblue', "black"), lwd = c(2,2))
mod10 <- sarima(clim.t.pw[,1], 12, 0, 12, P = 0, D = 1, Q = 1, S = 12, xreg = clim.t.pw[,2:3])
graphics.off()
L <- 5
mod_lag <- astsa::LagReg(input = prec.t.pw[2:454], output = inf.t.fil[2:454], L = L, M = 100, threshold = 0.0001)
# ------------------------------------------------------------------------------
# Lagged regression
# ------------------------------------------------------------------------------
inf.t.fil <- as.ts(inf.t.fil)
prec.t.pw <- as.ts(prec.t.pw)
clim.t.pw <- ts.intersect(inf = inf, Inf1 = stats::lag(inf, -1),
prec = stats::lag(prec.t.pw, 0))
( u.t.pw <- lm(clim.t.pw[,1] ~ clim.t.pw[,2:3], na.action = na.omit) )
summary(u.t.pw)
coef(u.t.pw)
# ------------------------------------------------------------------------------
# Asssess residuals
# ------------------------------------------------------------------------------
acf2(resid(u.t.pw))
# ------------------------------------------------------------------------------
# ARIMAX model
# ------------------------------------------------------------------------------
mod10 <- sarima(clim.t.pw[,1], 12, 0, 12, P = 0, D = 1, Q = 1, S = 12, xreg = clim.t.pw[,2:3])
mod10
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\glass")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  glass
#   - Output:  Thickness
#   - Input:   Speed
# ------------------------------------------------------------------------------
glass_y <- read.table("glass_y.txt", sep = "", header = F, colClasses = "numeric")
glass_u <- read.table("glass_u.txt", sep = "", header = F, colClasses = "numeric")
glass <- cbind(glass_u, glass_y)
colnames(glass) <- c("input", "output")
head(glass)
# ------------------------------------------------------------------------------
# data exploration:  time series plot
# ------------------------------------------------------------------------------
MTS::MTSplot(glass)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\glass")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\glass")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  glass
#   - Output:  Thickness
#   - Input:   Speed
# ------------------------------------------------------------------------------
glass_y <- read.table("glass_y.txt", sep = "", header = F, colClasses = "numeric")
glass_u <- read.table("glass_u.txt", sep = "", header = F, colClasses = "numeric")
glass <- cbind(glass_u, glass_y)
colnames(glass) <- c("input", "output")
head(glass)
# ------------------------------------------------------------------------------
# data exploration:  time series plot
# ------------------------------------------------------------------------------
MTS::MTSplot(glass)
glass_y <- read.table("glass_y.txt", sep = "", header = F, colClasses = "numeric")
glass_u <- read.table("glass_u.txt", sep = "", header = F, colClasses = "numeric")
glass <- cbind(glass_u, glass_y)
colnames(glass) <- c("input", "output")
head(glass)
# ----------
# demean input
glass$input2 <- glass$input - mean(glass$input)
# ------------------------------------------------------------------------------
# Spectral analysis
#   - Coherence:  correlation indexed by frequency
#   - Squared coherence:
#        An important example of the application of the cross-spectrum is to the problem of predicting an output series y(t) from
#        some input series x(t) through a linear filter relation such as the three-point moving average.
#        A measure of the strength of such a relation is the squared coherence.
# ------------------------------------------------------------------------------
input <- glass$input2
output <- glass$output
# L <- 9
L <- 19
( m <- (L - 1) / 2 )
sr <- mvspec(cbind(output, input), kernel("daniell", m), plot = FALSE)
# ----------
sr$df
# significance level alpha = 0.001
( f <- qf(.999, 2, sr$df -2) )
( C <- f / (L - 1 + f) )
par(mfrow = c(2,1))
plot(sr)
plot(sr, plot.type = "coh", ci.lty = 2)
abline(h = C)
# ------------------------------------------------------------------------------
# Spectral analysis:  output from "mvspec"
# ------------------------------------------------------------------------------
fyy <- sr$fxx[1,1,]
fxx <- sr$fxx[2,2,]
# ----------
# cross-spectrum
fyx <- sr$fxx[1,2,]
# frequency response
Ayx <- fyx / fxx
# cospectrum and quadspectrum
cyx <- Re(Ayx)
qyx <- - Im(Ayx)
# ----------
# Amplitude
Ayx_norm <- abs(Ayx)
# ----------
# phase
Phiyx <- atan(- qyx / cyx)
# ----------
# squared coherence
rho2yx <- Re(abs(fyx)^2 / (fxx * fyy))
# ------------------------------------------------------------------------------
# Spectral analysis:  output from "timsac"
# ------------------------------------------------------------------------------
library(timsac)
# maximum lag by default = 2 * sqrt(nrow(gasf)) = 34.4
sgl_out <- sglfre(as.matrix(glass), invar = 1, outvar = 2, lag = 34)
# ------------------------------------------------------------------------------
# Compare output:  Squared Coherency
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(2,2))
plot(sr, plot.type = "coh", ylim = c(0, 1.0))
plot(sr$coh ~ sr$freq, type = "l", lty = 1, lwd = 2,
xlab = "frequency", ylab = "Squared Coherence", main = "Squared Coherency from sr$coh",
ylim = c(0, 1.0))
plot(rho2yx ~ sr$freq, type = "l", lty = 1, lwd = 2,
xlab = "frequency", ylab = "Squared Coherence", main = "Squared Coherency from sr$fxx",
ylim = c(0, 1.0))
# sglfre:  esimate based on aligned time series (lag 5 for input maybe)
plot(sgl_out$coh, type = "l", lty = 1, lwd = 2,
xlab = "frequency", ylab = "Squared Coherence", main = "Squared Coherency from sglfre",
ylim = c(0, 1.0))
# ------------------------------------------------------------------------------
# Compare output:  Squared Frequency Response and Frequency Response
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(2,2))
plot(abs(Ayx)^2 ~ sr$freq, type = "l", lty = 1, lwd = 2,
xlab = "frequency", ylab = "Squared Fequency Response", main = "Squared Frequency Response")
plot(cyx ~ sr$freq, type = "h",
xlab = "frequency", ylab = "Cospectrum", main = "Frequency Response: Cospectrum")
abline(h = 0, lty = 2, col = "gray")
plot(qyx ~ sr$freq, type = "h",
xlab = "frequency", ylab = "Quadspectrum", main = "Frequency Response: Quadpectrum")
abline(h = 0, lty = 2, col = "gray")
plot(Phiyx ~ sr$freq, type = "l",
xlab = "frequency", ylab = "Phase", main = "Frequency Response: Phase")
abline(h = 0, lty = 2, col = "gray")
# ------------------------------------------------------------------------------
# output from timsac:  Frequency Response  (but note that this is in time domain representation ...)
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(2,2))
plot(sgl_out$freqr, type = "l", main = "Frequency Response: Real Part")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$freqi, type = "l", main = "Frequency Response: Imagenary Part")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$cspec, type = "h",
ylab = "Cospectrum", main = "Frequency Response: Cospectrum")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$qspec, type = "h",
ylab = "Quadspectrum", main = "Frequency Response: Quadpectrum")
abline(h = 0, lty = 2, col = "gray")
# ----------
graphics.off()
par(mfrow = c(1,1))
plot(sgl_out$freqi ~ sgl_out$freqr, type = "l", main = "Frequency Response in I and R", xlab = "Real Part", ylab = "Imagenary Part")
abline(h = 0, v = 0, lty = 2, col = "gray")
# ------------------------------------------------------------------------------
# output from timsac:  Gain and Phase
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(2,1))
# Gain might be based on the aligned time series (input lag 5)
plot(sgl_out$gain, type = "l", main = "Frequency Response: Gain", ylab = "Gain")
plot(sgl_out$phase / (2 * pi), type = "l", main = "Frequency Response: Phase", ylab = "Phase")
# ----------
# Manual calculation for Gain
cyx2 <- sgl_out$cspec
qyx2 <- sgl_out$qspec
fxx2 <- sgl_out$inspec / 2
fyy2 <- sgl_out$outspec / 2
Ayx2 <- ( sqrt(cyx2^2 + qyx2^2) / fxx2 )
# this is Gain
( gain <- Ayx2 / 2 )
sgl_out$gain
# ----------
# Manual calculation for Phase  --> but different
plot(atan(- qyx2 / cyx2), type = "l", lty = 1)
graphics.off()
par(mfrow = c(2,2))
plot(sgl_out$freqr, type = "l", main = "Frequency Response: Real Part")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$freqi, type = "l", main = "Frequency Response: Imagenary Part")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$cspec, type = "h",
ylab = "Cospectrum", main = "Frequency Response: Cospectrum")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$qspec, type = "h",
ylab = "Quadspectrum", main = "Frequency Response: Quadpectrum")
abline(h = 0, lty = 2, col = "gray")
# ----------
graphics.off()
par(mfrow = c(1,1))
plot(sgl_out$freqi ~ sgl_out$freqr, type = "l", main = "Frequency Response in I and R", xlab = "Real Part", ylab = "Imagenary Part")
abline(h = 0, v = 0, lty = 2, col = "gray")
graphics.off()
par(mfrow = c(2,2))
plot(sgl_out$freqr, type = "l", main = "Frequency Response: Real Part")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$freqi, type = "l", main = "Frequency Response: Imagenary Part")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$cspec, type = "h",
ylab = "Cospectrum", main = "Frequency Response: Cospectrum")
abline(h = 0, lty = 2, col = "gray")
plot(sgl_out$qspec, type = "h",
ylab = "Quadspectrum", main = "Frequency Response: Quadpectrum")
abline(h = 0, lty = 2, col = "gray")
graphics.off()
par(mfrow = c(2,1))
# Gain might be based on the aligned time series (input lag 5)
plot(sgl_out$gain, type = "l", main = "Frequency Response: Gain", ylab = "Gain")
plot(sgl_out$phase / (2 * pi), type = "l", main = "Frequency Response: Phase", ylab = "Phase")
# ----------
# Manual calculation for Gain
cyx2 <- sgl_out$cspec
qyx2 <- sgl_out$qspec
fxx2 <- sgl_out$inspec / 2
fyy2 <- sgl_out$outspec / 2
Ayx2 <- ( sqrt(cyx2^2 + qyx2^2) / fxx2 )
# this is Gain
( gain <- Ayx2 / 2 )
sgl_out$gain
# ----------
# Manual calculation for Phase  --> but different
plot(atan(- qyx2 / cyx2), type = "l", lty = 1)
graphics.off()
par(mfrow = c(2,1))
# Gain might be based on the aligned time series (input lag 5)
plot(sgl_out$gain, type = "l", main = "Frequency Response: Gain", ylab = "Gain")
plot(sgl_out$phase / (2 * pi), type = "l", main = "Frequency Response: Phase", ylab = "Phase")
MTS::MTSplot(glass[1:1500])
MTS::MTSplot(glass[1:1500,])
head(glass)
glass_y <- read.table("glass_y.txt", sep = "", header = F, colClasses = "numeric")
glass_u <- read.table("glass_u.txt", sep = "", header = F, colClasses = "numeric")
glass <- cbind(glass_u, glass_y)
colnames(glass) <- c("input", "output")
head(glass)
MTS::MTSplot(glass[1:1500,])
MTS::MTSplot(glass[1:500,])
