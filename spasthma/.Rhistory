points(meuse, pch=1)
box()
title(main="Fisher-Jenks")
legend("topleft", fill=attr(fj5Colours, "palette"), legend=names(attr(fj5Colours, "table")), bty="n", cex=0.8, y.intersp=0.8)
par(oopar)
q5Colours <- findColours(q5, pal)
plot(meuse, col=q5Colours, pch=19)
legend("topleft", fill=attr(q5Colours, "palette"),
legend=names(attr(q5Colours, "table")), bty="n")
cuts = (0:10)/10
spplot(meuse.grid, "dist", colorkey=list(labels=list(at=cuts)), at=cuts)
q5Colours <- findColours(q5, pal)
plot(meuse, col=q5Colours, pch=19)
legend("topleft", fill=attr(q5Colours, "palette"), legend=names(attr(q5Colours, "table")), bty="n")
cuts = (0:10)/10
spplot(meuse.grid, "dist", colorkey=list(labels=list(at=cuts)), at=cuts)
rm(list=ls()
)
graphics.off()
setwd("//media//kswada//MyFiles//R//japanesepines")
packages <- c("dplyr", "spatstat")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("japanesepines", package = "spatstat")
dim(japanesepines)
str(japanesepines)
summary(japanesepines)
packages <- c("dplyr", "spatstat", "maptools")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
spjpines <- as(japanesepines, "SpatialPoints")
summary(spjpines)
spjpines1 <- elide(spjpines, scale=TRUE, unitsq=TRUE)
summary(spjpines1)
pppjap <- as(spjpines1, "ppp")
summary(pppjap)
summary(spjpines)
str(spjpines)
data(redwoodfull)
spred <- as(redwoodfull, "SpatialPoints")
data(cells)
spcells <- as(cells, "SpatialPoints")
dpp <- data.frame(rbind(coordinates(spjpines1), coordinates(spred),  coordinates(spcells)))
njap <- nrow(coordinates(spjpines1))
nred <- nrow(coordinates(spred))
ncells <- nrow(coordinates(spcells))
dpp <- cbind(dpp,c(rep("JAPANESE",njap), rep("REDWOOD", nred), rep("CELLS", ncells)))
names(dpp) <- c("x", "y", "DATASET")
dpp
head(dpp)
summary(spjpines1)
summary(spjpines)
summary(spjpines1)
summary(spred)
summary(spcells)
dpp <- data.frame(rbind(coordinates(spjpines1), coordinates(spred),  coordinates(spcells)))
njap <- nrow(coordinates(spjpines1))
nred <- nrow(coordinates(spred))
ncells <- nrow(coordinates(spcells))
dpp <- cbind(dpp,c(rep("JAPANESE",njap), rep("REDWOOD", nred), rep("CELLS", ncells)))
names(dpp) <- c("x", "y", "DATASET")
head(dpp)
library(lattice)
print(xyplot(y~x|DATASET, data=dpp, pch=19, aspect=1))
print(xyplot(y ~ x | DATASET, data=dpp, pch=19, aspect=1))
set.seed(120109)
# r <- seq(0, sqrt(2)/6, by = 0.005)
r <- seq(0, sqrt(2)/6, by = 0.001)
envjap <- envelope(as(spjpines1, "ppp"), fun=Gest, r=r, nrank=2, nsim=99)
envred <- envelope(as(spred, "ppp"), fun=Gest, r=r, nrank=2, nsim=99)
envcells <- envelope(as(spcells, "ppp"), fun=Gest, r=r, nrank=2, nsim=99)
Gresults <- rbind(envjap, envred, envcells)
Gresults <- cbind(Gresults, y=rep(c("JAPANESE", "REDWOOD", "CELLS"), each=length(r)))
Gresults
rint(xyplot(obs~theo|y , data=Gresults, type="l",
xlab = "theoretical", ylab = "observed",
panel=function(x, y, subscripts) {
lpolygon(c(x, rev(x)),
c(Gresults$lo[subscripts], rev(Gresults$hi[subscripts])),
border="gray", col="gray"
)
llines(x, y, col="black", lwd=2)
}))
print(xyplot(obs~theo|y , data=Gresults, type="l",
xlab = "theoretical", ylab = "observed",
panel=function(x, y, subscripts) {
lpolygon(c(x, rev(x)),
c(Gresults$lo[subscripts], rev(Gresults$hi[subscripts])),
border="gray", col="gray"
)
llines(x, y, col="black", lwd=2)
}))
set.seed(30)
Fenvjap <- envelope(as(spjpines1, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
Fenvred <- envelope(as(spred, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
Fenvcells <- envelope(as(spcells, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
Fresults <- rbind(Fenvjap, Fenvred, Fenvcells)
Fresults <- cbind(Fresults, y=rep(c("JAPANESE", "REDWOOD", "CELLS"), each=length(r)))
# ----------
print(xyplot(obs ~ theo | y , data=Fresults, type="l",
xlab = "theoretical", ylab = "observed",
panel=function(x, y, subscripts) {
lpolygon(c(x, rev(x)),
c(Fresults$lo[subscripts], rev(Fresults$hi[subscripts])),
border="gray", col="gray"
)
llines(x, y, col="black", lwd=2)
}))
set.seed(7)
x<-runif(10)
nx<-length(x)
bw<-.1
k<-density(x, bw=bw, kernel="biweight")
k$y<-k$y*nx
###################################################
### code chunk number 29: sppa.Rnw:939-951
###################################################
plot(k, ylab="Intensity", main="")
points(x, rep(0, nx), pch=20)
for(i in 1:length(x))
lines(density(x[i], bw=bw, kernel="biweight"), lty=2)
legend(x=14, y=0.6, legend=c("Intensity", "Kernel"), lty=c(1,2))
k <- density(x, bw=bw, kernel="biweight")
k
k$x
k
k$x
k$y
k$y <- k$y * nx
k$y <- k$y * nx
plot(k, ylab="Intensity", main="")
points(x, rep(0, nx), pch=20)
for(i in 1:length(x)) lines(density(x[i], bw=bw, kernel="biweight"), lty=2)
legend(x=14, y=0.6, legend=c("Intensity", "Kernel"), lty=c(1,2))
plot(k, ylab="Intensity", main="")
set.seed(7)
nx <- 10
x <- runif(nx)
points(x, rep(0, nx), pch=20)
graphics.off()
points(x, rep(0, nx), pch=20)
for(i in 1:length(x)) lines(density(x[i], bw=bw, kernel="biweight"), lty=2)
legend(x=14, y=0.6, legend=c("Intensity", "Kernel"), lty=c(1,2))
plot(x, ylab="Intensity", main="")
mserwq<-mse2d(as.points(coordinates(spred)),
as.points(list(x=c(0,1,1,0), y=c(0,0,1,1))), 100, .15)
bwq<-mserwq$h[which.min(mserwq$mse)]
bwq
#Spatstat code
mserw<-bw.diggle(as(spred, "ppp"))
bw<-as.numeric(mserw)
bw
library(splancs)
mserwq <- mse2d(as.points(coordinates(spred)), as.points(list(x=c(0,1,1,0), y=c(0,0,1,1))), 100, .15)
bwq<-mserwq$h[which.min(mserwq$mse)]
bwq
mserw <- bw.diggle(as(spred, "ppp"))
bw <- as.numeric(mserw)
bw
plot(mserwq$h, mserwq$mse, xlab="Bandwidth", ylab="MSE", type="l", ylim=c(-2,50), main="Quartic kernel")
i<-which.min(mserwq$mse)
points(mserwq$h[i], mserwq$mse[i])
plot(mserw, main="Gaussian kernel", xlab="Bandwidth", ylab="MSE")
points(attr(mserw, "h")[attr(mserw, "iopt")], bw)
par(mfrow=c(1,2))
plot(mserwq$h, mserwq$mse, xlab="Bandwidth", ylab="MSE", type="l", ylim=c(-2,50), main="Quartic kernel")
i<-which.min(mserwq$mse)
points(mserwq$h[i], mserwq$mse[i])
plot(mserw, main="Gaussian kernel", xlab="Bandwidth", ylab="MSE")
points(attr(mserw, "h")[attr(mserw, "iopt")], bw)
poly <- as.points(list(x = c(0, 0, 1, 1), y = c(0, 1, 1, 0)))
sG <- Sobj_SpatialGrid(spred, maxDim=100)$SG
grd <- slot(sG, "grid")
summary(grd)
k0 <- spkernel2d(spred, poly, h0=bw, grd)
k1 <- spkernel2d(spred, poly, h0=.05, grd)
k2 <- spkernel2d(spred, poly, h0=.1, grd)
k3 <- spkernel2d(spred, poly, h0=.15, grd)
df <- data.frame(k0=k0, k1=k1, k2=k2, k3=k3)
kernels <- SpatialGridDataFrame(grd, data=df)
summary(kernels)
cc <- coordinates(kernels)
xy<-list(x=cc[,1], y=cc[,2])
k4<-density(as(spred, "ppp"), .5*bw, dimyx=c(100, 100), xy=xy)
kernels$k4<-as(k4, "SpatialGridDataFrame")$v
k5<-density(as(spred, "ppp"), .5*.05, dimyx=c(100, 100), xy=xy)
kernels$k5<-as(k5, "SpatialGridDataFrame")$v
k6<-density(as(spred, "ppp"), .5*.1, dimyx=c(100, 100), xy=xy)
kernels$k6<-as(k6, "SpatialGridDataFrame")$v
k7<-density(as(spred, "ppp"), .5*.15, dimyx=c(100, 100), xy=xy)
kernels$k7<-as(k7, "SpatialGridDataFrame")$v
summary(kernels)
summary(kernels)
library(RColorBrewer)
gp <- brewer.pal(8, "Reds")
print(spplot(kernels, at=c(0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000), col.regions=colorRampPalette(gp)(15)[1:12],
names.attr=c(paste("Q bw=",round(bw, digits=4), sep="", collapse=""),
"Q bw=0.05", "Q bw=0.1","Q bw=0.15", paste("G bw=", round(.5*bw, digits=4),
sep="", collapse=""), "G bw=0.025", "G bw=0.05","G bw=0.075"), cex=0.7, colorkey=FALSE))
mserwq <- mse2d(as.points(coordinates(spjpines1)), as.points(list(x=c(0,1,1,0), y=c(0,0,1,1))), 100, .15)
bwq <- mserwq$h[which.min(mserwq$mse)]
bwq
mserw <- bw.diggle(as(spjpines1, "ppp"))
bw <- as.numeric(mserw)
bw
par(mfrow=c(1,2))
plot(mserwq$h, mserwq$mse, xlab="Bandwidth", ylab="MSE", type="l", ylim=c(-2,50), main="Quartic kernel")
i <- which.min(mserwq$mse)
points(mserwq$h[i], mserwq$mse[i])
plot(mserw, main="Gaussian kernel", xlab="Bandwidth", ylab="MSE")
points(attr(mserw, "h")[attr(mserw, "iopt")], bw)
poly <- as.points(list(x = c(0, 0, 1, 1), y = c(0, 1, 1, 0)))
sG <- Sobj_SpatialGrid(spjpines1, maxDim=100)$SG
grd <- slot(sG, "grid")
summary(grd)
k0 <- spkernel2d(spjpines1, poly, h0=bw, grd)
k1 <- spkernel2d(spjpines1, poly, h0=.05, grd)
k2 <- spkernel2d(spjpines1, poly, h0=.1, grd)
k3 <- spkernel2d(spjpines1, poly, h0=.15, grd)
df <- data.frame(k0=k0, k1=k1, k2=k2, k3=k3)
kernels <- SpatialGridDataFrame(grd, data=df)
summary(kernels)
# ----------
# When calling density on a ppp object (which in fact calls density.ppp), we have used the additional arguments dimxy and xy to make sure that the grid
# used to compute the estimates is compatible with that stored in kernels.
# Finally, the kernel estimate is returned in an im class that is converted into a SpatialGridDataFrame and the values incorporated into kernels.
cc <- coordinates(kernels)
xy <- list(x=cc[,1], y=cc[,2])
k4 <- density(as(spjpines1, "ppp"), .5*bw, dimyx=c(100, 100), xy=xy)
kernels$k4 <- as(k4, "SpatialGridDataFrame")$v
k5 <- density(as(spjpines1, "ppp"), .5*.05, dimyx=c(100, 100), xy=xy)
kernels$k5 <- as(k5, "SpatialGridDataFrame")$v
k6 <- density(as(spjpines1, "ppp"), .5*.1, dimyx=c(100, 100), xy=xy)
kernels$k6 <- as(k6, "SpatialGridDataFrame")$v
k7 <- density(as(spjpines1, "ppp"), .5*.15, dimyx=c(100, 100), xy=xy)
kernels$k7 <- as(k7, "SpatialGridDataFrame")$v
summary(kernels)
library(RColorBrewer)
gp <- brewer.pal(8, "Reds")
print(spplot(kernels, at=c(0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000), col.regions=colorRampPalette(gp)(15)[1:12],
names.attr=c(paste("Q bw=",round(bw, digits=4), sep="", collapse=""),
"Q bw=0.05", "Q bw=0.1","Q bw=0.15", paste("G bw=", round(.5*bw, digits=4),
sep="", collapse=""), "G bw=0.025", "G bw=0.05","G bw=0.075"), cex=0.7, colorkey=FALSE))
library(cubature)
loglambda <- function(x, alpha, beta){
l <- alpha + sum(beta * c(x, x * x, prod(x)))
return(l)
}
# cuntion cubature::adaptIntegrate() compute numerically the integral that appears in the expression of the likelihood
L <- function(alphabeta, x){
l <- apply(x,1,loglambda, alpha=alphabeta[1], beta=alphabeta[-1])
l <- sum(l)
intL <- adaptIntegrate(lowerLimit=c(0,0), upperLimit=c(1,1), fDim=1, tol=1e-8,
f=function(x, alpha=alphabeta[1], beta=alphabeta[-1]){exp(loglambda(x, alpha, beta))})
l <- l-intL$integral
return(l)
}
data(lansing)
x<-as.points(lansing[lansing$marks=="maple",])
# Maximise log-likelihood
optbeta <- optim(par=c(log(514),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda<-exp(apply(coordinates(grd),1, function(X, alpha, beta)
{
loglambda(X, alpha, beta)
}, alpha=optbeta$par[1], beta=optbeta$par[-1]
))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0,1400,length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
spred
x
x<-as.points(spred)
lansing[lansing$marks=="maple",]
str(lansing)
str(spred)
str(japanesepines)
str(redwoodfull)
x <- as.points(redwoodfull)
# Maximise log-likelihood
optbeta <- optim(par=c(log(514),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda<-exp(apply(coordinates(grd),1, function(X, alpha, beta)
{
loglambda(X, alpha, beta)
}, alpha=optbeta$par[1], beta=optbeta$par[-1]
))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0,1400,length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
x <- as.points(japanesepines)
# Maximise log-likelihood
optbeta <- optim(par=c(log(514),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda<-exp(apply(coordinates(grd),1, function(X, alpha, beta)
{
loglambda(X, alpha, beta)
}, alpha=optbeta$par[1], beta=optbeta$par[-1]
))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0,1400,length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
x <- as.points(redwoodfull)
optbeta <- optim(par=c(log(514),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda<-exp(apply(coordinates(grd),1, function(X, alpha, beta)
{
loglambda(X, alpha, beta)
}, alpha=optbeta$par[1], beta=optbeta$par[-1]
))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0,1400,length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
x <- as.points(redwoodfull)
optbeta <- optim(par=c(log(200),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda<-exp(apply(coordinates(grd),1, function(X, alpha, beta)
{
loglambda(X, alpha, beta)
}, alpha=optbeta$par[1], beta=optbeta$par[-1]
))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 400, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
x <- as.points(japanesepines)
# Maximise log-likelihood
optbeta <- optim(par=c(log(200),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta$par[1], beta=optbeta$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 400, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
x <- as.points(japanesepines)
# Maximise log-likelihood
optbeta <- optim(par=c(log(100),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta$par[1], beta=optbeta$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 200, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
ppm(Q = redwoodfull, trend = ~ x + y + I(x^2) + I(y^2) + I(x*y))
ppm(Q = japanesepines, trend = ~ x + y + I(x^2) + I(y^2) + I(x*y))
x <- as.points(redwoodfull)
# Maximise log-likelihood
optbeta <- optim(par=c(log(200),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
optbeta
ppm(Q = redwoodfull, trend = ~ x + y + I(x^2) + I(y^2) + I(x*y))
optbeta_r <- optim(par=c(log(200),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
optbeta_r
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta_r$par[1], beta=optbeta_r$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 400, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
optbeta_r <- optim(par=c(log(200),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
optbeta_r
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta_r$par[1], beta=optbeta_r$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 400, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
# ----------
# japanesepines data
x <- as.points(japanesepines)
# Maximise log-likelihood
optbeta_j <- optim(par=c(log(100),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
optbeta_j
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta_j$par[1], beta=optbeta_j$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 200, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
x <- as.points(redwoodfull)
# Maximise log-likelihood
optbeta_r <- optim(par=c(log(200),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
optbeta_r
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta_r$par[1], beta=optbeta_r$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 400, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
# ----------
# japanesepines data
x <- as.points(japanesepines)
# Maximise log-likelihood
optbeta_j <- optim(par=c(log(100),0,0,0,0,0), fn=L, control=list(maxit=1000, fnscale=-1), x=x)
optbeta_j
grd <- GridTopology(cellcentre.offset = c(0.005,0.005), cellsize = c(0.01, 0.01), cells.dim = c(100, 100))
lambda <- exp(apply(coordinates(grd), 1, function(X, alpha, beta){loglambda(X, alpha, beta)}, alpha=optbeta_j$par[1], beta=optbeta_j$par[-1]))
parint <- SpatialGridDataFrame(grd, data=data.frame(intensity=lambda))
lyt <- list("sp.points", SpatialPoints(x), pch=19, col="black", cex=0.7)
print(spplot(parint, at=seq(0, 200, length.out=8), col.regions=colorRampPalette(gp)(7), sp.layout=list(lyt)))
ppm(Q = redwoodfull, trend = ~ x + y + I(x^2) + I(y^2) + I(x*y))
optbeta_r
ppm(Q = japanesepines, trend = ~ x + y + I(x^2) + I(y^2) + I(x*y))
optbeta_j
set.seed(30)
Kenvjap <- envelope(as(spjpines1, "ppp"), fun=Kest, r=r, nrank=2, nsim=99)
Kenvred <- envelope(as(spred, "ppp"), fun=Kest, r=r, nrank=2, nsim=99)
Kenvcells <- envelope(as(spcells, "ppp"), fun=Kest, r=r, nrank=2, nsim=99)
Kresults <- rbind(Kenvjap, Kenvred, Kenvcells)
Kresults <- cbind(Kresults, y=rep(c("JAPANESE", "REDWOOD", "CELLS"), each=length(r)))
print(xyplot((obs - theo) ~ r | y , data=Kresults, type="l",
ylim= c(-.06, .06), ylab=expression(hat(K) (r)  - pi * r^2),
panel=function(x, y, subscripts) {
Ktheo<- Kresults$theo[subscripts]
lpolygon(c(r, rev(r)),
c(Kresults$lo[subscripts]-Ktheo, rev(Kresults$hi[subscripts]-Ktheo)),
border="gray", col="gray"
)
llines(r, Kresults$obs[subscripts]-Ktheo, lty=2, lwd=1.5, col="black")
}))
rm(list=ls())
library(rgdal)
spasthma <- readOGR("spasthma.shp", "spasthma")
spbdry <- readOGR("spbdry.shp", "spbdry")
spsrc <- readOGR("spsrc.shp", "spsrc")
sproads <- readOGR("sproads.shp", "sproads")
library(rgdal)
spasthma <- readOGR("//media//kswada//MyFiles//R//data//spasthma//spasthma.shp", "spasthma")
library(rgdal)
spasthma <- readOGR("//media//kswada//MyFiles//R//data//spasthma", "spasthma")
spasthma <- readOGR("//media//kswada//MyFiles//data//spasthma", "spasthma")
library(rgdal)
spasthma <- readOGR("//media//kswada//MyFiles//data//spasthma", "spasthma")
spbdry <- readOGR("//media//kswada//MyFiles//data//spasthma//spbdry.shp", "spbdry")
spsrc <- readOGR("//media//kswada//MyFiles//data//spasthma//spsrc.shp", "spsrc")
sproads <- readOGR("//media//kswada//MyFiles//data//spasthma//sproads.shp", "sproads")
str(spasthma)
str(spbdry)
str(spsrc)
str(sproads)
str(spasthma)
str(spbdry)
str(spsrc)
str(sproads)
plot(spbdry, axes=TRUE, lwd=0.5)
par(mfrow=c(1,1))
plot(spbdry, axes=TRUE, lwd=0.5)
plot(sproads, add=TRUE, lwd=2, col="darkslategrey")
c_c <- (spasthma$Asthma == "case") + 1
plot(spasthma[c_c == 1,], add=TRUE, pch=4, cex=0.6, col="mediumaquamarine")
plot(spasthma[c_c == 2,], add=TRUE, pch=17, cex=0.75, col="goldenrod2")
plot(spsrc, pch=22, add=TRUE, cex=1.2, bg="brown4")
legend("bottomright", legend=c("controls", "cases", "pollution sources"), pch=c(4, 17, 22), pt.cex=c(0.6, 0.75, 1.2), pt.bg=c(NA, NA, "brown4"), col=c("mediumaquamarine", "goldenrod2", "black"), bty="n")
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
setwd("//media//kswada//MyFiles//R//spasthma")
packages <- c("dplyr", "rgdal")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  spasthma
# ------------------------------------------------------------------------------
library(rgdal)
spasthma <- readOGR("//media//kswada//MyFiles//data//spasthma", "spasthma")
spbdry <- readOGR("//media//kswada//MyFiles//data//spasthma//spbdry.shp", "spbdry")
spsrc <- readOGR("//media//kswada//MyFiles//data//spasthma//spsrc.shp", "spsrc")
sproads <- readOGR("//media//kswada//MyFiles//data//spasthma//sproads.shp", "sproads")
# ----------
# SpatialPointsDataFrame
str(spasthma)
# SpatialPolygonsDataFrame
str(spbdry)
# SpatialPointsDataFrame
str(spsrc)
# SpatialLinesDataFrame
str(sproads)
pppasthma <- as(spasthma, "ppp")
pppasthma$window <- as(spbdry, "owin")
marks(pppasthma) <- relevel(pppasthma$marks$Asthma, "control")
cases <- unmark(subset(pppasthma, marks(pppasthma) =="case"))
ncases <- npoints(cases)
controls <- unmark(subset(pppasthma, marks(pppasthma) =="control"))
ncontrols <- npoints(controls)
pppasthma <- as(spasthma, "ppp")
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
str(spasthma)
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
packages <- c("dplyr", "rgdal", "spatstat")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
pppasthma <- as(spasthma, "ppp")
packages <- c("dplyr", "rgdal", "spatstat")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
packages <- c("dplyr", "rgdal", "spatstat", "maptools")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
pppasthma <- as(spasthma, "ppp")
pppasthma$window <- as(spbdry, "owin")
marks(pppasthma) <- relevel(pppasthma$marks$Asthma, "control")
cases <- unmark(subset(pppasthma, marks(pppasthma) =="case"))
ncases <- npoints(cases)
controls <- unmark(subset(pppasthma, marks(pppasthma) =="control"))
ncontrols <- npoints(controls)
cases
pppasthma
str(pppasthma)
ncases
cases
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
bwasthma <- .06
kcases <- density(cases, bwasthma)
kcontrols <- density(controls, bwasthma)
kcases
kcases
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
spkratio0 <- as(kcases, "SpatialGridDataFrame")
names(spkratio0) <- "kcases"
spkratio0$kcontrols <- as(kcontrols, "SpatialGridDataFrame")$v
spkratio <- as(spkratio0, "SpatialPixelsDataFrame")
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
source('/media/kswada/MyFiles/R/spasthma/02_spasthma_analysis.R')
