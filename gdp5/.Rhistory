y_1<-0
rw_1[1]<-0
y_1[1]<-0
for (j in 2:1391) {
rw_1[j]<-rw[j-1]
y_1[j]<-log(data[j-1,i])
}
tmp.p<-lm(log(data[,i])~rw+rw_1+y_1)
tmp.p.beta<-tmp.p$coefficients[2]
tmp.f.stat<-summary(tmp.p)$fstatistic
tmp.p.p.value<-1-pf(tmp.f.stat["value"],tmp.f.stat["numdf"],tmp.f.stat["dendf"])
tmp.p.adj.r.squared<-summary(tmp.p)$adj.r.squared
out[i,]<-data.frame(matrix(c(tmp.p.beta, tmp.p.p.value, tmp.p.adj.r.squared), nrow=1))
wn<-rnorm(1391)
rw<-cumsum(wn)
out<-data.frame(matrix(1:21,nrow=7,ncol=3))
for (i in 1:1) {
rw_1<-0
y_1<-0
rw_1[1]<-0
y_1[1]<-0
for (j in 2:1391) {
rw_1[j]<-rw[j-1]
y_1[j]<-log(data[j-1,i])
}
tmp.p<-lm(log(data[,i])~rw+rw_1+y_1)
tmp.p.beta<-tmp.p$coefficients[2]
tmp.f.stat<-summary(tmp.p)$fstatistic
tmp.p.p.value<-1-pf(tmp.f.stat["value"],tmp.f.stat["numdf"],tmp.f.stat["dendf"])
tmp.p.adj.r.squared<-summary(tmp.p)$adj.r.squared
out[i,]<-data.frame(matrix(c(tmp.p.beta, tmp.p.p.value, tmp.p.adj.r.squared), nrow=1))
}
colnames(out)<-c("推定値β^", "p値", "決定係数")
rownames(out)<-colnames(msci.log)
out
rownames(out)<-colnames(data)
out
wn<-rnorm(1391)
rw<-cumsum(wn)
out<-data.frame(matrix(1:21,nrow=7,ncol=3))
for (i in 1:1) {
rw_1<-0
y_1<-0
rw_1[1]<-0
y_1[1]<-0
for (j in 2:1391) {
rw_1[j]<-rw[j-1]
y_1[j]<-log(data[j-1,i])
}
tmp.p<-lm(log(data[,i])~rw+rw_1+y_1)
tmp.p.beta<-tmp.p$coefficients[2]
tmp.f.stat<-summary(tmp.p)$fstatistic
tmp.p.p.value<-1-pf(tmp.f.stat["value"],tmp.f.stat["numdf"],tmp.f.stat["dendf"])
tmp.p.adj.r.squared<-summary(tmp.p)$adj.r.squared
out[i,]<-data.frame(matrix(c(tmp.p.beta, tmp.p.p.value, tmp.p.adj.r.squared), nrow=1))
}
colnames(out)<-c("推定値β^", "p値", "決定係数")
rownames(out)<-colnames(data)
out
msci.log<-log(msci[,2:8])
wn<-rnorm(1391)
rw<-cumsum(wn)
out<-data.frame(matrix(1:21,nrow=7,ncol=3))
out<-data.frame(matrix(1:21,nrow=7,ncol=3))
for (i in 1:7) {
tmp.p<-lm(msci.log[,i]~rw)
tmp.p.beta<-tmp.p$coefficients[2]
tmp.f.stat<-summary(tmp.p)$fstatistic
tmp.p.p.value<-1-pf(tmp.f.stat["value"],tmp.f.stat["numdf"],tmp.f.stat["dendf"])
tmp.p.adj.r.squared<-summary(tmp.p)$adj.r.squared
out[i,]<-data.frame(matrix(c(tmp.p.beta, tmp.p.p.value, tmp.p.adj.r.squared), nrow=1))
}
colnames(out)<-c("推定値β^", "p値", "決定係数")
rownames(out)<-colnames(msci.log)
out
msci.log<-log(data)
wn<-rnorm(1391)
rw<-cumsum(wn)
out<-data.frame(matrix(1:21,nrow=7,ncol=3))
out<-data.frame(matrix(1:21,nrow=7,ncol=3))
for (i in 1:7) {
tmp.p<-lm(msci.log[,i]~rw)
tmp.p.beta<-tmp.p$coefficients[2]
tmp.f.stat<-summary(tmp.p)$fstatistic
tmp.p.p.value<-1-pf(tmp.f.stat["value"],tmp.f.stat["numdf"],tmp.f.stat["dendf"])
tmp.p.adj.r.squared<-summary(tmp.p)$adj.r.squared
out[i,]<-data.frame(matrix(c(tmp.p.beta, tmp.p.p.value, tmp.p.adj.r.squared), nrow=1))
}
colnames(out)<-c("推定値β^", "p値", "決定係数")
rownames(out)<-colnames(msci.log)
out
for (i in 1:1) {
rw_1<-0
y_1<-0
rw_1[1]<-0
y_1[1]<-0
for (j in 2:1391) {
rw_1[j]<-rw[j-1]
y_1[j]<-msci.log[j-1,i]
}
tmp.p<-lm(msci.log[,i]~rw+rw_1+y_1)
tmp.p.beta<-tmp.p$coefficients[2]
tmp.f.stat<-summary(tmp.p)$fstatistic
tmp.p.p.value<-1-pf(tmp.f.stat["value"],tmp.f.stat["numdf"],tmp.f.stat["dendf"])
tmp.p.adj.r.squared<-summary(tmp.p)$adj.r.squared
out[i,]<-data.frame(matrix(c(tmp.p.beta, tmp.p.p.value, tmp.p.adj.r.squared), nrow=1))
}
colnames(out)<-c("推定値β^", "p値", "決定係数")
rownames(out)<-colnames(msci.log)
out
n <- nrow(data)
graphics.off()
par(mfrow=c(1,1))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
# rn <- cumsum(e)
rn0 <- 0
rn <- c()
for(i in 1:n){
if(i == 1){ rn[i] = rn0 }
else{ rn[i] <- rn[i-1] + e[i]}
}
rn20 <- 0
rnt1 <- c()
for(i in 1:n){
if(i == 1){ rnt1[i] = rn20 }
else{ rnt1[i] <- rn[i-1] }
}
y0 <- 0
yt1 <- c()
for(i in 1:n){
if(i == 1){ yt1[i] = y0 }
else{ yt1[i] <- log(data[i-1,x]) }
}
tmp <- data.frame(y = log(data[,x]), rw = rn, rwt1 = rnt1, yt1 = yt1)
# tmp <- tmp[2:nrow(tmp),]
# MTSplot(tmp[,c("yt1","y")])
# plot(tmp[,c("yt1","y")], main = paste0("Generated Process vs. ", colnames(data)[x]))
lm(y ~ rw + rwt1 + yt1, data = tmp)
})
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta1 <- round(mod[[i]]$coefficients[2], digits = 5)
pval1 <- round(tidy(mod[[i]])$p.value[2], digits = 5)
beta2 <- round(tidy(mod[[i]])$estimate[3], digits = 5)
pval2 <- round(tidy(mod[[i]])$p.value[3], digits = 5)
beta3 <- round(tidy(mod[[i]])$estimate[4], digits = 5)
pval3 <- round(tidy(mod[[i]])$p.value[4], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta1 = beta1, pval1 = pval1, beta2 = beta2, pval2 = pval2, beta3 = beta3, pval3 = pval3, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_pr <- output
output_pr
n <- nrow(data)
graphics.off()
par(mfrow=c(3,3))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
rn <- cumsum(e)
#  rn0 <- 0
#  rn <- c()
#  for(i in 1:n){
#    if(i == 1){ rn[i] = rn0 }
#    else{ rn[i] <- rn[i-1] + e[i]}
#  }
tmp <- data.frame(rn = rn, y = log(data[,x]))
plot(tmp, main = paste0("Random Walk Process vs. ", colnames(data)[x]))
lm(y ~ rn, data = tmp)
})
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta <- round(tidy(mod[[i]])$estimate[2], digits = 5)
pval <- round(tidy(mod[[i]])$p.value[2], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta = beta, pval = pval, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_rn <- output
output_rn
n <- nrow(data)
graphics.off()
par(mfrow=c(3,3))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
rn <- cumsum(e)
#  rn0 <- 0
#  rn <- c()
#  for(i in 1:n){
#    if(i == 1){ rn[i] = rn0 }
#    else{ rn[i] <- rn[i-1] + e[i]}
#  }
tmp <- data.frame(rn = rn, y = log(data[,x]))
plot(tmp, main = paste0("Random Walk Process vs. ", colnames(data)[x]))
lm(y ~ rn, data = tmp)
})
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta <- round(tidy(mod[[i]])$estimate[2], digits = 5)
pval <- round(tidy(mod[[i]])$p.value[2], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta = beta, pval = pval, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_rn <- output
output_rn
n <- nrow(data)
graphics.off()
par(mfrow=c(3,3))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
rn <- cumsum(e)
#  rn0 <- 0
#  rn <- c()
#  for(i in 1:n){
#    if(i == 1){ rn[i] = rn0 }
#    else{ rn[i] <- rn[i-1] + e[i]}
#  }
tmp <- data.frame(rn = rn, y = log(data[,x]))
plot(tmp, main = paste0("Random Walk Process vs. ", colnames(data)[x]))
lm(y ~ rn, data = tmp)
})
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta <- round(tidy(mod[[i]])$estimate[2], digits = 5)
pval <- round(tidy(mod[[i]])$p.value[2], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta = beta, pval = pval, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_rn <- output
output_rn
n <- nrow(data)
graphics.off()
par(mfrow=c(3,3))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
rn <- cumsum(e)
#  rn0 <- 0
#  rn <- c()
#  for(i in 1:n){
#    if(i == 1){ rn[i] = rn0 }
#    else{ rn[i] <- rn[i-1] + e[i]}
#  }
tmp <- data.frame(rn = rn, y = log(data[,x]))
plot(tmp, main = paste0("Random Walk Process vs. ", colnames(data)[x]))
lm(y ~ rn, data = tmp)
})
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta <- round(tidy(mod[[i]])$estimate[2], digits = 5)
pval <- round(tidy(mod[[i]])$p.value[2], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta = beta, pval = pval, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_rn <- output
output_rn
n <- nrow(data)
graphics.off()
par(mfrow=c(1,1))
mod <- lapply(1:ncol(data), function(x){
e <- rnorm(n, mean = 0, sd = 1)
# rn <- cumsum(e)
rn0 <- 0
rn <- c()
for(i in 1:n){
if(i == 1){ rn[i] = rn0 }
else{ rn[i] <- rn[i-1] + e[i]}
}
rn20 <- 0
rnt1 <- c()
for(i in 1:n){
if(i == 1){ rnt1[i] = rn20 }
else{ rnt1[i] <- rn[i-1] }
}
y0 <- 0
yt1 <- c()
for(i in 1:n){
if(i == 1){ yt1[i] = y0 }
else{ yt1[i] <- log(data[i-1,x]) }
}
tmp <- data.frame(y = log(data[,x]), rw = rn, rwt1 = rnt1, yt1 = yt1)
# tmp <- tmp[2:nrow(tmp),]
# MTSplot(tmp[,c("yt1","y")])
# plot(tmp[,c("yt1","y")], main = paste0("Generated Process vs. ", colnames(data)[x]))
lm(y ~ rw + rwt1 + yt1, data = tmp)
})
library(broom)
output <- data.frame()
for(i in 1:length(mod)){
var <- colnames(data)[i]
beta1 <- round(mod[[i]]$coefficients[2], digits = 5)
pval1 <- round(tidy(mod[[i]])$p.value[2], digits = 5)
beta2 <- round(tidy(mod[[i]])$estimate[3], digits = 5)
pval2 <- round(tidy(mod[[i]])$p.value[3], digits = 5)
beta3 <- round(tidy(mod[[i]])$estimate[4], digits = 5)
pval3 <- round(tidy(mod[[i]])$p.value[4], digits = 5)
adj_r <- round(summary(mod[[i]])$adj.r.squared, digits = 3)
dw <- round(car::durbinWatsonTest(resid(mod[[i]])), digits = 3)
output0 <- data.frame(var = var, beta1 = beta1, pval1 = pval1, beta2 = beta2, pval2 = pval2, beta3 = beta3, pval3 = pval3, adj_r = adj_r, dw = dw)
output <- rbind(output, output0)
}
output_pr <- output
output_pr
kpsstest_pr <- list()
for(i in 1:length(mod)){
kpsstest_pr[[i]] <- summary(urca::ur.kpss(resid(mod[[i]]), type ="mu", lags = "long"))
}
kpsstest_pr
output_wn
output_rn
kpsstest_rn
output_rn
# pvalue of beta3 are almost zero. Adjusted R is very high. but dw statistics is close to 2
# adj_r < DW
# residuals are not UNIT ROOT
output_pr
kpsstest_pr
output_pr
data <- read.table("/media/kswada/MyFiles/references/経済・ファイナンスデータの計量時系列分析/msci_day.txt", header=T, stringsAsFactors=F)
str(data)
# ----------
# only jp, fr and ca
data <- data[,c("jp","fr","ca")]
# This data is daily and only has eigyo-bi,  so do not convert to ts type
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
data_dif <- data.frame(jp = diff(log(data$jp)), fr = diff(log(data$fr)), ca = diff(log(data$ca)))
MTSplot(data_dif)
apply(data, MARGIN=2, forecast::ndiffs)
apply(data_dif, MARGIN=2, forecast::ndiffs)
help(ndiffs)
library(forecast)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,2))
apply(data, 2, Acf)
apply(data, 2, Pacf)
apply(data_dif, 2, Acf)
apply(data_dif, 2, Pacf)
apply(data, 2, Acf)
apply(data, 2, Pacf)
apply(data_dif, 2, adf.test)
apply(data, 2, adf.test)
summary(ur.kpss(data[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data[,"uk"], type="tau", lags="long"))
summary(ur.kpss(data[,"uk"], type="tau", lags="long"))
summary(ur.kpss(data[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data[,"fr"], type="tau", lags="long"))
summary(ur.kpss(data[,"ca"], type="tau", lags="long"))
summary(ur.kpss(data_dif[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data_dif[,"jp"], type="tau", lags="long"))
head(data)
head(data_dif)
nrow(data)
nrow(data_dif)
nrow(data)
nrow(data_dif)
summary(ur.kpss(data_dif[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data_dif[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data_dif[,"fr"], type="tau", lags="long"))
summary(ur.kpss(data_dif[,"ca"], type="tau", lags="long"))
help(ur.kpss)
help(adf.test)
data <- read.table("/media/kswada/MyFiles/references/経済・ファイナンスデータの計量時系列分析/msci_day.txt", header=T, stringsAsFactors=F)
str(data)
# ----------
# This data is daily and only has eigyo-bi,  so do not convert to ts type
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
data <- read.table("/media/kswada/MyFiles/references/経済・ファイナンスデータの計量時系列分析/msci_day.txt", header=T, stringsAsFactors=F)
str(data)
# ----------
# remove Date
data <- data[,2:8]
# ----------
# This data is daily and only has eigyo-bi,  so do not convert to ts type
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
data_dif <- data.frame(ca = diff(log(data$ca)), fr = diff(log(data$fr)), ge = diff(log(data$ge)), it = diff(log(data$it)),
jp = diff(log(data$jp)), uk = diff(log(data$uk)), us = diff(log(data$us)))
MTSplot(data_dif)
nrow(data)
nrow(data_dif)
apply(data, MARGIN=2, forecast::ndiffs)
apply(data_dif, MARGIN=2, forecast::ndiffs)
library(forecast)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,2))
# ----------
# Nonstationary series
apply(data, 2, Acf)
apply(data, 2, Pacf)
library(forecast)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,2))
# ----------
# Nonstationary series
apply(data, 2, Acf)
library(forecast)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,3))
# ----------
# Nonstationary series
apply(data, 2, Acf)
apply(data, 2, Pacf)
apply(data_dif, 2, Acf)
apply(data_dif, 2, Acf)
graphics.off()
apply(data_dif, 2, Acf)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,3))
apply(data, 2, Acf)
apply(data, 2, Pacf)
graphics.off()
apply(data_dif, 2, Acf)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,3))
apply(data_dif, 2, Acf)
apply(data_dif, 2, Pacf)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,3))
apply(data_dif, 2, Acf)
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(3,3))
apply(data_dif, 2, Pacf)
graphics.off()
par(cex = 1.4, mar = c(1,1,2,1), lwd = 1.6, mfrow=c(3,3))
apply(data, 2, Acf)
graphics.off()
par(cex = 1.4, mar = c(4,4,4,4), lwd = 1.6, mfrow=c(3,3))
apply(data, 2, Acf)
graphics.off()
par(cex = 1.4, mar = c(4,4,4,4), lwd = 1.6, mfrow=c(3,3))
apply(data_dif, 2, Pacf)
apply(data_dif, 2, adf.test)
apply(data, 2, adf.test)
summary(ur.kpss(data[,"jp"], type="tau", lags="long"))
summary(ur.kpss(data[,"fr"], type="tau", lags="long"))
summary(ur.kpss(data[,"ca"], type="tau", lags="long"))
data <- read.table("/media/kswada/MyFiles/references/経済・ファイナンスデータの計量時系列分析/msci_day.txt", header=T, stringsAsFactors=F)
str(data)
# ----------
# only jp, fr and ca
data <- data[,c("jp","fr","ca")]
# ----------
# This data is daily and only has eigyo-bi,  so do not convert to ts type
graphics.off()
par(cex = 1.4, mar = c(4,4,2,1), lwd = 1.6, mfrow=c(1,1))
MTSplot(data)
# ------------------------------------------------------------------------------
# transform to stock return ration (log and diff) to secure stationarity
# ------------------------------------------------------------------------------
data_dif <- data.frame(jp = diff(log(data$jp)), fr = diff(log(data$fr)), ca = diff(log(data$ca)))
MTSplot(data_dif)
# ----------
# note that the number of rows are decreased to 1390
nrow(data)
nrow(data_dif)
# ------------------------------------------------------------------------------
# Vector Autoregression Model (VAR)
# ------------------------------------------------------------------------------
library(vars)
varmat <- as.matrix(data_dif)
varmat
VARselect(varmat, lag.max = 10, type = "const")
MTS::VARorder(data_dif)
help(Varselect)
help(VARselect)
varfit <- vars::VAR(varmat, p = 2, type = "const")
summary(varfit)
MTS::VARorder(data_dif)
VARselect(varmat, lag.max = 10, type = "const")
VARselect(varmat, lag.max = 10, type = "const")
MTS::VARorder(data_dif)
VARselect(varmat, lag.max = 10, type = "const")
varfit <- vars::VAR(varmat, p = 2, type = "const")
summary(varfit)
summary(varfit)
names(data_dif)
summary(varfit)
varfit <- vars::VAR(varmat, p = 2, type = "const")
summary(varfit)
varfit_MTS <- MTS::VAR(cbind(data_dif), p = 2)
varfit_MTS_ref <- refVAR(varfit_MTS, thres = 1.96)
varfit_MTS <- MTS::VAR(cbind(data_dif), p = 2)
varfit_MTS_ref <- refVAR(varfit_MTS, thres = 1.96)
varfit_MTS$aic;  varfit_MTS$bic;
varfit_MTS_ref$aic;  varfit_MTS_ref$bic;
plot(varfit)
p <- 2;  k <- 3;
mq(varfit_MTS$residuals, adj = p * k^2)
