gasf <- read.csv("GasFurnace.txt", sep = "\t", header = F)
colnames(gasf) <- c("input", "output")
head(gasf)
gasf <- read.csv("GasFurnace.txt", sep = "\t", header = F)
head(gasf)
gasf <- read.csv("GasFurnace.txt", sep = "\t", header = F, row.names = F)
gasf <- read.csv("GasFurnace.txt", sep = "\t", header = F)
str(gasf)
gasf <- read.csv("GasFurnace.txt", sep = "\t", header = F, colClasses = "numeric")
colnames(gasf) <- c("input", "output")
gasf <- read.csv("GasFurnace.txt", sep = " ", header = F, colClasses = "numeric")
colnames(gasf) <- c("input", "output")
head(gasf)
gasf <- read.csv("GasFurnace.txt", sep = " ", header = F, colClasses = "numeric")
colnames(gasf) <- c("input", "output")
head(gasf)
gasf <- read.table("GasFurnace.txt", sep = "", header = F, colClasses = "numeric")
colnames(gasf) <- c("input", "output")
head(gasf)
MTS::MTSplot(gasf)
MTS::MTSplot(gasf)
lines(smooth.spline(time(gasf$inut), gasf$input, spar = 0.5), lwd = 2, col = 4)
par(mfrow=c(1,1))
plot(gasf, type = "l")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$inut), gasf$input, spar = 0.5), lwd = 2, col = 4)
par(mfrow=c(1,1))
plot(gasf$input, type = "l")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
abline(h = seq(0, 300, by = 10), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
abline(h = seq(0, 300, by = 10), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
abline(v = seq(0, 300, by = 10), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
abline(v = seq(0, 300, by = 10), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
graphics.off()
par(mfrow = c(3, 1))
astsa::acf2(gasf$input, lag = 48, main = "Input")
astsa::acf2(gasf$input, max.lag = 48, main = "Input")
astsa::acf2(gasf$input, max.lag = 20, main = "Input")
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
apply(gasf, 2, forecast::ndiffs)
par(mfrow=c(2,1))
plot(diff(gasf$input), type = "l")
plot(diff(gasf$output), type = "l")
plot(diff(gasf$input), type = "l")
lines(smooth.spline(time(diff(gasf$input)), diff(gasf$input), spar = 0.5), lwd = 2, col = 4)
par(mfrow=c(2,1))
plot(diff(gasf$input), type = "l")
lines(smooth.spline(time(diff(gasf$input)), diff(gasf$input), spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(diff(gasf$output), type = "l")
lines(smooth.spline(time(diff(gasf$output)), diff(gasf$output), spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
par(mfrow=c(2,1))
plot(diff(gasf$input), type = "l")
lines(smooth.spline(time(diff(gasf$input)), diff(gasf$input), spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(diff(gasf$input)), diff(gasf$input), spar = 1), lwd = 2, col = 4)
plot(diff(gasf$output), type = "l")
lines(smooth.spline(time(diff(gasf$output)), diff(gasf$output), spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(diff(gasf$output)), diff(gasf$output), spar = 1), lwd = 2, col = 4)
mean(diff(gas$input))
diff(gas$input)
mean(diff(gasf$input))
mean(diff(gasf$output))
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
mean(diff(gasf$input))
mean(diff(gasf$output))
astsa::acf2(diff(gasf$input), max.lag = 20, main = "Input")
astsa::acf2(gasf$input, max.lag = 20, main = "Input")
astsa::acf2(diff(gasf$input), max.lag = 20, main = "Input")
astsa::sarima(3, 1, 2, data = gasf$input)
astsa::sarima(p = 3, d = 1, q = 2, data = gasf$input)
library(astsa)
help(sarima)
astsa::sarima(p = 3, d = 1, q = 2, xdata = gasf$input)
astsa::acf2(diff(gasf$input), max.lag = 20, main = "Input")
astsa::sarima(p = 3, d = 1, q = 8, xdata = gasf$input)
astsa::acf2(diff(gasf$input), max.lag = 20, main = "Input")
astsa::sarima(p = 2, d = 1, q = 2, xdata = gasf$input)
astsa::sarima(p = 2, d = 1, q = 2, xdata = gasf$input, constant = FALSE)
astsa::sarima(p = 2, d = 1, q = 2, xdata = gasf$input, no.constant = TRUE)
astsa::sarima(p = 2, d = 1, q = 2, xdata = gasf$input)
graphics.off()
astsa::acf2(gasf$input, max.lag = 20, main = "Input")
astsa::acf2(gasf$output, max.lag = 20, main = "Output")
astsa::acf2(diff(gasf$output), max.lag = 20, main = "Input")
astsa::acf2(diff(gasf$output), max.lag = 20, main = "output")
astsa::acf2(diff(gasf$output), max.lag = 20, main = "output")
astsa::acf2(gasf$output, max.lag = 20, main = "Output")
astsa::acf2(diff(gasf$output), max.lag = 20, main = "output")
astsa::sarima(p = 3, d = 1, q = 3, xdata = gasf$output)
astsa::acf2(gasf, max.lag = 20, main = "SOI vs Recruitment", ylab = "CCF")
astsa::acf2(gasf, max.lag = 10, main = "SOI vs Recruitment", ylab = "CCF")
astsa::acf2(gasf, lag.max = 10, main = "SOI vs Recruitment", ylab = "CCF")
astsa::acf2(gasf, main = "SOI vs Recruitment", ylab = "CCF")
astsa::ccf2(gasf, main = "SOI vs Recruitment", ylab = "CCF")
astsa::acf(gasf, main = "SOI vs Recruitment", ylab = "CCF")
astsa::acf2(gasf, main = "SOI vs Recruitment", ylab = "CCF")
forecast::Ccf(input, output, lag = 24, main = "Sqrt Precipitation vs. Logged Inflow")
input <- gasf$input
output <- gasf$output
forecast::Ccf(input, output, lag = 24, main = "Sqrt Precipitation vs. Logged Inflow")
input <- diff(gasf$input)
output <- diff(gasf$output)
forecast::Ccf(input, output, lag = 24, main = "Sqrt Precipitation vs. Logged Inflow")
forecast::Ccf(input, output, lag = 24)
forecast::Ccf(output, input, lag = 24)
ccf(input, output, lag = 20)
par(mfrow=c(2,1))
plot(gasf$input, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$input), gasf$input, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$input), gasf$input, spar = 1), lwd = 2, col = 4)
plot(gasf$output, type = "l")
abline(v = seq(0, 300, by = 25), lty = 2, col = "gray")
# spar = 0.5 to emphasize the El Nino cycle, and spar = 1 to emphasize the trend
lines(smooth.spline(time(gasf$output), gasf$output, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(gasf$output), gasf$output, spar = 1), lwd = 2, col = 4)
ccf(input, output, lag = 20)
ccf(output, input, lag = 20)
input <- gasf$input
output <- gasf$output
ccf(output, input, lag = 20)
astsa::lag2.plot(output, input, max.lag = 20)
nrow(gasfurnace)
nrow(gasfurnace)
nrow(gasf)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 10, threshold = 0.1)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 20, threshold = 0.1)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 20, threshold = 0.01)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 20, threshold = 0.1)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.1)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.05)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.01)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.05)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.01)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.001)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.01)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.01)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.01)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
par(mfrow = c(1,1))
ccf(output, input, lag = 20)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
gasf_t <- ts.intersect(input = input, o5 = stats::lag(output, -5),
o4 = stats::lag(output, -4),
o3 = stats::lag(soi, -3))
gasf_t <- ts.intersect(input = input, o5 = stats::lag(output, -5),
o4 = stats::lag(output, -4),
o3 = stats::lag(output, -3))
stats::lag(output, -5)
gasf_t <- ts.intersect(input = input, o5 = stats::lag(output, -5),
o4 = stats::lag(output, -4),
o3 = stats::lag(output, -3))
input
ts.intersect(input = input, o5 = stats::lag(output, -5),
o4 = stats::lag(output, -4),
o3 = stats::lag(output, -3))
gasf_t <- ts.intersect(input = stats::lag(input, 0), o5 = stats::lag(output, -5),
o4 = stats::lag(output, -4),
o3 = stats::lag(output, -3))
gasf_t
( u <- lm(input ~ o3 + o5+ o4, data = gasf_t, na.action = NULL) )
summary(u)
gasf_t <- ts.intersect(output = stats::lag(output, 0),
i5 = stats::lag(input, 5),
i4 = stats::lag(input, 4),
i3 = stats::lag(input, 3),
i6 = stats::lag(input, 6))
( u <- lm(output ~ i3 + i4 + i5 + i6, data = gasf_t, na.action = NULL) )
summary(u)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
mod_rtos <- astsa::LagReg(input = output, output = input, L = 15, M = 40, inverse = TRUE,  threshold = 0.01)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
gasf_t <- ts.intersect(output = stats::lag(output, 0),
i5 = stats::lag(input, -5),
i4 = stats::lag(input, -4),
i3 = stats::lag(input, -3),
i6 = stats::lag(input, -6))
( u <- lm(output ~ i3 + i4 + i5 + i6, data = gasf_t, na.action = NULL) )
summary(u)
input
head(input)
stats::lag(input,-5)
head(gasf_t)
coef(u)
acf2(resid(u))
gasf_t <- ts.intersect(output = stats::lag(output, 0),
i3 = stats::lag(input, -3),
i4 = stats::lag(input, -4),
i5 = stats::lag(input, -5),
i6 = stats::lag(input, -6))
( u <- lm(output ~ i3 + i4 + i5 + i6, data = gasf_t, na.action = NULL) )
summary(u)
ccf(output, input, lag = 20)
mod_stor <- astsa::LagReg(input = input, output = output, L = 15, M = 40, threshold = 0.05)
( u <- lm(output ~ i3 + i6, data = gasf_t, na.action = NULL) )
summary(u)
( u <- lm(output ~ i3 + i4 + i6, data = gasf_t, na.action = NULL) )
summary(u)
( u <- lm(output ~ i3 + i5 + i6, data = gasf_t, na.action = NULL) )
summary(u)
( u <- lm(output ~ i3 + i6, data = gasf_t, na.action = NULL) )
summary(u)
coef(u)
acf2(resid(u))
sarima(gasf_t[,1], 2, 0, 1, xreg = gasf_t[,c(2,5)])
sarima(gasf_t[,1], 2, 1, 1, xreg = gasf_t[,c(2,5)])
sarima(gasf_t[,1], 2, 0, 1, xreg = gasf_t[,c(2,5)])
sarima(gasf_t[,1], 2, 0, 6, xreg = gasf_t[,c(2,5)])
acf2(resid(u))
sarima(gasf_t[,1], 2, 0, 5, xreg = gasf_t[,c(2,5)])
input <- gasf$input
output <- gasf$output
length(input)
nextn(length(input))
par(mfrow=c(2,1))
input.per <- astsa::mvspec(input, log = "no")
output.per <- astsa::mvspec(output, log = "no")
input <- diff(gasf$input)
output <- diff(gasf$output)
par(mfrow=c(2,1))
input.per <- astsa::mvspec(input, log = "no")
output.per <- astsa::mvspec(output, log = "no")
L <- 9
m <- (L - 1) / 2
par(mfrow=c(2,1))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
input.ave <- astsa::mvspec(input, kernel("daniell", m), log = "no")
output.ave <- astsa::mvspec(output, kernel("daniell", m), log = "no")
L <- 15
m <- (L - 1) / 2
# ----------
par(mfrow=c(2,1))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
input.ave <- astsa::mvspec(input, kernel("daniell", m), log = "no")
output.ave <- astsa::mvspec(output, kernel("daniell", m), log = "no")
input <- gasf$input
output <- gasf$output
par(mfrow=c(2,1))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
input.ave <- astsa::mvspec(input, kernel("daniell", m), log = "no")
output.ave <- astsa::mvspec(output, kernel("daniell", m), log = "no")
( ker <- kernel("modified.daniell", c(5,5)) )
plot(ker)
graphics.off()
par(mfrow=c(2,1))
input.smo <- astsa::mvspec(input, kernel = ker, taper = 0.1, log = "no")
output.smo <- astsa::mvspec(output, kernel = ker, taper = 0.1, log = "no")
input <- diff(gasf$input)
output <- diff(gasf$output)
input <- gasf$input
output <- gasf$output
( ker <- kernel("modified.daniell", c(5,5)) )
plot(ker)
graphics.off()
par(mfrow=c(2,1))
input.smo <- astsa::mvspec(input, kernel = ker, taper = 0.1, log = "no")
output.smo <- astsa::mvspec(output, kernel = ker, taper = 0.1, log = "no")
input <- diff(gasf$input)
output <- diff(gasf$output)
( ker <- kernel("modified.daniell", c(5,5)) )
plot(ker)
graphics.off()
par(mfrow=c(2,1))
input.smo <- astsa::mvspec(input, kernel = ker, taper = 0.1, log = "no")
output.smo <- astsa::mvspec(output, kernel = ker, taper = 0.1, log = "no")
# L <- 9
L <- 19
( m <- (L - 1) / 2 )
sr <- mvspec(cbind(input, output), kernel("daniell", m), plot=FALSE)
sr$df
( f <- qf(.999, 2, sr$df -2) )
( C <- f / (L - 1 + f) )
par(mfrow = c(2,1))
plot(sr)
plot(sr, plot.type = "coh", ci.lty = 2)
abline(h = C)
sarima(gasf_t[,1], 2, 0, 5, xreg = gasf_t[,c(2,5)])
arx <- sarima(gasf_t[,1], 2, 0, 5, xreg = gasf_t[,c(2,5)])
pred <- input + resid(arx$fit)
par(mfrow = c(1,1))
pred <- output + resid(arx$fit)
par(mfrow = c(1,1))
ts.plot(pred, output, col = c('skyblue', "black"), lwd = c(7,2))
pred <- output + resid(arx$fit)
output
output[-c(1:6)]
pred <- output[-c(1:6)] + resid(arx$fit)
output[-c(1:6)]
resid(arx$fit)
pred <- output[-c(1:5)] + resid(arx$fit)
par(mfrow = c(1,1))
ts.plot(pred, output, col = c('skyblue', "black"), lwd = c(7,2))
output[-c(1:5)]
resid(arx$fit)
output[-c(1:5)] + resid(arx$fit)
pred <- output[-c(1:5)] + resid(arx$fit)
par(mfrow = c(1,1))
ts.plot(pred, output[-c(1:5)], col = c('skyblue', "black"), lwd = c(7,2))
input <- gasf$input
output <- gasf$output
astsa::SigExtract(input, L = 15, M = 20, max.freq = 0.05)
astsa::SigExtract(diff(input), L = 15, M = 20, max.freq = 0.05)
graphics.off()
astsa::SigExtract(diff(input), L = 15, M = 20, max.freq = 0.05)
astsa::SigExtract(diff(input), L = 15, M = 50, max.freq = 0.001)
astsa::SigExtract(diff(input), L = 15, M = 50)
help(sigExtract)
library(astsa)
help("SigExtract")
astsa::SigExtract(diff(input), L = 9, M = 50)
help(sigE)
devtools::install_github("benubah/control")
library(control)
num = rbind(c(0,1,1), c(1,0,1))
den = rbind(c(1,3,2))
tf(num, den)
res <- impulse(tf(1, c(1,2,1)))
res$y
res$t
impulse(tf(1, c(1,2,1)), seq(0, 10, 0.1))
impulseplot(tf(1, c(1,2,1)))
tmp <- astsa::SigExtract(diff(input), L = 9, M = 50)
tmp <-
tmp
names(tmp)
tmp <- astsa::SigExtract(diff(input), L = 9, M = 50)
tmp
gasf
n <- nextn(nrow(gasf))
Y.fft <- mvfft(as.ts(gasf))/sqrt(n)
head(Y.fft)
beamd
ssr <- N * Re(Y.fft[,"output"] * Conj(Y.fft[,"output"]))
L <- 9
fdr <- 0.001
N <- 2
ssr <- N * Re(Y.fft[,"output"] * Conj(Y.fft[,"output"]))
ssr
plot(Fr[nFr], ssr[nFr], type = "l")
Fr <- 0:(n-1)/n
# number of freqs to plot
nFr <- 1:200
plot(Fr[nFr], ssr[nFr], type = "l")
L <- 15
fdr <- 0.001
N <- 2
# raw signal spectrum
ssr <- N * Re(Y.fft[,"output"] * Conj(Y.fft[,"output"]))
# fundamental frequencies
Fr <- 0:(n-1)/n
# number of freqs to plot
nFr <- 1:200
plot(Fr[nFr], ssr[nFr], type = "l")
plot(Fr[nFr], log10(ssr[nFr]), type = "l")
plot(Fr[nFr], log20(ssr[nFr]), type = "l")
plot(Fr[nFr], log10(ssr[nFr]/2), type = "l")
L <- 30
fdr <- 0.001
N <- 2
# raw signal spectrum
ssr <- N * Re(Y.fft[,"output"] * Conj(Y.fft[,"output"]))
# fundamental frequencies
Fr <- 0:(n-1)/n
# number of freqs to plot
nFr <- 1:200
plot(Fr[nFr], log10(ssr[nFr]/2), type = "l")
L <- 10
fdr <- 0.001
N <- 2
# raw signal spectrum
ssr <- N * Re(Y.fft[,"output"] * Conj(Y.fft[,"output"]))
# fundamental frequencies
Fr <- 0:(n-1)/n
# number of freqs to plot
nFr <- 1:200
plot(Fr[nFr], log10(ssr[nFr]/2), type = "l")
SSR <- filter(ssr, sides = 2, filter = rep(1/L, L), circular = TRUE)
SSR <- stats::filter(ssr, sides = 2, filter = rep(1/L, L), circular = TRUE)
plot(Fr[nFr], log10(SSR[nFr]/2), type = "l")
plot(Fr[nFr], log10(SSR[nFr]), type = "l")
ar <- array(0, dim = c(3,3,2))
ar[, , 1] <- matrix(c(0.4, 0, 0.3,
0.2, -0.1, -0.5,
0.3, 0.1, 0), nrow = 3, ncol = 3, byrow = TRUE)
ar[, , 2] <- matrix(c(0, -0.3, 0.5,
0.7, -0.4, 1,
0, -0.5, 0.3), nrow = 3, ncol = 3, byrow = TRUE)
x <- matrix(rnorm(200*3), nrow = 200, ncol = 3)
y <- mfilter(x, ar, "recursive")
x
y
y
x <- matrix(rnorm(200*3), nrow = 200, ncol = 3)
y <- mfilter(x, ar, "recursive")
library(timsac)
help(mfilter)
y <- mfilter(x, ar, "recursive")
sglfre(y, lag = 20, invar = 1, outvar = 2)
x
y
head(gasf)
sglfre(gasf, lag = NULL, invar = 1, outvar = 2)
sglfre(as.matrix(gasf), lag = NULL, invar = 1, outvar = 2)
plot(output$gain)
output <- sglfre(as.matrix(gasf), lag = NULL, invar = 1, outvar = 2)
output$gain
plot(output$gain, type = "l")
par(mfrow = c(3,1))
plot(output$inspec, type = "l", main = "Spectrum: Input")
plot(output$outspec, type = "l", main = "Spectrum: Output")
plot(output$gain, type = "l", main = "Gain")
graphics.off()
par(mfrow = c(3,1))
plot(output$inspec, type = "l", main = "Spectrum: Input")
plot(output$outspec, type = "l", main = "Spectrum: Output")
plot(output$gain, type = "l", main = "Gain")
graphics.off()
par(mfrow = c(1,2))
plot(output$gain, type = "l", main = "Gain")
plot(output$phase, type = "l", main = "Phase")
names(output)
plot(output$coh, type = "l", main = "Coherence")
plot(output$phase ~ output$freqr, type = "l", main = "Phase")
plot(output$freqi ~ output$freqr, type = "l", main = "Phase")
plot(output$phase ~ output$freqr, type = "l", main = "Phase")
plot(output$phase, type = "l", main = "Phase")
output$phase
gasf$input2 <- -1 * gasf$input
gasf
output <- sglfre(as.matrix(gasf), lag = NULL, invar = 3, outvar = 2)
graphics.off()
par(mfrow = c(2,2))
plot(output$gain, type = "l", main = "Gain")
plot(output$phase, type = "l", main = "Phase")
plot(output$coh, type = "l", main = "Coherence")
output <- sglfre(as.matrix(gasf), lag = NULL, invar = 1, outvar = 2)
graphics.off()
par(mfrow = c(2,2))
plot(output$gain, type = "l", main = "Gain")
plot(output$phase, type = "l", main = "Phase")
plot(output$coh, type = "l", main = "Coherence")
output
nrow(gasf)
2 * sqrt(296)
-3.8
-3.8/10
plot(output$freqi[1:10] ~ output$freqr[1:10], type = "l", main = "Phase")
