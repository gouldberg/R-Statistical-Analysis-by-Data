plot(lipfd5p, Lfd=4, )
graphics.off()
op <- par(mfrow=c(4,4), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12,        main="Lip Position", cex=1.2)
plot(lipfd3.12, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3.12, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5,        main="Lip Position", cex=1.2)
plot(lipfd5, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p,        main="Lip Position", cex=1.2)
plot(lipfd5p, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5p, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p, Lfd=4)
graphics.off()
op <- par(mfrow=c(4,4), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
graphics.off()
op <- par(mfrow=c(4,4), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12,        main="Lip Position", cex=1.2)
plot(lipfd3.12, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3.12, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5,        main="Lip Position", cex=1.2)
plot(lipfd5, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p,        main="Lip Position", cex=1.2)
plot(lipfd5p, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5p, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p, Lfd=4)
graphics.off()
op <- par(mfrow=c(4,4), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12,        main="Lip Position", cex=1.2)
graphics.off()
op <- par(mfrow=c(4,3), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12,        main="Lip Position", cex=1.2)
plot(lipfd3.12, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3.12, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5,        main="Lip Position", cex=1.2)
plot(lipfd5, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
graphics.off()
op <- par(mfrow=c(4,3), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12,        main="Lip Position", cex=1.2)
plot(lipfd3.12, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3.12, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5,        main="Lip Position", cex=1.2)
plot(lipfd5, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p,        main="Lip Position", cex=1.2)
plot(lipfd5p, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5p, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p, Lfd=4)
lambda <- 1e-12
# lipbasis <- create.bspline.basis(range(liptime), 31, 6)
# lipfd5 <- smooth.basisPar(liptime, lip, lipbasis, lambda = lambda)$fd
lipfd5 <- smooth.basisPar(liptime, lip, 6, int2Lfd(2), lambda = lambda)$fd
names(lipfd5$fdnames) <- c("time(seconds)", "replications", "mm")
op <- par(mfrow=c(2,2), mar=c(5,5,4,2), pty="m", ask=FALSE)
plot(lipfd5,        main="Lip Position", cex=1.2)
plot(lipfd5, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
lambda <- 1e-3
lipfd3 <- smooth.basisPar(argvals = liptime, y = lip, lambda = lambda)$fd
names(lipfd3$fdnames) <- c("time(seconds)", "replications", "mm")
lambda <- 1e-12
lipfd3.12 <- smooth.basisPar(liptime, lip, lambda = lambda)$fd
names(lipfd3.12$fdnames) <- c("time(seconds)", "replications", "mm")
lambda <- 1e-12
lipfd5 <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(2), lambda = lambda)$fd
names(lipfd5$fdnames) <- c("time(seconds)", "replications", "mm")
lambda <- 1e-12
lipfd5p <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda = lambda)$fd
names(lipfd5p$fdnames) <- c("time(seconds)", "replications", "mm")
# ----------
graphics.off()
op <- par(mfrow=c(4,3), mar=c(2,2,2,2), pty="m", ask=FALSE)
plot(lipfd3,        main="Lip Position", cex=1.2)
plot(lipfd3, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd3.12,        main="Lip Position", cex=1.2)
plot(lipfd3.12, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd3.12, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5,        main="Lip Position", cex=1.2)
plot(lipfd5, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p,        main="Lip Position", cex=1.2)
plot(lipfd5p, Lfd=1, ylab="mm / sec", main="Lip Velocity", cex=1.2)
plot(lipfd5p, Lfd=2, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5, Lfd=4, ylab="mm / sec / sec", main="Lip Acceleration", cex=1.2)
plot(lipfd5p, Lfd=4)
plotfit.fd(lip, liptime, lipfd)
plotfit.fd(lip, liptime, lipfd, residual=TRUE, type='b',
sortwrd=TRUE)
par(mfrow=c(2,2))
plotfit.fd(lip, liptime, lipfd5p)
plotfit.fd(lip, liptime, lipfd5p, residual=TRUE, type='b', sortwrd=TRUE)
ipmeanmarks <- apply(lipmarks,2,mean)
wnbasis <- 6
wnorder <- 4
wbreaks <- c(0, lipmeanmarks, 0.35)
#warpbasis <- create.bspline.basis(liprange, wnbasis, wnorder, wbreaks);
#warpbasis <- create.bspline.basis(range(lip), wnbasis, wnorder, wbreaks);
warpbasis <- create.bspline.basis(nbasis=wnbasis, norder=wnorder,
breaks=wbreaks);
fd(basisobj=warpbasis)
WfdPar    <- fdPar(fd(basisobj=warpbasis), 2, 1e-4)
WfdPar.    <- fdPar(fd(matrix(0,wnbasis,1), warpbasis), 2, 1e-4)
all.equal(WfdPar, WfdPar.)
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
#  plot unregistered and registered curves
par(mfrow=c(1,2), pty="s")
plot(lipfd, main="Unregistered")
lines.fd(lipmeanfd, lty=2)
abline(v=lipmeanmarks,lty=2)
plot(lipregfd, main="Registered")
lines.fd(lipmeanfd, lty=2)
abline(v=lipmeanmarks,lty=2)
wnbasis <- 6
wnorder <- 4
wbreaks <- c(0, lipmeanmarks, 0.35)
#warpbasis <- create.bspline.basis(liprange, wnbasis, wnorder, wbreaks);
#warpbasis <- create.bspline.basis(range(lip), wnbasis, wnorder, wbreaks);
warpbasis <- create.bspline.basis(nbasis=wnbasis, norder=wnorder,
breaks=wbreaks);
lipmeanmarks <- apply(lipmarks, 2, mean)
wnbasis <- 6
wnorder <- 4
wbreaks <- c(0, lipmeanmarks, 0.35)
warpbasis <- create.bspline.basis(nbasis=wnbasis, norder=wnorder,
breaks=wbreaks);
fd(basisobj=warpbasis)
WfdPar    <- fdPar(fd(basisobj=warpbasis), 2, 1e-4)
WfdPar.    <- fdPar(fd(matrix(0,wnbasis,1), warpbasis), 2, 1e-4)
all.equal(WfdPar, WfdPar.)
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
par(mfrow=c(1,2), pty="s")
plot(lipfd, main="Unregistered")
lines.fd(lipmeanfd, lty=2)
abline(v=lipmeanmarks,lty=2)
plot(lipregfd, main="Registered")
lines.fd(lipmeanfd, lty=2)
abline(v=lipmeanmarks,lty=2)
wnbasis <- 6
wnorder <- 4
wbreaks <- c(0, lipmeanmarks, 0.35)
# warpbasis <- create.bspline.basis(liprange, wnbasis, wnorder, wbreaks)
# warpbasis <- create.bspline.basis(range(lip), wnbasis, wnorder, wbreaks)
warpbasis <- create.bspline.basis(nbasis=wnbasis, norder=wnorder, breaks=wbreaks)
fd(basisobj = warpbasis)
all.equal(WfdPar, WfdPar.)
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
lines.fd(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
plot(lipregfd, main="Registered")
lines.fd(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
# ----------
# plot unregistered and registered curves
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
lines.fd(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
plot(lipregfd, main="Registered")
lines.fd(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
lines.fd(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
help@(lines.fd)
help(lines.fd)
lines.fd(lipmeanfd, lty = 2)
plot(lipfd, main = "Unregistered")
lines.fd(lipmeanfd, lty = 2)
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
fda::lines.fd(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
help(lines.fd)
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
plot(lipregfd, main="Registered")
lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
lipmeanfd <- mean(eval.fd(lipreglist))
lipreglist
eval.fd(lipreglist)
WfdPar    <- fdPar(fd(basisobj = warpbasis), 2, 1e-4)
mean(WfdPar)
fd(basisobj = warpbasis)
predict(fd(basisobj = warpbasis))
abline(v = lipmeanmarks, lty = 2)
graphics.off()
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
# lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
plot(lipregfd, main="Registered")
# lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
par(mfrow=c(1,2), pty="s")
plot(lipwarpfd, href=FALSE, main="Warping Functions")
abline(0,1,lty=2)
hmat <- eval.fd(liptime, lipwarpfd)
defmat <- hmat - outer(liptime,rep(1,20))
matplot(liptime,defmat,type="l",lty=1,
xlab="Normalized time", ylab="Warped Normalized time",
main="Deformation Functions")
abline(h=0,lty=2)
par(mfrow=c(1,2), pty="s")
plot(lipwarpfd, href=FALSE, main="Warping Functions")
abline(0,1,lty=2)
hmat <- eval.fd(liptime, lipwarpfd)
defmat <- hmat - outer(liptime,rep(1,20))
matplot(liptime,defmat,type="l",lty=1,
xlab="Normalized time", ylab="Warped Normalized time",
main="Deformation Functions")
abline(h=0,lty=2)
par(mfrow=c(1,1),pty="m")
lipmarks <- matrix(0,20,nmarks)
index <- 1:20
for (i in index) {
plot(liptime, lipmat[,i], xlab="", ylab="", main=paste("Curve",i))
indexi <- identify(liptime, lipmat[,i], n=nmarks)
lipmarks[i,] <- liptime[indexi]
}
nmarks = 3
lipmarks <- matrix(0,20,nmarks)
index <- 1:20
for (i in index) {
plot(liptime, lipmat[,i], xlab="", ylab="", main=paste("Curve",i))
indexi <- identify(liptime, lipmat[,i], n=nmarks)
lipmarks[i,] <- liptime[indexi]
}
par(mfrow=c(1,1),pty="m")
nmarks = 2
lipmarks <- matrix(0,20,nmarks)
index <- 1:20
for (i in index) {
plot(liptime, lip[,i], xlab="", ylab="", main=paste("Curve",i))
indexi <- identify(liptime, lipmat[,i], n=nmarks)
lipmarks[i,] <- liptime[indexi]
}
par(mfrow=c(1,1),pty="m")
nmarks = 2
lipmarks <- matrix(0,20,nmarks)
index <- 1:20
for (i in index) {
plot(liptime, lip[,i], xlab="", ylab="", main=paste("Curve",i))
indexi <- identify(liptime, lip[,i], n=nmarks)
lipmarks[i,] <- liptime[indexi]
}
lipmarks
data(lip, package = "fda")
dim(lip)
head(lip)
liptime
lipmarks
par(mfrow=c(1,2), pty="s")
plot(lipwarpfd, href=FALSE, main="Warping Functions")
abline(0, 1, lty=2)
hmat <- eval.fd(liptime, lipwarpfd)
defmat <- hmat - outer(liptime, rep(1,20))
matplot(liptime, defmat, type="l", lty=1,
xlab="Normalized time",  ylab="Warped Normalized time",
main="Deformation Functions")
abline(h=0, lty=2)
plot(lipwarpfd, href=TRUE, main="Warping Functions")
abline(0, 1, lty=2)
lambda    <- 1e-6
pcafdPar  <- fdPar(lipbasis, 2, lambda)
lippca.fd <- pca.fd(lipfd, nharm=3, pcafdPar)
par(mfrow=c(1,1),pty="m")
plot.pca.fd(lippca.fd)
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
lipeigvals <- lippca.fd[[2]]
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
lambda    <- 1e-6
pcafdPar  <- fdPar(lipbasis, 2, lambda)
lippca.fd <- pca.fd(lipfd, nharm=3, pcafdPar)
par(mfrow=c(1,1),pty="m")
plot.pca.fd(lippca.fd)
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
lipbasis
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//lip2")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  lip2
#   - The data of the movement of lips during speech production
# ------------------------------------------------------------------------------
data(lip, package = "fda")
dim(lip)
head(lip)
# -----------
liptime
lipmarks
lipbasis
lipmarks
wnbasis <- 6
wnorder <- 4
wbreaks <- c(0, lipmeanmarks, 0.35)
# warpbasis <- create.bspline.basis(liprange, wnbasis, wnorder, wbreaks)
# warpbasis <- create.bspline.basis(range(lip), wnbasis, wnorder, wbreaks)
warpbasis <- create.bspline.basis(nbasis = wnbasis, norder = wnorder, breaks = wbreaks)
fd(basisobj = warpbasis)
WfdPar    <- fdPar(fd(basisobj = warpbasis), 2, 1e-4)
# WfdPar.    <- fdPar(fd(matrix(0, wnbasis, 1), warpbasis), 2, 1e-4)
# all.equal(WfdPar, WfdPar.)
# ----------
lambda <- 1e-12
lipfd <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda = lambda)$fd
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
graphics.off()
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
# lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
plot(lipregfd, main="Registered")
# lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
# ------------------------------------------------------------------------------
# plot warping functions and deformations
# ------------------------------------------------------------------------------
par(mfrow=c(1,2), pty="s")
# warping function
plot(lipwarpfd, href=FALSE, main="Warping Functions")
abline(0, 1, lty=2)
# warping deformation function
hmat <- eval.fd(liptime, lipwarpfd)
defmat <- hmat - outer(liptime, rep(1,20))
matplot(liptime, defmat, type="l", lty=1,
xlab="Normalized time",  ylab="Warped Normalized time",
main="Deformation Functions")
abline(h = 0, lty = 2)
lambda <- 1e-12
lipfd <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda = lambda)$fd
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
rm(list=ls())
setwd("//media//kswada//MyFiles//R//lip2")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  lip2
#   - The data of the movement of lips during speech production
# ------------------------------------------------------------------------------
data(lip, package = "fda")
dim(lip)
head(lip)
# -----------
liptime
lipmarks
lipmeanmarks <- apply(lipmarks, 2, mean)
wnbasis <- 6
wnorder <- 4
wbreaks <- c(0, lipmeanmarks, 0.35)
# warpbasis <- create.bspline.basis(range(lip), wnbasis, wnorder, wbreaks)
warpbasis <- create.bspline.basis(nbasis = wnbasis, norder = wnorder, breaks = wbreaks)
fd(basisobj = warpbasis)
WfdPar    <- fdPar(fd(basisobj = warpbasis), 2, 1e-4)
# WfdPar.    <- fdPar(fd(matrix(0, wnbasis, 1), warpbasis), 2, 1e-4)
# all.equal(WfdPar, WfdPar.)
lambda <- 1e-12
lipfd <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda = lambda)$fd
lipreglist <- landmarkreg(lipfd, as.matrix(lipmarks), lipmeanmarks, WfdPar)
lipregfd   <- lipreglist$regfd
lipwarpfd  <- lipreglist$warpfd
graphics.off()
par(mfrow=c(1,2), pty="s")
plot(lipfd, main = "Unregistered")
# lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
plot(lipregfd, main="Registered")
# lines(lipmeanfd, lty = 2)
abline(v = lipmeanmarks, lty = 2)
par(mfrow=c(1,2), pty="s")
# warping function
plot(lipwarpfd, href=FALSE, main="Warping Functions")
abline(0, 1, lty=2)
# warping deformation function
hmat <- eval.fd(liptime, lipwarpfd)
defmat <- hmat - outer(liptime, rep(1,20))
matplot(liptime, defmat, type="l", lty=1,
xlab="Normalized time",  ylab="Warped Normalized time",
main="Deformation Functions")
abline(h = 0, lty = 2)
lipbasis
pcafdPar  <- fdPar(lipfd, 2, lambda)
lippca.fd <- pca.fd(lipfd, nharm=3, pcafdPar)
par(mfrow=c(1,1),pty="m")
plot.pca.fd(lippca.fd)
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
par(mfrow=c(1,1),pty="m")
plot.pca.fd(lippca.fd)
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
lipeigvals <- lippca.fd[[2]]
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
lambda <- 1e-12
lipfd <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda = lambda)$fd
pcafdPar  <- fdPar(lipfd, 2, lambda)
lippca.fd <- pca.fd(lipfd, nharm=3, pcafdPar)
par(mfrow=c(1,1),pty="m")
plot.pca.fd(lippca.fd)
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
# lambda <-1e-6
lambda <- 1e-12
lipfd <- smooth.basisPar(liptime, lip, 6, Lfdobj=int2Lfd(4), lambda = lambda)$fd
pcafdPar  <- fdPar(lipfd, 2, lambda)
par(mfrow=c(1,1),pty="m")
plot.pca.fd(lippca.fd)
par(mfrow=c(2,2),pty="m")
plot.pca.fd(lippca.fd)
graphics.off()
par(mfrow=c(2,2), pty="m")
plot.pca.fd(lippca.fd)
lipeigvals <- lippca.fd[[2]]
plot(1:19, log10(lipeigvals[1:19]), type="b",
xlab="Eigenvalue Number", ylab="", main="Log10 Eigenvalues")
liprange = range(liptime)
pdabasisfd <- create.bspline.basis(liprange, nbasis=21)
betafdPar  <- fdPar(pdabasisfd)
#  set up list of functional parameter objects for weight fns.
bwtlist = vector("list", 2)
bwtlist[[1]] <- betafdPar
bwtlist[[2]] <- betafdPar
xfdlist <- list(lipfd)
pdaList <- pda.fd(xfdlist, bwtlist)
#  plot weight functions
bwtestlist <- pdaList$bwtlist
par(mfrow=c(2,1),pty="m")
for (j in 1:2) {
bfdParj <- bwtestlist[[j]]
bvals = eval.fd(liptime,bwtestlist[[j]]$fd)
plot(liptime,bvals,type='l')
}
liprange = range(liptime)
liprange = range(liptime)
labmda = 1e-12
pdabasisfd <- create.bspline.basis(liprange, nbasis=21, lambda = lambda)
pdabasisfd <- create.bspline.basis(liprange, nbasis=21)
betafdPar  <- fdPar(pdabasisfd)
bwtlist = vector("list", 2)
bwtlist[[1]] <- betafdPar
bwtlist[[2]] <- betafdPar
xfdlist <- list(lipfd)
pdaList <- pda.fd(xfdlist, bwtlist)
pdaList <- pda.fd(xfdlist, bwtlist, lambda = lambda)
help(pda.fd)
liprange = range(liptime)
labmda = 1e-12
pdabasisfd <- create.bspline.basis(liprange, nbasis=21)
betafdPar  <- fdPar(pdabasisfd)
liprange = range(liptime)
labmda = 1e-12
pdabasisfd <- create.bspline.basis(liprange, nbasis=21)
betafdPar  <- fdPar(pdabasisfd)
bwtlist = vector("list", 2)
bwtlist[[1]] <- betafdPar
bwtlist[[1]] <- betafdPar
bwtlist[[2]] <- betafdPar
xfdlist <- list(lipfd)
pdaList <- pda.fd(xfdlist, bwtlist)
