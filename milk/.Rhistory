weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat <- list(weight.s = weight.seq, weight.s2 = weight.seq^2)
mu <- link(mod_pl, data = pred_dat)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
sim.height <- sim(mod_pol, data = pred_dat)
height.PI <= apply(sim.height, 2, PI, prob = 0.89)
plot(height ~ weight.s, data = d2, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(weight.seq, mu.mean)
shade(mu.PI, weight.seq)
shade(height.PI, weight.seq)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat <- list(weight.s = weight.seq, weight.s2 = weight.seq^2)
mu <- link(mod_pl, data = pred_dat)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
sim.height <- sim(mod_pol, data = pred_dat)
sim.height <- sim(mod_pl, data = pred_dat)
height.PI <= apply(sim.height, 2, PI, prob = 0.89)
plot(height ~ weight.s, data = d2, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(weight.seq, mu.mean)
shade(mu.PI, weight.seq)
shade(height.PI, weight.seq)
sim.height <- sim(mod_pl, data = pred_dat)
height.PI <- apply(sim.height, 2, PI, prob = 0.89)
plot(height ~ weight.s, data = d2, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(weight.seq, mu.mean)
shade(mu.PI, weight.seq)
shade(height.PI, weight.seq)
plot(height ~ weight.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(weight.seq, mu.mean)
shade(mu.PI, weight.seq)
shade(height.PI, weight.seq)
d$weight.s3 <- d$weight.s^3
mod_pl2 <- map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * weight.s + b2 * weight.s2 + b3 * weight.s3,
a ~ dnorm(178, 100),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
b3 ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d)
# These numbers provide Gaussian approximations fro each parameter's marginal distribution.
precis(mod_pl2, corr = TRUE)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat2 <- list(weight.s = weight.seq, weight.s2 = weight.seq^2, weight.s3 = weight.seq^3)
mu <- link(mod_pl2, data = pred_dat)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
sim.height <- sim(mod_pl2, data = pred_dat)
height.PI <- apply(sim.height, 2, PI, prob = 0.89)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat2 <- list(weight.s = weight.seq, weight.s2 = weight.seq^2, weight.s3 = weight.seq^3)
mu <- link(mod_pl2, data = pred_dat)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat2 <- list(weight.s = weight.seq, weight.s2 = weight.seq^2, weight.s3 = weight.seq^3)
mu <- link(mod_pl2, data = pred_dat)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat2 <- list(weight.s = weight.seq, weight.s2 = weight.seq^2, weight.s3 = weight.seq^3)
d$weight.s3 <- d$weight.s^3
mod_pl2 <- map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * weight.s + b2 * weight.s2 + b3 * weight.s3,
a ~ dnorm(178, 100),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
b3 ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d)
# These numbers provide Gaussian approximations fro each parameter's marginal distribution.
precis(mod_pl2, corr = TRUE)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat2 <- list(weight.s = weight.seq, weight.s2 = weight.seq^2, weight.s3 = weight.seq^3)
mu <- link(mod_pl2, data = pred_dat)
weight.seq <- seq(from = -2.2, to = 2, length.out = 30)
pred_dat <- list(weight.s = weight.seq, weight.s2 = weight.seq^2, weight.s3 = weight.seq^3)
mu <- link(mod_pl2, data = pred_dat)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob=0.89)
sim.height <- sim(mod_pl2, data = pred_dat)
height.PI <- apply(sim.height, 2, PI, prob = 0.89)
plot(height ~ weight.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(weight.seq, mu.mean)
shade(mu.PI, weight.seq)
shade(height.PI, weight.seq)
setwd("//media//kswada//MyFiles//R//waffle_divorce")
packages <- c("dplyr", "rethinking")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("WaffleDivorce", package = "rethinking")
d <- WaffleDivorce
dim(d)
str(d)
d$MedianMarriage.s <- (d$MedianAgeMarriage - mean(d$MedianAgeMarriage)) / sd(d$MedianAgeMarriage)
d$MedianMarriage.s <- (d$MedianAgeMarriage - mean(d$MedianAgeMarriage)) / sd(d$MedianAgeMarriage)
mod1 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bA * MedianAgeMarriage.s,
a ~ dnorm(10, 10),
bA ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
d$MedianAgeMarriage.s <- (d$MedianAgeMarriage - mean(d$MedianAgeMarriage)) / sd(d$MedianAgeMarriage)
mod1 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bA * MedianAgeMarriage.s,
a ~ dnorm(10, 10),
bA ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
precis(mod1. corr = TRUE)
precis(mod1, corr = TRUE)
MAM.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod1, data = data.frame(MedianAgeMarriage.s = MAM.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
precis(mod1, corr = TRUE)
sd(d$MedianAgeMarriage)
abline(a = coef(mod1)["a"], b = coef(mod1)["b"])
coef(mod1)
abline(a = coef(mod1)["a"], bA = coef(mod1)["bA"])
abline(a = coef(mod1)["a"], b = coef(mod1)["bA"])
d$Marriage.s <- (d$Marriage - mean(d$Marriage)) / sd(d$Marriage)
mod2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
sd(d$Marriage)
precis(mod2, corr = TRUE)
M.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod2, data = data.frame(Marriage.s = M.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ Marriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
plot(Divorce ~ Marriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
abline(a = coef(mod2)["a"], b = coef(mod2)["bR"])
for(i in 1:100) points(MAM.seq, mu[i,], pch = 16, col = col.alpha(rangi2, 0.1))
MAM.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod1, data = data.frame(MedianAgeMarriage.s = MAM.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# ----------
# The MAP line (just the posterior mean)
abline(a = coef(mod1)["a"], b = coef(mod1)["bA"])
for(i in 1:100) points(MAM.seq, mu[i,], pch = 16, col = col.alpha(rangi2, 0.1))
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(MAM.seq, MAM.mean)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
lines(MAM.seq, mu.mean)
MAM.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod1, data = data.frame(MedianAgeMarriage.s = MAM.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# ----------
# The MAP line (just the posterior mean)
abline(a = coef(mod1)["a"], b = coef(mod1)["bA"])
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, MAM.seq)
n <- 1e4
sim.divorce <- sim(mod1, data = list(MAM = MAM.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, MAM.seq)
n <- 1e4
sim.divorce <- sim(mod1, data = list(MAM = MAM.seq), n = n)
d$MedianAgeMarriage.s <- (d$MedianAgeMarriage - mean(d$MedianAgeMarriage)) / sd(d$MedianAgeMarriage)
mod1 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bA * MedianAgeMarriage.s,
a ~ dnorm(10, 10),
bA ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
# These numbers provide Gaussian approximations fro each parameter's marginal distribution.
# each additional standard deviation of delay in marriage (1.24 years) predicts a decrease of about one divorce per thousand adults, with a 89%
# interval from about -1.4 to -0.7.
sd(d$MedianAgeMarriage)
precis(mod1, corr = TRUE)
# ----------
# compute percentile interval of mean
MAM.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod1, data = data.frame(MedianAgeMarriage.s = MAM.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# ----------
# The MAP line (just the posterior mean)
abline(a = coef(mod1)["a"], b = coef(mod1)["bA"])
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, MAM.seq)
n <- 1e4
sim.divorce <- sim(mod1, data = list(MAM = MAM.seq), n = n)
mod1
sim.divorce <- sim(mod1, data = list(MedianAgeMarriage.s = MAM.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, MAM.seq)
d$Marriage.s <- (d$Marriage - mean(d$Marriage)) / sd(d$Marriage)
mod2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
sd(d$Marriage)
precis(mod2, corr = TRUE)
# ----------
# compute percentile interval of mean
M.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod2, data = data.frame(Marriage.s = M.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ Marriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# ----------
# The MAP line (just the posterior mean)
abline(a = coef(mod2)["a"], b = coef(mod2)["bR"])
# ----------
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, M.seq)
# ----------
# n <- 100
n <- 1e4
sim.divorce <- sim(mod2, data = list(Marriage.s = M.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, M.seq)
# -->
# This shows an increase of 0.6 divorces for every additional standard deviation of marraige rate (3.8).
d$Marriage.s <- (d$Marriage - mean(d$Marriage)) / sd(d$Marriage)
mod2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
sd(d$Marriage)
precis(mod2, corr = TRUE)
# ----------
# compute percentile interval of mean
M.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod2, data = data.frame(Marriage.s = M.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ Marriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# The MAP line (just the posterior mean)
abline(a = coef(mod2)["a"], b = coef(mod2)["bR"])
# ----------
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, M.seq)
# ----------
# n <- 100
n <- 1e4
sim.divorce <- sim(mod2, data = list(Marriage.s = M.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, M.seq)
mod3 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s + bA * MedianAgeMarriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
bA ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
precis(mod3, corr = TRUE)
plot(precis(mod3))
mod4 <- map(
alist(
Marriage.s = dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
mod4 <- map(
alist(
Marriage.s = dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
#
mu <- coef(mod4)["a"] + coef(mod4)["b"] * d$MedianAgeMarriage.s
m.resid <- d$Marriage.s - mu
mod4 <- map(
alist(
Marriage.s ~ dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
mu <- coef(mod4)["a"] + coef(mod4)["b"] * d$MedianAgeMarriage.s
m.resid <- d$Marriage.s - mu
mod4 <- map(
alist(
Marriage.s ~ dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
# compute expected value at MPA, for each State
mu <- coef(mod4)["a"] + coef(mod4)["b"] * d$MedianAgeMarriage.s
m.resid <- d$Marriage.s - mu
plot(Marriage.s ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
abline(mod4)
for(i in 1:length(m.resid)){
x <- d$MedianAgeMarriage.s[i]
y <- d$Marriage.s[i]
lines(c(x, x), c(mu[i], y), lwd = 0.5, col = col.alpha("black", 0.7))
}
plot(Marriage.s ~ MedianAgeMarriage.s, data = d)
abline(mod4)
for(i in 1:length(m.resid)){
x <- d$MedianAgeMarriage.s[i]
y <- d$Marriage.s[i]
lines(c(x, x), c(mu[i], y), lwd = 0.5, col = col.alpha("black", 0.7))
}
plot(m.resid)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
# ----------
# compute counterfactual mean divorve (mu)
mu <- link(mod3, data = pred_data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
# ----------
# simulate counterfactual divorce outcomes
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
# ----------
# display predictions, hiding raw data with type = "n"
plot(Divorce ~ Marriage.s, data = d, type = "n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
R.avg <- mean(d$Marriage.s)
A.seq <- seq(from = -3, to=3.5, length.out = 30)
pred.data2 <- data.frame(
Marriage.s = R.avg,
MedianAgeMarriage.s = A.seq
)
mu <- link(mod3, data = pred.data2)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
A.sim <- sim(mod3, data = pred.data2, n = 1e4)
A.PI <- apply(A.sim, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, type = "n")
mtext("Marriage.s = 0")
lines(A.seq, mu.mean)
shade(mu.PI, A.seq)
shade(A.PI, A.seq)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
# ----------
# compute counterfactual mean divorve (mu)
mu <- link(mod3, data = pred_data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
mu <- link(mod3, data = pred.data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
# simulate counterfactual divorce outcomes
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
plot(Divorce ~ Marriage.s, data = d, type = "n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
R.avg <- mean(d$Marriage.s)
A.seq <- seq(from = -3, to=3.5, length.out = 30)
pred.data2 <- data.frame(
Marriage.s = R.avg,
MedianAgeMarriage.s = A.seq
)
mu <- link(mod3, data = pred.data2)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
A.sim <- sim(mod3, data = pred.data2, n = 1e4)
A.PI <- apply(A.sim, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, type = "n")
mtext("Marriage.s = 0")
lines(A.seq, mu.mean)
shade(mu.PI, A.seq)
shade(A.PI, A.seq)
# so it uses original data
mu <- link(mod3)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
divorce.sim <- sim(mod3, n = 1e4)
divorce.PI <- apply(divorce.sim, 2, PI)
# ----------
plot(mu.mean ~ d$Divorce, col = rangi2, ylim = range(mu.PI), xlab = "Observed divorce", ylab = "Predicted divorce")
abline(a = 0, b = 1, lty = 2)
for(i in 1:nrow(d)) lines(rep(d$Divorce[i], 2), c(mu.PI[1,i], mu.PI[2, i]), col = rangi2)
identity(x = d$Divorce, y = mu.mean, labels = d$Loc, cex = 0.8)
identify(x = d$Divorce, y = mu.mean, labels = d$Loc, cex = 0.8)
divorce.resid <- d$Divorce - mu.mean
o <- order(divorce.resid)
dotchart(divorce.resid[o], labels = d$Loc[o], xlim = c(-6,5), cex = 0.6)
abline(v = 0, col = col.alpha("black", 0.2))
for(i in 1:nrow(d)){
j <- o[i]
lines(d$Divorce[j] - c(mu.PI[1,j], mu.PI[2,j]), rep(i,2))
points(d$Divorce[j] - c(divorce.PI[1,j], divorce.PI[2,j]), rep(i,2), pch = 3, cex = 0.5, col = "gray")
}
rm(list=ls())
gra
graphics.off()
setwd("//media//kswada//MyFiles//R//milk")
packages <- c("dplyr", "rethinking")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  milk
# ------------------------------------------------------------------------------
data("milk", package = "rethinking")
d <- milk
dim(d)
str(d)
# ------------------------------------------------------------------------------
# rescale one of the explanatory variables  (DO NOT REMOVE MISSING VALUES)
# ------------------------------------------------------------------------------
# d <- milk[complete.cases(milk), ]
d$neocortex.prop <- d$neocortex.perc / 100
d$logmass <- log(d$mass)
# ------------------------------------------------------------------------------
# regression modeling with imputing missing values
# ------------------------------------------------------------------------------
dlist <- list(
kcal = d$kcal.per.g,
neocortex = d$neocortex.prop,
logmass = d$logmass
)
mod5 <- map2stan(
alist(
kcal ~ dnorm(mu, sigma),
mu <- a + bN * neocortex + bM * logmass,
neocortex ~ dnorm(nu, sigma_N),
a ~ dnorm(0, 100),
c(bN, bM) ~ dnorm(0, 10),
nu ~ dnorm(0.5, 1),
sigma_N ~ dcauchy(0, 1),
sigma ~ dcauchy(0, 1)
),
data = dlist,
iter = 1e4, chains = 2, cores = 10
)
dcc <- d[complete.cases(d$neocortex.prop),]
dlist_cc <- list(
kcal = dcc$kcal.per.g,
neocortex = dcc$neocortex.prop,
logmass = dcc$logmass
)
dcc <- d[complete.cases(d$neocortex.prop),]
dlist_cc <- list(
kcal = dcc$kcal.per.g,
neocortex = dcc$neocortex.prop,
logmass = dcc$logmass
)
mod5.cc <- map2stan(
alist(
kcal ~ dnorm(mu, sigma),
mu <- a + bN * neocortex + bM * logmass,
a ~ dnorm(0, 100),
c(bN, bM) ~ dnorm(0, 10),
sigma ~ dcauchy(0, 1)
),
data = dlist_cc,
iter = 1e4, chains = 2, cores = 10
)
precis(mod5.cc, digits = 3, depth = 2)
coeftab(mod5, mod.cc)
coeftab(mod5, mod5.cc)
# ----------
coeftab(mod5.cc, mod5)
head(d)
post_5 <- extract.samples(mod5)
mu <- link(mod5, data = data.frame(neocortex = neo_seq, logmass = mean(dlist$logmass)))
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob = 0.97)
neo_seq <- seq(0.50, 0.85, by = 0.1)
mu <- link(mod5, data = data.frame(neocortex = neo_seq, logmass = mean(dlist$logmass)))
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI, prob = 0.97)
