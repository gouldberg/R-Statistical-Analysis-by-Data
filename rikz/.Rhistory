lines = list(multiline = TRUE, lwd = 4, col = c("black", "darkgray"), lty = c(1,2)),
confint = list(style = "bands"),
axes = list(x = list(rug = FALSE)),
lattice = list(key.args = list(space = "right", columns = 1)))
hsb.lme2 <- update(hsb.lme.1, random = ~ 1 | school)
S(hsb.lme2)
anova(hsb.lme1, hsb.lme2)
hsb.lme.2 <- update(hsb.lme.1, random = ~ 1 | school)
S(hsb.lme.2)
# ----------
anova(hsb.lme.1, hsb.lme.2)
S(hsb.lme.1)
hsb.lme.3 <- update(hsb.lme.1, random = ~ cses - 1 | school)
S(hsb.lme.3)
anova(hsb.lme.1, hsb.lme.3)
pvalCorrected <- function(chisq, df){
(pchisq(chisq, df, lower.tail = FALSE) + pchisq(chisq, df - 1, lower.tail = FALSE)) / 2
}
pvalCorrected(1.1241, df = 2)
pvalCorrected(220.56, df = 2)
compareCoefs(hsb.lme.1, hsb.lme.2)
library(lme4)
hsb.lmer.1 <- lmer(mathach ~ mean.ses * cses + sector * cses + (cses | school), data = HSB)
S(hsb.lmer.1)
S(hsb.lme.1)
S(hsb.lmer.1)
S(hsb.lme.1)
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
anova(hsb.lmer.1, hsb.lmer.2)
anova(hsb.lmer.1, hsb.lmer.2, refit = FALSE)
anova(hsb.lme.1, hsb.lme.2, refit = FALSE)
anova(hsb.lme.1, hsb.lme.2)
setwd("//media//kswada//MyFiles//R//math_achieve")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  MathAchieve
# ------------------------------------------------------------------------------
data("MathAchieve", package = "nlme")
dim(MathAchieve)
str(MathAchieve)
car::some(MathAchieve)
# ----------
data("MathAchSchool", package = "nlme")
dim(MathAchSchool)
str(MathAchSchool)
car::some(MathAchSchool)
# ----------
names(MathAchieve) <- tolower(names(MathAchieve))
names(MathAchSchool) <- tolower(names(MathAchSchool))
Temp <- MathAchieve %>% group_by(school) %>% summarize(mean.ses = mean(ses))
Temp <- merge(MathAchSchool, Temp, by = "school")
car::brief(Temp)
# ----------
HSB <- merge(Temp[, c("school", "sector", "mean.ses")], MathAchieve[, c("school", "ses", "mathach")], by = "school")
# ----------
HSB$cses <- with(HSB, ses - mean.ses)
car::brief(HSB)
HSB$sector <- factor(HSB$sector, levels = c("Public", "Catholic"))
hsb.lme.1 <- lme(mathach ~ mean.ses * cses + sector * cses,
random = ~ cses | school, data = HSB)
Anova(hsb.lme.1)
library(car)
library(nlme)
hsb.lme.1 <- lme(mathach ~ mean.ses * cses + sector * cses,
random = ~ cses | school, data = HSB)
Anova(hsb.lme.1)
Anova(hsb.lme.1, test = "F")
library(lme4)
hsb.lmer.1 <- lmer(mathach ~ mean.ses * cses + sector * cses + (cses | school), data = HSB)
Anova(hsb.lme.1, test = "F")
Anova(hsb.lmer.1, test = "F")
# with mean.ses * cses
hsb.lmer.1 <- lmer(mathach ~ mean.ses * cses + sector * cses + (cses | school), data = HSB)
# without mean.ses * cses
hsb.lmer.2 <- lmer(mathach ~ sector * cses + (cses | school), data = HSB)
KRmodcomp(hsb.lmer.1, hsb.lmer.2)
library(pbkrtest)
# ----------
KRmodcomp(hsb.lmer.1, hsb.lmer.2)
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
Anova(hsb.lmer.2, test = "F")
hsb.lme.2 <- lme(mathach ~ mean.ses * cses + sector * cses,
random = ~ 1 | school, data = HSB)
# Anova for lme model does not produce Wald F Tests with Kenward-Roger df
Anova(hsb.lme.2, test = "F")
library(lme4)
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
Anova(hsb.lmer.2)
library(pbkrtest)
# with mean.ses * cses
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
# without mean.ses * cses
hsb.lmer.3 <- lmer(mathach ~ sector * cses + (1 | school), data = HSB)
KRmodcomp(hsb.lmer.2, hsb.lmer.3)
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
hsb.lmer.3 <- lmer(mathach ~ mean.ses * cses + sector * cses, data = HSB)
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (cses | school), data = HSB)
hsb.lmer.3 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
hsb.lmer.2 <- lmer(mathach ~ mean.ses * cses + sector * cses + (cses | school), data = HSB)
hsb.lmer.4 <- lmer(mathach ~ mean.ses * cses + sector * cses + (1 | school), data = HSB)
library(RLRsim)
exactRLRT(m = hsb.lmer.4, m0 = hsb.lmer.2)
library(RLRsim)
exactRLRT(m = hsb.lmer.4, m0 = hsb.lmer.2)
exactRLRT(m = hsb.lmer.4, mA = hsb.lmer.2, m0 = hsb.lmer.2)
help(exactRLRT)
exactRLRT(m = hsb.lmer.2)
exactRLRT(m = hsb.lmer.4)
exactRLRT(mA = hsb.lmer.2, m0 = hsb.lmer.2)
hsb.lme.1 <- lme(mathach ~ mean.ses * cses + sector * cses,
random = ~ cses | school, data = HSB)
mod_obj <- hsb.lme.1
ranef(mod_obj)
ref <- ranef(mod_obj)[[1]]
summary(ref)
mod_obj
summary(mod_obj)
sd(ref)
ref2 <- ranef(mod_obj)[[2]]
summary(ref2)
names(summary(mod_obj))
summary(mod_obj)$sigma
summary(mod_obj)$coefficients
ranef(mod_obj)[[1]]
ranef(mod_obj)
summary(mod_obj)$coefficients$random$school
summary(ranef(mod_obj)[[1]])
summary(ranef(mod_obj)[[2]])
sd(ranef(mod_obj)[[1]])
sd(ranef(mod_obj)[[1]])
sd(ranef(mod_obj)[[2]])
summary(mod_obj)
sd(ranef(mod_obj)[[1]])
sd(ranef(mod_obj)[[2]])
summary(mod_obj)
var(ranef(mod_obj)[[1]])
var(ranef(mod_obj)[[1]])
var(ranef(mod_obj)[[2]])
fixef(mod_obj)
ranef(mod_obj)
predict(mod_obj, re.form = ~ 0)
predict(mod_obj)
predict(mod_obj, re.form = ~ 0)
predict(mod_obj)
predict(mod_obj, re.form = ~ 0)
predict(mod_obj)
predict(mod_obj, re.form = ~ 1)
predict(mod_obj)
diagd <- fortify(mod_obj)
head(diagd)
diagd <- car::fortify(mod_obj)
library(ggplot2)
diagd <- fortify(mod_obj)
head(diagd)
hsb.lmer.1 <- lmer(mathach ~ mean.ses * cses + sector * cses + (cses | school), data = HSB)
mod_obj <- hsb.lmer.1
diagd <- fortify(mod_obj)
head(diagd)
hist(scale(resid(mod_obj)), freq = FALSE, ylim = c(0, 0.7), xlim = c(-4, 5),
main = "Histogram of Standardized Residuals", xlab = "Standardized Residuals")
lines(density(scale(resid(mod_obj))))
box()
hist(diagd$.scresid)
plot(mod_obj)
plot(mod_obj, resid(., type = "pearson") ~ fitted(.) | social, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
mod_obj <- hsb.lme.1
plot(mod_obj, resid(., type = "pearson") ~ fitted(.) | social, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "pearson") ~ fitted(.) | school, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "pearson") ~ fitted(.) | sector, abline = 0, lty = 2, col = gray(0.4), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "pearson") ~ fitted(.) | sector, abline = 0, lty = 2, col = gray(0.7), cex = 0.8, pch = 20)
plot(mod_obj, resid(., type = "pearson") ~ fitted(.) | sector, abline = 0, lty = 2, col = gray(0.7), cex = 0.3, pch = 20)
plot(mod_obj, sector ~ resid(., type = "pearson"))
plot(mod_obj, school ~ resid(., type = "pearson"))
ggplot(diagd, aes(sample = .resid)) + stat_qq()
ggplot(diagd, aes(sample = .scresid)) + stat_qq()
qqnorm(scale(resid(mod_obj)))
qqline(scale(resid(mod_obj)))
car::qqPlot(resid(mod_obj))
ggplot(diagd, aes(x = .fitted, y = .resid)) + geom_point(alpha = 0.3) + geom_hline(yintercept = 0) + xlab("Fitted") + ylab("Residuals")
ggplot(diagd, aes(x = .fitted, y = .scresid)) + geom_point(alpha = 0.3) + geom_hline(yintercept = 0) + xlab("Fitted") + ylab("Residuals")
ggplot(diagd, aes(x = .fitted, y = .resid)) + geom_point(alpha = 0.3) + geom_hline(yintercept = 0) + xlab("Fitted") + ylab("Residuals") + facet_wrap(~ sector)
qqnorm(ranef(mod_obj)[[1]], main = "School effects")
qqnorm(ranef(mod_obj)[[1]], main = "School effects")
qqline(ranef(mod_obj)$[[1]])
qqnorm(ranef(mod_obj)[[1]], main = "School effects")
qqline(ranef(mod_obj)$[[1]])
qqline(ranef(mod_obj)[[1]])
qqnorm(ranef(mod_obj)[[1]], main = "school effects")
qqline(ranef(mod_obj)[[1]])
qqnorm(ranef(mod_obj)[[2]], main = "school effects")
qqline(ranef(mod_obj)[[2]])
infl <- influence(mod_obj, groups = c("school"))
infl
car::influenceIndexPlot(mod_obj, vars = c("Cook", "studentized", "hat"), id.n = 4)
mod_obj <- hsb.lmer.1
car::influenceIndexPlot(mod_obj, vars = c("Cook", "studentized", "hat"), id.n = 4)
car::influenceIndexPlot(mod_obj, var = "var.cov.comps")
fixef(hsb.lme.1)
fixef(hsb.lme.2)
mod_obj <- hsb.lme.2
fixef(mod_obj)
ranef(mod_obj)
head(ranef(mod_obj))
ranef(mod_obj)$school
head(summary(mod_obj)$coefficients$random$school)
summary(ranef(mod_obj)[[1]])
school.effects <- ranef(mod_obj)$school
school.effects$sector <- MathAchSchool$sector
school.effects$intercept <- school.effects$"(intercept)" + ifelse(schoo.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
head(schoo.effects)
school.effects <- ranef(mod_obj)$school
school.effects$sector <- MathAchSchool$sector
school.effects$intercept <- school.effects$"(intercept)" + ifelse(schoo.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
school.effects$"(intercept)"
school.effects <- ranef(mod_obj)$school
school.effects
school.effects <- ranef(mod_obj)$"(intercept)"
school.effects
ranef(mod_obj)
school.effects <- ranef(mod_obj)$"(Intercept)"
school.effects$sector <- MathAchSchool$sector
school.effects$intercept <- school.effects$"(Intercept)" + ifelse(schoo.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
school.effects$intercept <- school.effects$"(Intercept)" + ifelse(school.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
head(schoo.effects)
head(school.effects)
school.effects <- ranef(mod_obj)$"(Intercept)"
school.effects
school.effects$sector <- MathAchSchool$sector
school.effects
school.effects <- data.frame(ranef(mod_obj)$"(Intercept)")
school.effects$sector <- MathAchSchool$sector
school.effects$intercept <- school.effects$"(Intercept)" + ifelse(school.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
school.effects$"(Intercept)"
school.effects
school.effects <- data.frame(ranef(mod_obj)$"(Intercept)")
names(school.effects) <- "Intercept"
school.effects$sector <- MathAchSchool$sector
school.effects$intercept <- school.effects$"(Intercept)" + ifelse(school.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
school.effects$"(Intercept)"
school.effects$intercept <- school.effects$Intercept + ifelse(school.effects$sector == "Public", fixef(mod_obj)[1], sum(fixef(mod_obj)[c(1,4)]))
head(school.effects)
summary(ranef(mod_obj)[[2]])
setwd("//media//kswada//MyFiles//R//Mixed_effects_and_multilevel_model//rikz")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
RIKZ <- read.table(file = "RIKZ.txt", header = TRUE)
str(RIKZ)
car::some(RIKZ)
summary(RIKZ)
xtabs(~ Beach, data = RIKZ)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
#               scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- c("Richness", "Sample", "Exposure", "NAP", "Beach")
Mydotplot(as.matrix(RIKZ[,MyVar1]))
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- c("Richness", "Sample", "Exposure", "NAP", "Beach")
Mydotplot(as.matrix(RIKZ[,MyVar1]))
summary(RIKZ)
plot(Richness ~ NAP, data = jspr, ylab = "Richness", xlab = "NAP", cex.lab = 1.25, pch = 20, col = gray(0.7))
plot(Richness ~ NAP, data = jspr, ylab = "Richness", xlab = "NAP", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(RIKZ$Richness, RIKZ$NAP), col = "blue", lwd = 1)
plot(Richness ~ NAP, data = RIKZ, ylab = "Richness", xlab = "NAP", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(RIKZ$Richness, RIKZ$NAP), col = "blue", lwd = 1)
plot(Richness ~ Exposure, data = RIKZ, ylab = "Richness", xlab = "Exposure", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(RIKZ$Richness, RIKZ$Exposure), col = "blue", lwd = 1)
ggplot(RIKZ, aes(x = NAP, y = Richness)) + xlab("NAP") + ylab("Richness") + geom_point(position = position_jitter(), alpha = 0.3)
ggplot(RIKZ, aes(x = NAP, y = Richness)) + xlab("NAP") + ylab("Richness") + geom_point(alpha = 0.3)
formula <- Richness ~ NAP
car::scatterplot(formula, data = RIKZ)
library(ggplot2)
gg <- ggplot(RIKZ, aes(NAP, Richness)) +
stat_smooth(method = "loess", size = 2, fill = "blue", alpha = 0.25) +
stat_smooth(method = "lm", color = "red", size = 1.25, se = FALSE) +
labs(y = "Richness", x = "NAP")
gg + facet_wrap(~ as.factor(Exposure))
names(RIKZ)
gg + facet_wrap(~ as.factor(Exposure) + as.factor(Beach))
gg + facet_wrap(~ as.factor(Beach))
xtabs(~ Beach + Exposure, data = RIKZ)
plot(xtabs(~ Beach + Exposure, data = RIKZ))
xtabs(~ Beach + Exposure, data = RIKZ)
gg + facet_wrap(~ as.factor(Beach))
gg + facet_wrap(~ as.factor(Exposure))
gg + facet_wrap(~ as.factor(Beach))
xtabs(~ Beach + Exposure, data = RIKZ)
formula = Richness ~ NAP | as.factor(Exposure)
coplot(formula, data = RIKZ, ylab = "RIKZ", xlab = "NAP", las=1)
formula = Richness ~ NAP | as.factor(Beach)
coplot(formula, data = RIKZ, ylab = "Richness", xlab = "NAP", las=1)
xyplot(Richness ~ NAP | school, data = RIKZ)
xyplot(Richness ~ NAP | as.factor(Beach), data = RIKZ)
xyplot(Richness ~ NAP | as.factor(Exposure), data = RIKZ)
xyplot(Richness ~ NAP | as.factor(Beach), data = RIKZ)
formula <- Richness ~ NAP | as.factor(Exposure)
scatterplot(formula, data = RIKZ)
formula <- Richness ~ NAP | as.factor(Beach)
scatterplot(formula, data = RIKZ)
library(car)
formula <- ~ Richness + NAP + Exposure + Beach
scatterplotMatrix(formula, data = RIKZ,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ Richness + NAP | as.factor(Exposure)
scatterplotMatrix(formula, data = RIKZ,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
library(car)
formula <- ~ Richness + NAP
scatterplotMatrix(formula, data = RIKZ,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
RIKZ %>% filter(sample %in% c(9, 10, 22))
RIKZ %>% filter(Sample %in% c(9, 10, 22))
formula <- ~ Richness + NAP | as.factor(Exposure)
scatterplotMatrix(formula, data = RIKZ,
smooth = FALSE, ellipse = list(levels = 0.5),
id = list(n = 3), col = c(gray(0.6), "black"), pch = 20)
scatterplotMatrix(formula, data = RIKZ,
smooth = FALSE, ellipse = list(levels = 0.5),
id = list(n = 3), col = c(gray(0.8), gray(0.5), "black"), pch = c(1,10,20))
formula <- ~ Richness + NAP | as.factor(Beach)
scatterplotMatrix(formula, data = jspr,
smooth = FALSE, ellipse = list(levels = 0.5),
id = list(n = 3), col = c(gray(0.6), "black", "blue", "red"), pch = 1:4)
formula <- ~ Richness + NAP | as.factor(Beach)
scatterplotMatrix(formula, data = RIKZ,
smooth = FALSE, ellipse = list(levels = 0.5),
id = list(n = 3), col = c(gray(0.6), "black", "blue", "red"), pch = 1:4)
var_obj <- c("Richness", "NAP", "Exposure", "Beach")
# here we apply method = "spearman" due to terrible skewness
pairs.panels(RIKZ[, var_obj], ci = TRUE, smoother = TRUE, stars = TRUE, method = "spearman")
library(psych)
var_obj <- c("Richness", "NAP", "Exposure", "Beach")
# here we apply method = "spearman" due to terrible skewness
pairs.panels(RIKZ[, var_obj], ci = TRUE, smoother = TRUE, stars = TRUE, method = "spearman")
Beta <- vector(length = 9)
for (i in 1:9){
tmpout <- summary(lm(Richness ~ NAP, subset = (Beach == i), data = RIKZ))
Beta[i] <- tmpout$coefficients[2,1]
}
Beta
fm1 <- lmList(Richness ~ NAP | Beach, data = RIKZ)
summary(fm1)
plot(fm1)
summary(tmp2)
ExposureBeach <- c("a","a","b","b","a","b","b","a","a")
tmp2 <- lm(Beta ~ factor(ExposureBeach))
summary(tmp2)
ml <- lmList(Richness ~ NAP + Exposure | as.factor(Beach), RIKZ)
RIKZ
ml <- lmList(Richness ~ NAP + Exposure | Beach, RIKZ)
ml <- lmList(Richness ~ NAP + Exposure | as.factor(Beach), RIKZ)
ml <- lmList(Richness ~ NAP + Exposure | Beach, RIKZ)
head(summary(ml))
sapply(ml, coef)
sapply(ml, coef)
ml <- lmList(Richness ~ NAP | Exposure + Beach, RIKZ)
head(summary(ml))
sapply(ml, coef)
help(lmList)
ml <- lmList(Richness ~ NAP + Exposure | Beach, RIKZ)
ml
ml <- lmList(Richness ~ NAP | Beach, RIKZ)
head(summary(ml))
ml
ml[[1]]
summary(ml)[[1]]
summary(ml[[1]])
intercepts <- sapply(ml, coef)[1,]
slopes <- sapply(ml, coef)[2,]
sapply(ml, coef)
sapply(ml, coef)[1,]
slopes <- sapply(ml, coef)[2,]
df <- cbind(RIKZ %>% dplyr::select(Sample, Richness, NAP, Exposure, Beach), intercepts, slopes)
df <- cbind(RIKZ %>% dplyr::select(Beach) %>% arrange(Beach), intercepts, slopes)
RIKZ %>% dplyr::select(Beach) %>% arrange(Beach)
df <- cbind(RIKZ %>% dplyr::select(Beach) %>% unique() %>% arrange(Beach), intercepts, slopes)
df
par(mfrow = c(1, 1))
plot(intercepts, slopes, xlab = "Intercept", ylab = "Slope")
# ----------
formula <- ~ slopes + intercepts
scatterplotMatrix(formula, data = df,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ slopes + intercepts | as.factor(Exposure)
scatterplotMatrix(formula, data = df,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c("black", gray(0.7)), pch = c(1, 20))
formula <- ~ slopes + intercepts | Exposure
scatterplotMatrix(formula, data = df,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c("black", gray(0.7)), pch = c(1, 20))
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme1 <- lme(Richness ~ NAP, random = ~1 | fBeach, data = RIKZ)
summary(Mlme1)
F0 <- fitted(Mlme1, level = 0)
F1 <- fitted(Mlme1, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
mod_obj <- Mlme1
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
library(effects)
plot(predictorEffects(mod_obj))
plot(Effect(c("NAP", "fBeach"), mod_obj),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(5,4,3,2,1), col = c(gray(0.8), gray(0.6), gray(0.4), gray(0.2), "black")))
mod_obj
plot(Effect(c("NAP"), mod_obj),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(5,4,3,2,1), col = c(gray(0.8), gray(0.6), gray(0.4), gray(0.2), "black")))
d <- 2.94
# StdDev for the residual
sigma <- 3.06
# Covariance between any two sites on the same beach and the variance
d^2
d^2 + sigma^2
summary(mod_obj)
summary(mod_obj)
( rho <- d^2 / (d^2 + sigma^2) )
n <- 5
( design_effect <- 1 + (n - 1) * rho )
N <- 9
( effetive_sample_size <- N * n / design_effect )
n <- 5
( design_effect <- 1 + (n - 1) * rho )
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme2 <- lme(Richness ~ NAP, random = ~1 + NAP | fBeach, data = RIKZ)
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme2 <- lme(Richness ~ NAP, random = ~1 + NAP | fBeach, data = RIKZ)
summary(Mlme2)
AIC(Mlme1);  AIC(Mlme2);
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
mod_obj <- Mlme2
# ------------------------------------------------------------------------------
# Visualize random intercept and slope model
# ------------------------------------------------------------------------------
# level = 0:  we take the fitted values obtained by the population model
# level = 1: give the within-beach fitted values.
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
