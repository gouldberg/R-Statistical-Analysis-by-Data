attributes(PVQ40)
car::some(PVQ40)
# ------------------------------------------------------------------------------
# MDS on scores averaged by category
# ------------------------------------------------------------------------------
var_n <- c("SE", "CO", "TR", "BE", "UN", "SD", "ST", "HE", "AC", "PO")
var_n_select <- c("se1, se2", "co1, co2", "tr1, tr2", "be1, be2", "un1, un2, un3", "sd1, sd2", "st1, st2", "he1, he2", "ac1, ac2", "po1, po2")
# Take row means for each category of measure
for(i in 1:length(var_n)){
eval(parse(text = paste0(var_n[i], " <- rowMeans(subset(PVQ40, select = c(", var_n_select[i], ")), na.rm = TRUE)")))
}
raw <- cbind(SE, CO, TR, BE, UN, SE, ST, HE, AC, PO)
# ----------
R <- cor(raw)
diss <- sim2diss(R)
result <- mds(diss, init = "torgerson", type = "ordinal")
plot(result)
idiss <- sim2diss(R, method = max(R))
# ----------
# Enforces a strict circle
# res1 <- smacofSphere(idiss, type = "ordinal")
res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
# res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 1)
# Exploratory MDS
# res3 <- mds(idiss, type = "ordinal")
res3 <- mds(idiss)
idiss <- sim2diss(R, method = max(R))
# ----------
# Enforces a strict circle
res1 <- smacofSphere(idiss, type = "ordinal")
# res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
# res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 1)
# Exploratory MDS
res3 <- mds(idiss, type = "ordinal")
# res3 <- mds(idiss)
# ----------
res1$stress
res2$stress
res3$stress
op <- par(mfrow = c(1,3))
colnames(idiss)
plot(res1, main="Circular MDS (primal)")
plot(res2, main="Circular MDS 2 (dual)")
plot(res3, main="Exploratory MDS")
par(op)
rownames(idiss)
data(faithful, package="faraway")
str(faithful)
# ----------
# for comparison
# exa:  true function is f(x) = sin^3(e * pi * x^3)
# exb:  constant zero
data(exa);  data(exb)
str(exa)
str(exb)
# ------------------------------------------------------------------------------
# plot data
# ------------------------------------------------------------------------------
par(mfrow=c(1,3))
plot(y ~ x, exa, main = "Example A", pch = ".")
lines(m ~ x, exa)
plot(y ~ x, exb, main = "Example B", pch = ".")
lines(m ~ x, exb)
plot(waiting ~ eruptions, faithful, main = "Old Faithful", pch = ".")
packages <- c("dplyr", "faraway")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  faithful
#   - data on the Old Faithful geyser in Yellowstone National Park, Wyoming, USA.
# ------------------------------------------------------------------------------
data(faithful, package="faraway")
str(faithful)
# ----------
# for comparison
# exa:  true function is f(x) = sin^3(e * pi * x^3)
# exb:  constant zero
data(exa);  data(exb)
str(exa)
str(exb)
# ------------------------------------------------------------------------------
# plot data
# ------------------------------------------------------------------------------
par(mfrow=c(1,3))
plot(y ~ x, exa, main = "Example A", pch = ".")
lines(m ~ x, exa)
plot(y ~ x, exb, main = "Example B", pch = ".")
lines(m ~ x, exb)
plot(waiting ~ eruptions, faithful, main = "Old Faithful", pch = ".")
f <- loess(waiting ~ eruptions, faithful)
f
f_exa <- loess(y ~ x, exa)
f_exa
f_exa2 <- loess(y ~ x, exa, span = 0.22)
f_exa2
f_exb <- loess(y ~ x, exb)
f_exb
f_exb2 <- loess(y ~ x, exa, span = 1)
f_exb2
# ----------
i <- order(faithful$eruptions)
par(mfrow=c(1,3))
plot(waiting ~ eruptions, faithful, col = gray(0.75))
lines(f$fitted[i] ~ f$x[i], lty = 2)
plot(y ~ x, exa, col = gray(0.75))
lines(exa$x, exa$m, lty = 1)
lines(f_exa$fitted ~ f_exa$x, lty = 2)
lines(f_exa2$fitted ~ f_exa2$x, lty = 5)
plot(y ~ x, exb, col = gray(0.75))
lines(exb$x, exb$m, lty = 1)
lines(f_exb$fitted ~ f_exb$x, lty = 2)
lines(f_exb2$fitted ~ f_exb2$x, lty = 5)
data("RWDQ", package = "MPsychoR")
str(RWDQ)
z1
car::some(RWDQ)
summary(RWDQ)
help(RWDQ)
?RQDQ
??RWDQ
apply(RWDQ, 2, FUN = sum, na.rm = TRUE)
str(RWDQ)
library(ltm)
# Note that z1 is a generic placeholder for the single latent dimension
fit2pl1 <- ltm(RWDQ ~ z1)
fit2pl1
head(coef(fit2pl1))
library(Gifi)
prin_rwdq <- princals(RWDQ)
# ----------
plot(prin_rwdq, "loadplot")
prin_rwdq$loadings
str(RWDQ)
par(mfrow = c(1, 1))
plot(prin_rwdq, "loadplot")
prin_rwdq$loadings
prin_rwdq
sumamry(prin_rwdq)
summary(prin_rwdq)
help(princals)
prin_rwdq <- princals(RWDQ, ndim = 4)
summary(prin_rwdq)
par(mfrow = c(1, 1))
plot(prin_rwdq, "loadplot")
prin_rwdq <- princals(RWDQ)
par(mfrow = c(1,1))
# expand = 0.5 to shorten the vectors for better representation
plot(prin_rwdq, plot.type = "biplot", main = "Princals Biplot", expand = 0.5, cex.scores = 0.6, col.scores = "gray")
abline(h = 0, v = 0, lty = 2, col = "gray")
par(mar = c(1,1,1,1))
plot(prc, plot.type = "transplot")
plot(prin_rwdq, plot.type = "transplot")
prin_rwdq$loadings
library(ltm)
# Note that z1 is a generic placeholder for the single latent dimension
fit2pl1 <- ltm(RWDQ ~ z1)
fit2pl1
head(coef(fit2pl1))
RWDQ1 <- RWDQ[, -1]
fit2pl2 <- ltm(RWDQ1 ~ z1)
# ----------
head(coef(fit2pl2))
item.fit(fit2pl2)
help(temfit)
help(itemfit)
help(item.fit)
item.fit(fit2pl2)
plot(fit2pl2, item = 1:5, legend = TRUE)
round(coef(fit2pl2)[1:5, 2], 3)
round(coef(fit2pl2)[, 2], 3)
coef(fit2pl2)
plot(fit2pl2, item = 1:10, legend = TRUE)
round(coef(fit2pl2)[, 2], 3)
sort(round(coef(fit2pl2)[, 2], 3), decreasing = TRUE)
( ppars <- ltm::factor.scores(fit2pl2, resp.patterns = RWDQ1)$score.dat[, "z1"] )
library(ltm)
irtpar <- ltm(RWDQ1 ~ z1)
fapar <- ltm(RWDQ1 ~ z1, IRT.param = FALSE)
# ----------
round(head(cbind(coef(irtpar), coef(fapar))), 3)
irtppar <- factor.scores(irtpar)$score.dat$z1
fappar <- factor.scores(fapar)$score.dat$z1
identical(irtppar, fappar)
irtppar
fappar
setwd("//media//kswada//MyFiles//R//zareki")
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("zareki", package = "MPsychoR")
str(zareki)
# We consider eight binary subtraction items only
zarsub <- zareki[, grep("subtr", colnames(zareki))]
str(zarsub)
summary(zarsub)
str(zareki)
summary(zarsub)
library(Gifi)
prinzar <- princals(zarsub)
prinzar
plot(prinzar, main = "Zareki Loadings")
library(psych)
tetcor <- tetrachoric(zarsub)
tetcor
tetcor$rho
( evals <- eigen(tetcor$rho)$values )
scree(tetcor$rho, factors = FALSE)
round((cumsum(evals) / sum(evals))[1:5], 5)
set.seed(123)
resPA <- fa.parallel(zarsub, fa = "pc", cor = "tet", fm = "ml")
resPA
plot(resPA, show.legend = TRUE, fa = "pc")
library(mirt)
# We fit a one-factor model and a two-factor model
fitifa1 <- mirt(zarsub, 1)
fitifa2 <- mirt(zarsub, 2, TOL = 0.001)
fitifa1
anova(fitifa1, fitifa2)
library(psych)
tetcor <- tetrachoric(RWDQ)
tetcor
tetcor$rho
( evals <- eigen(tetcor$rho)$values )
scree(tetcor$rho, factors = FALSE)
round((cumsum(evals) / sum(evals))[1:5], 5)
round((cumsum(evals) / sum(evals))[1:10], 5)
set.seed(123)
resPA <- fa.parallel(RWDQ, fa = "pc", cor = "tet", fm = "ml")
resPA
plot(resPA, show.legend = TRUE, fa = "pc")
library(psych)
tetcor <- tetrachoric(zarsub)
tetcor
tetcor$rho
library(eRm)
# eRm package uses a conditional maximum likelihood (CML) approach, which has some advantages over other IRT estimation approaches
fitrasch1 <- RM(zarsub)
fitrasch1
fitrasch1$etapar
# beta (individual item location parameter)
fitrasch1$betapar
as.vector(fitrasch1$W %*% - fitrasch1$etapar)
round(sort(-fitrasch1$betapar), 3)
timecat <- factor(zareki$time <= median(zareki$time), labels = c("fast", "slow"))
timecat
fitLR <- LRtest(fitrasch1, timecat)
fitLR
Waldtest(fitrasch1, timecat)
plotGOF(fitLR, ctrline = list(col = "gray"), conf = list())
fitrasch2 <- RM(zarsub[, -5])
LRtest(fitrasch2, timecat)
# -->
# The nonsignificant p-value suggest that the model fits.
Waldtest(fitrasch2, timecat)
# ----------
# eRm::stepwiseIt eliminates items until a particular test of choice fits
stepwiseIt(fitrasch1)
stepwiseIt(fitrasch1)
set.seed(123)
# ----------
# We examine item-specific local independence (T1-test)
T1_1 <- NPtest(as.matrix(zarsub), n = 1000, method = "T1")
T1_2 <- NPtest(as.matrix(zarsub[,-5]), n = 1000, method = "T1")
T1_1
T1_2
# ----------
# We examine item-specific local independence at a global level (T11-test)
T11_1 <- NPtest(as.matrix(zarsub), n = 1000, method = "T11")
T11_2 <- NPtest(as.matrix(zarsub[,-5]), n = 1000, method = "T11")
T11_1
T11_2
T11_1
T11_2
T1_1
T1_2
plotjointICC(fitrasch2, xlab = "Subtraction Trait", main = "ICCs Subtraction Items")
( zarppar <- person.parameter(fitrasch2) )
zareki$theta <- zarppar$theta.table[,1]
zarppar$theta.table
head(zarppar$theta.table)
summary(aov(theta ~ class, data = zareki))
str(zarsub)
str(zareki)
summary(zareki)
xtabs(~ class + year, data = zareki)
xtabs(~ class + time, data = zareki)
help(zareki)
anova(time ~ class, data = zareki)
anova(lm(time ~ class, data = zareki))
plot(anova(lm(time ~ class, data = zareki)))
boxplot(time ~ class, data = zareki)
plot(aov(theta ~ class, data = zareki)
plot(aov(theta ~ class, data = zareki))
plot(aov(theta ~ class, data = zareki))
boxplot(theta ~ class, data = zareki)
table(zareki$class)
plotjointICC(fitrasch2, xlab = "Subtraction Trait", main = "ICCs Subtraction Items")
library(Gifi)
przar <- princals(itzareki)
przar
# ----------
plot(przar)
plot(przar, "screeplot")
# using all binary ZAREKI addition and subtraction items
itzareki <- zareki[, 1:16]
# ------------------------------------------------------------------------------
# Compute an exploratory Princals in order to get an idea of the structure and dimensionality
# ------------------------------------------------------------------------------
library(Gifi)
przar <- princals(itzareki)
przar
# ----------
plot(przar)
plot(przar, "screeplot")
plot(przar, "loadplot")
zar1d <- mirt(itzareki, 1, itemtype = "2PL")
zar2d <- mirt(itzareki, 2, itemtype = "2PL")
# ----------
# apply an LR-test
anova(zar1d, zar2d)
M2(zar2d)
plotGOF(zar2d, ctrline = list(col = "gray"), conf = list())
ifit2D2pl <- mirt::itemfit(zar2d)
ifit2D2pl
ifit2D2pl[ifit2D2pl[, 5] < 0.05, ]
summary(zar2d)
# ----------
# intercept-slope IRT parameterization
coef(zar2d)
# ----------
# The multidimensional item location
head(MDIFF(zar2d))
# ----------
# person parameters
head(fscores(zar2d))
# ----------
# We can also request to apply an orthogonal or non-orthogonal rotation for better interpretability
summary(zar2d, rotate = "varimax")
summary(zar2d, rotate = "oblimin")
head(fscores(zar2d))
head(MDIFF(zar2d))
summary(zar2d, rotate = "varimax")
summary(zar2d, rotate = "oblimin")
itemplot(zar2d, 3, main = "ICS addit3", rot = list(xaxis = -70, yazis = 50, zaxis = 10))
head(fscores(zar2d))
coef(zar2d)
head(MDIFF(zar2d))
head(fscores(zar2d))
zareki$F1 <- fscores(zar2d$F1)
zareki$F2 <- fscores(zar2d$F2)
zareki$F1 <- fscores(zar2d@F1)
zareki$F1 <- fscores(zar2d)$F1
fscores(zar2d)
zareki$F1 <- fscores(zar2d)[,1]
zareki$F2 <- fscores(zar2d)[,2]
summary(aov(F1 ~ class, data = zareki))
summary(aov(F2 ~ class, data = zareki))
boxplot(F1 ~ class, data = zareki)
boxplot(F2 ~ class, data = zareki)
boxplot(F1 ~ class, data = zareki)
boxplot(F2 ~ class, data = zareki)
boxplot(F1 ~ class, data = zareki)
class2 <- zareki$class
levels(class2) <- c("second", "thirdfourth", "thirdfourth")
# ----------
# We group the class variable into two categories and fit a multigroup 2D-2PL which results in separate sets of parameter estimates for both groups.
# We are interested in testing whether the discrimination parameters (on the first dimension) and the intercepts differ across the two groups.
modMG <- multipleGroup(itzareki, model = 2, group = class2, SE = TRUE)
summary(modMG)
summary(modMG)
astiDIF <- DIF(modMG, c("a1", "d"), Wald = TRUE, p.adjust = "fdr")
round(astiDIF$adj_pvals[astiDIF$adj_pvals < 0.05], 4)
data("WilPat", package = "MPsychoR")
str(WilPat)
dim(WilPat)
head(WilPat)
summary(WilPat)
Hmisc::describe(WilPat)
# ----------
# Let us pick six items: gay marriage, sexual freedom, gay adoption, gender quotas, affirmative action, and legalized marijuana
# and country variable (Hungary, the USA, and India)
WP6 <- WilPat[, c(32, 38, 41, 44, 45, 46, 47)]
# In addition, include 4 more variables:
#   - self-reported liberal-consevative item (re-categorized into 4 categories)  (we will take as ordinal)
#   - self-reported political lef-right identification item on a 10-point scale  (we use a spline transformation since there are many categories)
#   - gender (nominal) and age (linear)
WPmixed <- WilPat[, c(32, 38, 41, 44, 45, 46, 47:51)]
WPmixed <- rapply(WPmixed, f = as.factor, classes = "numeric", how = "replace")
# ------------------------------------------------------------------------------
# Description of a categorical variable by a categorical variable
# ------------------------------------------------------------------------------
library(FactoMineR)
# num.var = 1:  "GayMarriage"
wp.catd <- catdes(WPmixed, num.var = 1)
wp.catd
# ----------
# X^2 test
wp.catd$test.chi
# -->
# The smaller the p-value associated with the X^2 test, the more questionable the independence hypothesis.
# and the more the categorical varaible characterises the variable "GayMarriage".
# the variable "GayAdoption" is the most closely related to the variable "GayMarriage".
# Eliminate 4 items based on 2-dimensional Princals analysis
elim <- c("Nationalism", "Patriotism", "ChurchAuthority", "Obedience")
ind <- match(elim, colnames(wpit15))
wpitnew <- wpit15[, -ind]
library(mirt)
nrmwp <- mirt(wpitnew, 1, itemtype = "nominal")
nrmwp
# ----------
ip1 <- itemplot(nrmwp, 1, main = colnames(wpitnew)[1], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip2 <- itemplot(nrmwp, 3, main = colnames(wpitnew)[3], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip3 <- itemplot(nrmwp, 4, main = colnames(wpitnew)[4], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip4 <- itemplot(nrmwp, 10, main = colnames(wpitnew)[10], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip1, split = c(1, 1, 2, 2), more = TRUE)
print(ip2, split = c(2, 1, 2, 2), more = TRUE)
print(ip3, split = c(1, 2, 2, 2), more = TRUE)
print(ip4, split = c(2, 2, 2, 2), more = FALSE)
wpit15 <- WilPat[,1:15]
names(wpit15)
# ----------
# Eliminate 4 items based on 2-dimensional Princals analysis
elim <- c("Nationalism", "Patriotism", "ChurchAuthority", "Obedience")
ind <- match(elim, colnames(wpit15))
wpitnew <- wpit15[, -ind]
library(mirt)
nrmwp <- mirt(wpitnew, 1, itemtype = "nominal")
nrmwp
# ----------
ip1 <- itemplot(nrmwp, 1, main = colnames(wpitnew)[1], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip2 <- itemplot(nrmwp, 3, main = colnames(wpitnew)[3], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip3 <- itemplot(nrmwp, 4, main = colnames(wpitnew)[4], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip4 <- itemplot(nrmwp, 10, main = colnames(wpitnew)[10], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip1, split = c(1, 1, 2, 2), more = TRUE)
print(ip2, split = c(2, 1, 2, 2), more = TRUE)
print(ip3, split = c(1, 2, 2, 2), more = TRUE)
print(ip4, split = c(2, 2, 2, 2), more = FALSE)
print(ip1)
M2(nrmwp)
M2(nrmwp)
str(WilPat)
print(ip1, split = c(1, 1, 2, 2), more = TRUE)
print(ip2, split = c(2, 1, 2, 2), more = TRUE)
print(ip3, split = c(1, 2, 2, 2), more = TRUE)
print(ip4, split = c(2, 2, 2, 2), more = FALSE)
wpitnew
help(WilPat)
plot(nrmwp, type = "infotrace", main = "Item Information")
plot(nrmwp, type = "info", main = "Test Information")
plot(nrmwp, type = "infotrace", main = "Item Information")
# ----------
ip1 <- itemplot(nrmwp, 1, main = colnames(wpitnew)[1], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip1, split = c(1, 1, 2, 2), more = TRUE)
# ----------
ip1 <- itemplot(nrmwp, 1, main = colnames(wpitnew)[1], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip2 <- itemplot(nrmwp, 3, main = colnames(wpitnew)[3], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip3 <- itemplot(nrmwp, 4, main = colnames(wpitnew)[4], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
ip4 <- itemplot(nrmwp, 10, main = colnames(wpitnew)[10], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
# ----------
print(ip1, split = c(1, 1, 2, 2), more = TRUE)
print(ip2, split = c(2, 1, 2, 2), more = TRUE)
print(ip3, split = c(1, 2, 2, 2), more = TRUE)
print(ip4, split = c(2, 2, 2, 2), more = FALSE)
names(wpitnew)
ip5 <- itemplot(nrmwp, 8, main = colnames(wpitnew)[8], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip5, split = c(2, 2, 2, 2), more = FALSE)
ip5 <- itemplot(nrmwp, 2, main = colnames(wpitnew)[8], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip5, split = c(2, 2, 2, 2), more = FALSE)
ip5 <- itemplot(nrmwp, 2, main = colnames(wpitnew)[2], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip5, split = c(2, 2, 2, 2), more = FALSE)
plot(nrmwp, type = "infotrace", main = "Item Information")
print(ip6, split = c(2, 2, 2, 2), more = FALSE)
ip6 <- itemplot(nrmwp, 6, main = colnames(wpitnew)[6], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip6, split = c(2, 2, 2, 2), more = FALSE)
print(ip5)
print(ip6)
ip7 <- itemplot(nrmwp, 9, main = colnames(wpitnew)[9], auto.key = list(text = c("disapprove", "approve", "don't know"), cex = 0.7))
print(ip7)
wpitnew[,"privatization"]
wpitnew[,"Privatization"]
wpitnew$Privatization
table(wpitnew$Privatization)
table(wpitnew$LowerTaxes)
xtabs(~ Privatization + LowerTaxes)
xtabs(~ Privatization + LowerTaxes, data = wpitnew)
add.margins(xtabs(~ Privatization + LowerTaxes, data = wpitnew))
addmargins(xtabs(~ Privatization + LowerTaxes, data = wpitnew))
mozaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew))
mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew))
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew))
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew), shade = TRUE, labels = labeling_residuals)
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew), shade = TRUE)
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew), shade = TRUE, interpolate = 1:8)
library(vcd)
help(mosaic)
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew), shade = TRUE, gp = args(list = interpolate = 1:8))
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew), shade = TRUE, gp = list(interpolate = 1:8))
vcd::mosaic(xtabs(~ Privatization + LowerTaxes, data = wpitnew), gp = list(shade = TRUE, interpolate = 1:8))
xtabs(~ Privatization + LowerTaxes, data = wpitnew)
sapply(1:ncol(wpitnew), function(x) table(wpitnew[,x]))
sapply(1:ncol(wpitnew), function(x) table(wpitnew[,x] %>% pull()))
sapply(1:ncol(wpitnew), function(x) table(wpitnew[[x]]))
lapply(1:ncol(wpitnew), function(x) table(wpitnew[[x]]))
names(wpitnew)
print(ip6)
names(WilPat)
