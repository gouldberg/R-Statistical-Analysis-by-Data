data(EQcount, package = "astsa")
str(EQcount)
EQcount
fit_gmx <- gamlssMXfits(formula = EQcount ~ 1, K = 3, data = EQcount, family = PO, plot.opt = 0)
fit_gmx
fit_gmx <- gamlssMXfits(formula = EQcount ~ 1, K = 3, data = EQcount, family = PIG, plot.opt = 0)
fit_gmx <- gamlssMXfits(formula = EQcount ~ 1, K = 3, data = EQcount, family = PO, plot.opt = 0)
fit_gmx
eqc.2 <- gamlssNP(formula = EQcount ~ 1, mixture = "np", K = 2, tol = 1, data = EQcount, family = PO, plot.opt = 0)
eqc.1 <- gamlssNP(formula = EQcount ~ 1, mixture = "np", K = 1, tol = 1, data = EQcount, family = PO, plot.opt = 0)
eqc.2 <- gamlssNP(formula = EQcount ~ 1, K = 2, tol = 1, data = EQcount, family = PO, plot.opt = 0)
eqc.2 <- gamlssNP(formula = EQcount, K = 2, tol = 1, data = EQcount, family = PO, plot.opt = 0)
eqc.1 <- gamlssNP(formula = EQcount ~ 1, mixture = "np", K = 1, tol = 1, data = EQcount, family = PO, plot.opt = 0)
eqc.1 <- gamlssNP(formula = EQcount ~ 1, mixture = "np", K = 2, tol = 1, data = EQcount, family = PO, plot.opt = 0)
fit_gmx1 <- gamlssMXfits(formula = EQcount ~ 1, K = 1, data = EQcount, family = PO, plot.opt = 0)
fit_gmx2 <- gamlssMXfits(formula = EQcount ~ 1, K = 2, data = EQcount, family = PO, plot.opt = 0)
fit_gmx3 <- gamlssMXfits(formula = EQcount ~ 1, K = 3, data = EQcount, family = PO, plot.opt = 0)
fit_gmx4 <- gamlssMXfits(formula = EQcount ~ 1, K = 4, data = EQcount, family = PO, plot.opt = 0)
GAIC(fit_gmx1, fit_gmx2, fit_gmx3, fit_gmx4)
GAIC(fit_gmx1, fit_gmx2, fit_gmx3, fit_gmx4, k = log(length(EQcount)))
length(EQcount)
GAIC(fit_gmx1, fit_gmx2, fit_gmx3, fit_gmx4, k = log(length(EQcount)))
fit_gmx3
show.link(PO)
mu <- c(exp(2.537), exp(2.98), exp(3.451))
eqc <- seq(0, 100, by = 1)
mu <- c(exp(2.537), exp(2.98), exp(3.451))
pi <- c(0.2678837, 0.5999115, 0.1322048)
fyPO <- dMX(y = eqc,
mu = mu,
pi = pi,
family = list("PO", "PO", "PO"))
eqc_x <- seq(0, 100, by = 1)
mu <- c(exp(2.537), exp(2.98), exp(3.451))
pi <- c(0.2678837, 0.5999115, 0.1322048)
fyPO <- dMX(y = eqc_x,
mu = mu,
pi = pi,
family = list("PO", "PO", "PO"))
plot(fyPO ~ eqc_x, type="l")
fyPO1 <- dpois(x = eqc_x, mean = mu[1])
fyPO2 <- dpois(x = eqc_x, mean = mu[2])
fyPO3 <- dpois(x = eqc_x, mean = mu[3])
plot(eqc_x, fyPO1, type="l", lty = 2, col = "black", xlim = c(0, 100), ylim = c(0, 5))
lines(eqc_x, fyPO2, type="l", lty = 1, col = "blue")
lines(eqc_x, fyPO3, type="l", lty = 3, col = "red")
fyPO1 <- dpois(x = eqc_x, mean = mu[1])
fyPO2 <- dpois(x = eqc_x, mean = mu[2])
fyPO3 <- dpois(x = eqc_x, mean = mu[3])
fyPO1 <- dpois(x = eqc_x, mu = mu[1])
help(dppoi)
help(dpois)
fyPO1 <- dpois(x = eqc_x, lambda = mu[1])
fyPO2 <- dpois(x = eqc_x, lambda = mu[2])
fyPO3 <- dpois(x = eqc_x, lambda = mu[3])
plot(eqc_x, fyPO1, type="l", lty = 2, col = "black", xlim = c(0, 100), ylim = c(0, 5))
lines(eqc_x, fyPO2, type="l", lty = 1, col = "blue")
lines(eqc_x, fyPO3, type="l", lty = 3, col = "red")
plot(eqc_x, fyPO1, type="l", lty = 2, col = "black", xlim = c(0, 100), ylim = c(0, 0.2))
lines(eqc_x, fyPO2, type="l", lty = 1, col = "blue")
lines(eqc_x, fyPO3, type="l", lty = 3, col = "red")
plot(eqc_x, fyPO1, type="l", lty = 2, col = "black", xlim = c(0, 100), ylim = c(0, 0.15))
lines(eqc_x, fyPO2, type="l", lty = 1, col = "blue")
lines(eqc_x, fyPO3, type="l", lty = 3, col = "red")
fn <- getpdfMX(fit_gmx3)
par(mfrow = c(1,1))
MASS::truehist(EQcount, nbins = 30, col = "grey", xlab = "EarthQuake count")
lines(eqc_x, fn(eqc_x), lty = 1, lwd = 2, col = "blue")
par(mfrow=c(1,1))
plot(EQcount)
# spar = 0.5 to emphasize the mid-term effect, and spar = 1 to emphasize the trend
lines(smooth.spline(time(EQcount), EQcount, spar = 0.5), lwd = 2, col = 4)
lines(smooth.spline(time(EQcount), EQcount, spar = 1), lwd = 2, col = 2)
par(mfrow=c(1,1))
plot(EQcount)
# spar = 0.5 to emphasize the mid-term effect, and spar = 1 to emphasize the trend
lines(smooth.spline(time(EQcount), EQcount, spar = 0.3), lwd = 2, col = "blue")
lines(smooth.spline(time(EQcount), EQcount, spar = 0.5), lwd = 2, col = "red")
lines(smooth.spline(time(EQcount), EQcount, spar = 1), lwd = 2, col = "black")
graphics.off()
par(mfrow = c(1, 1))
# acf2:  produces a simultaneous plot (and a printout) of the sample ACF and PACF
# The zero lag value of the ACF is removed.
astsa::acf2(EQcount, 48, main = "Annual count of major earthquakes")
astsa::acf2(diff(EQcount), 48, main = "Annual count of major earthquakes")
# -->
# The ACF and PACF seems to be consistent with the behaviour of an ARIMA(2,1,1) ...
# but the ACF is not tailing off ...
# It would be possible to take into account the overdispersion by using distributions for counts such as the negative binomial distribution
# or a mixture of Poisson distributions.
# This approach, however, ignores the sample ACF and PACF, which indicate the observations are serially correlated.
astsa::acf2(EQcount, 48, main = "Annual count of major earthquakes")
astsa::acf2(diff(EQcount), 48, main = "Annual count of major earthquakes")
nextn(length(EQcount))
graphics.off()
par(mfrow=c(2,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
eqc.per <- astsa::mvspec(EQcount, log = "no")
eqc.per2 <- astsa::mvspec(EQcount, log = "yes")
eqc.per$spec
eqc.per$freq[4]
eqc.per$freq[17]
eqc.per$freq[29]
nextn(length(EQcount)) / 2 * eqc.per$freq[4]
nextn(length(EQcount)) / 2 * eqc.per$freq[17]
nextn(length(EQcount)) / 2 * eqc.per$freq[29]
2 * eqc.per$freq[4]
nextn(length(EQcount))
eqc.per$freq[4]
54*0.037
L <- 1
L <- 3
m <- (L-1)/2
par(mfrow=c(2,1))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
eqc.ave <- astsa::mvspec(EQcount, kernel("daniell", m), log = "no")
# obtain coefficients of modefied Daniell kernel
m <- 1
( ker <- kernel("modified.daniell", c(m,m)) )
plot(ker)
# ----------
# taper:  generally have a shape that enhances the center of the data relative to the extremities, such as a cosine bell of the form
#  - taper = 0.1:  tapering the upper and lower 10% of the data
graphics.off()
par(mfrow=c(1,1))
eqc.smo <- astsa::mvspec(EQcount, kernel = ker, taper = 0.1, log = "no")
# -->
# There have been many attempts at dealing with the problem of smoothing the periodogram in a automatic way;
# an early reference is Wahba.
# Consequently, it is perhaps better to perform automatic adaptive smoothing for estimating the spectrum.
# We refer interested readers to Fan and Kreutzberger and the numerous references within.
n <- length(EQcount)
AIC <- rep(0, 40) -> AICc -> BIC
# var.pred:  the prediction variance, an estimate of the portion of the variance of the time series
# that is not explained by the autoregressive model
for(k in 1:40){
sigma2 <- ar(EQcount, order = k, aic = FALSE)$var.pred
BIC[k] <- log(sigma2) + (k * log(n) / n)
AICc[k] <- log(sigma2) + ((n + k) / (n - k - 2))
AIC[k] <- log(sigma2) + ((n + 2 * k) / n)
}
# AICc is nearly identical to BIC, so we plot only AIC and BIC
# We added +1 to the BIC to reduce white space in the graphic
IC <- cbind(AIC, BIC + 1)
ts.plot(IC, type =c("o"), xlab = "p", ylab = "AIC / BIC")
# ------------------------------------------------------------------------------
# Spectral analysis:  Autoregressive spectral estimator for SOI
# ------------------------------------------------------------------------------
graphics.off()
# spec.ar() to fit the best model via AIC and plot the resulting spectrum
spaic <- spec.ar(EQcount, log = "no")
# ----------
spaic$method
# -->
# AR(3) spectrum
sarima(EQcount, p = 2, d = 1, q = 1, no.constant = TRUE)
library(astsa)
sarima(EQcount, p = 2, d = 1, q = 1, no.constant = TRUE)
sarima(EQcount, p = 3, d = 0, q = 0, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 0, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 1, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 0, no.constant = TRUE)
sarima(EQcount, p = 1, d = 1, q = 0, no.constant = TRUE)
sarima(EQcount, p = 3, d = 1, q = 1, no.constant = TRUE)
sarima(EQcount, p = 2, d = 1, q = 1, no.constant = TRUE)
astsa::acf2(diff(EQcount), 48, main = "Annual count of major earthquakes")
astsa::acf2(EQcount, 48, main = "Annual count of major earthquakes")
sarima(EQcount, p = 1, d = 0, q = 7, no.constant = TRUE)
sarima(EQcount, p = 2, d = 1, q = 1, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 7, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 2, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 1, no.constant = TRUE)
sarima(EQcount, p = 3, d = 0, q = 1, no.constant = TRUE)
sarima(EQcount, p = 3, d = 0, q = 0, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 1, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 2, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 7, no.constant = TRUE)
sarima(EQcount, p = 2, d = 1, q = 1, no.constant = TRUE)
sarima(EQcount, p = 3, d = 0, q = 0, no.constant = TRUE)
sarima(EQcount, p = 1, d = 0, q = 1, no.constant = TRUE)
sarima.for(EQcount, n.ahead = 10, p = 1, d = 0, q = 1, P = 0, D = 0, Q = 0, xreg=time(Eqcount))
sarima.for(EQcount, n.ahead = 10, p = 1, d = 0, q = 1, P = 0, D = 0, Q = 0, xreg=time(EQcount))
sarima.for(EQcount, n.ahead = 10, p = 1, d = 0, q = 1, P = 0, D = 0, Q = 0)
sarima.for(EQcount, n.ahead = 10, p = 1, d = 0, q = 7, P = 0, D = 0, Q = 0)
deqc <- diff(EQcount)
# ----------
# Lag 1 - 3
Z <- ts.intersect(deqc, stats::lag(deqc, -1), stats::lag(deqc, -2), stats::lag(deqc, -3))
# ----------
# 2 regime by threshold = -3: we focus on rapidly decreasing of count of earchquakes
thrsh <- -3
ind1 <- ifelse(Z[,2] < thrsh, 1, NA)
ind2 <- ifelse(Z[,2] < thrsh, NA, 1)
X1 <- Z[,1] * ind1
X2 <- Z[,1] * ind2
# ----------
# regression by each regime with lag 1 - 3
summary(fit1 <- lm(X1 ~ Z[,2:4]))
summary(fit2 <- lm(X2 ~ Z[,2:4]))
# -->
# both models are not significant
# ----------
plot(fit1)
D <- cbind(rep(1, nrow(Z)), Z[,2:4])
# ----------
# get predictions
p1 <- D %*% coef(fit1)
p2 <- D %*% coef(fit2)
prde1 <- sqrt(sum(resid(fit1)^2) / df.residual(fit1))
prde2 <- sqrt(sum(resid(fit2)^2) / df.residual(fit2))
# ----------
prd <- ifelse(Z[,2] < thrsh, p1, p2)
prde <- ifelse(Z[,2] < thrsh, prde1, prde2)
tx <- time(deqc)[-c(1:3)]
xx <- c(tx, rev(tx))
yy <- c(prd - 2 * prde, rev(prd + 2 * prde))
par(mfrow=c(1,1))
plot(deqc, ylim = c(-30, 20), type = "p", pch = 3)
lines(prd)
polygon(xx, yy, border = 8, col = gray(0.6, alpha = 0.25))
abline(h = thrsh, col = 4, lty = 6)
# -->
# The model does not fit well ...
library(tsDyn)
deqc <- diff(EQcount)
# ----------
# Self Threshold Autoregressive model
# m:  embedding dimensions
# thDelay:  time delay for the threshold variable (as multiple of embedding time delay d)
# th:  threshold value (if missing, a search over a reasonable grid is tried)
u <- setar(deqc, m = 4, thDelay = 0, th = -3)
plot(u)
library(tsDyn)
deqc <- diff(EQcount)
install.packages("tsDyn", dep = T)
library(tsDyn)
deqc <- diff(EQcount)
# ----------
# Self Threshold Autoregressive model
# m:  embedding dimensions
# thDelay:  time delay for the threshold variable (as multiple of embedding time delay d)
# th:  threshold value (if missing, a search over a reasonable grid is tried)
u <- setar(deqc, m = 4, thDelay = 0, th = -3)
plot(u)
par(mfrow = c(3,3))
plot(u)
par(mfrow = c(3,3))
plot(u)
# let program fit threshold
u2 <- setar(deqc, m = 4, thDelay = 0)
u2$coefficients
# -->
# threshold = 5 ...?
# ----------
plot(u2)
library(depmixS4)
model <- depmix(EQcount ~ 1, nstates = 2, data = data.frame(EQcount), family = poisson())
model
# ----------
# Estimation results
set.seed(90210)
summary(fm <- fit(model))
# ----------
# Get parameters
# ensure state 1 has smaller lambda
u <- as.vector(getpars(fm))
if(u[7] <= u[8]){
para.mle <- c(u[3:6], exp(u[7]), exp(u[8]))
} else {
para.mle <- c(u[6:3], exp(u[8]), exp(u[7]))
}
( mtrans <- matrix(para.mle[1:4], byrow = TRUE, nrow = 2) )
( lams <- para.mle[5:6] )
# ----------
# ratio of mixtures
( pi1 <- mtrans[2,1] / ( 2 - mtrans[1,1] - mtrans[2,2] ) )
( pi2 <- 1 - pi1 )
layout(matrix(c(1,2,1,3), 2))
# Earthquake count data and estimated states
par(mar = c(3,3,1,1), mgp = c(1.6, 0.6, 0))
plot(EQcount, main = "", ylab = "EQcount", type = "h", col = gray(0.7))
text(EQcount, col = 6 * posterior(fm)[,1] - 2, labels = posterior(fm)[,1], cex = 0.9)
plot(ts(posterior(fm)[,3], start = 1900), ylab  = expression(hat(pi)[~2] * '(t|n)'))
abline(h = 0.5, lty = 2)
xvals <- seq(1, 45)
u1 <- pi1 * dpois(xvals, lams[1])
u2 <- pi2 * dpois(xvals, lams[2])
hist(EQcount, breaks = 30, prob = TRUE, main = "")
lines(xvals, u1, col = 4)
lines(xvals, u2, col = 2)
pois.HMM.generate_sample <- function(n, m, lambda, Mtrans, StatDist = NULL){
if(is.null(StatDist)) StatDist <- solve(t(diag(m) - Mtrans + 1), rep(1, m))
mvect <- 1:m
state <- numeric(n)
state[1] <- sample(mvect, 1, prob = StatDist)
for(i in 2:n) state[i] <- sample(mvect, 1, prob = Mtrans[state[i-1], ])
y <- rpois(n, lambda = lambda[state])
list(y = y, state = state)
}
# ----------
# start it up
set.seed(10101101)
nboot <- 1000
nobs <- length(EQcount)
para.star <- matrix(NA, nrow = nboot, ncol = 6)
for(j in 1:nboot){
x.star <- pois.HMM.generate_sample(n = nobs, m = 2, lambda = lams, Mtrans = mtrans)$y
model <- depmix(x.star ~ 1, nstates = 2, data = data.frame(x.star), family = poisson())
u <- as.vector(getpars(fit(model, verbose = 0)))
# make sure state 1 is the one with tehs smaller intensity parameter
if(u[7] <= u[8]){
para.star[j,] <- c(u[3:6], exp(u[7]), exp(u[8]))
} else { para.star[j,] <- c(u[6:3], exp(u[8]), exp(u[7])) }
}
para.mle
# bootstrapped std errors
SE <- sqrt(apply(para.star, 2, var) + (apply(para.star, 2, mean) - para.mle)^2)[c(1,4:6)]
names(SE) <- c("seM11 / M12", "seM21 / M22", "seLam1", "seLam2")
SE
summary(fm <- fit(model))
deqc <- sp500w_c
u2 <- setar(deqc, m = 4, thDelay = 0)
u2$coefficients
u2 <- setar(deqc, m = 4, thDelay = 1)
u2$coefficients
# ----------
plot(u2)
u2 <- setar(deqc, m = 4, thDelay = 1)
u2$coefficients
deqc
data(sp500w, package = "astsa")
# this is xts object
str(sp500w)
# convert to ts object
sp500w_c <- ts(sp500w, start = 2003, freq = 52)
# ------------------------------------------------------------------------------
# Threshold modeling (TARMA) by tsDyn
#   - The basic idea is that of fitting local linear ARMA models
# ------------------------------------------------------------------------------
library(tsDyn)
deqc <- sp500w_c
u2 <- setar(deqc, m = 4, thDelay = 0)
u2$coefficients
plot(u2)
u <- setar(deqc, m = 4, thDelay = 0, th = -0.01)
par(mfrow = c(3,3))
plot(u)
par(mfrow = c(3,3))
plot(u)
# let program fit threshold
u2 <- setar(deqc, m = 10, thDelay = 0)
u2$coefficients
# -->
# threshold = 5 ...?
# ----------
plot(u2)
deqc
Z <- ts.intersect(deqc, stats::lag(deqc, -1), stats::lag(deqc, -2), stats::lag(deqc, -3))
# 2 regime by threshold = -3: we focus on rapidly decreasing of count of earchquakes
thrsh <- -3
ind1 <- ifelse(Z[,2] < thrsh, 1, NA)
ind2 <- ifelse(Z[,2] < thrsh, NA, 1)
X1 <- Z[,1] * ind1
X2 <- Z[,1] * ind2
thrsh <- -0.01
ind1 <- ifelse(Z[,2] < thrsh, 1, NA)
ind2 <- ifelse(Z[,2] < thrsh, NA, 1)
X1 <- Z[,1] * ind1
X2 <- Z[,1] * ind2
summary(fit1 <- lm(X1 ~ Z[,2:4]))
summary(fit2 <- lm(X2 ~ Z[,2:4]))
# -->
# both models are not significant
# ----------
plot(fit1)
summary(fit1 <- lm(X1 ~ Z[,2:4]))
summary(fit2 <- lm(X2 ~ Z[,2:4]))
# ----------
plot(fit1)
# design matrix
D <- cbind(rep(1, nrow(Z)), Z[,2:4])
# ----------
# get predictions
p1 <- D %*% coef(fit1)
p2 <- D %*% coef(fit2)
# ----------
prde1 <- sqrt(sum(resid(fit1)^2) / df.residual(fit1))
prde2 <- sqrt(sum(resid(fit2)^2) / df.residual(fit2))
# ----------
prd <- ifelse(Z[,2] < thrsh, p1, p2)
prde <- ifelse(Z[,2] < thrsh, prde1, prde2)
tx <- time(deqc)[-c(1:3)]
xx <- c(tx, rev(tx))
yy <- c(prd - 2 * prde, rev(prd + 2 * prde))
# ----------
# (+): First differenced
# one-month-ahead predictions (solid line) with +-2 prediction error bounds
# horizontal line is the threshold
par(mfrow=c(1,1))
plot(deqc, ylim = c(-30, 20), type = "p", pch = 3)
lines(prd)
polygon(xx, yy, border = 8, col = gray(0.6, alpha = 0.25))
abline(h = thrsh, col = 4, lty = 6)
# -->
# The model does not fit well ...
par(mfrow=c(1,1))
plot(deqc, ylim = c(-0.1, 0.1), type = "p", pch = 3)
lines(prd)
polygon(xx, yy, border = 8, col = gray(0.6, alpha = 0.25))
abline(h = thrsh, col = 4, lty = 6)
help(setar)
mod.setar <- setar(log10(lynx), m=2, thDelay=1, th=3.25)
mod.setar
plot(lynx)
help(lynx)
mod.setar
plot(mod.star)
plot(mod.setar)
mod.setar <- setar(log10(lynx), m=2)
mod.setar
plot(mod.setar)
selectSETAR(sp500w_c, m = 4)
selectSETAR(sp500w_c, m = 10)
u3 <- setar(sp500w_c, thDelay = 0, mL = 3, mH = 2, th = -0.01947625)
u3$coefficients
plot(u3)
selectSETAR(sp500w_c, m = 4, nthresh = 3)
u3 <- setar(sp500w_c, thDelay = 0, nthresh = 3)
u3 <- setar(sp500w_c, thDelay = 0, nthresh = 3, mL = 3, mH = 3)
u3 <- setar(sp500w_c, thDelay = 0, nthresh = 3, mL = 3, mH = 3)
u3 <- setar(sp500w_c, thDelay = 0, nthresh = 2, mL = 3, mH = 3)
u3 <- setar(sp500w_c, thDelay = 0, nthresh = 2, mL = 3, mH = 3, mM = 3)
u3$coefficients
plot(u3)
u3 <- setar(sp500w_c, nthresh = 3)
u3 <- setar(sp500w_c, nthresh = 3, mL = 4)
u3 <- setar(sp500w_c, nthresh = 3, mL = 4, mH = 4, mM = 4)
u3$coefficients
selectSETAR(sp500w_c, m = 5, nthresh = 2)
deqc <- diff(EQcount)
selectSETAR(deqc, m = 10)
selectSETAR(deqc_c, m = 5, nthresh = 2)
selectSETAR(deqc, m = 5, nthresh = 2)
u3 <- setar(deqc, thDelay = 0, nthresh = 5)
selectSETAR(deqc, m = 10)
u3 <- setar(deqc, thDelay = 0, thresh = 5, mL = 2, mH = 10)
u3 <- setar(deqc, thDelay = 0, th = 5, mL = 2, mH = 10)
u3$coefficients
plot(u3)
u3 <- setar(deqc, thDelay = 0, nthresh = 2)
u3 <- setar(deqc, thDelay = 0, nthresh = 2, mL = 2, mH = 10)
u3 <- setar(deqc, thDelay = 0, nthresh = 2, mL = 5, mH = 5, mM = 5)
u3$coefficients
plot(u3)
deqc <- diff(EQcount)
# ----------
# Lag 1 - 3
Z <- ts.intersect(deqc, stats::lag(deqc, -1), stats::lag(deqc, -2), stats::lag(deqc, -3))
# ----------
# 2 regime by threshold = -3: we focus on rapidly decreasing of count of earchquakes
thrsh <- -3
ind1 <- ifelse(Z[,2] < thrsh, 1, NA)
ind2 <- ifelse(Z[,2] < thrsh, NA, 1)
X1 <- Z[,1] * ind1
X2 <- Z[,1] * ind2
# ----------
# regression by each regime with lag 1 - 3
summary(fit1 <- lm(X1 ~ Z[,2:4]))
summary(fit2 <- lm(X2 ~ Z[,2:4]))
# -->
# both models are not significant
# ----------
plot(fit1)
# ----------
# design matrix
D <- cbind(rep(1, nrow(Z)), Z[,2:4])
# ----------
# get predictions
p1 <- D %*% coef(fit1)
p2 <- D %*% coef(fit2)
# ----------
prde1 <- sqrt(sum(resid(fit1)^2) / df.residual(fit1))
prde2 <- sqrt(sum(resid(fit2)^2) / df.residual(fit2))
# ----------
prd <- ifelse(Z[,2] < thrsh, p1, p2)
prde <- ifelse(Z[,2] < thrsh, prde1, prde2)
tx <- time(deqc)[-c(1:3)]
xx <- c(tx, rev(tx))
yy <- c(prd - 2 * prde, rev(prd + 2 * prde))
# ----------
# (+): First differenced
# one-month-ahead predictions (solid line) with +-2 prediction error bounds
# horizontal line is the threshold
par(mfrow=c(1,1))
plot(deqc, ylim = c(-30, 20), type = "p", pch = 3)
lines(prd)
polygon(xx, yy, border = 8, col = gray(0.6, alpha = 0.25))
abline(h = thrsh, col = 4, lty = 6)
# -->
# The model does not fit well ...
EQcount
SE <- sqrt(apply(para.star, 2, var) + (apply(para.star, 2, mean) - para.mle)^2)[c(1,4:6)]
names(SE) <- c("seM11 / M12", "seM21 / M22", "seLam1", "seLam2")
SE
para.star
( pi1 <- mtrans[2,1] / ( 2 - mtrans[1,1] - mtrans[2,2] ) )
( pi2 <- 1 - pi1 )
( mtrans <- matrix(para.mle[1:4], byrow = TRUE, nrow = 2) )
( lams <- para.mle[5:6] )
SE
astsa::acf2(EQcount, 48, main = "Annual count of major earthquakes")
astsa::acf2(diff(EQcount), 48, main = "Annual count of major earthquakes")
