data("parzen", package = "gamlss.data")
str(parzen)
car::some(parzen)
MASS::truehist(parzen$snowfall, nbins = 25, col = "grey", xlab = "Snowfall", ylab = "Density", ylim = c(0, 0.05))
lines(histSmo(parzen$snowfall), lty = 1, lwd = 2)
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
lines(histSmo(parzen$snowfall), lty = 1, lwd = 2)
lines(histSmoC(parzen$snowfall, df = 7), lty = 2, lwd = 2)
legend("topright", legend = c("local ML", "fixed df"), lty = 1:2, cex = 1.5)
legend("topright", legend = c("local ML", "fixed df"), lty = 1:2, cex = 0.8)
MASS::truehist(parzen$snowfall, nbins = 25, col = "grey", xlab = "Snowfall", ylab = "Density", ylim = c(0, 0.05))
lines(histSmo(parzen$snowfall), lty = 1, lwd = 2)
lines(histSmoC(parzen$snowfall, df = 7), lty = 2, lwd = 2)
legend("topright", legend = c("local ML", "fixed df"), lty = 1:2, cex = 0.8)
graphics.off()
MASS::truehist(parzen$snowfall, nbins = 25, col = "grey", xlab = "Snowfall", ylab = "Density", ylim = c(0, 0.05))
lines(histSmo(parzen$snowfall), lty = 1, lwd = 2)
lines(histSmoC(parzen$snowfall, df = 7), lty = 2, lwd = 2)
legend("topright", legend = c("local ML", "fixed df"), lty = 1:2, cex = 1.0)
mod1 <- fitDist(snowfall, data=parzen, k=2)
mod2 <- fitDist(snowfall, data=parzen, k=log(dim(parzen)[1]))
mod1 <- fitDist(snowfall, data=parzen, k=2)
mod1 <- fitDist(snowfall, data=parzen, k=2, type ~ "realAll")
mod1 <- fitDist(snowfall, data=parzen, k=2, type = "realAll")
mod1
mod1$fit[1:6]
mod1$fit
mod2$fit
m1 <- histDist(parszen$snowfall, "WEI3", density = TRUE, line.col = c(1,1), line.ty = c(1,2))
m1 <- histDist(parzen$snowfall, "WEI3", density = TRUE, line.col = c(1,1), line.ty = c(1,2))
m1
m1
show.link("WEI3")
plot(m1)
wp(m1)
m1 <- gamlss(snowfall ~ 1, data = parzen, family = WEI3, trace = FALSE)
summary(m1)
vcov(m1, type = "se")
m1$parameters
m1$mu.fv
m1$mu.terms
m1$mu.lp
m1$mu.coefficients
m1$sigma.coefficients
vcov(m1, type = "se")
exp(sgm - 1.96 * vcov(m1, type="se")[2])
exp(sgm + 1.96 * vcov(m1, type="se")[2])
sgm <- m1$sigma.coefficients
exp(sgm - 1.96 * vcov(m1, type="se")[2])
exp(sgm + 1.96 * vcov(m1, type="se")[2])
prof.dev(m1, "sigma", min=3, max=4.8, step=0.01, type="l")
prof.dev(m1, "sigma", min=3, max=4.8, step=0.01, type="1")
prof.dev(m1, "sigma", min=3, max=4.8, step=0.01, type="l")
prof.dev(m1, "sigma", min=3, max=4.8, step=0.01)
library(boot)
set.seed(1453)
mod1 <- gamlss(snowfall ~ 1, data = parzen, family = WEI3, trace = FALSE)
funB <- function(data, i){
d <- data.frame(snowfall = data[i,])
coef(update(mod1, data = d), "sigma")
}
( mod1.boot < boot(parzen, funB, R=199, parallel="multicore", ncpus = 4) )
library(boot)
set.seed(1453)
mod1 <- gamlss(snowfall ~ 1, data = parzen, family = WEI3, trace = FALSE)
funB <- function(data, i){
d <- data.frame(snowfall = data[i,])
coef(update(mod1, data = d), "sigma")
}
( mod1.boot < boot(parzen, funB, R=199, parallel="multicore", ncpus = 4) )
( mod1.boot <- boot(parzen, funB, R=199, parallel="multicore", ncpus = 4) )
boot.ci(mod1.boot, type = c("norm", "basic"))
data("aids", package = "gamlss.data")
str(aids)
car::some(aids)
# ------------------------------------------------------------------------------
# basics
# ------------------------------------------------------------------------------
car::scatterplot(y ~ x, data = fabric)
data("abdom", package = "gamlss.data")
str(abdom)
car::some(abdom)
# ------------------------------------------------------------------------------
# basics
# ------------------------------------------------------------------------------
car::scatterplot(y = abdom$y, x = abdom$x)
data("abdom", package = "gamlss.data")
str(abdom)
car::some(abdom)
# ------------------------------------------------------------------------------
# ordinary regression
# ------------------------------------------------------------------------------
mod.lm <- lm(y ~ x, data = abdom)
summary(mod.lm)
# ----------
par(mfrow = c(2,2))
plot(mod.lm)
# ------------------------------------------------------------------------------
# Check residuals
# ------------------------------------------------------------------------------
car::residualPlots(mod.lm)
ncvTest(mod.lm)
# -->
# Non-constant variance changes with the level fo the response.
# ------------------------------------------------------------------------------
# Data Exploration:  data transformation for "y"
# ------------------------------------------------------------------------------
# check density
car::densityPlot( ~ y, data = abdom)
# transforming for symmetry
car::symbox(~ y, data = abdom)
# check Box-Cox power family transformation
# Rounded Pwr is the first value among {1, 0, -1, 0.5, 0.33, -0.5, -0.33, 2, -2} that is included in the confidence interval for lambda
# The test for the log transformation has a very large p-value, indicating that the log transformation is consistent with the data,
p1 <- car::powerTransform(y ~ 1, data = abdom, family = "bcnPower")
summary(p1)
data("grip", package = "gamlss.data")
str(grip)
car::some(grip)
# ------------------------------------------------------------------------------
# basics
# ------------------------------------------------------------------------------
lattice::xyplot(grip ~ age, data = grip, type = c("g", "p", "smooth"), col.line = "black", pch = 20, col = gray(0.8))
par(mfrow=c(1,1))
# Here we fit BCCGo distribution
m0 <- lms(grip, age, data = grip, families = c("BCCGo"), trans.x = FALSE, k = 2)
m0
edfAll(m0)
plot(m0)
help(lms)
