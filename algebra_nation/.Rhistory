# resi <- resid(linmod)
summary(resi)
car::densityPlot(resi)
resi <- residuals(linmod)
linmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
# linmod <- lm(involact ~ race + fire + theft + age + income, data = chredlin)
# ------------------------------------------------------------------------------
# model diagnostics:  residuals
# ------------------------------------------------------------------------------
resi <- residuals(linmod)
# resi <- resid(linmod)
summary(resi)
car::densityPlot(resi)
car::residualPlots(linmod)
residualPlot(linmod, groups = chredlin$side)
confint(linmod)
confint.default(linmod, level = 0.95)
car::Confint(linmod)
library(effects)
eff <- effects::allEffects(linmod)
eff
# ----------
# plot main effets of each variable
plot(eff)
plot(predictorEffects(linmod))
predictorEffects(linmod)
plot(predictorEffects(linmod))
predictorEffects(linmod)
plot(eff)
summary(linmod)
stand.resid4 <- rstandard(linmod)
# studentized Residuals
stud.resid4 <- rstudent(linmod)
# ----------
par(mfrow=c(2,1))
plot(stand.resid4, ylim = c(min(-3, stand.resid4), max(3, stand.resid4)), main = "Standardized residuals", type = "h")
abline(h = c(3,2,0,-2,-3), lty = "dotted", col = c("red", "blue", "gray", "blue", "red"))
plot(stud.resid4, ylim = c(min(-3, stud.resid4), max(3, stud.resid4)), main = "Studentized residuals", type = "h")
abline(h = c(3,2,0,-2,-3), lty = "dotted", col = c("red", "blue", "gray", "blue", "red"))
car::influenceIndexPlot(linmod, vars = c("studentized"))
car::outlierTest(linmod)
par(mfrow = c(1,1))
influencePlot(linmod)
op <- par(mar = c(5, 4, 1, 1) + .1, cex.lab = 1.2)
res <- car::influencePlot(linmod, scale = 8)
k <- length(coef(linmod))
n <- nrow(data)
text(x = c(2, 3) * k / n, y = -1.8, c("2k/n", "3k/n"), cex = 1.2)
idx <- which(rownames(data) %in% rownames(res))
cbind(data[idx,], res)
op <- par(mar = c(5, 4, 1, 1) + .1, cex.lab = 1.2)
res <- car::influencePlot(linmod, scale = 8)
k <- length(coef(linmod))
n <- nrow(chredlin)
text(x = c(2, 3) * k / n, y = -1.8, c("2k/n", "3k/n"), cex = 1.2)
idx <- which(rownames(chredlin) %in% rownames(res))
cbind(chredlin[idx,], res)
car::influenceIndexPlot(linmod, vars = c("Cook", "studentized", "hat"), id.n = 4)
infl <- influence.measures(linmod)
summary(infl)
head(infl$infmat)
dfbetas <- data.frame(infl$infmat[,2:7])
head(dfbetas)
var <- "dfb.race"
op <- par(mar = c(5, 5, 1, 1) + .1)
cols <- as.numeric(chredli$side)
plot(dfbetas[,var], type = "h", col = cols, xlab = "Observation index", ylab = expression(delta * beta[var]), cex.lab = 1.3)
points(dfbetas[,var], col = cols)
var <- "dfb.race"
op <- par(mar = c(5, 5, 1, 1) + .1)
cols <- as.numeric(chredli$side)
cols <- as.numeric(chredlin$side)
plot(dfbetas[,var], type = "h", col = cols, xlab = "Observation index", ylab = expression(delta * beta[var]), cex.lab = 1.3)
points(dfbetas[,var], col = cols)
big = abs(dfbetas[,var]) > .25
idx <- 1:nrow(dfbetas)
text(idx[big], dfbetas[big, var], label = rownames(dfbetas)[big], cex = 0.9, pos = ifelse(dfbetas[big, var] > 0, 3, 1), xpd = TRUE)
abline(h = c(-0.25, 0, .25), col = "gray")
par(op)
car::scatterplotMatrix(dfbetas, smooth = FALSE, id = TRUE, showLabels=list(method = "mahal", n = 2, cex = 1.2, location = "lr"),
ellipse = TRUE, levels = 0.95, robust = FALSE, diagonal = "histogram", col = gray(0.6))
mod_obj <- linmod
summary(mod_obj)
car::crPlots(mod_obj, ~ race, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ race, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ fire, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ fire, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ theft, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ theft, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ age, smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ age, smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::ceresPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ poly(log(income),3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + log(income) + poly(log(income), 3), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income),3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 3), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income),3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 2), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income),2), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj, ~ log(income), smooth = list(span = 0.5), id = TRUE)
car::crPlots(mod_obj2, ~ poly(log(income),2), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 4), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 4), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 3), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 3), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 5), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 5), smooth = list(span = 0.5), id = TRUE)
mod_obj2 <- lm(involact ~ race + fire + theft + age + poly(log(income), 4), data = chredlin)
car::crPlots(mod_obj2, ~ poly(log(income), 4), smooth = list(span = 0.5), id = TRUE)
plot(Effect(c("race", "theft"), linmod4),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("race", "theft"), linmod),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("race", "side"), linmod),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("race", "theft"), linmod),
#     confint = list(style = "bands"),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("log(income)", "race"), linmod),
confint = list(style = "bands"),
#     confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
plot(Effect(c("income", "race"), linmod),
confint = list(style = "bands"),
#     confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(1,2,3,4,5), col = c("black", gray(0.2), gray(0.4), gray(0.6), gray(0.8))))
fitp <- cbind(linmod$model, pred = predict(linmod))
head(fitp)
colnames(fitp) <- c("involact", "race", "fire", "theft", "age", "logincome", "pred")
# ----------
library(ggplot2)
graphics.off()
gg1 <- ggplot(fitp, aes(x = race, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg1
gg1 + facet_grid(~ side)
gg2 <- ggplot(fitp, aes(x = logincome, y = pred)) + theme_bw() + geom_point(size = 2.5) + geom_point(colour = "black", size = 1.5) + geom_smooth()
gg2
gg2 + facet_grid(~ type)
gg2
anova(linmod)
anova(lm(involact ~ race + fire + theft + age + log(income), data = chredling))
anova(lm(involact ~ race + fire + theft + age + log(income), data = chredlin))
car::Anova(linmod)
( listcombo <- unlist(sapply(0:4, function(x) combn(4, x, simplify = FALSE)), recursive = FALSE) )
( predterms <- lapply(listcombo, function(x) paste(c("race", c("fire", "theft", "age", "log(income)")[x]), collapse = "+")) )
coefm <- matrix(NA, 16, 2)
for(i in 1:16){
lmi <- lm(as.formula(paste("involact ~ ", predterms[[i]])), data = chredlin)
# "race"'s estimated coefficient and pvalue
coefm[i,] <- summary(lmi)$coef[2,c(1,4)]
}
rownames(coefm) <- predterms
colnames(coefm) <- c("beta", "pvalue")
# ----------
round(coefm, 4)
# -->
# We can see that the value of coefficient for race varies somewhat with a high value about double the low value.
lmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
# ----------
lm.influence(lmod)
# lm.influence
( diags <- data.frame(lm.influence(lmod)$coef) )
# influence.measures
( diags2 <- data.frame(influence.measures(lmod)$infmat) )
ggplot(diags, aes(row.names(diags), race)) + geom_linerange(aes(ymax = 0, ymin = race)) +
theme(axis.text.x = element_text(angle = 90)) + xlab("ZIP") + geom_hline(yintercept = 0)
ggplot(diags2, aes(row.names(diags), dfb.race)) + geom_linerange(aes(ymax = 0, ymin = dfb.race)) +
theme(axis.text.x = element_text(angle = 90)) + xlab("ZIP") + geom_hline(yintercept = 0)
# Scatter plot of leave-one-out change by both of fire and theft
ggplot(diags, aes(fire, theft)) + geom_text(label = row.names(diags))
car::influencePlot(lmod)
chredlin[c("60607", "60610"),]
# -->
# These are high theft and fire zip codes.
# ----------
( tmp <- match(c("60607", "60610"), row.names(chredlin)) )
lmode <- lm(involact ~ race + fire + theft + age + log(income), chredlin, subset = -c(tmp))
summary(lmode)
# -->
# theft and age are no longer significant at the 5% level.
# The coefficient for race is reduced compared to the full data fit but remains statistically significant.
# So we have verified that our conclusions are also robust to the exclusion of one or perhaps two cases from the data.
# ------------------------------------------------------------------------------
# Removing outliers and "theft" variable
# ------------------------------------------------------------------------------
modalt <- lm(involact ~ race + fire + log(income) + age, data = chredlin, subset = -c(tmp))
summary(modalt)
# -->
# In this model, race no longer meets the threshold for significance....  --> model uncertainty
# ----------
summary(lm(involact ~ race + fire + theft + age, subset = (side == "s"), data = chredlin))
summary(lm(involact ~ race + fire + theft + age, subset = (side == "n"), data = chredlin))
# -->
# We see that race is significant in the north, but not in the south.
# By dividing the data into smaller and smaller subsets it is possible to dilute the significance of any predictor.
# On the other hand, it is important not to aggregate all data without regard to whether it is reasonable.
summary(lm(involact ~ race + fire + theft + age, subset = (side == "s"), data = chredlin))
summary(lm(involact ~ race + fire + theft + age, subset = (side == "n"), data = chredlin))
library(mgcv)
# It seems reasonable that the predictors would have a multiplicative rather than additive effect on the mean response
# In the standard linear model, this would be achieved by logging the response, but that is not possible when some response values are zero.
# We avoid that obstable by using the log in the link.
twmod <- gam(involact ~ race + fire + theft + age + log(income), family = tw(link = "log"), data = chredlin)
summary(twmod)
twmod$fit
xgrid <- seq(1e-10, 1.25, len = 100)
p <- 1.108
phi <- 0.30847
# expexted mean response
( mu <- twmod$fit[1] )
# the mean of Poisson
( poismean <- mu ^ (2-p) / (phi * (2 - p)) )
# probability of a zero response
( p0 <- exp(-poismean) )
( twden <- exp(ldTweedie(xgrid, mu, p = p, phi = phi)[,1]) )
( dmax <- max(twden * (1 - p0)) )
plot(xgrid, twden * (1 - p0), type = "l", xlab = "x", ylab = "Density")
segments(0, 0, 0, dmax, lwd = 2)
text(0.05, dmax, paste0("p=", signif(p0, 3)))
summary(twmod)
summary(twmod)
twmod$fit
linmod2 <- lm(involact ~ race + fire + age + income, data = chredlin)
summary(linmod2)
linmod2 <- lm(involact ~ race + fire + age + theft, data = chredlin)
summary(linmod2)
linmod2 <- lm(involact ~ -1 + race + fire + age + theft, data = chredlin)
summary(linmod2)
stargazer::stargazer(linmod, linmod2, twmod, type = "text")
# intercept only model
linmod0 <- update(linmod, . ~ 1)
summary(linmod0)
anova(linmod0, linmod)
anova(linmod, linmod2)
anova(linmod, twmod)
anova(linmod, twmod)
Anova(linmod, twmod)
AIC(linmod, linmod2, twmod)
library(AICcmodavg)
mynames <- paste0("M", as.character(1:3))
myaicc <- aictab(cand.set = list(linmod, linmod2, twmod),
modnames = mynames, sort = TRUE, second.ord = TRUE)
mynames <- paste0("M", as.character(1:2))
# second.ord = TRUE/FALSE:  AICc/AIC is computed
myaicc <- aictab(cand.set = list(linmod, linmod2),
modnames = mynames, sort = TRUE, second.ord = TRUE)
as.data.frame(myaicc)
linmod3 <- lm(involact ~ race + fire + age, data = chredlin)
summary(linmod3)
linmod4 <- lm(involact ~ race + fire + theft + age + log(income) + side, data = chredlin)
summary(linmo4)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ -1 + race + fire + theft + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + log(income) + age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + log(income) * age + side, data = chredlin)
summary(linmod4)
linmod4 <- lm(involact ~ race + fire + theft + log(income) * age, data = chredlin)
summary(linmod4)
myaicc <- aictab(cand.set = list(linmod, linmod2, linmod3, linmod4),
modnames = mynames, sort = TRUE, second.ord = TRUE)
as.data.frame(myaicc)
mynames <- paste0("M", as.character(1:4))
# second.ord = TRUE/FALSE:  AICc/AIC is computed
myaicc <- aictab(cand.set = list(linmod, linmod2, linmod3, linmod4),
modnames = mynames, sort = TRUE, second.ord = TRUE)
as.data.frame(myaicc)
confset(cand.set = list(linmod, linmod2, linmod3, linmod4), modnames = mynames, level = 0.75)
evidence(myaicc)
myaicc2 <- as.data.frame(myaicc)[,-7]
myaicc2$Eratio <- round(max(myaicc2$AICcWt) / myaicc2$AICcWt, 3)
data.frame(Model = myaicc2$Modnames, round(myaicc2[,-1], 3))
data("chredlin", package = "faraway")
str(chredlin)
car::some(chredlin)
# setwd("//media//kswada//MyFiles//R//lalonde_nswcps")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\algebra_nation")
packages <- c("dplyr", "tidyverse", "MatchIt", "Matching", "survey")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data <- read.csv("algebra_nation.csv")
str(data)
car::some(data)
summary(data)
psych::describe(data)
data$numOfStud2014 <- scale(data$numOfStud2014)
data$meanScale2012 <- scale(data$meanScale2012)
data$lev1Perc2012 <- scale(data$lev1Perc2012)
data$lev5Perc2012 <- scale(data$lev5Perc2012)
data$perc.free.lunch <- scale(data$perc.free.lunch)
data$perc.reduced.lunch <- scale(data$perc.reduced.lunch)
# ------------------------------------------------------------------------------
# convert binary variables to factors
# ------------------------------------------------------------------------------
data$SeniorHigh <- factor(data$SeniorHigh)
data$middleHigh <- factor(data$middleHigh)
# ------------------------------------------------------------------------------
# breakdown locale into size and type variables
# ------------------------------------------------------------------------------
data$locationSize <- with(data, ifelse(Locale.=="City: Large" |
Locale.=="Suburb: Large", "Large", ifelse( Locale.=="City: Midsize"|
Locale.=="Suburb: Midsize", "Midsize", "Small")))
data$locationSize <- factor(data$locationSize)
data$locationRural <- with(data, ifelse(Locale.=="Rural: Distant" |
Locale.=="Rural: Fringe" |
Locale.=="Rural: Remote", "Rural", "Urban"))
data$locationRural <- factor(data$locationRural)
with(data, hist(loginsPerExaminee, density = 10, angle = 45, main="",
xlim=c(-10,26), ylim=c(0,300), xlab="Shaded = Treatment doses | Gray = Log Treatment Doses ") )
with(data,
hist(logLoginsPerExaminee, col=gray(0.4,0.25),
xlim=c(-10,26), ylim=c(0,250),add=T) )
with(data, hist(loginsPerExaminee, density = 10, angle = 45, main="",
xlim=c(-10,26), ylim=c(0,300), xlab="Shaded = Treatment doses | Gray = Log Treatment Doses ") )
with(data, hist(loginsPerExaminee, density = 100, angle = 45, main="",
xlim=c(-10,26), ylim=c(0,300), xlab="Shaded = Treatment doses | Gray = Log Treatment Doses ") )
with(data, hist(loginsPerExaminee, density = 10, angle = 45, main="",
xlim=c(-10,26), ylim=c(0,300), xlab="Shaded = Treatment doses | Gray = Log Treatment Doses ") )
with(data,
hist(logLoginsPerExaminee, col = gray(0.4,0.25),
xlim=c(-10,26), ylim=c(0,250), add=T) )
names(data)
psych::describe(data)
summary(data$loginsPerExaminee)
summary(data$logLoginsPerExaminee)
str(data)
col_obj <- sapply(1:length(ncol(data)), function(x) type(data[,x]))
col_obj <- sapply(1:length(ncol(data)), function(x) typeof(data[,x]))
col_obj
col_obj <- sapply(1:ncol(data), function(x) typeof(data[,x]))
col_obj
col_type <- sapply(1:ncol(data), function(x) class(data[,x]))
col_type
col_obj <- names(dat)[col_type %in% c("integer", "numeric"), )]
col_obj <- names(dat)[col_type %in% c("integer", "numeric")]
col_obj
col_obj <- names(data)[col_type %in% c("integer", "numeric")]
col_obj
data[,col_obj] %>% cor(., method = "spearman") %>%
gather(-rowname, key = "colname", value = "cor") %>%
filter(abs(cor) > 0.8)
data[,col_obj] %>% cor(., method = "spearman")
caret::nearZeroVar(dat)
caret::nearZeroVar(data)
names(data)[caret::nearZeroVar(data)]
data[,col_obj] %>% cor(., method = "spearman") %>% as.data.frame() %>%
gather(-rowname, key = "colname", value = "cor") %>%
filter(abs(cor) > 0.8)
data[,col_obj] %>% cor(., method = "spearman") %>% as.data.frame()
data[,col_obj] %>% cor(., method = "spearman") %>% as.data.frame() %>%
gather(-rowname, key = "colname", value = "cor")
tmp <- data[,col_obj] %>% cor(., method = "spearman") %>% as.data.frame()
head(tmp)
tmp <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame()
tmp
tmp <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>% filter(Var1 == "logLoginsPerExaminee")
tmp
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee") %>% filter(abs(Freq) > 0.8) )
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee")) %>% filter(abs(Freq) > 0.8) )
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame()
cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame()
data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee", Var2 != c("logLoginsPerExaminee", "loginsPerExaminee"))
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee") %>% filter(Var2 != c("logLoginsPerExaminee", "loginsPerExaminee")) %>%
filter(abs(Freq) > 0.8) )
( cor_with_outcome <- data[,col_obj] %>% cor(., method = "spearman") %>% as.table() %>% as.data.frame() %>%
filter(Var1 == "logLoginsPerExaminee") %>% filter(Var2 != c("logLoginsPerExaminee", "loginsPerExaminee")) %>%
filter(abs(Freq) > 0.4) )
str(data)
covariateNames <- c("Charter", #dummy indicator of charter school
"Magnet.", #dummy indicator of magnet school
"Title.I.School.", #dummy indicator of title 1 school
"locationRural",  #rural location
"locationSize", #size of location (large, midsize, small)
"Students.", #total number of students in 2012
"SeniorHigh" ,    #dummy indicator of whether it is a senior high school (the reference group is high school
"numOfStud2014", #number of test takers in 2014
"meanScale2012", #mean scaled scores in 2012
"lev1Perc2012",#percent achieving level 1 in 2012
"lev5Perc2012", #percent achieving level 5 in 2012
"perc.free.lunch", #percent free lunch in 2012
"perc.reduced.lunch") #percent reduced lunch in 2012
# setwd("//media//kswada//MyFiles//R//lalonde_nswcps")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\algebra_nation")
packages <- c("dplyr", "tidyverse", "MatchIt", "Matching", "survey")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data: Algebra Nation
# ------------------------------------------------------------------------------
data <- read.csv("algebra_nation.csv")
str(data)
car::some(data)
names(data)
# ----------
# Standardize continuous covariates
data$numOfStud2014 <- scale(data$numOfStud2014)
data$meanScale2012 <- scale(data$meanScale2012)
data$lev1Perc2012 <- scale(data$lev1Perc2012)
data$lev5Perc2012 <- scale(data$lev5Perc2012)
data$perc.free.lunch <- scale(data$perc.free.lunch)
data$perc.reduced.lunch <- scale(data$perc.reduced.lunch)
# ----------
# convert binary variables to factors
data$SeniorHigh <- factor(data$SeniorHigh)
data$middleHigh <- factor(data$middleHigh)
# define model
formula1 <- formula("logLoginsPerExaminee ~ Charter+Magnet.+
Title.I.School. + locationRural + locationSize+Students. +
SeniorHigh+numOfStud2014 + meanScale2012 + lev1Perc2012 +
lev5Perc2012 + perc.free.lunch+perc.reduced.lunch")
modelDoses <- lm(formula = formula1, data = data)
mod <- lm(formula = formula1, data = data)
summary(mod)
covariateNames <- c("Charter", #dummy indicator of charter school
"Magnet.", #dummy indicator of magnet school
"Title.I.School.", #dummy indicator of title 1 school
"locationRural",  #rural location
"locationSize", #size of location (large, midsize, small)
"Students.", #total number of students in 2012
"SeniorHigh" ,    #dummy indicator of whether it is a senior high school (the reference group is high school
"numOfStud2014", #number of test takers in 2014
"meanScale2012", #mean scaled scores in 2012
"lev1Perc2012",#percent achieving level 1 in 2012
"lev5Perc2012", #percent achieving level 5 in 2012
"perc.free.lunch", #percent free lunch in 2012
"perc.reduced.lunch") #percent reduced lunch in 2012
# define model
formula1 <- formula("logLoginsPerExaminee ~ Charter + Magnet.+
Title.I.School. + locationRural + locationSize+Students. +
SeniorHigh+numOfStud2014 + meanScale2012 + lev1Perc2012 +
lev5Perc2012 + perc.free.lunch+perc.reduced.lunch")
mod <- lm(formula = formula1, data = data)
names(data)
data <- read.csv("algebra_nation.csv")
str(data)
car::some(data)
names(data)
data$numOfStud2014 <- scale(data$numOfStud2014)
data$meanScale2012 <- scale(data$meanScale2012)
data$lev1Perc2012 <- scale(data$lev1Perc2012)
data$lev5Perc2012 <- scale(data$lev5Perc2012)
data$perc.free.lunch <- scale(data$perc.free.lunch)
data$perc.reduced.lunch <- scale(data$perc.reduced.lunch)
data$SeniorHigh <- factor(data$SeniorHigh)
data$middleHigh <- factor(data$middleHigh)
data$locationSize <- with(data, ifelse(Locale.=="City: Large" |
Locale.=="Suburb: Large", "Large", ifelse( Locale.=="City: Midsize"|
Locale.=="Suburb: Midsize", "Midsize", "Small")))
data$locationSize <- factor(data$locationSize)
data$locationRural <- with(data, ifelse(Locale.=="Rural: Distant" |
Locale.=="Rural: Fringe" |
Locale.=="Rural: Remote", "Rural", "Urban"))
data$locationRural <- factor(data$locationRural)
mod <- lm(formula = formula1, data = data)
summary(mod)
car::residualPlots(mod)
data$GPS <- dnorm(data$logLoginsPerExaminee,
mean = fitted(mod), sd = sd(data$logLoginsPerExaminee))
# evaluate covariate balance using strata of the GPS
data$strataGPS <- with(data, cut(GPS, include.lowest = T, labels = 1:5,
breaks = quantile(GPS, probs=seq(0, 1, 0.2))))
balanceTable <- data.frame() #storage
#loop through variables
for (var in 1:length(covariateNames)) {
#formula with treatment dose as a function of covariate
balanceFormula <- paste("logLoginsPerExaminee~strataGPS+",covariateNames[var],sep="")
#regress dose on covariate without weights
maxEff <- max(abs(coef(lm(balanceFormula,data))[-(1:5)]))
balanceTable <- rbind(balanceTable,c(var,maxEff))
} #close loop
#put  variable names on table
names(balanceTable) <- c("variable","coef")
balanceTable$variable <- covariateNames
#standardize coefficients with respect to sd of outcome
balanceTable$coef <- balanceTable$coef/sd(data$logLoginsPerExaminee)
data$strataGRP
data$strataGPS
lattice::histogram(~ GPS | strataGPS, data = data)
with(data, by(GPS, strataGSP, mean))
with(data, by(GPS, strataGPS, mean))
with(data, by(GPS, strataGPS, summary, round(., digits = 3)))
with(data, by(GPS, strataGPS, summary, round(., digits = 2)))
with(data, by(GPS, strataGPS, summary))
