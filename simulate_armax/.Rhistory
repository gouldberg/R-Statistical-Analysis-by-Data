# split data
ze <- dataSlice(dry, start = 100, end = 500)
zr <- dataSlice(dry, start = 501, end = 850)
# ----------
# detrending
# R by default doesn’t allow return of multiple objects.
# The %=% operator and g function in this package facillitate this behaviour
g(ze) %=% detrend(ze)
g(zr) %=% detrend(zr)
ze$output
# ----------
plot(dry)
par(mfrow = c(2,1))
plot(ze)
# ------------------------------------------------------------------------------
# Estimate Frequency Response
# ------------------------------------------------------------------------------
# default lag size of the Hanning window (Default: min (length(x)/10,30))
sp <- spa(ze)
# bode plot
plot(sp)
# Estimates the emperical transfer function from the data
# by taking the ratio of the fourier transforms of the output and the input variables
plot(etfe(ze))
# ------------------------------------------------------------------------------
# Impulse Response Function
# ------------------------------------------------------------------------------
fit <- impulseest(ze)
impulseplot(fit)
# -->
# estimated delay = 3
# ----------
# step response function
plot(step(fit))
( parms <- expand.grid(na = 2:10, nb = 2:10, nk = 3) )
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
modarx <- arx(ze, order = c(na, nb, nk), lambda  = 0.1)
parms$aicc[i] <- fitch(modarx)$AICc
parms$fpe[i] <- fitch(modarx)$FPE
parms$naic[i] <- fitch(modarx)$nAIC
parms$mse[i] <- fitch(modarx)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
# ----------
# now we try na = 2, nb = 2, nk = 3
modarx <- arx(ze, order = c(2,2,3), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
# ----------
# fitted values
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
# ----------
# test data
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
resid_arx <- pred_arx - output
resid_arx_t <- pred_arx_t - output_t
# ----------
sysid::residplot(modarx)
tmp <- idframe(output = resid_arx, input = ze$input, Ts = 1)
tmp <- idframe(output = resid_arx_t, input = zr$input, Ts = 1)
plot(spa(tmp))
modarx_tmp <- arx(ze, order = c(4,4,3), lambda = 0.1)
modarx_tmp$sys
unlist(fitch(modarx_tmp))
modarx_tmp$sys
modarx_tmp$sys
str(modarx_tmp)
modarx_tmp$sys$A
library(control)
tf(modarx_tmp$sys$A, modarx$sys$B)
( sys <- tf(modarx_tmp$sys$A, modarx$sys$B) )
modarx$sys$B
modarx_tmp$sys
( sys <- tf(num = modarx_tmp$sys$B, den = modarx$sys$A) )
modarx_tmp$sys$B
modarx$sys$A
( sys <- tf(num = modarx_tmp$sys$B, den = modarx$sys$A) )
( sys <- tf(num = modarx_tmp$sys$A, den = modarx$sys$B) )
( sys <- tf(num = modarx_tmp$sys$B, den = modarx$sys$A) )
modarx_tmp$sys$A
modarx_tmp$sys$B
modarx_tmp$sys
( sys <- tf(num = modarx_tmp$sys$B, den = modarx$sys$A) )
pole(sys)
damp(sys)
graphics.off()
damp(sys)
freqresp(sys)
plot(freqresp(sys), type = "l")
pole(sys)
( sys <- tf2zp(num = modarx_tmp$sys$B, den = modarx$sys$A) )
# transfer function
( sys <- tf2zp(num = modarx_tmp$sys$A, den = modarx$sys$B) )
modarx_tmp <- arx(ze, order = c(2,2,3), lambda = 0.1)
unlist(fitch(modarx_tmp))
modarx_tmp$sys
modarx_tmp$sys$A
modarx_tmp$sys$B
( sys <- tf2zp(num = modarx_tmp$sys$B, den = modarx$sys$A) )
pole(sys)
( sys <- tf(num = modarx_tmp$sys$B, den = modarx$sys$A) )
pole(sys)
impulseplot(sys)
impulse(sys)
modarx$sys
modarx$sys$A
modarx$sys$B
( sys <- tf(num = modarx$sys$B, den = modarx$sys$A) )
pole(sys)
bode(sys)
bodeplot(sys)
tmp <- idframe(output = resid_arx, input = ze$input, Ts = 1)
plot(spa(tmp))
bodeplot(sys)
ze$input
lsimplot(sys, ze$input)
lsimplot(sys, ze$input, t = 1:100)
lsimplot(sys, u = c(ze$input), t = 1:100)
ze$input
lsimplot(sys, u = c(ze$input), t = 1:401)
ze$input
lsimplot(sys, u = c(ze$input)[1:200], t = 1:200)
tmp <- lsimplot(sys, u = c(ze$input)[1:200], t = 1:200)
tmp
names(tmp)
lsimplot(sys, u = c(ze$input)[1:200], t = 1:200)
lssim(sys, u = c(ze$input)[1:200], t = 1:200)
lsim(sys, u = c(ze$input)[1:200], t = 1:200)
tmp <- lsim(sys, u = c(ze$input)[1:200], t = 1:200)
names(tmp)
plot(tmp$y, type = "l")
tmp$y
plot(c(tmp$y), type = "l")
plot(c(tmp$y)[1:200], type = "l")
plot(c(tmp$y)[1:100], type = "l")
c(tmp$y)
c(tmp$y)[1:100]
vignette(control)
vignette("control")
demo("control")
step(sys)
plot(step(sys))
plot(step(sys))
( num <- modarx$sys$A )
( den <- modarx$sys$B )
library(control)
# transfer function
( sys <- tf(num = num, den = den) )
tf2zp(num, den)
( parms <- expand.grid(na = 2:10, nb = 2:10, nk = 3) )
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
modoe0 <- oe(ze, order = c(na, nb, nk))
parms$aicc[i] <- fitch(modoe0)$AICc
parms$fpe[i] <- fitch(modoe0)$FPE
parms$naic[i] <- fitch(modoe0)$nAIC
parms$mse[i] <- fitch(modoe0)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
# ----------
# now we try na = 2, nb = 2, nk = 3
modoe <- oe(ze, order = c(2,2,3))
modoe$sys
# ----------
# test data
pred_oe <- predict(modoe, ze)
pred_oe_t <- predict(modoe, zr)
resid_oe <- pred_oe - output
resid_oe_t <- pred_oe_t - output_t
# ----------
sysid::residplot(modoe)
# ----------
# bode plot for residual and input
tmp <- idframe(output = resid_oe, input = ze$input, Ts = 1)
tmp <- idframe(output = resid_oe_t, input = zr$input, Ts = 1)
plot(spa(tmp))
modoe$sys
str(modoe)
bode(resid_armax)
fit <- impulseest(ze)
impulseplot(fit)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\dry2")
# note that DO NOT USE dplyr
packages <- c("sysid")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  dry2
# ------------------------------------------------------------------------------
u <- read.csv("dry2_u.txt", sep = "", header = F, colClasses = "numeric")
y <- read.csv("dry2_y.txt", sep = "", header = F, colClasses = "numeric")
dry2 <- cbind(u, y)
colnames(dry2) <- c("input", "output")
head(dry2)
# ----------
str(dry2)
# ------------------------------------------------------------------------------
# data preparation
# ------------------------------------------------------------------------------
# convert to idframe
dry <- idframe(output = ts(dry2$output), input = ts(dry2$input), Ts = 1)
str(dry)
# split data
ze <- dataSlice(dry, start = 100, end = 500)
zr <- dataSlice(dry, start = 501, end = 850)
# ----------
# detrending
# R by default doesn’t allow return of multiple objects.
# The %=% operator and g function in this package facillitate this behaviour
g(ze) %=% detrend(ze)
g(zr) %=% detrend(zr)
ze$output
# ----------
plot(dry)
par(mfrow = c(2,1))
plot(ze)
# ------------------------------------------------------------------------------
# Estimate Frequency Response
# ------------------------------------------------------------------------------
# default lag size of the Hanning window (Default: min (length(x)/10,30))
sp <- spa(ze)
# bode plot
plot(sp)
fit <- impulseest(ze)
impulseplot(fit)
fit <- impulseest(ze)
fit
sysid::impulseplot(fit)
fit <- impulseest(ze)
sysid::impulseplot(fit)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\simulate_armax")
# note that DO NOT USE dplyr
packages <- c("sysid")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  simulate ARMAX model data
# ------------------------------------------------------------------------------
# define box-jenkins ARMAX model
A <- c(1, -1.5, 0.7)
B <- c(0, 1, 0.5)
C <- c(1, -1, 0.2)
mod_bj <- idpoly(A, B, C, unit = "seconds", Ts = 1)
# ----------
# generate input signals
# ’rbs’:  generates random binary signal
( u <- idinput(n = 350, type = "rbs") )
# ----------
# simulate response of dynamic system
seed <- 12345
( y <- sim(mod_bj, u, addNoise = TRUE, seed = seed) )
# ----------
# convert to idframe
z <- idframe(output = y, input = u, Ts = 1)
# ------------------------------------------------------------------------------
# time series plot
# ------------------------------------------------------------------------------
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 200)
zr <- dataSlice(z, start = 201, end = 350)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
# ------------------------------------------------------------------------------
# Estimate Frequency Response
# ------------------------------------------------------------------------------
# default lag size of the Hanning window (Default: min (length(x)/10,30))
sp <- spa(ze)
# bode plot  (rad/time unit)
plot(sp)
# Estimates the emperical transfer function from the data
# by taking the ratio of the fourier transforms of the output and the input variables
plot(etfe(ze))
# ------------------------------------------------------------------------------
# Impulse Response Function
# ------------------------------------------------------------------------------
fit <- impulseest(ze)
fit <- impulseest(ze)
sysid::impulseplot(fit)
plot(step(fit))
sysid::impulseplot(fit)
plot(step(fit))
fit <- sysid::impulseest(ze)
sysid::impulseplot(fit)
# -->
# estimated delay = 1
# ----------
# step response function
plot(step(fit))
plot(sysid::step(fit))
( parms <- expand.grid(na = 2:10, nb = 2:10, nk = 1) )
parms$aicc <- 0
parms$fpe <- 0
parms$naic <- 0
parms$mse <- 0
# lambda:  Regularization parameter, default = 0.1
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
modarx <- arx(ze, order = c(na, nb, nk), lambda  = 0.1)
parms$aicc[i] <- fitch(modarx)$AICc
parms$fpe[i] <- fitch(modarx)$FPE
parms$naic[i] <- fitch(modarx)$nAIC
parms$mse[i] <- fitch(modarx)$MSE
}
parms
plot(parms$naic, type = "l")
parms[which.min(parms$naic),]
# ----------
# now we try na = 2, nb = 2, nk = 1
modarx <- arx(ze, order = c(2,2,1), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
modarx <- arx(ze, order = c(2,2,1), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
# fitted values
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
# ----------
# test data
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
resid_arx <- pred_arx - output
resid_arx_t <- pred_arx_t - output_t
# ----------
sysid::residplot(modarx)
tmp <- idframe(output = resid_arx, input = ze$input, Ts = 1)
tmp <- idframe(output = resid_arx_t, input = zr$input, Ts = 1)
plot(spa(tmp))
modarx$sys
( num <- modarx$sys$A )
( den <- modarx$sys$B )
library(control)
# transfer function
( sys <- tf(num = num, den = den) )
pole(sys)
bodeplot(sys)
modoe <- oe(ze, order = c(2,2,1))
modoe$sys
# ----------
# test data
pred_oe <- predict(modoe, ze)
pred_oe_t <- predict(modoe, zr)
resid_oe <- pred_oe - output
resid_oe_t <- pred_oe_t - output_t
# ----------
sysid::residplot(modoe)
# ----------
# bode plot for residual and input
tmp <- idframe(output = resid_oe, input = ze$input, Ts = 1)
tmp <- idframe(output = resid_oe_t, input = zr$input, Ts = 1)
plot(spa(tmp))
# ------------------------------------------------------------------------------
# Estimate ARMAX model model
# ------------------------------------------------------------------------------
# add nc term = 2
modarmax <- armax(ze, order = c(2,2,2,1))
modarmax$sys
# ----------
# test data
pred_armax <- predict(modarmax, ze)
pred_armax_t <- predict(modarmax, zr)
resid_armax <- pred_armax - output
resid_armax_t <- pred_armax_t - output_t
# ----------
sysid::residplot(modarmax)
# ----------
# bode plot for residual and input
tmp <- idframe(output = resid_armax, input = ze$input, Ts = 1)
tmp <- idframe(output = resid_armax_t, input = zr$input, Ts = 1)
plot(spa(tmp))
# ------------------------------------------------------------------------------
# Estimate BJ model
# ------------------------------------------------------------------------------
# add nc, nd, nf
# modbj <- bj(ze, order = c(2,2,2,2,1))
# modbj$sys
# ----------
# test data
# pred_bj <- predict(modbj, ze)
# pred_bj_t <- predict(modbj, zr)
# resid_bj <- pred_bj - output
# resid_bj_t <- pred_bj_t - output_t
# ------------------------------------------------------------------------------
# Model selection
# ------------------------------------------------------------------------------
round(unlist(fitch(modarx)), 3)
round(unlist(fitch(modoe)), 3)
round(unlist(fitch(modarmax)), 3)
# -->
# ARX model should not be compared ... (calculation is influenced by some regularization)
# ARMAX model is best
# ------------------------------------------------------------------------------
# Compare models prediction and residulas
# ------------------------------------------------------------------------------
# prediction for train data and test data
graphics.off()
par(mfcol = c(2,3))
plot(output, type = "l", main = "ARX train")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
plot(output_t, type = "l", main = "ARX test")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
plot(output, type = "l", main = "OE train")
lines(time(pred_oe), pred_oe, col = "red", lwd = 2)
plot(output_t, type = "l", main = "OE test")
lines(time(pred_oe_t), pred_oe_t, col = "red", lwd = 2)
plot(output, type = "l", main = "ARMAX train")
lines(time(pred_armax), pred_armax, col = "black", lwd = 2)
plot(output_t, type = "l", main = "ARMAX test")
lines(time(pred_armax_t), pred_armax_t, col = "black", lwd = 2)
# ------------
# residuals for train data and test data
graphics.off()
par(mfcol = c(2,3))
plot(resid_arx, type = "l", main = "ARX train", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_arx_t, type = "l", main = "ARX test", ylim = c(-5,5))
abline(h = 0, col = "gray")
plot(resid_oe, type = "l", main = "OE train", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_oe_t, type = "l", main = "OE test", ylim = c(-5, 5))
abline(h = 0, col = "gray")
plot(resid_armax, type = "l", main = "ARMAX train", ylim = c(-10, 10))
abline(h = 0, col = "gray")
plot(resid_armax_t, type = "l", main = "ARMAX test", ylim = c(-10, 10))
abline(h = 0, col = "gray")
# ----------
# mean absolute errors
mean(abs(resid_arx))
mean(abs(resid_arx_t))
mean(abs(resid_oe))
mean(abs(resid_oe_t))
mean(abs(resid_armax))
mean(abs(resid_armax_t))
# ----------
compare(zr, modarx, modoe, modarmax, nahead = 1)
fit <- sysid::impulseest(ze)
sysid::impulseplot(fit)
modarx29 <- arx(ze, order = c(0, 29, 1))
modarx29$sys
( num <- modarx29$sys$A )
( den <- modarx29$sys$B )
library(control)
# transfer function
( sys <- tf(num = num, den = den) )
pole(sys)
bodeplot(sys)
sys2 <- tf2ss(num = num, den = den)
sys2
tf(sys2)
names(ss)
names(sys2)
sys2$A
sys2$B
sys2$C
sys2$D
sys2$A
plot(sys2)
bodeplot(sys2)
ss2tf(sys2)
ss2tf(sys2)
sys2 <- tf2ss(num = num, den = den)
sys2
ss2tf(sys2)
ss2tf(sys2, p = 2)
impulse(sys2)
graphics.off()
impulse(sys2)
ssdata(sys2)
ssdata(sys2)
sys2 <- tf2ss(num = num, den = den)
sys2
modbj <- bj(ze, order = c(2,2,2,2,0))
