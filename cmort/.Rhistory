pc_scores3 <- fpca_m$x[,3]
pc_scores4 <- fpca_m$x[,4]
pc_scores5 <- fpca_m$x[,5]
subject_scores1 <- pc1_loadings %*% t(pc_scores1)
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores3 <- pc3_loadings %*% t(pc_scores3)
subject_scores4 <- pc4_loadings %*% t(pc_scores4)
subject_scores5 <- pc5_loadings %*% t(pc_scores5)
subject_scores12 <- subject_scores1 + subject_scores2
subject_scores13 <- subject_scores12 + subject_scores3
subject_scores14 <- subject_scores13 + subject_scores4
subject_scores15 <- subject_scores14 + subject_scores5
dim(subject_scores12)
# ----------
time <- time(subject_scores) / 10
# darkgray:  original smoothed
# black:  only PC1, only PC1 + PC2
# blue:  sum of PC1 to PC5
par(mfrow = c(2, 2), mar = c(2,2,2,2))
idx <- 19
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 14
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 18
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 18", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 10
plot(ftensionNP$fdata.est[c(idx)], main = "negative: 10", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 17
# scores for first component is alomost 0
plot(ftensionNP$fdata.est[c(idx)], main = "positive - negative: 17", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
time <- time(subject_scores) / 10
# darkgray:  original smoothed
# black:  only PC1, only PC1 + PC2
# blue:  sum of PC1 to PC5
par(mfrow = c(2, 2), mar = c(2,2,2,2))
idx <- 19
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 14
pcscores <- fpca$x[,1:2]
cols <- c("darkgray", "black", "blue")[as.numeric(cond)]
graphics.off()
par(mfrow = c(1,2), mar = c(2,2,2,2))
plot(fpca$rotation[1,]$argvals, fpca$rotation$data[1,], type = "l",
ylim = c(-0.3, 0.3), xlab = "Time",  ylab = "Loadings", main = "Functional PCA Loadings",
lwd = 2, col = "red", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(fpca$rotation$argvals, fpca$rotation$data[2,], type = "l", col = "coral", lwd = 2, lty = 2)
legend("topright", legend = c("PC1", "PC2"), lty = c(1,2), col = c("red", "coral"), cex = 1.2)
plot(pcscores, type = "n", asp = 1, main = "Functional PC Scores", cex.main = 2)
abline(h = 0, v = 0, lty = 2, col = "gray")
text(pcscores, col = cols, cex = 1.2)
legend("topright", legend = c("Auditory", "Visual", "Auditory & Visual"), text.col = c("darkgray", "black", "blue"), cex = 1.2)
# -->
# note for 17:  scores for PC1 is almost 0 but scores for PC2 is high
# note for 14, 18:  scores for PC1 is higth
# ------------------------------------------------------------------------------
# plot trajectories of original smoothed and PC scores * loadings
# ------------------------------------------------------------------------------
fpca_m <- fdata2pc(ftension1, ncomp = 10)
pc1_loadings <- fpca_m$rotation$data[1,]
pc2_loadings <- fpca_m$rotation$data[2,]
pc3_loadings <- fpca_m$rotation$data[3,]
pc4_loadings <- fpca_m$rotation$data[4,]
pc5_loadings <- fpca_m$rotation$data[5,]
pc_scores1 <- fpca_m$x[,1]
pc_scores2 <- fpca_m$x[,2]
pc_scores3 <- fpca_m$x[,3]
pc_scores4 <- fpca_m$x[,4]
pc_scores5 <- fpca_m$x[,5]
subject_scores1 <- pc1_loadings %*% t(pc_scores1)
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores3 <- pc3_loadings %*% t(pc_scores3)
subject_scores4 <- pc4_loadings %*% t(pc_scores4)
subject_scores5 <- pc5_loadings %*% t(pc_scores5)
subject_scores12 <- subject_scores1 + subject_scores2
subject_scores13 <- subject_scores12 + subject_scores3
subject_scores14 <- subject_scores13 + subject_scores4
subject_scores15 <- subject_scores14 + subject_scores5
dim(subject_scores12)
# ----------
time <- time(subject_scores) / 10
fpca_m <- fdata2pc(ftension1, ncomp = 10)
pc1_loadings <- fpca_m$rotation$data[1,]
pc2_loadings <- fpca_m$rotation$data[2,]
pc3_loadings <- fpca_m$rotation$data[3,]
pc4_loadings <- fpca_m$rotation$data[4,]
pc5_loadings <- fpca_m$rotation$data[5,]
pc_scores1 <- fpca_m$x[,1]
pc_scores2 <- fpca_m$x[,2]
pc_scores3 <- fpca_m$x[,3]
pc_scores4 <- fpca_m$x[,4]
pc_scores5 <- fpca_m$x[,5]
subject_scores1 <- pc1_loadings %*% t(pc_scores1)
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores3 <- pc3_loadings %*% t(pc_scores3)
subject_scores4 <- pc4_loadings %*% t(pc_scores4)
subject_scores5 <- pc5_loadings %*% t(pc_scores5)
subject_scores12 <- subject_scores1 + subject_scores2
subject_scores13 <- subject_scores12 + subject_scores3
subject_scores14 <- subject_scores13 + subject_scores4
subject_scores15 <- subject_scores14 + subject_scores5
dim(subject_scores12)
time <- time(subject_scores) / 10
time <- time(subject_scores1) / 10
par(mfrow = c(2, 2), mar = c(2,2,2,2))
idx <- 19
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 14
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 18
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 18", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 10
plot(ftensionNP$fdata.est[c(idx)], main = "negative: 10", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 17
# scores for first component is alomost 0
plot(ftensionNP$fdata.est[c(idx)], main = "positive - negative: 17", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
par(mfrow = c(2, 2), mar = c(2,2,2,2))
idx <- 19
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 14
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 18
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 18", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 10
plot(ftensionNP$fdata.est[c(idx)], main = "negative: 10", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 17
# scores for first component is alomost 0
plot(ftensionNP$fdata.est[c(idx)], main = "positive - negative: 17", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
pcscores <- fpca$x[,1:2]
cols <- c("darkgray", "black", "blue")[as.numeric(cond)]
graphics.off()
par(mfrow = c(1,2), mar = c(2,2,2,2))
plot(fpca$rotation[1,]$argvals, fpca$rotation$data[1,], type = "l",
ylim = c(-0.3, 0.3), xlab = "Time",  ylab = "Loadings", main = "Functional PCA Loadings",
lwd = 2, col = "red", cex.main = 2)
abline(h = 0, lty = 2, col = "gray")
lines(fpca$rotation$argvals, fpca$rotation$data[2,], type = "l", col = "coral", lwd = 2, lty = 2)
legend("topright", legend = c("PC1", "PC2"), lty = c(1,2), col = c("red", "coral"), cex = 1.2)
plot(pcscores, type = "n", asp = 1, main = "Functional PC Scores", cex.main = 2)
abline(h = 0, v = 0, lty = 2, col = "gray")
text(pcscores, col = cols, cex = 1.2)
legend("topright", legend = c("Auditory", "Visual", "Auditory & Visual"), text.col = c("darkgray", "black", "blue"), cex = 1.2)
plot(pcscores, type = "n", asp = 1, main = "Functional PC Scores", cex.main = 2)
abline(h = 0, v = 0, lty = 2, col = "gray")
text(pcscores, col = cols, cex = 1.2)
fpca_m <- fdata2pc(ftension1, ncomp = 10)
pc1_loadings <- fpca_m$rotation$data[1,]
pc2_loadings <- fpca_m$rotation$data[2,]
pc3_loadings <- fpca_m$rotation$data[3,]
pc4_loadings <- fpca_m$rotation$data[4,]
pc5_loadings <- fpca_m$rotation$data[5,]
pc_scores1 <- fpca_m$x[,1]
pc_scores2 <- fpca_m$x[,2]
pc_scores3 <- fpca_m$x[,3]
pc_scores4 <- fpca_m$x[,4]
pc_scores5 <- fpca_m$x[,5]
subject_scores1 <- pc1_loadings %*% t(pc_scores1)
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores3 <- pc3_loadings %*% t(pc_scores3)
subject_scores4 <- pc4_loadings %*% t(pc_scores4)
subject_scores5 <- pc5_loadings %*% t(pc_scores5)
subject_scores12 <- subject_scores1 + subject_scores2
subject_scores13 <- subject_scores12 + subject_scores3
subject_scores14 <- subject_scores13 + subject_scores4
subject_scores15 <- subject_scores14 + subject_scores5
dim(subject_scores12)
# ----------
time <- time(subject_scores1) / 10
# darkgray:  original smoothed
# black:  only PC1, only PC1 + PC2
# blue:  sum of PC1 to PC5
par(mfrow = c(2, 2), mar = c(2,2,2,2))
idx <- 19
plot(ftensionNP$fdata.est[c(idx)], main = "middle: 19", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 14
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 14", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 18
plot(ftensionNP$fdata.est[c(idx)], main = "positive: 18", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 10
plot(ftensionNP$fdata.est[c(idx)], main = "negative: 10", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
idx <- 17
# scores for first component is alomost 0
plot(ftensionNP$fdata.est[c(idx)], main = "positive - negative: 17", col = "darkgray", lty = 2, lwd = 2)
lines(time, subject_scores1[,idx], lty = 2, lwd = 2, col = "black")
lines(time, subject_scores12[,idx], lty = 1, lwd = 2, col = "black")
lines(time, subject_scores15[,idx], lty = 1, lwd = 2, col = "blue")
fmean
dim(fmean)
subject_scores1
subject_scores1 <- pc1_loadings %*% t(pc_scores1) + fmean
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores3 <- pc3_loadings %*% t(pc_scores3)
subject_scores4 <- pc4_loadings %*% t(pc_scores4)
subject_scores5 <- pc5_loadings %*% t(pc_scores5)
subject_scores12 <- subject_scores1 + subject_scores2
subject_scores13 <- subject_scores12 + subject_scores3
subject_scores14 <- subject_scores13 + subject_scores4
subject_scores15 <- subject_scores14 + subject_scores5
fmean
subject_scores1 <- pc1_loadings %*% t(pc_scores1) + fmean$data
dim(fmean$data)
subject_scores1 <- pc1_loadings %*% t(pc_scores1) + t(fmean$data)
subject_scores1
dim(subject_scores)
dim(subject_scores1)
t(fmean$data)
subject_scores2 <- pc2_loadings %*% t(pc_scores2)
subject_scores1 <- subject_scores1 %+% t(fmean$mean)
t(fmean$mean)
t(fmean$mean)
t(as.matrix(fmean$mean))
t(as.matrix(fmean$data))
subject_scores1 <- subject_scores1 + t(as.matrix(fmean$data))
fmean$data[1,]
head(fmean$data)
dim(fmean$data)
subject_scores1 <- subject_scores1 + t(fmean$data[1,])
t(fmean$data[1,])
t(as.matrix(fmean$data[1,]))
subject_scores1 <- subject_scores1 + t(as.matrix(fmean$data[1,]))
subject_scores1 <- pc1_loadings %*% t(pc_scores1)
subject_scores1 <- subject_scores1 + t(as.matrix(fmean$data[1,]))
as.matrix(fmean$data[1,])
subject_scores1
str(subject_scores1)
str(t(as.matrix(fmean$data[1,])))
str(t((fmean$data[1,]))
)
as.numeric(fmean$data)
as.numeric(fmean$data[1,])
subject_scores1 <- subject_scores1 + t(as.numeric(fmean$data[1,]))
t(as.numeric(fmean$data[1,])
t(as.numeric(fmean$data[1,]))
t(as.numeric(fmean$data[1,]))
t(c(fmean$data[1,]))
subject_scores1 <- subject_scores1 + t(c(fmean$data[1,]))
data("tension", package = "MPsychoR")
str(tension)
dim(tension)
# -----------
tens <- t(as.matrix(tension[, 1:800]))
# ------------------------------------------------------------------------------
# standardize individual series
# ------------------------------------------------------------------------------
std <- diag(1 / sqrt(diag(cov(tens))))
tens <- as.matrix(tens) %*% std
# ------------------------------------------------------------------------------
# Assess unidimensionality
#   - fitting a 2-dimensional Princals in order to get a picture of item associations in a 2D space.
# ------------------------------------------------------------------------------
library(Gifi)
prin <- princals(tens)
prin
graphics.off()
par(mfrow = c(1,2))
plot(prin, main = "Loadings")
ftension
ftensionNP
names(ftensionNP)
dim(ftensionNP$fdata.est)
tens <- t(ftensionNP$fdata.est))
tens <- t(ftensionNP$fdata.est)
std <- diag(1 / sqrt(diag(cov(tens))))
tens <- as.matrix(tens) %*% std
# ------------------------------------------------------------------------------
# Assess unidimensionality
#   - fitting a 2-dimensional Princals in order to get a picture of item associations in a 2D space.
# ------------------------------------------------------------------------------
library(Gifi)
prin <- princals(tens)
prin
tens
ftensionNP$fdata.est
tens <- t(ftensionNP$fdata.est$data)
tens
std <- diag(1 / sqrt(diag(cov(tens))))
tens <- as.matrix(tens) %*% std
# ------------------------------------------------------------------------------
# Assess unidimensionality
#   - fitting a 2-dimensional Princals in order to get a picture of item associations in a 2D space.
# ------------------------------------------------------------------------------
library(Gifi)
prin <- princals(tens)
prin
# ----------
# plot loadings
graphics.off()
par(mfrow = c(1,2))
plot(prin, main = "Loadings")
plot(prin, main = "Loadings")
setwd("//media//kswada//MyFiles//R//cmort")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  cmort (Pollution, Temperature and Mortality)
# ------------------------------------------------------------------------------
data(cmort, package = "astsa")
data(tempr, package = "astsa")
data(part, package = "astsa")
str(cmort)
str(tempr)
str(part)
cmort
tempr
part
# center time
trend <- time(cmort) - mean(time(cmort))
dcmort <- resid(fit2 <- lm(cmort ~ trend, na.action = NULL))
# ----------
# intercept = 88.7,  trend = -1.63
fit2
# ----------
u <- ts.intersect(dM = dcmort, dM1 = stats::lag(dcmort, -1),
dM2 = stats::lag(dcmort, -2), T1 = stats::lag(tempr, -1),
P = part, P4 = stats::lag(part, -4))
u
head(u)
mod_lm <- lm(dM ~ ., data = u, na.action = NULL)
summary(mod_lm)
par(mfrow = c(2,2))
plot(mod_lm)
sarima(u[,1], 0, 0, 0, xreg = u[,2:6])
sarima(u[,1], 0, 0, 0, xreg = u[,2:6])
summary(mod_lm)
const
trend <- time(cmort) - mean(time(cmort))
# appropriate time series of 1s
const <- time(cmort) / time(cmort)
trend
const
( A <- array(c(1, 0), dim = c(1, 2, num)) )
# center time
trend <- time(cmort) - mean(time(cmort))
# appropriate time series of 1s
const <- time(cmort) / time(cmort)
# ----------
ded <- ts.intersect(M = cmort, T1 = stats::lag(tempr, -1), P = part, P4 = stats::lag(part, -4), trend, const)
y <- ded[,1]
input <- ded[,2:6]
num <- length(y)
# ----------
# Transition matrix
( A <- array(c(1, 0), dim = c(1, 2, num)) )
help(Kfilter2)
summary(mod_lm)
summary(mod_lm)
sarima(u[,1], 0, 0, 0, xreg = u[,2:6])
( A <- array(c(1, 0), dim = c(1, 2, num)) )
# ----------
# Function to calculate likelihood
# Kfilter2: Kalman Filter model may be time varying or have inputs or correlated errors
Linn <- function(para){
phi1 <- para[1];  phi2 <- para[2];  cR = para[3];  b1 = para[4];  b2 <- para[5];  b3 <- para[6];  b4 <- para[7];  alf <- para[8];
# initial state mean
mu0 <- matrix(c(0, 0), 2, 1)
# initial state covariance matrix
Sigma0 <- diag(100, 2)
# state transition matrix
Phi <- matrix(c(phi1, phi2, 1, 0), 2)
# state error pre-matrix
Theta <- matrix(c(phi1, phi2), 2)
# state input matrix
Ups <- matrix(c(b1, 0, b2, 0, b3, 0, 0, 0, 0, 0), 2, 5)
# obaservation input matrix
Gam <- matrix(c(0, 0, 0, b4, alf), 1, 5)
# Cholesky decomposition of state error covariance matrix
cQ <- cR
# covariance-type matrix of state and observation errors
S <- cR^2
kf <- astsa::Kfilter2(num, y, A, mu0, Sigma0, Phi, Ups, Gam, Theta, cQ, cR, S, input)
return(kf$like)
}
# ------------------------------------------------------------------------------
# Estimation
# ------------------------------------------------------------------------------
summary(mod_lm)
sarima(u[,1], 0, 0, 0, xreg = u[,2:6])
# ----------
# Set referring to previous modeling by lm() or sarima()
init.par <- c(phi1 = 0.3, phi2 = 0.3, cR = 5, b1 = -0.2, b2 = 0.1, b3 = 0.05, b4 = -1.6, alf = mean(cmort))
# Lower bound and upper bound on parameters used in optim
L <- c(0, 0, 1, -1, 0, 0, -2, 70)
U <- c(0.5, 0.5, 10, 0, 0.5, 0.5, 0, 90)
# ----------
( est <- optim(init.par, Linn, NULL, method = "L-BFGS-B", lower = L, upper = U, hessian = TRUE, control = list(trace = 1, REPORT = 1, factr = 10^8)) )
SE <- sqrt(diag(solve(est$hessian)))
mean(cmort)
cmort
plot(cmort, type ="l")
summary(mod_lm)
sarima(u[,1], 0, 0, 0, xreg = u[,2:6])
summary(mod_lm)
fit1 <- sarima(cmort, 2, 0, 0, xreg = time(cmort))
fit1$ttable
fit1 <- sarima(cmort, 2, 0, 0, xreg = time(cmort))
fit1$ttable
round(cbind(estimate = est$par, SE), 3)
phi1 <- est$par[1]
phi2 <- est$par[2]
cR <- est$par[3]
b1 <- est$par[4]
b2 <- est$par[5]
b3 <- est$par[6]
b4 <- est$par[7]
alf <- est$par[8]
mu0 <- matrix(c(0, 0), 2, 1)
Sigma0 <- diag(100, 2)
Phi <- matrix(c(phi1, phi2, 1, 0), 2)
Theta <- matrix(c(phi1, phi2), 2)
Ups <- matrix(c(b1, 0, b2, 0, b3, 0, 0, 0, 0, 0), 2, 5)
Gam <- matrix(c(0, 0, 0, b4, alf), 1, 5)
cQ <- cR
S <- cR^2
# ----------
kf <- Kfilter2(num, y, A, mu0, Sigma0, Phi, Ups, Gam, Theta, cQ, cR, S, input)
# ----------
res <- ts(as.vector(kf$innov), start = start(cmort), freq = frequency(cmort))
sarima(res, 0, 0, 0, no.constant = TRUE)
sarima(res, 0, 0, 0, no.constant = TRUE)
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv")
str(dat)
head(dat)
dat$計画 + dat$実績
dat$計画
dat$実績
dat[,c(5,6)]
dat
dat$計画
dat$実績
summary(dat$計画)
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv",  encoding="cp932")
str(dat)
head(dat)
dat$計画
dat$実績
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv",  encoding="cp932")
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv")
str(dat)
head(dat)
dat$計画
dat$実績
summary(dat$計画)
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv",  encoding="cp932")
summary(dat$計画)
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv")
summary(dat$計画)
dat$計画
dat$実績
dat[,c(5,6)]
dat
dat <- read.csv("C:\\Users\\kswad\\OneDrive\\デスクトップ\\広州_TB_TestData.csv")
dat$日付
