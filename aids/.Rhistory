setwd("//media//kswada//MyFiles//R//abdom")
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
str(fabric)
car::some(fabric)
mNBI <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = NBI)
# Negative Binomial Type 2
mNBII <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = NBII)
# Zero altered Poisson
mZAP <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = ZAP)
mSICHEL <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = SICHEL)
# Sichel (mu the mean)
mSICHEL <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = SICHEL)
# zero inflatged neg.binomial
mZINBI <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), nu.fo = ~ pb(x), data = fabric, family = ZINBI)
# Zero altered neg.binomial
mZANBI <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), nu.fo = ~ pb(x), data = fabric, family = ZANBI)
mPO1 <- gamlss(y ~ x, data = fabric, family = PO)
mPO2 <- gamlss(y ~ pb(x), data = fabric, family = PO)
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI)
# Negative Binomial Type 2
mNBII <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = NBII)
# Poisson inverse Gaussian
mPIC <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = PIG)
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI)
# Poisson inverse Gaussian
mPIG <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = PIG)
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI)
mZIP <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), data = fabric, family = ZIP)
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI)
plot(mPIG)
wp(mPIG)
plot(mPIG)
wp(mPIG)
edfAll(mPIG)
fittedPlot(mPIG, x = fabric$x)
plot(y ~ x, data = fabric)
lines(fitted(mPIG) ~ x, data = fabric, col = "blue")
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI, k = 2)
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI, k = 3)
GAIC(mPO1, mPO2, mNBI, mNBII, mPIG, mZIP, mZAP, mSICHEL, mZINBI, mZANBI, k = log(length(fabric$y)))
plot(y ~ x, data = fabric)
plot(fitted(mPIG) ~ x, data = fabric)
lines(fitted(mPIG) ~ fabric[order(x)], data = fabric, col = "blue")
fabric[order(x)]
fabric[,order(x)]
fabric[order(x),"x"]
fabric[order(fabric$x),"x"]
lines(fitted(mPIG) ~ fabric[order(fabric$x),"x"], data = fabric, col = "blue")
plot(y ~ x, data = fabric)
plot(fitted(mPIG) ~ x, data = fabric)
plot(y ~ x, data = fabric)
# plot(fitted(mPIG) ~ x, data = fabric)
lines(fitted(mPIG) ~ fabric[order(fabric$x),"x"], data = fabric, col = "blue")
plot(y ~ x, data = fabric)
# plot(fitted(mPIG) ~ x, data = fabric)
lines(fitted(mPIG) ~ x, data = fabric, col = "blue")
centiles(mPIG, fabric$x)
centiles.fan(mPIG, xvar = abdom$x, cent = c(3, 10, 25, 50, 75, 90, 97), colors = "terrain", ylab = "y", xlab = "x")
centiles.fan(mPIG, xvar = fabric$x, cent = c(3, 10, 25, 50, 75, 90, 97), colors = "terrain", ylab = "y", xlab = "x")
fabric$x
centiles(mPIG, fabric$x)
fabric$x
centiles(mPIG, fabric$x)
centiles.fan(mPIG, xvar = fabric$x, cent = c(3, 10, 25, 50, 75, 90, 97), colors = "terrain", ylab = "y", xlab = "x")
plotSimpleGamlss(y, x, model = mPIG, data = fabric, cols = heat_hcl(100))
gamlss.util::plotSimpleGamlss(y, x, model = mPIG, data = fabric, cols = heat_hcl(100))
gamlss.add::plotSimpleGamlss(y, x, model = mPIG, data = fabric, cols = heat_hcl(100))
gamlss.util::plotSimpleGamlss(y, x, model = mPIG, data = fabric, cols = heat_hcl(100))
library(gamlss.util)
plotSimpleGamlss(y, x, model = mPIG, data = fabric, cols = heat_hcl(100))
help(heat_hcl)
library(gamlss.util)
plotSimpleGamlss(y, x, model = mPIG, data = fabric
)
library(gamlss.util)
plotSimpleGamlss(y, x, model = mPIG, data = fabric)
help(centiles)
centiles(mPIG, fabric$x)
centiles.fan(mPIG, xvar = fabric$x, cent = c(3, 10, 25, 50, 75, 90, 97), colors = "terrain", ylab = "y", xlab = "x")
centiles.fan(mPIG, xvar = fabric$x)
centiles.fan(mPIG, xvar = fabric$x, cent = c(3, 10, 25, 50, 75, 90, 97), colors = "terrain", ylab = "y", xlab = "x")
setwd("//media//kswada//MyFiles//R//whiteside")
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("whiteside", package = "gamlss.data")
str(whiteside)
car::some(whiteside)
car::scatterplot(Gas ~ Temp, data = whiteside)
car::scatterplot(Gas ~ Temp, data = whiteside%>% filter(Insul == "Before"))
setwd("//media//kswada//MyFiles//R//whiteside")
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("whiteside", package = "MASS")
str(whiteside)
car::some(whiteside)
gasB <- gamlss(Gas ~ Temp, data = subset(whiteside, Insul == "Before"))
gasA <- update(gasB, data = subset(whiteside, Insul == "After"))
with(whiteside, plot(Temp, Gas, pch = (16:17)[unclass(Insul)], col = c("red", "green3")[unclass(Insul)]))
with(whiteside, plot(Temp, Gas, pch = (16:17)[unclass(Insul)], col = c("red", "green3")[unclass(Insul)]))
with(whiteside, lines(Temp[Insul == "Before"], fitted(gasB), col = "red", lwd = 2))
with(whiteside, lines(Temp[Insul == "After"], fitted(gasA), col = "green3", lty = 2, lwd = 2))
legend("topright", pch = 16:17, lty = 1:2, lwd = 2, col = c("red", "green3"), legend = c("before", "after"))
a1 <- gamlss(Gas ~ Temp * Insul, sigma.fo =~Insul, data = whiteside)
coef(a1)
coef(gasA)
coef(gasA)
coef(gasB)
coef(a1)
coef(gasA)
coef(gasB)
coef(a1, "sigma")
coef(a1, "sigma")
coef(gasA, "sigma")
coef(gasB, "sigma")
with(whiteside, plot(Temp, Gas, pch = 21, bg = c("red", "green3")[unclass(Insul)]))
posA <- which(whiteside$Insul == "After")
posB <- which(whiteside$Insul == "Before")
with(whiteside, lines(fitted(a1)[posB] ~ whiteside$Temp[posB], pch = 19)
with(whiteside, lines(fitted(a1)[posA] ~ whiteside$Temp[posA], pch = 19)
with(whiteside, lines(fitted(a1)[posB] ~ whiteside$Temp[posB], pch = 19)
with(whiteside, lines(fitted(a1)[posA] ~ whiteside$Temp[posA], pch = 19)
with(whiteside, plot(Temp, Gas, pch = 21, bg = c("red", "green3")[unclass(Insul)]))
posA <- which(whiteside$Insul == "After")
posB <- which(whiteside$Insul == "Before")
with(whiteside, lines(fitted(a1)[posB] ~ whiteside$Temp[posB], pch = 19)
with(whiteside, lines(fitted(a1)[posA] ~ whiteside$Temp[posA], pch = 19)
with(whiteside, plot(Temp, Gas, pch = 21, bg = c("red", "green3")[unclass(Insul)]))
posA <- which(whiteside$Insul == "After")
posB <- which(whiteside$Insul == "Before")
with(whiteside, lines(fitted(a1)[posB] ~ whiteside$Temp[posB], pch = 19))
with(whiteside, lines(fitted(a1)[posA] ~ whiteside$Temp[posA], pch = 19))
coef(gasA, "sigma")
coef(gasB, "sigma")
wp(gasA)
wp(a1)
wp(gasB)
deviance(a) = deviace(gasA) + deviance(gasB)
deviance(a) = deviance(gasA) + deviance(gasB)
deviance(a1) = deviance(gasA) + deviance(gasB)
deviance(a1)
deviance(gasA)
deviance(gasB)
setwd("//media//kswada//MyFiles//R//eu15")
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("eu15", package = "gamlss.data")
str(eu15)
car::some(eu15)
eu15 <- transform(eu15, lGDP = log(GDP), lCapital = log(Capital), lLabor = log(Labor), lUsefulEnergy = log(UsefulEnergy))
car::some(eu15)
car::scatterplot(lGDP ~ lCapital, data = eu15)
car::scatterplot(lGDP ~ lUsefulEnergy, data = eu15)
car::scatterplot(lGDP ~ lLabor, data = eu15)
mod1 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2)
summary(mod1)
term.plot(mod1, pages = 1)
term.plot(mod1, pages = 1)
help(term.plot)
term.plot(mod1, what = c("sigma"), pages = 1)
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod1)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
car::scatterplot(lGDP ~ Year, data = eu15)
w <- 1 * exp(-(2 / nrow(eu15))) * seq(from = nrow(eu15) - 1, to = 0))
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnery + lLabor, data = eu15, family = TF2, weights = w)
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
w <- 1 * exp(-(2 / nrow(eu15))) * seq(from = nrow(eu15) - 1, to = 0))
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
w <- 1 * exp(-(2 / (nrow(eu15))) * seq(from = nrow(eu15) - 1, to = 0))
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
w <- 1 * exp(-(2 / (nrow(eu15))) * seq(from = nrow(eu15) - 1, to = 0))
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
par(mfrow = c(2, 1))
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod1)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod2)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
par(mfrow = c(2, 1))
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod1)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod2)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
Rsq(mod1, mod2)
Rsq(mod1)
Rsq(mod1)
Rsq(mod2)
mod1 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2)
summary(mod1)
w <- 1 * exp(-(2 / (nrow(eu15))) * seq(from = nrow(eu15) - 1, to = 0))
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
# ----------
par(mfrow = c(2, 1))
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod1)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod2)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2)
Rsq(mod1)
Rsq(mod2)
par(mfrow = c(1, 1))
with(eu15, plot(Year, lGDP, pch = 10))
lines(fitted(mod1)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 1)
lines(fitted(mod2)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2, col = "blue")
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
w <- 1 * exp(-(2 / (nrow(eu15))) * seq(from = nrow(eu15) - 1, to = 0))
mod2 <- gamlss(lGDP ~ lCapital + lUsefulEnergy + lLabor, data = eu15, family = TF2, weights = w)
par(mfrow = c(1, 1))
with(eu15, plot(Year, lGDP, pch = 21))
lines(fitted(mod1)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 1)
lines(fitted(mod2)[order(eu15$Year)] ~ eu15$Year[order(eu15$Year)], lwd = 2, col = "blue")
Rsq(mod1)
Rsq(mod2)
GAIC(mod1, mod2)
setwd("//media//kswada//MyFiles//R//aids")
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("aids", package = "gamlss.data")
str(aids)
car::some(aids)
car::scatterplot(y ~ x, data = fabric)
h.po <- gamlss(y ~ pb(x) + qtr, family = PO, data = aids)
term.plot(h.po)
h.po <- gamlss(y ~ pb(x) + qtr, family = PO, data = aids)
term.plot(h.po)
h.po <- gamlss(y ~ pb(x) + qrt, family = PO, data = aids)
term.plot(h.po)
wp(h.po)
h.nb <- update(h.nb, ~ cs(x, 8) + qrt)
h.nb <- update(h.po, family = NBI)
term.plot(h.nb)
wp(h.nb)
h.nb1 <- update(h.nb, ~ cs(x, 8) + qrt)
term.plot(h.nb1)
wp(h.nb1)
wp(h.nb)
wp(h.nb1)
h.nb2 <- update(h.nb, ~ .-qrt)
wp(h.nb2)
h.nb3 <- update(h.nb1, log(.) ~ . + qrt, family = NO)
wp(h.nb3)
GAIC(h.po, h.nb, h.nb1, h.nb2, h.nb3, h.no)
GAIC(h.po, h.nb, h.nb1, h.nb2, h.nb3)
wp(h.nb3)
m100 <- gamlss(y ~ x + qrt, data = aids, family = NBI)
logL <- gen.likelihood(m100)
logL()
logL
logL()
logL(c(coef(m100), coef(m100, "sigma")))
optimHess(c(coef(m100), coef(m100, "sigma")), logL)
m200 <- gamlss(y ~ pb(x) + qrt, data = aids, family = NBI)
logL2 <- gen.likelihood(m200)
logL2 <- logL2(c(coef(m200), coef(m200, "sigma")))
logL2 <- gen.likelihood(m200)
logL2(c(coef(m200), coef(m200, "sigma")))
optimHess(c(coef(m200), coef(m200, "sigma")), logL)
vcov(m100, type = "cor")
vcov(m100, type = "se")
vcov(m100, type = "se", robust = TRUE)
rvcov(m100, type = "se")
set.seed(4321)
# ----------
# generate from a gamma distribution with sigma = 2
Y <- rGA(200, mu = 1, sigma = 2)
set.seed(4321)
# ----------
# generate from a gamma distribution with sigma = 2
Y <- rGA(200, mu = 1, sigma = 2)
# ----------
# fitting the wrong model i.e. sigma = 1
r1 <- gamlss(Y ~ 1, family = EXP)
# fitting correct model
r2 <- gamlss(Y ~ 1, family = GA)
# ----------
vcov(r1, type = "se")
rvcov(r1, type = "se")
vcov(r2, type = "se")
rvcov(r2, type = "se")
vcov(r2, type = "se", robust = TRUE)
vcov(r1, type = "se")
rvcov(r1, type = "se")
vcov(r2, type = "se")
rvcov(r2, type = "se")
vcov(r2, type = "se", robust = TRUE)
drop1(m100)
m100 <- gamlss(y ~ x + qrt, data = aids, family = NBI)
m200 <- gamlss(y ~ pb(x) + qrt, data = aids, family = NBI)
m300 <- gamlss(y ~ pb(x, df = m200$mu.nl.df) + qrt, data = aids, family = NBI)
drop1(m300)
confint(m100)
data("abdom", package = "gamlss.data")
str(abdom)
car::some(abdom)
h <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), family = TF, data = abdom)
h2 <- gamlss(y ~ pb(x, df = h$mu.nl.df), sigma.fo = ~ pb(x, df = h$sigma.nl.df), family = TF, data = abdom)
pd1 <- prof.dev(h2,, "mu", min = 5, max = 50)
pd1
pd1 <- prof.dev(h2, "mu", min = 5, max = 50)
pd1
confint(h)
confint(h2)
pd1 <- prof.dev(h2, "mu", min = 5, max = 50)
pd1
h2 <- gamlss(y ~ pb(x, df = h$mu.nl.df), sigma.fo = ~ pb(x, df = h$sigma.nl.df), family = TF, data = abdom, trace = FALSE)
h2 <- gamlss(y ~ pb(x, df = h$mu.nl.df), sigma.fo = ~ pb(x, df = h$sigma.nl.df), family = TF, data = abdom, trace = FALSE)
pd1 <- prof.dev(h2, "mu", min = 5, max = 50)
pd1 <- prof.dev(h2, "nu", min = 5, max = 50)
pd1
h2 <- gamlss(y ~ pb(x, df = h$mu.nl.df), sigma.fo = ~ pb(x, df = h$sigma.nl.df), family = TF, data = abdom)
pd1 <- prof.dev(h2, "nu", min = 5, max = 50)
pd1
pd1()
pd1
pd1
print(pd1)
summary(pd1)
pd2 <- prof.dev(h2, "nu", min = 5, max = 50, length = 20)
pd2
pd2$fun(34)
curve(pd2$fun(x), 5, 50)
curve(pd2$fun(x), 5, 50, perc = 99)
curve(pd2$fun(x, perc = 99), 5, 50)
help(pd2$fun)
pd1 <- prof.dev(m100, "sigma", min = 5, max = 50)
confint(m100)
pd1 <- prof.dev(m100, "mu", min = 5, max = 50)
pd1
pd1 <- prof.dev(m100, "mu", min = 5, max = 50)
confint(m100)
confint(h)
summary(m100)
summary(m100)
confint(m100)
m100 <- gamlss(y ~ x + qrt, data = aids, family = NBI)
# ----------
confint(m100)
summary(m100)
mod <- quote(gamlss(y ~ offset(this * x) + qrt, data = aids, family = NBI))
prof.term(mod, min = 0.06, max = 0.11, length = 20)
mod
prof.term(mod, min = 0.06, max = 0.11, length = 20, perc = 99)
aids.1 <- quote(gamlss(y ~ x + I((x > this) * (x - this)) + qrt, family = NBI, data = aids))
prof.term(aids.1, min = 16, max = 21, length = 20, criterion = "GD")
aids.2 <- quote(gamlss(y ~ x + I((x > 18.33) * (x - 18.33)) + qrt, family = NBI, data = aids))
plot(aids$x, aids$y)
lines(aids$x, fitted(aids.2), col = "red")
aids.2 <- gamlss(y ~ x + I((x > 18.33) * (x - 18.33)) + qrt, family = NBI, data = aids)
plot(aids$x, aids$y)
lines(aids$x, fitted(aids.2), col = "red")
mod1 <- quote(gamlss(y ~ cs(x, df = this) + qrt, data = aids, family = NBI))
prof.term(mod1, min = 1, max = 15, step = 1, criterion = "GAIC", penalty = 2.5)
mod1 <- quote(gamlss(y ~ cs(x, df = this) + qrt, data = aids, family = NBI))
prof.term(mod1, min = 1, max = 15, step = 1, criterion = "GAIC", penalty = 2.5)
mod1 <- quote(gamlss(y ~ cs(x, df = this) + qrt, data = aids, family = NBI))
prof.term(mod1, min = 1, max = 15, step = 1, criterion = "GAIC", penalty = 2.5)
aids.1 <- gamlss(y ~ poly(x, 3) + qrt, family = NBI, data = aids)
plot(aids$x, aids$y)
lines(aids$x, aids.1$mu.fv)
predict(aids.1)
predict(aids.1, parameter = "mu")
predict(aids.1, parameter = "mu", type = "link")
predict(aids.1, type = "response")
aids.1$mu.fv
aids.1$mu.fv
paids.1 <- predict(aids.1, what = "mu", se.fit = TRUE, type = "response")
paids.1$se.fit
paids.1$mu
paids.1$fit
paids.2 <- predict(aids.1, what = "mu", se.fit = TRUE, type = "link")
paids.2$fit
paids.2$se.fit
paids.3 <- predict(aids.1, what = "mu", type = "terms")
paids.4 <- predict(aids.1, what = "mu", type = "terms", se.fit = TRUE)
paids.3
paids.4
data("abdom", package = "gamlss.data")
str(abdom)
car::some(abdom)
h <- gamlss(y ~ pb(x), sigma.fo = ~pb(x), family = TF, data = abdom)
hall <- predictAll(h)
plot(hall)
pdf.plot(mu = hall$mu, sigma = hall2$sigma, nu = hall2$nu, family = TF, min = 100, max = 350, step = 1)
pdf.plot(mu = hall2$mu, sigma = hall2$sigma, nu = hall2$nu, family = TF, min = 100, max = 350, step = 1)
newabdom <- data.frame(x = c(20, 25, 30))
hall2 <- predictAll(h, newdata = newabdom)
pdf.plot(mu = hall2$mu, sigma = hall2$sigma, nu = hall2$nu, family = TF, min = 100, max = 350, step = 1)
hall$mu
hall$mu
hall$sigma
hall$nu
hall$y
hall$tau
mod1 <- gamlss(y ~ poly(x, 3) + qrt, family = NBI, data = aids)
mod2 <- gamlss(y ~ bs(x, 5) + qrt, family = NBI, data = aids)
mod3 <- gamlss(y ~ pb(x) + qrt, family = NBI, data = aids)
( ap1 <- predict(mod1, what = "mu", newdata = newaids, type = "response") )
( ap2 <- predict(mod2, what = "mu", newdata = newaids, type = "response") )
( ap3 <- predict(mod3, what = "mu", newdata = newaids, type = "response") )
newaids <- ddata.frame(x = c(46, 47, 48), qrt = c(2, 3, 4))
( ap1 <- predict(mod1, what = "mu", newdata = newaids, type = "response") )
( ap2 <- predict(mod2, what = "mu", newdata = newaids, type = "response") )
( ap3 <- predict(mod3, what = "mu", newdata = newaids, type = "response") )
newaids <- ddata.frame(x = c(46, 47, 48), qrt = c(2, 3, 4))
newaids <- data.frame(x = c(46, 47, 48), qrt = c(2, 3, 4))
( ap1 <- predict(mod1, what = "mu", newdata = newaids, type = "response") )
( ap2 <- predict(mod2, what = "mu", newdata = newaids, type = "response") )
( ap3 <- predict(mod3, what = "mu", newdata = newaids, type = "response") )
plot(y ~ x, data = aids, xlum = c(0, 55), ylim = c(0, 600))
lines(fitted(mod1) ~ aids$x, col = 2)
lines(fitted(mod2) ~ aids$x, col = 3)
lines(fitted(mod3) ~ aids$x, col = 4)
lines(ap1 ~ newaids$x, col = 2)
points(ap1 ~ newaids$x, col = 2)
lines(ap2 ~ newaids$x, col = 3)
points(ap2 ~ newaids$x, col = 3)
lines(ap3 ~ newaids$x, col = 4)
points(ap3 ~ newaids$x, col = 4)
plot(y ~ x, data = aids, xlim = c(0, 55), ylim = c(0, 600))
lines(fitted(mod1) ~ aids$x, col = 2)
lines(fitted(mod2) ~ aids$x, col = 3)
lines(fitted(mod3) ~ aids$x, col = 4)
lines(ap1 ~ newaids$x, col = 2)
points(ap1 ~ newaids$x, col = 2)
lines(ap2 ~ newaids$x, col = 3)
points(ap2 ~ newaids$x, col = 3)
lines(ap3 ~ newaids$x, col = 4)
points(ap3 ~ newaids$x, col = 4)
fit2 <- gamlss(y ~ poly(x, 2), sigma.fo = ~x, data = abdom, family = LO)
fit3 <- gamlss(y ~ poly(x, 3), sigma.fo = ~x, data = abdom, family = LO)
AIC(fit2, fit3)
LR.test(fit2, fit3)
library(boot)
abd.funA <- function(data, i){
d <- data
# OMIT THE FIRST
d$y <- if("origianl" %in% as.character(sys.call()))  d$y
# SIMULATE Y
else rLO(dim(d)[1], mu = d$fmu, sigma = d$fsigma)
# FIT AND GET THE COEF FOR MU
coef(update(fit3, data = d))
}
( abd.T1 <- boot(abdomA, abd.funA, R = 999) )
abd.T1
abdomA <- data.frame(abdom, fmu = fitted(fit3), fsigma = fitted(fit3, "sigma"))
abd.funA <- function(data, i){
d <- data
# OMIT THE FIRST
d$y <- if("origianl" %in% as.character(sys.call()))  d$y
# SIMULATE Y
else rLO(dim(d)[1], mu = d$fmu, sigma = d$fsigma)
# FIT AND GET THE COEF FOR MU
coef(update(fit3, data = d))
}
( abd.T1 <- boot(abdomA, abd.funA, R = 999) )
abd.T1
plot(abd.T1, ndex = 4)
boot.ci(abd.T1, index = c(4, 1))
plot(abd.T1, index = 4)
boot.ci(abd.T1, index = c(4, 1))
help(sys.call)
plot(abd.T1, index = 4)
boot.ci(abd.T1, index = c(4, 1))
abdomB <- data.frame(abdom, res = resid(fit3), fmu = fitted(fit3), fsigma = fitted(fit3, "sigma"))
# ----------
# function to save the mu coefficients
abd.funB <- function(data, i){
d <- data
# pNO is always the same for normalized residuals
# the q function changes acoording to the family we fit
d$y <- qLO(pNO(d$res[i]), mu = d$fmu, sigma =  d$fsigma)
coef(update(fit3, data = d))
}
( abd.T2 <- boot(abdomB, abd.funB, R = 999) )
abd.T2
plot(abd.T2, index = 4)
boot.ci(abd.T2, index = c(4, 1))
abd.funC <- function(data, i){
d <- data[i,]
coef(update(fit3, data = d))
}
( abd.T3 <- boot(abdomB, abd.funC, R = 999) )
abd.T3
plot(abd.T3, index = 4)
boot.ci(abd.T3, index = c(4, 1))
FF <- histSmo(abd.T3$t[,4], plot = T)
1 - FF$cdf(20)
FF$cdf(20) - FF$cdf(-20)
plot(abd.Sim, index = 1)
boot.ci(abd.Sim, type = "perc")
abd.SMo <- function(data, i){
d <- data[i,]
getSmo(update(fitG, data=d))$lambda
}
abd.Sim <- boot(abdom, abd.Smo, R = 99)
fitG <- gamlss(y ~ pb(x), sigma.fo = ~x, data = abdom, family = LO, gd.tol = Inf)
# ----------
abd.SMo <- function(data, i){
d <- data[i,]
getSmo(update(fitG, data=d))$lambda
}
abd.Sim <- boot(abdom, abd.Smo, R = 99)
# ----------
abd.Smo <- function(data, i){
d <- data[i,]
getSmo(update(fitG, data=d))$lambda
}
abd.Sim <- boot(abdom, abd.Smo, R = 99)
plot(abd.Sim, index = 1)
boot.ci(abd.Sim, type = "perc")
