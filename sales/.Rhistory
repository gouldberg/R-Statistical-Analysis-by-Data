ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
# ----------
# compare 2nd order Trend model vs. smooth.spline spar = 0.75
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
lines(smooth.spline(dat$weight, spar = 0.75), lwd = 2, col = "blue", lty = 2)
likLocallevel <- ksfLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
ksfLocallevel
kfsLocallevel
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likTrend <- kfsTrend$logLik - sum(kfsTrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltnredrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likTrend <- kfsTrend$logLik - sum(kfsTrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
-2 * likLocallevel + 2 (2 + 1)
-2 * likTrend + 2 (2 + 1)
-2 * likLocaltrend + 2 (2 + 1)
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likTrend <- kfsTrend$logLik - sum(kfsTrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
-2 * likLocallevel + 2 (2 + 1)
-2 * likLocallevel + 2 (2 + 1)
-2 * likLocallevel + 2 * (2 + 1)
-2 * likTrend + 2 * (2 + 1)
-2 * likLocaltrend + 2 * (2 + 1)
# estimated as almost zero --> almost local level model
fitLocaltrend$model$H
fitLocaltrend$model$Q
fitLocallevel$model$H
fitLocallevel$model$Q
fitLocallevel$model$H
fitLocallevel$model$Q
fitLocallevel$model$Q
fitLocallevel$model$H
fitTrend$model$Q
fitTrend$model$H
fitTrend$model$H
# local level model:  estimate Q and H (by maximum likelihood)
# Q:  variance for system equation
# H:  variance for observation equation
modLocallevel <- SSModel(dat$weight ~ SSMtrend(1, Q = NA), H = NA)
fit <- fitSSM(modLocallevel, numeric(2))
fit$model$Q
fit$model$H
fit$model$Q
fit$model$H
fit$model$Q / fit$model$H
fitLocallevel$model$Q
fitLocallevel$model$H
fitTrend$model$Q
fitTrend$model$H
fitLocaltrend$model$Q
fitLocaltrend$model$H
# local level model
( strllm <- StructTS(dat$weight, type = "level") )
# Kalman Filter used in fittting
strllm$model
# ----------
# S/N ratio = 2.107
strllm$model$h
strllm$model$V
strllm$model$V
strllm$model$h
strllm$model$v / strllm$model$h
( strllm <- StructTS(dat$weight, type = "level") )
# Kalman Filter used in fittting
strllm$model
# ----------
# S/N ratio = 2.107
strllm$model$V
strllm$model$h
strllm$model$v / strllm$model$h
strllm$model$V / strllm$model$h
strtrend$model$V / strllm$model$h
strtrend$model$V
strtrend$model$h
strtrend$model$V / strllm$model$h
strtrend$model$V
strtrend$model$h
modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(0.076), list(NA))), H = 0.14)
fitLocaltrend <- fitSSM(modLocaltrend, numeric(3))
kfsLocaltrend <- KFS(fitLocaltrend$model)
fitLocaltrend$model$Q
# estimated as almost zero --> almost local level model
fitLocaltrend$model$H
# ----------
# orange:  Local Level Model
# blue:  2nd order Trend model
# black:  Local Linear Trend model
graphics.off()
par(mfrow = c(2,1))
ts.plot(dat$weight, lty = 3, type = "o", ylab = "level")
lines(kfsLocallevel$alphahat[,"level"], lwd = 2, lty = 2, col = "orange")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
# almost overlapped with original time series
lines(kfsLocaltrend$alphahat[,"level"], lwd = 2)
ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likTrend <- kfsTrend$logLik - sum(kfsTrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
-2 * likLocallevel + 2 * (2 + 1)
-2 * likTrend + 2 * (2 + 1)
-2 * likLocaltrend + 2 * (2 + 1)
# local level model
modLocallevel <- SSModel(dat$weight ~ SSMtrend(1, Q = NA), H = NA)
fitLocallevel <- fitSSM(modLocallevel, numeric(2))
kfsLocallevel <- KFS(fitLocallevel$model)
fitLocallevel$model$Q
fitLocallevel$model$H
# ----------
# 2nd order trend model
modTrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(0), list(NA))), H = NA)
fitTrend <- fitSSM(modTrend, numeric(2))
kfsTrend <- KFS(fitTrend$model)
fitTrend$model$Q
fitTrend$model$H
head(kfsTrend$alphahat)
# ----------
# local linear trend model
modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(NA), list(NA))), H = NA)
# local linear trend model but with H = 0.14, Q = 0.076
# modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(0.076), list(NA))), H = 0.14)
fitLocaltrend <- fitSSM(modLocaltrend, numeric(3))
kfsLocaltrend <- KFS(fitLocaltrend$model)
fitLocaltrend$model$Q
# estimated as almost zero --> almost local level model
fitLocaltrend$model$H
# ----------
# orange:  Local Level Model
# blue:  2nd order Trend model
# black:  Local Linear Trend model
graphics.off()
par(mfrow = c(2,1))
ts.plot(dat$weight, lty = 3, type = "o", ylab = "level")
lines(kfsLocallevel$alphahat[,"level"], lwd = 2, lty = 2, col = "orange")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
# almost overlapped with original time series
lines(kfsLocaltrend$alphahat[,"level"], lwd = 2)
ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
# ----------
# compare 2nd order Trend model vs. smooth.spline spar = 0.75
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
lines(smooth.spline(dat$weight, spar = 0.75), lwd = 2, col = "blue", lty = 2)
# ----------
# maximum likelihood and AIC
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likTrend <- kfsTrend$logLik - sum(kfsTrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
-2 * likLocallevel + 2 * (2 + 1)
-2 * likTrend + 2 * (2 + 1)
-2 * likLocaltrend + 2 * (2 + 1)
-2 * likLocallevel + 2 * (2 + 1)
-2 * likTrend + 2 * (2 + 2)
-2 * likLocaltrend + 2 * (3 + 2)
names(kfsLocallevel)
summary(fitLocallevel)
names(fitlocallevel)
names(fitLocallevel)
fitLocallevel$model
kfsLocallevel
names(fkfsLocallevel)
names(kfsLocallevel)
kfsLocallevel$model
strllm
names(strllm)
strllm$loglik
strllm$coef
AIC(kfsTrend)
ts.smooth(dat$weight)
tssmooth(dat$weight)
summary(ur.df(dat$weight, type = "none", lags = 2))
summary(ur.df(dat$weight, type = "none", lags = 1))
summary(ur.df(dat$weight, type = "none", lags = 1))
summary(ur.df(dat$weight, type = "none", lags = 2))
summary(ur.df(dat$weight, type = "none", lags = 1))
rm(list=ls())
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\10_time_series_basics\\sales")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  weight
# ------------------------------------------------------------------------------
dat <- read.csv("sales.csv", header = FALSE, sep = ",")
str(dat)
dat <- read.csv("sales.csv", header = FALSE, sep = ",", stringsAsFactors = FALSE)
str(dat)
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
colnames(dat) <- c("month", "fabrics", "machinery")
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
car::some(dat)
ts.plot(dat$fabrics, type = "b")
ts.plot(dat$fabrics, type = "b")
MTS::MTSplot(dat[,2:3], type = "b")
MTS::MTSplot(dat[,2:3])
MTS::MTSplot(dat[,2:4])
ts.plot(dat$fabrics, type = "b")
lines(smooth.spline(dat$fabrics, spar = 0.25), lwd = 2, col = "darkgray")
lines(smooth.spline(dat$fabrics, spar = 0.5), lwd = 2, col = "orange")
lines(smooth.spline(dat$fabrics, spar = 0.75), lwd = 2, col = "red")
lines(smooth.spline(dat$fabrics, spar = 1), lwd = 2, col = "blue")
forecast::ndiffs(dat$fabrics)
ts.plot(diff(dat$fabrics), type = "b")
library(urca)
summary(ur.df(dat$fabrics, type = "none", lags = 2))
summary(ur.df(dat$fabrics, type = "none", lags = 4))
summary(ur.df(dat$fabrics, type = "none", lags = 5))
summary(ur.df(dat$fabrics, type = "none", lags = 10))
summary(ur.df(dat$fabrics, type = "none", lags = 5))
summary(ur.df(dat$fabrics, type = "none", lags = 5))
summary(ur.df(dat$fabrics, type = "trend", lags = 5))
summary(ur.df(dat$fabrics, type = "trend", lags = 6))
summary(ur.df(dat$fabrics, type = "trend", lags = 5))
ts.plot(dat$fabrics, type = "b")
lines(smooth.spline(dat$fabrics, spar = 0.25), lwd = 2, col = "darkgray")
lines(smooth.spline(dat$fabrics, spar = 0.5), lwd = 2, col = "orange")
lines(smooth.spline(dat$fabrics, spar = 0.75), lwd = 2, col = "red")
lines(smooth.spline(dat$fabrics, spar = 1), lwd = 2, col = "blue")
summary(ur.df(dat$fabrics, type = "trend", lags = 5))
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\sales")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  sales
# ------------------------------------------------------------------------------
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
Gasoline <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
Gasoline <- read.table("Gasoline.dat", header = FALSE, sep = "", stringsAsFactors = FALSE)
car::some(Gasoline)
Gasoline <- read.table("Gasoline.dat", header = FALSE, sep = "", stringsAsFactors = FALSE) %>% .[[1]]
str(dat)
car::some(dat)
car::some(Gasoline)
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
modRegression <- SSModel(log(dat$Fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, sea.type = "dummy") +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
fitRegression <- fitSSM(modRegression, numeric(3), method = "BFGS")
kfsRegression <- KFS(fitRegression$model)
# ----------
# fixed coefficient
modRegression0 <- SSModel(log(dat$Fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, sea.type = "dummy") +
log(Gasoline), H = NA)
fitRegression0 <- fitSSM(modRegression0, numeric(2), method = "BFGS")
kfsRegression0 <- KFS(fitRegression0$model)
library(KFAS)
# time varying coefficient
modRegression <- SSModel(log(dat$Fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, sea.type = "dummy") +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
fitRegression <- fitSSM(modRegression, numeric(3), method = "BFGS")
kfsRegression <- KFS(fitRegression$model)
modRegression <- SSModel(log(dat$Fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, sea.type = "dummy") +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
modRegression <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, sea.type = "dummy") +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
fitRegression <- fitSSM(modRegression, numeric(3), method = "BFGS")
kfsRegression <- KFS(fitRegression$model)
# ----------
# fixed coefficient
modRegression0 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, sea.type = "dummy") +
log(Gasoline), H = NA)
fitRegression0 <- fitSSM(modRegression0, numeric(2), method = "BFGS")
kfsRegression0 <- KFS(fitRegression0$model)
plot(dat$fuel, type = "l")
plot(Gasoline, type = "l")
graphics.off()
par(mfrow = c(2,1))
plot(dat$fuel, type = "l")
plot(Gasoline, type = "l")
plot(dat$fuel, type = "b")
plot(Gasoline, type = "b")
modReg0 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0), H = NA)
# ----------
# fixed coefficient
modReg1 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0) +
log(Gasoline), H = NA)
# ----------
# time varying coefficient
modReg2 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0) +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
# ----------
# fitReg0 <- fitSSM(modReg0, rep(-8, 2), method = "BFGS")
fitReg0 <- fitSSM(modReg0, numeric(2), method = "BFGS")
# fitReg1 <- fitSSM(modReg1, rep(-8, 2), method = "BFGS")
fitReg1 <- fitSSM(modReg1, numeric(2), method = "BFGS")
# fitReg2 <- fitSSM(modReg2, rep(-8, 3), method = "BFGS")
fitReg2 <- fitSSM(modReg2, numeric(3), method = "BFGS")
# ----------
kfsReg0 <- KFS(fitReg0$model)
kfsReg1 <- KFS(fitReg1$model)
kfsReg2 <- KFS(fitReg2$model)
# ----------
# maximum likelihood
logLikReg0 <- kfsReg0$logLik - sum(kfsReg0$Finf > 0) * log(2*pi)/2
logLikReg1 <- kfsReg1$logLik - sum(kfsReg1$Finf > 0) * log(2*pi)/2
logLikReg2 <- kfsReg2$logLik - sum(kfsReg2$Finf > 0) * log(2*pi)/2
# ----------
# AIC
AICReg0 <- -2 * logLikReg0 + 2 * ( 2 + 12 )
AICReg1 <- -2 * logLikReg1 + 2 * ( 2 + 13 )
AICReg2 <- -2 * logLikReg2 + 2 * ( 3 + 13 )
# ----------
# Smoothed level and coefficient
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(gas)"] * log(gas),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(gas)"] * log(gas), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(dat$fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(gas)"] * log(gas),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(gas)"] * log(gas), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(dat$fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(gas)"] * log(gas),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(gas)"] * log(gas), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(dat$fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(gas)"] * log(gas),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(gas)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(gas)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
kfsReg1$alphahat[,"log(gas)"]
kfsReg1$alphahat
plot(kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(dat$fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
kfsReg2$alphahat
modReg0 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0), H = NA)
# ----------
# fixed coefficient
modReg1 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0) +
log(Gasoline), H = NA)
# ----------
# time varying coefficient
modReg2 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0) +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
fitReg0 <- fitSSM(modReg0, numeric(2), method = "BFGS")
# fitReg1 <- fitSSM(modReg1, rep(-8, 2), method = "BFGS")
fitReg1 <- fitSSM(modReg1, numeric(2), method = "BFGS")
# fitReg2 <- fitSSM(modReg2, rep(-8, 3), method = "BFGS")
fitReg2 <- fitSSM(modReg2, numeric(3), method = "BFGS")
kfsReg0 <- KFS(fitReg0$model)
kfsReg1 <- KFS(fitReg1$model)
kfsReg2 <- KFS(fitReg2$model)
# ----------
# maximum likelihood
logLikReg0 <- kfsReg0$logLik - sum(kfsReg0$Finf > 0) * log(2*pi)/2
logLikReg1 <- kfsReg1$logLik - sum(kfsReg1$Finf > 0) * log(2*pi)/2
logLikReg2 <- kfsReg2$logLik - sum(kfsReg2$Finf > 0) * log(2*pi)/2
# ----------
# AIC
AICReg0 <- -2 * logLikReg0 + 2 * ( 2 + 12 )
AICReg1 <- -2 * logLikReg1 + 2 * ( 2 + 13 )
AICReg2 <- -2 * logLikReg2 + 2 * ( 3 + 13 )
( AICReg0 <- -2 * logLikReg0 + 2 * ( 2 + 12 ) )
( AICReg1 <- -2 * logLikReg1 + 2 * ( 2 + 13 ) )
( AICReg2 <- -2 * logLikReg2 + 2 * ( 3 + 13 ) )
kfsReg2$alphahat
head(kfsReg2$alphahat)
modReg2 <- SSModel(log(dat$fuel) ~ SSMtrend(1, Q = NA) +
SSMseasonal(12, Q = 0) +
SSMregression(~ log(Gasoline), Q = NA), H = NA)
fitReg0 <- fitSSM(modReg0, rep(-8, 2), method = "BFGS")
# fitReg0 <- fitSSM(modReg0, numeric(2), method = "BFGS")
fitReg1 <- fitSSM(modReg1, rep(-8, 2), method = "BFGS")
# fitReg1 <- fitSSM(modReg1, numeric(2), method = "BFGS")
fitReg2 <- fitSSM(modReg2, rep(-8, 3), method = "BFGS")
# fitReg2 <- fitSSM(modReg2, numeric(3), method = "BFGS")
# ----------
kfsReg0 <- KFS(fitReg0$model)
kfsReg1 <- KFS(fitReg1$model)
kfsReg2 <- KFS(fitReg2$model)
# ----------
# maximum likelihood
logLikReg0 <- kfsReg0$logLik - sum(kfsReg0$Finf > 0) * log(2*pi)/2
logLikReg1 <- kfsReg1$logLik - sum(kfsReg1$Finf > 0) * log(2*pi)/2
logLikReg2 <- kfsReg2$logLik - sum(kfsReg2$Finf > 0) * log(2*pi)/2
# ----------
# AIC
( AICReg0 <- -2 * logLikReg0 + 2 * ( 2 + 12 ) )
( AICReg1 <- -2 * logLikReg1 + 2 * ( 2 + 13 ) )
( AICReg2 <- -2 * logLikReg2 + 2 * ( 3 + 13 ) )
head(kfsReg2$alphahat)
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(dat$fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
# fitReg0 <- fitSSM(modReg0, rep(-8, 2), method = "BFGS")
fitReg0 <- fitSSM(modReg0, numeric(2), method = "BFGS")
# fitReg1 <- fitSSM(modReg1, rep(-8, 2), method = "BFGS")
fitReg1 <- fitSSM(modReg1, numeric(2), method = "BFGS")
# fitReg2 <- fitSSM(modReg2, rep(-8, 3), method = "BFGS")
fitReg2 <- fitSSM(modReg2, numeric(3), method = "BFGS")
# ----------
kfsReg0 <- KFS(fitReg0$model)
kfsReg1 <- KFS(fitReg1$model)
kfsReg2 <- KFS(fitReg2$model)
# ----------
# maximum likelihood
logLikReg0 <- kfsReg0$logLik - sum(kfsReg0$Finf > 0) * log(2*pi)/2
logLikReg1 <- kfsReg1$logLik - sum(kfsReg1$Finf > 0) * log(2*pi)/2
logLikReg2 <- kfsReg2$logLik - sum(kfsReg2$Finf > 0) * log(2*pi)/2
# ----------
# AIC
( AICReg0 <- -2 * logLikReg0 + 2 * ( 2 + 12 ) )
( AICReg1 <- -2 * logLikReg1 + 2 * ( 2 + 13 ) )
( AICReg2 <- -2 * logLikReg2 + 2 * ( 3 + 13 ) )
# ----------
# Smoothed level and coefficient
head(kfsReg2$alphahat)
par(mfrow = c(3,1))
par(mar = c(2,4,1,1))
plot(log(dat$fuel), type = "o", lty = 3, xaxt = "n", xlab = "", ylab = "販売額（対数）")
lines(kfsReg1$alphahat[,"level"] + kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline),lwd=2)
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"level"], xaxt = "n", xlab = "", ylab = "水準成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
head(kfsReg2$alphahat)
head(kfsReg2$alphahat, 100)
plot(kfsReg2$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
par(mfrow = c(2,1))
plot(kfsReg1$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(kfsReg2$alphahat[,"log(Gasoline)"] * log(Gasoline), ylim = c(1.4,1.6), xaxt = "n", xlab = "", ylab = "回帰成分")
axis(side = 1, at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
kfsReg2$alphahat[,"log(Gasoline)"] - kfsReg1$alphahat[,"log(Gasoline)"]
fitReg0 <- fitSSM(modReg0, numeric(2), method = "BFGS")
# fitReg1 <- fitSSM(modReg1, rep(-8, 2), method = "BFGS")
fitReg1 <- fitSSM(modReg1, numeric(2), method = "BFGS")
# fitReg2 <- fitSSM(modReg2, rep(-8, 3), method = "BFGS")
fitReg2 <- fitSSM(modReg2, numeric(3), method = "BFGS")
# ----------
kfsReg0 <- KFS(fitReg0$model)
kfsReg1 <- KFS(fitReg1$model)
kfsReg2 <- KFS(fitReg2$model)
# ----------
# maximum likelihood
logLikReg0 <- kfsReg0$logLik - sum(kfsReg0$Finf > 0) * log(2*pi)/2
logLikReg1 <- kfsReg1$logLik - sum(kfsReg1$Finf > 0) * log(2*pi)/2
logLikReg2 <- kfsReg2$logLik - sum(kfsReg2$Finf > 0) * log(2*pi)/2
# ----------
# AIC
( AICReg0 <- -2 * logLikReg0 + 2 * ( 2 + 12 ) )
( AICReg1 <- -2 * logLikReg1 + 2 * ( 2 + 13 ) )
( AICReg2 <- -2 * logLikReg2 + 2 * ( 3 + 13 ) )
log(Gasoline)
