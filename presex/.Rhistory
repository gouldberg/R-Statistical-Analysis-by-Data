packages <- c("dplyr", "vcd", "vcdExtra", "MASS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
mosaic(data, gp = shading_Friendly2, labeling_args = list(abbreviate_labs = c(FirstVictimization = 7, SecondVictimization = 7), rot_labels = c(left = -45)))
( victim.ca <- ca::ca(data) )
summary(victim.ca)
chisq.test(data)
( chisq <- sum(data) * sum(victim.ca$sv^2) )
( victim.ca_comp <- ca::ca(data, nd = 49) )
graphics.off();  par(mfrow=c(1,1), asp = 1)
res <- plot(victim.ca, labels = c(2, 0))
segments(res$rows[,1], res$rows[,2], res$cols[,1], res$cols[,2])
legend("topleft", legend = c("First", "Second"), title = "Occurrence", col = c("blue", "red"), pch = 16:17, bg = "gray90")
res
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//mental")
packages <- c("dplyr", "vcd", "MASS", "vcdExtra")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Mental
#   - Srole et al. (1978) gave the data on the mental health status of a sample of 1660 young New York residents
#     in midtown Manhattan classified by their parents' socioeconomic status (SES)
#   - These data have also been analyzed by many authosrs, including Agresti, Goodman, and Haberman.
#   - There are six categories of SES (from 1 = "High" to 6 = "Low"), and mental health is classified in the four categories
#     "well", "mild symptom formation", "moderate symptom formation", and "impaired".
# ------------------------------------------------------------------------------
data("Mental", package = "vcdExtra")
data <- Mental
data
tab <- xtabs(Freq ~ ses + mental, data = Mental)
tab
spineplot(tab)
CrossTable(tab, prop.chisq = FALSE, prop.c = FALSE, format = "SPSS")
vcd::CrossTable(tab, prop.chisq = FALSE, prop.c = FALSE, format = "SPSS")
vcdExtra::CrossTable(tab, prop.chisq = FALSE, prop.c = FALSE, format = "SPSS")
help(spineplot)
MASS::CrossTable(tab, prop.chisq = FALSE, prop.c = FALSE, format = "SPSS")
help(CrossTable)
??CrossTable
gmodels::CrossTable(tab, prop.chisq = FALSE, prop.c = FALSE, format = "SPSS")
help(assocstats)
assocstats(tab)
help(assocstats)
CMHtest(tab)
help("CMHtest")
help(assocstats)
CMHtest(tab)
( mental.ca <- ca::ca(tab) )
# Nearly 99% of the Pearson chi-square for association (= Principal inertias) is accounted for by 2 dimensions,
# with most of that attributed to the 1st dimension.
summary(mental.ca)
# The Pearson chi-square for this table is 45.985 = total inertia (the sum of eigenvalues(0.277)) * n (1660)
chisq.test(tab)
# Complete, exact solution would have M = min((I-1)(J-1)) = 15 dimensions, and you could obtain this using the argument nd = 15
( mental.ca_comp <- ca::ca(tab, nd = 15) )
tab
( mental.ca <- ca::ca(tab) )
# Nearly 99% of the Pearson chi-square for association (= Principal inertias) is accounted for by 2 dimensions,
# with most of that attributed to the 1st dimension.
summary(mental.ca)
# The Pearson chi-square for this table is 45.985 = total inertia (the sum of eigenvalues(0.277)) * n (1660)
chisq.test(tab)
# Complete, exact solution would have M = min((I-1)(J-1)) = 15 dimensions, and you could obtain this using the argument nd = 15
( mental.ca_comp <- ca::ca(tab, nd = 15) )
summary(mental.ca)
chisq.test(tab)
( mental.ca_comp <- ca::ca(tab, nd = 15) )
# Standard coordinates Phi and Gamma
( Phi <- mental.ca$rowcoord )
( Gamma <- mental.ca$colcoord )
( Dr <- diag(mental.ca$rowmass) )
zapsmall(t(Phi) %*% Dr %*% Phi)
( Dc <- diag(mental.ca$colmass) )
zapsmall(t(Gamma) %*% Dc %*% Gamma)
# asp = 1:  2 axes are scaled so that the number of data units per inch are the same for both the horizontal and vertical axes.
# It is useful to connect the row points and the column points by lines, to emphasie the pattern of these ordered variables
graphics.off();  par(mfrow=c(1,1), asp = 1)
res <- plot(mental.ca, ylim = c(-.2, .2))
lines(res$rows, col = "blue", lty = 3)
lines(res$cols, col = "red", lty = 4)
res
( Phi <- mental.ca$rowcoord )
( Gamma <- mental.ca$colcoord )
( Dr <- diag(mental.ca$rowmass) )
zapsmall(t(Phi) %*% Dr %*% Phi)
( Dc <- diag(mental.ca$colmass) )
zapsmall(t(Gamma) %*% Dc %*% Gamma)
( Dr <- diag(mental.ca$rowmass) )
zapsmall(t(Phi) %*% Dr %*% Phi)
graphics.off();  par(mfrow=c(1,1), asp = 1)
res <- plot(mental.ca, ylim = c(-.2, .2))
lines(res$rows, col = "blue", lty = 3)
lines(res$cols, col = "red", lty = 4)
res
setwd("//media//kswada//MyFiles//R//haireye_color")
packages <- c("dplyr", "datasets", "vcd", "vcdExtra", "MASS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  HairEyeColor
#  - frequencies of hair color, eye color, and sex from 592 students in a statistical course (Snee's 1974 sample)
#  - Neither hair color nor eye color is considered a response in relation to the other; Our interest concerns whether an association exists between them.
#    Hair color and eye color have both been classified into 4 categories. Although the categories used are among the most common,
#    they are not the only categories possible.
# ------------------------------------------------------------------------------
data("HairEyeColor", package = "datasets")
data <- HairEyeColor
data
( hec <- margin.table(data, 2:1) )
barplot(hec, beside = TRUE, legend = TRUE)
help(barplot)
vcd::tile(hec, shade=TRUE)
spineplot(hec)
# Calculate expected frequencies
haireye <- margin.table(data, 1:2)
expected <- vcd::independence_table(haireye)
round(expected, 1)
round(expected, 1)
vcd::sieve(haireye, sievetype = "expected", shade = TRUE, main="Expected frequencies", labeling = labeling_values, value_type = "expected",
gp_text = gpar(fontface = 2), gp = shading_sieve(interpolate = 0, line_col="darkgrey",eps=Inf,lty="dashed"))
vcd::sieve(haireye, shade = TRUE, main="Observed frequencies", labeling = labeling_values, value_type = "observed",
gp_text = gpar(fontface = 2))
assoc(~ Hair + Eye, data = data, shade = TRUE)
assoc(data, shade = TRUE)
mosaic(haireye, labeling = labeling_values)
help(mosaic)
( hair <- margin.table(haireye, 1) )
prop.table(hair)
# ----------
vcd::mosaic(haireye, pop = FALSE)
vcd::labeling_cells(text = haireye, gp_text = gpar(fontface = 2), clip = FALSE)(haireye)
vcd::mosaic(haireye, pop = FALSE)
vcd::labeling_cells(text = haireye, gp_text = gpar(fontface = 2), clip = FALSE)(haireye)
expected <- rep(sum(hair) / 4, 4)
names(expected) <- names(hair)
expected
( residuals <- (hair - expected) / sqrt(expected) )
# the rectangle for each hair color is subdivided in proportion to the relative (conditinoal) frequencies of the second variable, eye color,
# giving the following conditional row proportions
round(addmargins(prop.table(haireye, 1), 2), 3)
# ----------
# standardized Pearson residuals
# The cells are shaded in relation to standardized Pearson residuals from a model.
# For a two-way table, the model is that hair color and eye color are independent in the population from which this sample was drawn.
# These residuals are calculated using independence_table() to caluculate the expected values under this model
exp <- independence_table(haireye)
exp
resids <- (haireye - exp) / sqrt(exp)
round(resids, 2)
round(residuals(chisq.test(haireye)), 2)
vcd::mosaic(haireye, shade=TRUE, suppress=0, labeling=labeling_residuals, gp_text=gpar(fontface=2))
vcd::mosaic(haireye, shade = TRUE, labeling = labeling_residuals)
( chisq <- sum(resids ^ 2) )
( df <- prod(dim(haireye) - 1) )
pchisq(chisq, df, lower.tail = FALSE)
chisq.test(haireye)
# ------------------------------------------------------------------------------
# Two-way tables
# Reordering and interpretaion
# ------------------------------------------------------------------------------
# The interpretation can often be enhanced by reordering the rows and columns of the 2-way table
# so that the residuals have an opposite corner pattern of signs.
# In general, the levels of a factor in mosaic displays are often best reordered by arranging them according to their scores on the first (largest) correspondence analysis dimension.
# re-order eye colors from dark to light
haireye2 <- as.table(haireye[, c("Brown", "Hazel", "Green", "Blue")])
vcd::mosaic(haireye2, shade = TRUE)
as.table(haireye[, c("Brown", "Hazel", "Green", "Blue")])
haireye[, c("Brown", "Hazel", "Green", "Blue")]
HEC <- HairEyeColor[, c("Brown", "Hazel", "Green", "Blue"),]
vcd::mosaic(HEC, rot_labels = c(right = -45))
HE <- MASS::loglm(~ Hair + Eye, data = haireye)
HE
HE_S <- MASS::loglm(~ Hair * Eye + Sex, data = HairEyeColor)
HE_S
residuals(HE_S, type = "pearson")
HEC <- HairEyeColor[, c("Brown", "Hazel", "Green", "Blue"),]
vcd::mosaic(HEC, expected = ~ Hair * Eye + Sex, labeling = labeling_residuals, digits = 2, rot_labels = c(right = -45))
abbrev <- list(abbreviate = c(FALSE, FALSE, 1))
vcd::mosaic(HEC, expected = ~ Hair + Eye + Sex, labeling_args = abbrev, main = "Model: ~ Hair + Eye + Sex")
vcd::mosaic(HEC, expected = ~ Hair * Sex + Eye * Sex, labeling_args = abbrev, main="Model: ~ Hair*Sex + Eye*Sex")
mod1 <- MASS::loglm(~ Hair + Eye + Sex, data = HEC)       # mutual
mod2 <- MASS::loglm(~ Hair * Eye + Sex, data = HEC)       # joint
mod3 <- MASS::loglm(~ Hair * Sex + Eye * Sex, data = HEC) # conditional
vcdExtra::LRstats(mod1, mod2, mod3)
# ----------
# Alternatively you can get the Pearson and likelihood ratio (LR) tests for a given model using anova()
anova(mod1)
# ----------
# or compare a set of models using LR tests on the difference in LR X^2 from one model to the next, when a list of models is supplied to anova()
anova(mod1, mod2, mod3, test = "chisq")
for(nf in 2 : 5) print(vcdExtra::loglin2string(mutual(nf, factors = LETTERS[1:5])))
for(nf in 2 : 5) print(vcdExtra::loglin2formula(mutual(nf, factors = LETTERS[1:5])))
# joint independence
for(nf in 2 : 5) print(vcdExtra::loglin2string(joint(nf, factors = LETTERS[1:5])))
for(nf in 2 : 5) print(vcdExtra::loglin2formula(joint(nf, factors = LETTERS[1:5])))
# conditional independence
for(nf in 2 : 5) print(vcdExtra::loglin2string(conditional(nf, factors = LETTERS[1:5]), sep = ""))
for(nf in 2 : 5) print(vcdExtra::loglin2formula(conditional(nf, factors = LETTERS[1:5])))
# markov
for(nf in 2 : 5) print(vcdExtra::loglin2string(markov(nf, factors = LETTERS[1:5]), sep = ""))
for(nf in 2 : 5) print(vcdExtra::loglin2formula(markov(nf, factors = LETTERS[1:5])))
# saturated
for(nf in 2 : 5) print(vcdExtra::loglin2string(saturated(nf, factors = LETTERS[1:5]), sep = ""))
for(nf in 2 : 5) print(vcdExtra::loglin2formula(saturated(nf, factors = LETTERS[1:5])))
for(nf in 2 : 5) print(vcdExtra::loglin2string(mutual(nf, factors = LETTERS[1:5])))
vcdExtra::loglin2formula(joint(3, table = HEC))
vcdExtra::loglin2string(joint(3, table = HEC))
HEC.mods <- seq_loglm(HEC, type = "joint")
HEC.mods
LRstats(HEC.mods)
help(LRstats)
HEC.mods
vcdExtra::loglin2formula(joint(3, table = HEC))
vcdExtra::loglin2string(joint(3, table = HEC))
( haireye.ca <- ca::ca(haireye) )
# Nearly 99% of the Pearson chi-square for association (= Principal inertias) is accounted for by 2 dimensions,
# with most of that attributed to the 1st dimension.
summary(haireye.ca)
# The Pearson chi-square for this table is 138.29 = total inertia (the sum of eigenvalues(0.2336)) * n (592)
chisq.test(haireye)
# Complete, exact solution would have M = min((I-1)(J-1)) = 3 dimensions, and you could obtain this using the argument nd = 3
( haireye.ca_comp <- ca::ca(haireye, nd = 3) )
summary(haireye.ca)
( Phi <- haireye.ca$rowcoord )
( Gamma <- haireye.ca$colcoord )
( Dr <- diag(haireye.ca$rowmass) )
zapsmall(t(Phi) %*% Dr %*% Phi)
( Dc <- diag(haireye.ca$colmass) )
zapsmall(t(Gamma) %*% Dc %*% Gamma)
# ------------------------------------------------------------------------------
# Visualize pattern of associations by plotting CA scores in 2D
# ------------------------------------------------------------------------------
# Standard coordinates are transformed internally within the plot function according to the map argument: default to map = "symmetric",
# giving principal coordinates
# asp = 1:  2 axes are scaled so that the number of data units per inch are the same for both the horizontal and vertical axes.
graphics.off();  par(mfrow=c(1,1), asp = 1)
res <- plot(haireye.ca)
res
haireye.df <- cbind(
as.data.frame(haireye),
model.matrix(Freq ~ Hair + Eye, data = haireye, contrasts.arg = list(Hair = diag(4), Eye = diag(4)))[,-1]
)
haireye.df
Z <- expand.dft(haireye.df)[,-(1:2)]
vnames <- c(levels(haireye.df$Hair), levels(haireye.df$Eye))
colnames(Z) <- vnames
dim(Z)
head(Z)
haireye.df
help(expand.dft)
Z <- expand.dft(haireye.df)[,-(1:2)]
Z
vnames <- c(levels(haireye.df$Hair), levels(haireye.df$Eye))
colnames(Z) <- vnames
dim(Z)
head(Z)
t(as.matrix(Z[,1:4])) %*% as.matrix(Z[,5:8])
Z.ca <- ca(Z)
Z.ca
# ----------
# the argument "what" is used to suppress the display of the row points for the cases
graphics.off();  par(mfrow=c(1,1));
res <- plot(Z.ca, what=c("none", "all"), labels = 0, pch = ".", xpd = TRUE)
coords <- data.frame(res$cols)
coords$factor <- rep(c("Hair", "Eye"), each = 4)
coords$levels <- rownames(res$cols)
coords
coords <- coords[ order(coords[,"factor"], coords[,"Dim1"]), ]
cols <- c("blue", "red")
nlev <- c(4,4)
text(coords[,1:2], coords$levels, col=rep(cols, nlev), pos=2, cex=1.2)
points(coords[,1:2], pch=rep(16:17, nlev), col=rep(cols, nlev), cex=1.2)
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Eye",  lty=1, lwd=2, col=cols[1])
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Hair", lty=1, lwd=2, col=cols[2])
head(Z)
Z.ca
Burt <- t(as.matrix(Z)) %*% as.matrix(Z)
rownames(Burt) <- colnames(Burt) <- vnames
Burt
Burt.ca <- ca(Burt)
plot(Burt.ca)
Burt <- t(as.matrix(Z)) %*% as.matrix(Z)
rownames(Burt) <- colnames(Burt) <- vnames
Burt
## ----Burt2, fig.keep='none'----------------------------------------------
Burt.ca <- ca(Burt)
plot(Burt.ca)
# ----------
# the argument "what" is used to suppress the display of the row points for the cases
graphics.off();  par(mfrow=c(1,1));
res <- plot(Z.ca, what=c("none", "all"), labels = 0, pch = ".", xpd = TRUE)
# extract factor names and levels
coords <- data.frame(res$cols)
coords$factor <- rep(c("Hair", "Eye"), each = 4)
coords$levels <- rownames(res$cols)
coords
# sort by Dim 1
coords <- coords[ order(coords[,"factor"], coords[,"Dim1"]), ]
cols <- c("blue", "red")
nlev <- c(4,4)
text(coords[,1:2], coords$levels, col=rep(cols, nlev), pos=2, cex=1.2)
points(coords[,1:2], pch=rep(16:17, nlev), col=rep(cols, nlev), cex=1.2)
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Eye",  lty=1, lwd=2, col=cols[1])
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Hair", lty=1, lwd=2, col=cols[2])
Burt.ca <- ca(Burt)
plot(Burt.ca)
graphics.off();  par(mfrow=c(1,1));
res <- plot(Z.ca, what=c("none", "all"), labels = 0, pch = ".", xpd = TRUE)
# extract factor names and levels
coords <- data.frame(res$cols)
coords$factor <- rep(c("Hair", "Eye"), each = 4)
coords$levels <- rownames(res$cols)
coords
# sort by Dim 1
coords <- coords[ order(coords[,"factor"], coords[,"Dim1"]), ]
cols <- c("blue", "red")
nlev <- c(4,4)
text(coords[,1:2], coords$levels, col=rep(cols, nlev), pos=2, cex=1.2)
points(coords[,1:2], pch=rep(16:17, nlev), col=rep(cols, nlev), cex=1.2)
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Eye",  lty=1, lwd=2, col=cols[1])
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Hair", lty=1, lwd=2, col=cols[2])
Burt <- t(as.matrix(Z)) %*% as.matrix(Z)
rownames(Burt) <- colnames(Burt) <- vnames
Burt
Burt.ca <- ca::ca(Burt)
plot(Burt.ca)
( haireye <- margin.table(HairEyeColor, 1:2) )
# Generate indicator matrix for 592 samples
# model matrix
( haireye.df <- cbind(as.data.frame(haireye), model.matrix(Freq ~ Hair + Eye, data = as.data.frame(haireye))) )
# model matrix, levels of hair color (Hair1-Hair4) and eye color (Eye1-Eye4)
( haireye.df <- cbind(as.data.frame(haireye), model.matrix(Freq ~ Hair + Eye, data = as.data.frame(haireye), contrasts.arg = list(Hair = diag(4), Eye = diag(4)))[,-1]) )
# Indicator matrix
Z <- vcdExtra::expand.dft(haireye.df)[,-(1:2)]
vnames <- c(levels(haireye.df$Hair), levels(haireye.df$Eye))
colnames(Z) <- vnames
dim(Z)
Z
# Check original contingency table
( N <- t(as.matrix(Z[,1:4])) %*% as.matrix(Z[,5:8]) )
# ---------------------------------------------
Z.ca <- ca::ca(Z)
# ---------------------------------------------
par(mfrow=c(1,2))
# "what" is used to suppress the display of the row points for the cases
res <- plot(Z.ca, what=c("none", "all"), labels = 0, pch = ".", xpd = TRUE)
coords <- data.frame(res$cols)
coords$factor <- rep(c("Hair", "Eye"), each = 4)
coords$levels <- rownames(res$cols)
coords
coords <- coords[ order(coords[,"factor"], coords[,"Dim1"]), ]
cols <- c("blue", "red")
nlev <- c(4,4)
text(coords[,1:2], coords$levels, col=rep(cols, nlev), pos=2, cex=1.2)
points(coords[,1:2], pch=rep(16:17, nlev), col=rep(cols, nlev), cex=1.2)
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Eye",  lty=1, lwd=2, col=cols[1])
lines(Dim2 ~ Dim1, data=coords, subset=factor=="Hair", lty=1, lwd=2, col=cols[2])
plot(haireye.ca)
# --> We see that the general pattern of the hair color and eye color categories is the same in the analysis of the contingency table
# and the analysis of the indicator matrix, except that the axes are scaled differently -- the display has been stretched along the second (vertical) dimension.
# INDEED, the two displays are identical, except for changes in scales along the axes.
# ---------------------------------------------
# major difference between analysis of the contingency table and analysis of the indicator matrix is in the decomposition of principal inertia
# and corresponding chi-square contributions for the dimensions.
# ------------------------------------------------------------------------------
# Multiple Correspondence Analysis (Bivariate MCA)  the Burt matrix:  HairEyeColor
#  - The same solution for the category points as in the analysis of the indicator matrix may be obtained more simply from the so-called Burt matrix
# ------------------------------------------------------------------------------
# Generate Burt matrix
# Diagonal matrices containing the marginal frequencies of the two variables and off-diagonal block contains the contingency table of the two variables
Burt <- t(as.matrix(Z)) %*% as.matrix(Z)
rownames(Burt) <- colnames(Burt) <- vnames
Burt
# ---------------------------------------------
# standard coordinates from an analysi of the Burt matrix are identical to those of Z (indicator matrix)
Burt.ca <- ca::ca(Burt)
plot(Burt.ca)
Burt <- t(as.matrix(Z)) %*% as.matrix(Z)
rownames(Burt) <- colnames(Burt) <- vnames
Burt
# ---------------------------------------------
# standard coordinates from an analysi of the Burt matrix are identical to those of Z (indicator matrix)
Burt.ca <- ca::ca(Burt)
plot(Burt.ca)
data("PreSex", package = "vcd")
str(PreSex)
PreSex
dim(PreSex)
structable(Gender + PremaritalSex + ExtramaritalSex ~ MaritalStatus, data = PreSex)
help(structable)
pairs(data, gp = shading_Friendly2, space = 0.25, gp_args = list(interpolate = 1:4), diag_panel_args = list(offset_varnames = -0.5))
help(paris)
help("pairs")
pairs(PreSex, gp = shading_Friendly2, space = 0.25, gp_args = list(interpolate = 1:4), diag_panel_args = list(offset_varnames = -0.5))
tab <- aperm(PreSex, 4:1)
tab
help(aperm)
mosaic(margin.table(tab, 1:2), shade = TRUE, main = "Gender and Premarital Sex")
mod1 <- loglm(~ Gender + PremaritalSex, data = margin.table(tab, 1:2))
loddsratio(margin.table(tab, 1:2), stratum = 1, log = FALSE)
mosaic(margin.table(tab, 1:2), shade = TRUE, main = "Gender and Premarital Sex")
loddsratio(margin.table(tab, 1:2), stratum = 1, log = FALSE)
mod1 <- loglm(~ Gender + PremaritalSex, data = margin.table(tab, 1:2))
loddsratio(margin.table(tab, 1:2), stratum = 1, log = FALSE)
loddsratio(margin.table(tab, 1:2), stratum = 1, log = FALSE)
mod2 <- loglm(~ Gender * PremaritalSex + ExtramaritalSex, data = margin.table(tab, 1:3))
loddsratio(margin.table(tab, 1:3), stratum = 1, log = FALSE)
# These models are equivalent to the recursive logit models whose path diagram is G --> P --> E --> M
mosaic(tab, expected = ~ Gender * PremaritalSex * ExtramaritalSex + MaritalStatus, main = "Gender * Pre * Extra + MaritalStatus")
mod3 <- loglm(~ Gender * PremaritalSex * ExtramaritalSex + MaritalStatus, data = tab)
# ----------
# Complete independence model
mod4 <- loglm(~ Gender + PremaritalSex + ExtramaritalSex + MaritalStatus, data = tab)
# ----------
# Check the likelihood ratio G^2:  mod4 = mod1 + mod2 + mod3
mod1$lrt  # [G][P]       df = 1    G^2 = 75.259
mod2$lrt  # [GP][E]      df = 3    G^2 = 48.929
mod3$lrt  # [GPE][M]     df = 7    G^2 = 107.956
mod4$lrt  # [G][P][E][M]  df = 11  G^2 = 232.142
help(loddsratio)
( presex.mca <- ca::mjca(PreSex, lambda = "Burt") )
summary(presex.mca)
PreSex
graphics.off();  par(mfrow=c(1,1));
plot(presex.mca)
help(mjca)
res <- plot(presex.mca, labels = 0, pch = ".", cex.lab = 1.2)
coords <- data.frame(res$cols, presex.mca$factors)
nlev <- presex.mca$levels.n
fact <- unique(as.character(coords$factor))
cols <- c("blue", "red", "brown", "black")
points(coords[,1:2], pch=rep(16:19, nlev), col=rep(cols, nlev), cex=1.2)
text(coords[,1:2], label=coords$level, col=rep(cols, nlev), pos=3, cex=1.2, xpd=TRUE)
lwd <- c(2, 2, 2, 4)
for(i in seq_along(fact)) lines(Dim2 ~ Dim1, data = coords, subset = factor==fact[i], lwd = lwd[i], col = cols[i])
legend("bottomright", legend = c("Gender", "PreSex", "ExtraSex", "Marital"), title = "Factor", title.col = "black", col = cols, text.col = cols, pch = 16:19, bg = "gray95", cex = 1.2)
plot(presex.mca)
pairs(PreSex, gp = shading_Friendly2, space = 0.25, gp_args = list(interpolate = 1:4), diag_panel_args = list(offset_varnames = -0.5))
res <- plot(presex.mca, labels = 0, pch = ".", cex.lab = 1.2)
res
coords <- data.frame(res$cols, presex.mca$factors)
nlev <- presex.mca$levels.n
fact <- unique(as.character(coords$factor))
cols <- c("blue", "red", "brown", "black")
points(coords[,1:2], pch=rep(16:19, nlev), col=rep(cols, nlev), cex=1.2)
text(coords[,1:2], label=coords$level, col=rep(cols, nlev), pos=3, cex=1.2, xpd=TRUE)
lwd <- c(2, 2, 2, 4)
for(i in seq_along(fact)) lines(Dim2 ~ Dim1, data = coords, subset = factor==fact[i], lwd = lwd[i], col = cols[i])
legend("bottomright", legend = c("Gender", "PreSex", "ExtraSex", "Marital"), title = "Factor", title.col = "black", col = cols, text.col = cols, pch = 16:19, bg = "gray95", cex = 1.2)
setwd("//media//kswada//MyFiles//R//presex")
packages <- c("dplyr", "datasets", "vcd", "vcdExtra", "MASS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  PreSex
# ------------------------------------------------------------------------------
data("PreSex", package = "vcd")
str(PreSex)
dim(PreSex)
PreSex
# ----------
# Reorder variables and table
#  - FROM:  MaritalStatus, ExtramaritalSex, PremaritalSex, Gender
#  - TO:  Gender, PremaritalSex, ExtramaritalSex, MaritalStatus
PreSex <- aperm(PreSex, 4:1)
# ------------------------------------------------------------------------------
# Multivariate Multiple Correspondence Analysis
#
#  - There is a close connection between MCA and the bivariate mosaix matrix. The mosaic matrix displays the residuals from independence for each pair of variables,
#   and thus provides a visual representation of the Burt matrix.
#   The total amount of shading in all the individual mosaics portrays the total pairwise associations decomposed by MCA.
#
#  - For interpretation of MCA plots, we note the following relations.
#     - The inertia contributed by a given variable increases with the number of response categories.
#     - The centroid of the categories for each discrete variable is at the origin of the display.
#     - For a particular variable, the inertia contributed by a given category increases as the marginal frequency in that category decreases.
#       Low frequency points therefore appear further from the origin.
#     - The category points for a binary variable lie on a line through the origin. The distance of each point to the origin is inversely related to the marginal frequency.
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Analyze Burt matrix
# ------------------------------------------------------------------------------
PreSex
# ----------
# ca::mjca() typically takes a data frame in case form containing the factor variables, but converts a table to this form.
# This example analyzes the Burt matrix calculated from the PreSex data, specified as lambda = "Burt"
( presex.mca <- ca::mjca(PreSex, lambda = "Burt") )
summary(presex.mca)
# -->
# 77.6% of the total inertia is accounted for in 2 dimensions.
# ----------
# plot --> this is not very flexible
graphics.off();  par(mfrow=c(1,1));
plot(presex.mca)
# ------------------------------------------------------------------------------
# customized display
# ------------------------------------------------------------------------------
res <- plot(presex.mca, labels = 0, pch = ".", cex.lab = 1.2)
coords <- data.frame(res$cols, presex.mca$factors)
nlev <- presex.mca$levels.n
fact <- unique(as.character(coords$factor))
cols <- c("blue", "red", "brown", "black")
points(coords[,1:2], pch=rep(16:19, nlev), col=rep(cols, nlev), cex=1.2)
text(coords[,1:2], label=coords$level, col=rep(cols, nlev), pos=3, cex=1.2, xpd=TRUE)
lwd <- c(2, 2, 2, 4)
for(i in seq_along(fact)) lines(Dim2 ~ Dim1, data = coords, subset = factor==fact[i], lwd = lwd[i], col = cols[i])
legend("bottomright", legend = c("Gender", "PreSex", "ExtraSex", "Marital"), title = "Factor", title.col = "black", col = cols, text.col = cols, pch = 16:19, bg = "gray95", cex = 1.2)
# -->
# The category points for each factor appear on lines through the origin, with distances inversely proportional to their marginal frequencies.
pairs(PreSex, gp = shading_Friendly2, space = 0.25, gp_args = list(interpolate = 1:4), diag_panel_args = list(offset_varnames = -0.5))
rm(list=ls())
graphics.off()
library(FactoMineR)
help(textual)
