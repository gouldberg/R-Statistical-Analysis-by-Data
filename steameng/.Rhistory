plot(dt_d, type = "l")
plot(rw_drift_d, type = "l")
tseries::adf.test(rw_drift, k = 0)
tseries::adf.test(rw_drift, k = 10)
tseries::adf.test(rw_drift, k = 0)
tseries::adf.test(rw_drift)
tseries::adf.test(rw)
tseries::adf.test(dt)
tseries::adf.test(w)
tseries::adf.test(w)
tseries::adf.test(dt)
tseries::adf.test(rw)
tseries::adf.test(rw_drift)
forecast::ndiffs(rw_drift_d)
astsa::acf2(rw_drift_d)
sarima(rw_drift, p = 0, d = 1, q = 0)
astsa::acf2(dt_d)
sarima(dt, p = 1, d = 1, q = 2)
sarima(dt, p = 1, d = 1, q = 1)
sarima(dt, p = 1, d = 1, q = 0)
sarima(dt, p = 1, d = 1, q = 1)
sarima(dt, p = 0, d = 1, q = 1)
sarima(dt, p = 0, d = 1, q = 2)
sarima(dt, p = 1, d = 1, q = 2)
sarima(dt, p = 1, d = 1, q = 1)
sarima(dt, p = 1, d = 1, q = 1)
n <- 500
mu <- 0
sd <- 1
drift <- 0.1
# ------------------------------------------------------------------------------
# random walk
# ------------------------------------------------------------------------------
rw_mat <- sapply(1:100, function(x) cumsum(rnorm(n = n, mean = mu, sd = sd)))
matplot(rw_mat, type = "l")
abline(h = mu, col = "black", lwd = 2)
# ------------------------------------------------------------------------------
# random walk with drift
# ------------------------------------------------------------------------------
# random walk
w <- rnorm(n = 500, mean = mu, sd = sd)
rw <- cumsum(w)
# ----------
# random walk with drift looks like trend series
# x(t) = drift + sum from j = 1 to t ( w(j) )
rw_drift <- cumsum(w + drift)
# ------------------------------------------------------------------------------
# deterministic trend
# ------------------------------------------------------------------------------
phi <- c(0.5, 0.3)
p <- length(phi)
theta <- c(0.3, 0.2)
q <- length(theta)
pdq <- list(order = c(p, 0, q), ar = phi, ma = theta)
arma_noise <- arima.sim(n, model = pdq, sd = sd)
dt <- mu + drift * 1:n + arma_noise
# ------------------------------------------------------------------------------
# plot time series
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
plot(rw_drift, type = "l", lty = 1, lwd = 2, col = "blue", main = "random walk (black), random walk with drift (blue), deterministic trend (red)",
cex.main = 1.2, ylim = c(-40, 80))
lines(rw, col = "black", lwd = 2)
lines(dt, col = "red", lwd = 2)
abline(h = mu, col = "black", lty = 1, lwd = 1)
abline(a = mu, b = drift, col = "blue", lty = 2)
sarima(dt, p = 1, d = 1, q = 1)
astsa::acf2(dt)
astsa::acf2(dt_d)
rw_d <- diff(rw)
dt_d <- diff(dt)
rw_drift_d <- diff(rw_drift)
astsa::acf2(dt_d)
sarima(dt, p = 2, d = 1, q = 3)
sarima(dt, p = 2, d = 1, q = 1)
sarima(dt, p = 2, d = 1, q = 2)
sarima(dt, p = 2, d = 1, q = 3)
sarima(dt, p = 3, d = 1, q = 3)
sarima(dt, p = 1, d = 1, q = 3)
sarima(dt, p = 1, d = 1, q = 0)
sarima(dt, p = 1, d = 1, q = 3)
dt_d2 <- resid(lm(dt ~ time(dt)))
astsa::acf2(dt_d2)
plot(dt_d2, type = "l")
library(astsa)
help()
help(mvspec)
help(spec.pgram)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\steameng")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS", "TSSS", "timsac")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  SteamEng
#   - Input:  Pressure and MagVolt
#   - Output: GenVolt, Speed
# ------------------------------------------------------------------------------
data <- read.table(file = "SteamEng.txt", header = T, sep = "\t", stringsAsFactors = FALSE)
str(data)
car::some(data)
# ----------
pressure <- ts(data$pressure)
magvolt <- ts(data$magvolt)
genvolt <- ts(data$genvolt)
speed <- ts(data$speed)
# ----------
# convert to idframe
z <- idframe(output = cbind(genvolt, speed), input = cbind(magvolt, pressure), Ts = 1)
# ------------------------------------------------------------------------------
# time series plot
# ------------------------------------------------------------------------------
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
# ------------------------------------------------------------------------------
# Estimate Frequency Response
# ------------------------------------------------------------------------------
# default lag size of the Hanning window (Default: min (length(x)/10,30))
# frequency points at which the response is evaluated (Default: seq(1,128)/128*pi/Ts --> up to 3.14)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\steameng")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS", "TSSS", "timsac")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  SteamEng
#   - Input:  Pressure and MagVolt
#   - Output: GenVolt, Speed
# ------------------------------------------------------------------------------
data <- read.table(file = "SteamEng.txt", header = T, sep = "\t", stringsAsFactors = FALSE)
str(data)
car::some(data)
# ----------
pressure <- ts(data$pressure)
magvolt <- ts(data$magvolt)
genvolt <- ts(data$genvolt)
speed <- ts(data$speed)
# ----------
# convert to idframe
z <- idframe(output = cbind(genvolt, speed), input = cbind(magvolt, pressure), Ts = 1)
packages <- c("sysid")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  SteamEng
#   - Input:  Pressure and MagVolt
#   - Output: GenVolt, Speed
# ------------------------------------------------------------------------------
data <- read.table(file = "SteamEng.txt", header = T, sep = "\t", stringsAsFactors = FALSE)
str(data)
car::some(data)
# ----------
pressure <- ts(data$pressure)
magvolt <- ts(data$magvolt)
genvolt <- ts(data$genvolt)
speed <- ts(data$speed)
# ----------
# convert to idframe
z <- idframe(output = cbind(genvolt, speed), input = cbind(magvolt, pressure), Ts = 1)
packages <- c("sysid", "control")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
head(z)
colnames(z$output) <- c("genvolt", "speed")
colnames(z$input) <- c("magvolt", "pressure")
z$output
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
# default lag size of the Hanning window (Default: min (length(x)/10,30))
# frequency points at which the response is evaluated (Default: seq(1,128)/128*pi/Ts --> up to 3.14)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
fit <- impulseest(ze, M = 50)
sysid::impulseplot(fit)
fit
names(fit)
fit <- impulseest(ze, M = 20)
sysid::impulseplot(fit)
nrow(dat)
nrow(data)
step(ze)
fit <- impulseest(ze, M = 20)
sysid::impulseplot(fit)
sysid::impulseplot(ze)
st <- sysid::step(fit)
st$data
help(impuseest)
help(impulseest)
z <- idframe(output = data.frame(genvolt, speed), input = data.frame(magvolt, pressure), Ts = 1)
colnames(z$output) <- c("genvolt", "speed")
colnames(z$input) <- c("magvolt", "pressure")
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
fit <- impulseest(ze, M = 20)
sysid::impulseplot(fit)
z <- idframe(output = data.frame(genvolt), input = data.frame(magvolt), Ts = 1)
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
# ------------------------------------------------------------------------------
# Estimate Frequency Response
# ------------------------------------------------------------------------------
# default lag size of the Hanning window (Default: min (length(x)/10,30))
# frequency points at which the response is evaluated (Default: seq(1,128)/128*pi/Ts --> up to 3.14)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
fit <- impulseest(ze, M = 20)
sysid::impulseplot(fit)
z <- idframe(output = data.frame(genvolt, speed), input = data.frame(magvolt, pressure), Ts = 1)
colnames(z$output) <- c("genvolt", "speed")
colnames(z$input) <- c("magvolt", "pressure")
z <- idframe(output = data.frame(genvolt, speed), input = data.frame(magvolt, pressure), Ts = 1)
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
fit <- impulseest(ze, M = 20)
sysid::impulseplot(fit)
z <- idframe(output = data.frame(genvolt, speed), input = data.frame(magvolt, pressure), Ts = 1)
colnames(z$output) <- c("genvolt", "speed")
colnames(z$input) <- c("magvolt", "pressure")
str(z)
# split data
ze <- dataSlice(z, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
# ----------
plot(z)
par(mfrow = c(2,1))
plot(ze)
# ------------------------------------------------------------------------------
# Estimate Frequency Response
# ------------------------------------------------------------------------------
# default lag size of the Hanning window (Default: min (length(x)/10,30))
# frequency points at which the response is evaluated (Default: seq(1,128)/128*pi/Ts --> up to 3.14)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
fit <- impulseest(ze, M = 20)
sysid::impulseplot(fit)
help(impulseplot)
sysid::impulseplot(fit, sd = 2)
par(mffow = c(2,2))
sysid::impulseplot(fit)
par(mfrow = c(2,2))
sysid::impulseplot(fit)
z <- idframe(output = data.frame(genvolt, speed), input = data.frame(magvolt, pressure), Ts = 1)
z1 <- idframe(output = data.frame(genvolt), input = data.frame(magvolt), Ts = 1)
z2 <- idframe(output = data.frame(genvolt), input = data.frame(pressure), Ts = 1)
z3 <- idframe(output = data.frame(speed), input = data.frame(magvolt), Ts = 1)
z4 <- idframe(output = data.frame(speed), input = data.frame(pressure), Ts = 1)
colnames(z$output) <- c("genvolt", "speed")
colnames(z$input) <- c("magvolt", "pressure")
# split data
ze <- dataSlice(z, start = 1, end = 350)
ze1 <- dataSlice(z1, start = 1, end = 350)
ze2 <- dataSlice(z2, start = 1, end = 350)
ze3 <- dataSlice(z3, start = 1, end = 350)
ze4 <- dataSlice(z4, start = 1, end = 350)
zr <- dataSlice(z, start = 351, end = 451)
zr1 <- dataSlice(z1, start = 351, end = 451)
zr2 <- dataSlice(z2, start = 351, end = 451)
zr3 <- dataSlice(z3, start = 351, end = 451)
zr4 <- dataSlice(z4, start = 351, end = 451)
plot(z)
par(mfrow = c(2,1))
plot(ze)
# frequency points at which the response is evaluated (Default: seq(1,128)/128*pi/Ts --> up to 3.14)
sp <- spa(ze)
# bode plot
#  - Y: amplitude in decibel, phase in degree
#  - X: rad / unit time, 1 means 1 rad/unit time
plot(sp)
fit <- impulseest(ze1, M = 20)
sysid::impulseplot(fit)
st <- sysid::step(fit)
st$data
fit <- impulseest(ze2, M = 20)
sysid::impulseplot(fit)
st <- sysid::step(fit)
st$data
fit <- impulseest(ze3, M = 20)
sysid::impulseplot(fit)
st <- sysid::step(fit)
st$data
fit <- impulseest(ze4, M = 20)
sysid::impulseplot(fit)
# ----------
# step response function
st <- sysid::step(fit)
st$data
fit <- impulseest(ze4, M = 40)
sysid::impulseplot(fit)
# ----------
# step response function
st <- sysid::step(fit)
st$data
( parms <- expand.grid(na = 1:10, nb = 1:10, nk = 1) )
parms$aicc <- "NA"
parms$fpe <- "NA"
parms$naic <- "NA"
parms$bic <- "NA"
parms$mse <- "NA"
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
e <- try(
modarx0 <- arx(ze1, order = c(na, nb, nk)),
silent = TRUE
)
if( class(e) == "try-error") {
}else{
parms$aicc[i] <- fitch(modarx0)$AICc
parms$fpe[i] <- fitch(modarx0)$FPE
parms$naic[i] <- fitch(modarx0)$nAIC
parms$bic[i] <- fitch(modarx0)$BIC
parms$mse[i] <- fitch(modarx0)$MSE
}
}
parms
parms[which.min(parms$aicc),]
parms[which.min(parms$fpe),]
parms[which.min(parms$naic),]
parms[which.min(parms$bic),]
parms[which.min(parms$mse),]
modarx <- arx(ze, order = c(1,1,1), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
modarx <- arx(ze1, order = c(1,1,1), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
# ----------
# test data
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
( parms <- expand.grid(na = 1:10, nb = 1:10, nk = 1:10) )
parms$aicc <- "NA"
parms$fpe <- "NA"
parms$naic <- "NA"
parms$bic <- "NA"
parms$mse <- "NA"
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
e <- try(
modarx0 <- arx(ze1, order = c(na, nb, nk)),
silent = TRUE
)
if( class(e) == "try-error") {
}else{
parms$aicc[i] <- fitch(modarx0)$AICc
parms$fpe[i] <- fitch(modarx0)$FPE
parms$naic[i] <- fitch(modarx0)$nAIC
parms$bic[i] <- fitch(modarx0)$BIC
parms$mse[i] <- fitch(modarx0)$MSE
}
}
parms
parms[which.min(parms$aicc),]
parms[which.min(parms$fpe),]
parms[which.min(parms$naic),]
parms[which.min(parms$bic),]
parms[which.min(parms$mse),]
modarx <- arx(ze1, order = c(1,1,3), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
# ----------
# fitted values
pred_arx <- modarx$fitted.values[,1]
output <- c(ze$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
# ----------
# test data
pred_arx_t <- predict(modarx, zr)
output_t <- c(zr$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
pred_arx <- modarx$fitted.values[,1]
output <- c(ze1$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
( parms <- expand.grid(na = 1:10, nb = 1:10, nk = 1:10) )
parms$aicc <- "NA"
parms$fpe <- "NA"
parms$naic <- "NA"
parms$bic <- "NA"
parms$mse <- "NA"
for(i in 1:nrow(parms)){
na <- parms[i,"na"]
nb <- parms[i,"nb"]
nk <- parms[i,"nk"]
e <- try(
modarx0 <- arx(ze2, order = c(na, nb, nk)),
silent = TRUE
)
if( class(e) == "try-error") {
}else{
parms$aicc[i] <- fitch(modarx0)$AICc
parms$fpe[i] <- fitch(modarx0)$FPE
parms$naic[i] <- fitch(modarx0)$nAIC
parms$bic[i] <- fitch(modarx0)$BIC
parms$mse[i] <- fitch(modarx0)$MSE
}
}
parms
parms[which.min(parms$aicc),]
parms[which.min(parms$fpe),]
parms[which.min(parms$naic),]
parms[which.min(parms$bic),]
parms[which.min(parms$mse),]
modarx <- arx(ze2, order = c(1,1,10), lambda = 0.1)
modarx$sys
unlist(fitch(modarx))
# ----------
# fitted values
pred_arx <- modarx$fitted.values[,1]
output <- c(ze2$output)
par(mfrow = c(1,1))
plot(output, type = "l")
lines(time(pred_arx), pred_arx, col = "blue", lwd = 2)
pred_arx_t <- predict(modarx, zr2)
output_t <- c(zr2$output)
par(mfrow = c(1,1))
plot(output_t, type = "l")
lines(time(pred_arx_t), pred_arx_t, col = "blue", lwd = 2)
resid_arx <- pred_arx - output
resid_arx_t <- pred_arx_t - output_t
sysid::residplot(modarx)
tmp <- idframe(output = ts(pred_arx), input = ts(ze$input), Ts = 1)
tmp_t <- idframe(output = ts(pred_arx_t), input = ts(zr$input), Ts = 1)
freq <- c(spa(ze2)$freq)
ori_gain <- 20 * log10(c(abs(spa(ze2)$response)))
train_gain_arx <- 20 * log10(c(abs(spa(tmp)$response)))
test_gain_arx <- 20 * log10(c(abs(spa(tmp_t)$response)))
ori_phase <- atan2(y = c(Im(spa(ze2)$response)), x = c(Re(spa(ze2)$response))) / (2 * pi) * 360
train_phase_arx <- atan2(y = c(Im(spa(tmp)$response)), x = c(Re(spa(tmp)$response))) / (2 * pi) * 360
test_phase_arx <- atan2(y = c(Im(spa(tmp_t)$response)), x = c(Re(spa(tmp_t)$response))) / (2 * pi) * 360
graphics.off()
par(mfrow = c(2,1))
plot(ori_gain ~ freq, type = "l", lty = 2, col = "black", lwd = 2, ylim = c(-30, 20),
main = "Magnitude : original (black), train (blue), test (red)")
lines(train_gain_arx ~ freq, type = "l", lty = 1, col = "blue", lwd = 2)
lines(test_gain_arx ~ freq, type = "l", lty = 1, col = "red", lwd = 2)
abline(h = seq(-30, 20, by = 5), v = seq(0, 3.0, by = 0.25), lty = 2, col = "gray")
abline(h = 0, v = seq(0, 3.0, by = 1), lty = 2, col = "black")
plot(ori_phase ~ freq, type = "l", lty = 2, col = "black", lwd = 2, ylim = c(-200, 200),
main = "Phase : original (black), train (blue), test (red)")
lines(train_phase_arx ~ freq, type = "l", lty = 1, col = "blue", lwd = 2)
lines(test_phase_arx ~ freq, type = "l", lty = 1, col = "red", lwd = 2)
abline(h = seq(-200, 200, by = 25), v = seq(0, 3.0, by = 0.25), lty = 2, col = "gray")
abline(h = 0, v = seq(0, 3.0, by = 1), lty = 2, col = "black")
