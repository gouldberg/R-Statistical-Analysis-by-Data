sigma ~ dunif(0, 10)
), data = d)
# These numbers provide Gaussian approximations fro each parameter's marginal distribution.
# each additional standard deviation of delay in marriage (1.24 years) predicts a decrease of about one divorce per thousand adults, with a 89%
# interval from about -1.4 to -0.7.
sd(d$MedianAgeMarriage)
precis(mod1, corr = TRUE)
# ----------
# compute percentile interval of mean
MAM.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod1, data = data.frame(MedianAgeMarriage.s = MAM.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# ----------
# The MAP line (just the posterior mean)
abline(a = coef(mod1)["a"], b = coef(mod1)["bA"])
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, MAM.seq)
n <- 1e4
sim.divorce <- sim(mod1, data = list(MAM = MAM.seq), n = n)
mod1
sim.divorce <- sim(mod1, data = list(MedianAgeMarriage.s = MAM.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, MAM.seq)
d$Marriage.s <- (d$Marriage - mean(d$Marriage)) / sd(d$Marriage)
mod2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
sd(d$Marriage)
precis(mod2, corr = TRUE)
# ----------
# compute percentile interval of mean
M.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod2, data = data.frame(Marriage.s = M.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ Marriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# ----------
# The MAP line (just the posterior mean)
abline(a = coef(mod2)["a"], b = coef(mod2)["bR"])
# ----------
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, M.seq)
# ----------
# n <- 100
n <- 1e4
sim.divorce <- sim(mod2, data = list(Marriage.s = M.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, M.seq)
# -->
# This shows an increase of 0.6 divorces for every additional standard deviation of marraige rate (3.8).
d$Marriage.s <- (d$Marriage - mean(d$Marriage)) / sd(d$Marriage)
mod2 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
sd(d$Marriage)
precis(mod2, corr = TRUE)
# ----------
# compute percentile interval of mean
M.seq <- seq(from = -3, to = 3.5, length.out = 30)
mu <- link(mod2, data = data.frame(Marriage.s = M.seq))
mu.PI <- apply(mu, 2, PI)
plot(Divorce ~ Marriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
# The MAP line (just the posterior mean)
abline(a = coef(mod2)["a"], b = coef(mod2)["bR"])
# ----------
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
shade(mu.HPDI, M.seq)
# ----------
# n <- 100
n <- 1e4
sim.divorce <- sim(mod2, data = list(Marriage.s = M.seq), n = n)
divorce.PI <- apply(sim.divorce, 2, PI, prob = 0.89)
shade(divorce.PI, M.seq)
mod3 <- map(
alist(
Divorce ~ dnorm(mu, sigma),
mu <- a + bR * Marriage.s + bA * MedianAgeMarriage.s,
a ~ dnorm(10, 10),
bR ~ dnorm(0, 1),
bA ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
precis(mod3, corr = TRUE)
plot(precis(mod3))
mod4 <- map(
alist(
Marriage.s = dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
mod4 <- map(
alist(
Marriage.s = dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
#
mu <- coef(mod4)["a"] + coef(mod4)["b"] * d$MedianAgeMarriage.s
m.resid <- d$Marriage.s - mu
mod4 <- map(
alist(
Marriage.s ~ dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
mu <- coef(mod4)["a"] + coef(mod4)["b"] * d$MedianAgeMarriage.s
m.resid <- d$Marriage.s - mu
mod4 <- map(
alist(
Marriage.s ~ dnorm(mu, sigma),
mu <- a + b * MedianAgeMarriage.s,
a ~ dnorm(0, 10),
b ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
), data = d)
# compute expected value at MPA, for each State
mu <- coef(mod4)["a"] + coef(mod4)["b"] * d$MedianAgeMarriage.s
m.resid <- d$Marriage.s - mu
plot(Marriage.s ~ MedianAgeMarriage.s, data = d, cex = 0.5, pch = 16, col = col.alpha(rangi2, 0.5))
abline(mod4)
for(i in 1:length(m.resid)){
x <- d$MedianAgeMarriage.s[i]
y <- d$Marriage.s[i]
lines(c(x, x), c(mu[i], y), lwd = 0.5, col = col.alpha("black", 0.7))
}
plot(Marriage.s ~ MedianAgeMarriage.s, data = d)
abline(mod4)
for(i in 1:length(m.resid)){
x <- d$MedianAgeMarriage.s[i]
y <- d$Marriage.s[i]
lines(c(x, x), c(mu[i], y), lwd = 0.5, col = col.alpha("black", 0.7))
}
plot(m.resid)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
# ----------
# compute counterfactual mean divorve (mu)
mu <- link(mod3, data = pred_data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
# ----------
# simulate counterfactual divorce outcomes
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
# ----------
# display predictions, hiding raw data with type = "n"
plot(Divorce ~ Marriage.s, data = d, type = "n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
R.avg <- mean(d$Marriage.s)
A.seq <- seq(from = -3, to=3.5, length.out = 30)
pred.data2 <- data.frame(
Marriage.s = R.avg,
MedianAgeMarriage.s = A.seq
)
mu <- link(mod3, data = pred.data2)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
A.sim <- sim(mod3, data = pred.data2, n = 1e4)
A.PI <- apply(A.sim, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, type = "n")
mtext("Marriage.s = 0")
lines(A.seq, mu.mean)
shade(mu.PI, A.seq)
shade(A.PI, A.seq)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
# ----------
# compute counterfactual mean divorve (mu)
mu <- link(mod3, data = pred_data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
A.avg <- mean(d$MedianAgeMarriage.s)
R.seq <- seq(from = -3, to = 3, length.out = 30)
pred.data <- data.frame(
Marriage.s = R.seq,
MedianAgeMarriage.s = A.avg
)
mu <- link(mod3, data = pred.data)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
# simulate counterfactual divorce outcomes
R.sim <- sim(mod3, data = pred.data, n = 1e4)
R.PI <- apply(R.sim, 2, PI)
plot(Divorce ~ Marriage.s, data = d, type = "n")
mtext("MedianAgeMarriage.s = 0")
lines(R.seq, mu.mean)
shade(mu.PI, R.seq)
shade(R.PI, R.seq)
R.avg <- mean(d$Marriage.s)
A.seq <- seq(from = -3, to=3.5, length.out = 30)
pred.data2 <- data.frame(
Marriage.s = R.avg,
MedianAgeMarriage.s = A.seq
)
mu <- link(mod3, data = pred.data2)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
A.sim <- sim(mod3, data = pred.data2, n = 1e4)
A.PI <- apply(A.sim, 2, PI)
plot(Divorce ~ MedianAgeMarriage.s, data = d, type = "n")
mtext("Marriage.s = 0")
lines(A.seq, mu.mean)
shade(mu.PI, A.seq)
shade(A.PI, A.seq)
# so it uses original data
mu <- link(mod3)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
divorce.sim <- sim(mod3, n = 1e4)
divorce.PI <- apply(divorce.sim, 2, PI)
# ----------
plot(mu.mean ~ d$Divorce, col = rangi2, ylim = range(mu.PI), xlab = "Observed divorce", ylab = "Predicted divorce")
abline(a = 0, b = 1, lty = 2)
for(i in 1:nrow(d)) lines(rep(d$Divorce[i], 2), c(mu.PI[1,i], mu.PI[2, i]), col = rangi2)
identity(x = d$Divorce, y = mu.mean, labels = d$Loc, cex = 0.8)
identify(x = d$Divorce, y = mu.mean, labels = d$Loc, cex = 0.8)
divorce.resid <- d$Divorce - mu.mean
o <- order(divorce.resid)
dotchart(divorce.resid[o], labels = d$Loc[o], xlim = c(-6,5), cex = 0.6)
abline(v = 0, col = col.alpha("black", 0.2))
for(i in 1:nrow(d)){
j <- o[i]
lines(d$Divorce[j] - c(mu.PI[1,j], mu.PI[2,j]), rep(i,2))
points(d$Divorce[j] - c(divorce.PI[1,j], divorce.PI[2,j]), rep(i,2), pch = 3, cex = 0.5, col = "gray")
}
rm(list=ls())
gra
graphics.off()
setwd("//media//kswada//MyFiles//R//rugged")
packages <- c("dplyr", "rethinking")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  rugged
# ------------------------------------------------------------------------------
data("rugged", package = "rethinking")
d <- rugged
dim(d)
str(d)
car::some(d)
# ------------------------------------------------------------------------------
# Fit two-component distribution models
# ------------------------------------------------------------------------------
library(gamlss.mx)
set.seed(3683)
# ----------
# 2-component mixtures of normal, gamma, inverse Gaussian, Weibull, reverse Gumbel and logistic distributions
gNO <- gamlssMX(rgdppc_2000 ~ 1, family = NO, K = 2, data = na.omit(d))
gGA <- gamlssMX(rgdppc_2000 ~ 1, family = GA, K = 2, data = na.omit(d))
gIG <- gamlssMX(rgdppc_2000 ~ 1, family = IG, K = 2, data = na.omit(d))
gWEI <- gamlssMX(rgdppc_2000 ~ 1, family = WEI, K = 2, data = na.omit(d))
gRG <- gamlssMX(rgdppc_2000 ~ 1, family = RG, K = 2, data = na.omit(d))
gLO <- gamlssMX(rgdppc_2000 ~ 1, family = LO, K = 2, data = na.omit(d))
AIC(gNO, gGA, gIG, gWEI, gRG, gLO)
gIG1 <- gamlssMXfits(n = 5, rgdppc_2000 ~ 1, family = IG, K = 2, data = na.omit(d))
gIG
gIG1
gIG1$models
plot(0.17 * dIG(x, mu = 7.129, sigma = exp(-4.29)) + 0.83 * dIG(x, mu = 8.842, sigma = exp(-5.245)), type = "l")
gIG1$models
gIG1
x <- seq(0, 80, 1)
plot(0.7395 * dIG(x, mu = 7.129, sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = 8.842, sigma = exp(-5.245)), type = "l")
x <- seq(0, 10, 0.01)
plot(0.7395 * dIG(x, mu = 7.129, sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = 8.842, sigma = exp(-5.245)), type = "l")
MASS::truehist(d$rgdppc_2000)
x <- seq(0, 6000, 100)
plot(0.7395 * dIG(x, mu = 7.129, sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = 8.842, sigma = exp(-5.245)), type = "l")
gIG1
x <- seq(0, 6000, 100)
plot(0.7395 * dIG(x, mu = exp(7.129), sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = exp(8.842), sigma = exp(-5.245)), type = "l")
MASS::truehist(d$rgdppc_2000)
x <- seq(0, 6000, 100)
plot(0.7395 * dIG(x, mu = exp(7.129), sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = exp(8.842), sigma = exp(-5.245)), type = "l")
plot(0.7395 * dIG(x, mu = 7.129, sigma = -4.29) + 0.2605 * dIG(x, mu = 8.842, sigma = -5.245), type = "l")
x <- seq(0, 60000, 100)
plot(0.7395 * dIG(x, mu = exp(7.129), sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = exp(8.842), sigma = exp(-5.245)), type = "l")
MASS::truehist(d$rgdppc_2000)
x <- seq(0, 60000, 100)
plot(0.7395 * dIG(x, mu = exp(7.129), sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = exp(8.842), sigma = exp(-5.245)), type = "l")
x <- seq(0, 60000, 100)
plot(0.7395 * dIG(x, mu = exp(7.129), sigma = exp(-4.29)) + 0.2605 * dIG(x, mu = exp(8.842), sigma = exp(-5.245)), type = "l")
MASS::truehist(d$rgdppc_2000)
gIG1
gIG
K <- 3
gNO <- gamlssMX(rgdppc_2000 ~ 1, family = NO, K = K, data = na.omit(d))
gGA <- gamlssMX(rgdppc_2000 ~ 1, family = GA, K = K, data = na.omit(d))
gIG <- gamlssMX(rgdppc_2000 ~ 1, family = IG, K = K, data = na.omit(d))
gWEI <- gamlssMX(rgdppc_2000 ~ 1, family = WEI, K = K, data = na.omit(d))
gRG <- gamlssMX(rgdppc_2000 ~ 1, family = RG, K = K, data = na.omit(d))
gLO <- gamlssMX(rgdppc_2000 ~ 1, family = LO, K = K, data = na.omit(d))
AIC(gNO, gGA, gIG, gWEI, gRG, gLO)
fnIG <- getpdfMX(gIG, observation = 1)
fnGA <- getpdfMX(gGA, observation = 1)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "Age", ylab = "Density", ymax = 0.05)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.001)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.0001)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.0003)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.0004)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.0001)
MASS::truehist(d$rgdppc_2000, nbins = 25)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.0001)
lines(seq(0.5, 90.5, 1), fnig(seq(0.5, 90.5, 1)), lty = 1, lwd = 2)
lines(seq(0.5, 90.5, 1), fnGA(seq(0.5, 90.5, 1)), lty = 2, lwd = 2)
fnIG <- getpdfMX(gIG, observation = 1)
fnGA <- getpdfMX(gGA, observation = 1)
lines(seq(0.5, 90.5, 1), fnig(seq(0.5, 90.5, 1)), lty = 1, lwd = 2)
lines(seq(0.5, 90.5, 1), fnGA(seq(0.5, 90.5, 1)), lty = 2, lwd = 2)
lines(seq(0.5, 90.5, 1), fnIG(seq(0.5, 90.5, 1)), lty = 1, lwd = 2)
x <- seq(0, 60000, 100)
lines(x, fnIG(x), lty = 1, lwd = 2)
lines(x, fnGA(x), lty = 2, lwd = 2)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.00015)
x <- seq(0, 60000, 100)
lines(x, fnIG(x), lty = 1, lwd = 2)
lines(x, fnGA(x), lty = 2, lwd = 2)
legend("topleft", legend = c("inverse gaussian"", "gamma"), lty = 1:2, cex = 1.5)
K <- 3
gNO <- gamlssMX(rgdppc_2000 ~ 1, family = NO, K = K, data = na.omit(d))
gGA <- gamlssMX(rgdppc_2000 ~ 1, family = GA, K = K, data = na.omit(d))
gIG <- gamlssMX(rgdppc_2000 ~ 1, family = IG, K = K, data = na.omit(d))
gWEI <- gamlssMX(rgdppc_2000 ~ 1, family = WEI, K = K, data = na.omit(d))
gRG <- gamlssMX(rgdppc_2000 ~ 1, family = RG, K = K, data = na.omit(d))
gLO <- gamlssMX(rgdppc_2000 ~ 1, family = LO, K = K, data = na.omit(d))
# ----------
# Compare models
AIC(gNO, gGA, gIG, gWEI, gRG, gLO)
gGA1 <- gamlssMXfits(n = 5, rgdppc_2000 ~ 1, family = GA, K = 2, data = na.omit(d))
gGA
gGA1
gGA1 <- gamlssMXfits(n = 5, rgdppc_2000 ~ 1, family = GA, K = 3, data = na.omit(d))
gGA
gGA1
gGA1$models
fnGA <- getpdfMX(gGA1, observation = 1)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.00015)
x <- seq(0, 60000, 100)
lines(x, fnIG(x), lty = 1, lwd = 2)
lines(x, fnGA(x), lty = 2, lwd = 2)
fnGA <- getpdfMX(gGA1, observation = 1)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.00015)
x <- seq(0, 60000, 100)
lines(x, fnIG(x), lty = 1, lwd = 2)
lines(x, fnGA(x), lty = 2, lwd = 2)
gGA
gGA1$models
gGA1
fnGA <- getpdfMX(gGA1, observation = 1)
truehist(d$rgdppc_2000, nbins = 25, col = "grey", xlab = "rgdppc_2000", ylab = "Density", ymax = 0.00015)
x <- seq(0, 60000, 100)
lines(x, fnGA(x), lty = 2, lwd = 2)
fnGA <- getpdfMX(gGA1, observation = 1)
lines(x, fnGA(x), lty = 2, lwd = 2)
plot(gGA1)
names(d)
plot(log(rgdppc_2000) ~ rugged,
data = d, ylab = "rgdppc_2000", xlab = "rugged", cex.lab = 1.25, pch = 20, col = gray(0.7))
plot(log(rgdppc_2000) ~ rugged,
data = d, ylab = "rgdppc_2000", xlab = "rugged", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(d$rugged, log(d$rgdppc_2000)), col = "blue", lwd = 1)
log(d$rgdppc_2000)
plot(log(rgdppc_2000) ~ rugged,
data = na.omit(d), ylab = "rgdppc_2000", xlab = "rugged", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(na.omit(d)$rugged, log(na.omit(d)$rgdppc_2000)), col = "blue", lwd = 1)
xyplot(rgdppc_2000 ~ ruuged, data = d)
library(lattice)
xyplot(rgdppc_2000 ~ ruuged, data = d)
xyplot(rgdppc_2000 ~ rugged, data = d)
library(ggplot2)
ggplot(d, aes(x = rugged, y = rgdppc_2000)) + xlab("rugged") + ylab("rgdppc_2000") + geom_point(position = position_jitter(), alpha = 0.3) + stat_smooth()
library(ggplot2)
ggplot(d, aes(x = rugged, y = rgdppc_2000)) + xlab("rugged") + ylab("rgdppc_2000") + geom_point(position = position_jitter(), alpha = 0.3) + stat_smooth() +
scale_y_log10(breaks = c(1, 2, 5, 10, 20))
plot(rgdppc_2000 ~ rugged, log = "y",
data = na.omit(d), ylab = "rgdppc_2000", xlab = "rugged", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(na.omit(d)$rugged, log(na.omit(d)$rgdppc_2000)), col = "blue", lwd = 1)
plot(rgdppc_2000 ~ rugged, log = "y",
data = na.omit(d), ylab = "rgdppc_2000", xlab = "rugged", cex.lab = 1.25, pch = 20, col = gray(0.7))
lines(lowess(na.omit(d)$rugged, na.omit(d)$rgdppc_2000), col = "blue", lwd = 1)
formula <- rgdppc_2000 ~ rugged
car::scatterplot(formula, data = d)
formula <- log(rgdppc_2000) ~ rugged
car::scatterplot(formula, data = d)
library(ggplot2)
gg <- ggplot(d, aes(rugged, rgdppc_2000)) +
stat_smooth(method = "loess", size = 2, fill = "blue", alpha = 0.25) +
stat_smooth(method = "lm", color = "red", size = 1.25, se = FALSE) +
labs(y = "height", x = "age") +
scale_y_log10()
names(d)
gg + facet_wrap(~ cont_africa)
d %>% ggplot(aes(rugged, rgdppc_2000, group=cont_africa, color=as.factor(cont_africa))) +
geom_line() +
geom_point(size=2)
d %>% ggplot(aes(rugged, rgdppc_2000, group=cont_africa, color=as.factor(cont_africa))) +
geom_line() +
geom_point(size=2) +  scale_y_log10(breaks = c(1, 2, 5, 10, 20))
formula = log(rgdppc_2000 ~ rugged | cont_africa
coplot(formula, data = d, ylab = "rgdppc_2000", xlab = "rugged", las=1)
formula = log(rgdppc_2000) ~ rugged | cont_africa
coplot(formula, data = d, ylab = "rgdppc_2000", xlab = "rugged", las=1)
formula = log(rgdppc_2000) ~ rugged | cont_africa
xyplot(formula, data = d)
formula = log(rgdppc_2000) ~ rugged | cont_africa
car::scatterplot(formula, data = d)
library(car)
formula <- ~ log10(rgdppc_2000) + rugged
scatterplotMatrix(formula, data = d,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ log10(rgdppc_2000) + rugged | cont_africa
scatterplotMatrix(formula, data = d,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c("black", gray(0.5), gray(0.7)), pch = c(1,2,20))
var_obj <- c("rgdppc_2000", "rugged")
# here we apply method = "spearman" due to terrible skewness
pairs.panels(d[, var_obj], ci = TRUE, smoother = TRUE, stars = TRUE, method = "spearman")
library(psych)
var_obj <- c("rgdppc_2000", "rugged")
# here we apply method = "spearman" due to terrible skewness
pairs.panels(d[, var_obj], ci = TRUE, smoother = TRUE, stars = TRUE, method = "spearman")
data("rugged", package = "rethinking")
d <- rugged
dim(d)
str(d)
# ----------
# make log version of outcome
d$log_gdp <- log(d$rgdppc_2000)
# extract countries with GDP data
dd <- d[complete.cases(d$rgdppc_2000), ]
# split countries into Africa and not-Africa
d.A1 <- dd[dd$cont_africa == 1, ]
d.A0 <- dd[dd$cont_africa == 0, ]
summary(d.A1$rugged)
summary(d.A0$rugged)
mod1 <- map(
alist(
log_gdp ~ dnorm(mu, sigma),
mu <- a + bR * rugged,
a ~ dnorm(8, 100),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data = d.A1
)
mod2 <- map(
alist(
log_gdp ~ dnorm(mu, sigma),
mu <- a + bR * rugged,
a ~ dnorm(8, 100),
bR ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data = d.A0
)
precis(mod1, corr=TRUE, digits = 3)
precis(mod2, corr=TRUE, digits = 3)
rugged.seq <- 0:7
pred.data <- data.frame(rugged = rugged.seq)
# ----------
mu1 <- link(mod1, data = pred.data, n = 1e4)
mu1.mean <- apply(mu1, 2, mean)
mu1.PI <- apply(mu1, 2, PI)
mu2 <- link(mod2, data = pred.data, n = 1e4)
mu2.mean <- apply(mu2, 2, mean)
mu2.PI <- apply(mu2, 2, PI)
# ----------
par(mfrow=c(1,2))
plot(log_gdp ~ rugged, data = d.A1, col = rangi2)
mtext("Africa")
lines(rugged.seq, mu1.mean)
shade(mu1.PI, rugged.seq)
plot(log_gdp ~ rugged, data = d.A0, col = rangi2)
mtext("Non-Africa")
lines(rugged.seq, mu2.mean)
shade(mu2.PI, rugged.seq)
# -->
# It makes sense that ruggedness is associated with poorer countries, in most of the world.
# In theory, rugged terrain means transport is difficult, which means market access is hampered, which means reduced gross domestic product.
# But the reversed relationship within Africa seems puzzling. Why should difficult terrain be associated with higher GDP per capita ?
# If this relationship is at all causal, it may be because rugged regions of Africa were protected against the large-scale Atlantic and Indian Ocean slave trades.
# Slavers preferred to raid easily accessed settltments, with easy routes to the sea.
# Those resiongs that suffered under the slave trade understandably continue to suffer economically, long after the decline of slave-trading markets.
