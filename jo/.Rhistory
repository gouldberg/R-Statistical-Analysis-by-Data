y2 <- yn * sin(theta)
plot(0:160, 0:160, ylim = c(0, 110), type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1,  main = "IQ subject space")
arrows(0, 0, xn, 0, length = 0.10, lwd = 2)
text(xn, 0, "VIQ", pos = 4, offset = 0.4)
arrows(0, 0, y1, y2, length = 0.10, lwd = 2)
text(y1, y2, "PIQ", pos = 4, offset = 0.4)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, col = "gray", xlab = "Body Height (standardized)",
ylab = "Brain Size (standardized)", main = "Regression Biplot", asp = 1)
abline(h = 0, v = 0, lty = 2, col = "darkgray")
arrows(0, 0, regfit$coef[1,1], regfit$coef[2,1], length = 0.1, col = "brown")
text(regfit$coef[1,1], regfit$coef[2,1], labels = "VIQ", col = "brown", pos = 2, cex = 0.9)
arrows(0, 0, regfit$coef[1,2], regfit$coef[2,2], length = 0.1, col = "brown")
text(regfit$coef[1,2], regfit$coef[2,2], labels = "PIQ", col = "brown", pos = 3, cex = 0.9)
arrows(0, 0, regfit$coef[1,3], regfit$coef[2,3], length = 0.1, col = "brown")
text(regfit$coef[1,3], regfit$coef[2,3], labels = "Weight", col = "brown", pos = 4, cex = 0.9)
round(cor(BrainIQ[, 2:4]), 3)
par(mfrow = c(1, 1))
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, col = "gray", xlab = "Body Height (standardized)",
ylab = "Brain Size (standardized)", main = "Regression Biplot", asp = 1)
abline(h = 0, v = 0, lty = 2, col = "darkgray")
arrows(0, 0, regfit$coef[1,1], regfit$coef[2,1], length = 0.1, col = "brown")
text(regfit$coef[1,1], regfit$coef[2,1], labels = "VIQ", col = "brown", pos = 2, cex = 0.9)
arrows(0, 0, regfit$coef[1,2], regfit$coef[2,2], length = 0.1, col = "brown")
text(regfit$coef[1,2], regfit$coef[2,2], labels = "PIQ", col = "brown", pos = 3, cex = 0.9)
arrows(0, 0, regfit$coef[1,3], regfit$coef[2,3], length = 0.1, col = "brown")
text(regfit$coef[1,3], regfit$coef[2,3], labels = "Weight", col = "brown", pos = 4, cex = 0.9)
round(regfit$coef, 3)
round(cor(BrainIQ[, 2:4]), 3)
regfit$coef
regfit$coef[,"VIQ"]
sqrt(sum(regfit$coef[,"VIQ"]^2))
library(calibrate)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, cex = 0.8, xlab = "Height", ylab = "MRI",
col = "darkblue", asp = 1, main = "Orthogonal Projections")
text(BrainIQ1$Height, BrainIQ1$MRI_Count, labels = 1:nrow(BrainIQ1), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "darkgray")
calibrate.Z <- calibrate(regfit$coef[,1], BrainIQ1$VIQ, seq(-2,2, by = 0.5),
cbind(BrainIQ1$Height, BrainIQ1$MRI_Count), dp = TRUE, axiscol = "brown",
axislab = "VIQ", labpos = 3, verb = FALSE)
VIQcal <- calibrate.Z$yt*sd(BrainIQ$VIQ) + mean(BrainIQ$VIQ)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, cex = 0.8, xlab = "Height", ylab = "MRI",
col = "darkblue", asp = 1, main = "Orthogonal Projections")
text(BrainIQ1$Height, BrainIQ1$MRI_Count, labels = 1:nrow(BrainIQ1), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "darkgray")
calibrate.Z
help(calibrate)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, cex = 0.8, xlab = "Height", ylab = "MRI",
col = "darkblue", asp = 1, main = "Orthogonal Projections")
text(BrainIQ1$Height, BrainIQ1$MRI_Count, labels = 1:nrow(BrainIQ1), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "darkgray")
summary(BrainIQ[, 2])
BrainIQ[c(20, 11), -c(1, 4)]
round(R2vec, 3)
library(calibrate)
calibrate.Z <- calibrate(regfit$coef[,1], BrainIQ1$VIQ, seq(-2,2, by = 0.5),
cbind(BrainIQ1$Height, BrainIQ1$MRI_Count), dp = TRUE, axiscol = "brown",
axislab = "VIQ", labpos = 3, verb = FALSE)
calibrate.Z
VIQcal <- calibrate.Z$yt*sd(BrainIQ$VIQ) + mean(BrainIQ$VIQ)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, cex = 0.8, xlab = "Height", ylab = "MRI",
col = "darkblue", asp = 1, main = "Orthogonal Projections")
text(BrainIQ1$Height, BrainIQ1$MRI_Count, labels = 1:nrow(BrainIQ1), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "darkgray")
calibrate.Z <- calibrate(regfit$coef[,1], BrainIQ1$VIQ, seq(-2,2, by = 0.5),
cbind(BrainIQ1$Height, BrainIQ1$MRI_Count), dp = TRUE, axiscol = "brown",
axislab = "VIQ", labpos = 3, verb = FALSE)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, cex = 0.8, xlab = "Height", ylab = "MRI",
col = "darkblue", asp = 1, main = "Orthogonal Projections")
text(BrainIQ1$Height, BrainIQ1$MRI_Count, labels = 1:nrow(BrainIQ1), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "darkgray")
# calibrate to produce biplot axes and optionally show the projection lines
# Each individual's point is subject to an orthogonal projection on the VIQ axis.
calibrate.Z <- calibrate(regfit$coef[,1], BrainIQ1$VIQ, seq(-2,2, by = 0.5),
cbind(BrainIQ1$Height, BrainIQ1$MRI_Count), dp = TRUE, axiscol = "brown",
axislab = "VIQ", labpos = 3, verb = FALSE)
VIQcal <- calibrate.Z$yt*sd(BrainIQ$VIQ) + mean(BrainIQ$VIQ)
( VIQcal <- calibrate.Z$yt*sd(BrainIQ$VIQ) + mean(BrainIQ$VIQ) )
summary(BrainIQ[, 2])
round(R2vec, 3)
round(R2vec, 3)
BrainIQ[c(20, 11), -c(1, 4)]
round(R2vec, 3)
summary(BrainIQ)
summary(BrainIQ[, 2])
summary(BrainIQ[, 2])
round(R2vec, 3)
( VIQcal <- calibrate.Z$yt*sd(BrainIQ$VIQ) + mean(BrainIQ$VIQ) )
regit$coef
regfit$coef
calibrate(regfit$coef[,3], BrainIQ1$Weight, seq(-2,2, by = 0.5),
cbind(BrainIQ1$Height, BrainIQ1$MRI_Count), dp = TRUE, axiscol = "brown",
axislab = "Weight", labpos = 3, verb = FALSE)
plot(BrainIQ1$Height, BrainIQ1$MRI_Count, pch = 20, cex = 0.8, xlab = "Height", ylab = "MRI",
col = "darkblue", asp = 1, main = "Orthogonal Projections")
text(BrainIQ1$Height, BrainIQ1$MRI_Count, labels = 1:nrow(BrainIQ1), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "darkgray")
calibrate(regfit$coef[,3], BrainIQ1$Weight, seq(-2,2, by = 0.5),
cbind(BrainIQ1$Height, BrainIQ1$MRI_Count), dp = TRUE, axiscol = "brown",
axislab = "Weight", labpos = 3, verb = FALSE)
BrainIQ[c(21, 26), -c(1, 4)]
summary(BrainIQ[, 3])
BrainIQ
summary(BrainIQ[, 4])
BrainIQ[c(21, 26), -c(1, 4)]
BrainIQ[c(21, 26), ]
pca_biq1 <- prcom(BrainIQ1)
pca_biq2 <- prcomp(BrainIQ1, scale = TRUE)
op <- par(mfrow = c(1,2))
biplot(pca_biq1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Unstandardized)", xlim = c(-4, 4), asp = 1, cex.axis = 0.8)
biplot(pca_biq2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Standardized)", asp = 1, cex.axis = 0.8)
layout(1)
par(op)
pca_biq1 <- prcom(BrainIQ1)
pca_biq2 <- prcomp(BrainIQ1, scale = TRUE)
pca_biq1 <- prcomp(BrainIQ1)
pca_biq2 <- prcomp(BrainIQ1, scale = TRUE)
op <- par(mfrow = c(1,2))
biplot(pca_biq1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Unstandardized)", xlim = c(-4, 4), asp = 1, cex.axis = 0.8)
biplot(pca_biq2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Standardized)", asp = 1, cex.axis = 0.8)
layout(1)
par(op)
setwd("//media//kswada//MyFiles//R//yaass")
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("yaass", package = "MPsychoR")
str(yaass)
psych::describe(yaass)
pca_yaass1 <- prcomp(yaass[,1:5])
pca_yaass2 <- prcomp(yaass[,1:5], scale = TRUE)
op <- par(mfrow = c(2,2), mar = c(4, 3, 4, 1))
biplot(pca_yaass1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Unstandardized, ", alpha, "=0)")), scale = 0, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_yaass1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Unstandardized, ", alpha, "=1)")), scale = 1, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_yaass2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Standardized, ", alpha, "=0)")), scale = 0, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_yaass2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Standardized, ", alpha, "=1)")), scale = 1, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
par(op)
round(cor(yaass[,1:5]), 2)
round(apply(yaass[,1:5], 2, sd), 3)
round(cor(yaass[,1:5]), 2)
round(cor(yaass[,1:5], scale = T), 2)
round(cor(yaass[,1:5], scale = TRUE), 2)
round(cor(yaass[,1:5]), 2)
X <- pca_yaass2$x[, 1:2]  ## extract PC scores
Y <- scale(yaass[,1:5])   ## standardize variables
fitlms <- lm(Y ~ -1 + X)  ## fit regressions
round(coef(fitlms), 3)
round(t(pca_yaass2$rotation[,1:2]), 3)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",
xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calAE <- calibrate(fitlms$coef[,"AE"], Y[,"AE"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "AE", labpos = 3, verb = FALSE)
X <- pca_yaass2$x[, 1:2]  ## extract PC scores
Y <- scale(yaass[,1:5])   ## standardize variables
fitlms <- lm(Y ~ -1 + X)  ## fit regressions
round(coef(fitlms), 3)
round(t(pca_yaass2$rotation[,1:2]), 3)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",
xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
X <- pca_yaass2$x[, 1:2]
# standardize variables
Y <- scale(yaass[,1:5])
# fit regression
fitlms <- lm(Y ~ -1 + X)
round(coef(fitlms), 3)
round(t(pca_yaass2$rotation[,1:2]), 3)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calAE <- calibrate(fitlms$coef[,"AE"], Y[,"AE"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "AE", labpos = 3, verb = FALSE)
R2vec <- sapply(summary(fitlms), "[[", "r.squared")
round(R2vec[2], 3)
fitlms
R2vec
summary(fitlms)
install.packages("bpca", dep=T)
library(bpca)
resbi <- bpca(yaass[, 1:5], scale = FALSE, method = c("gh"))
colvec <- c("cadetblue", "chartreuse4")[unclass(yaass$Group)]
plot(resbi, main = "YAASS Biplot", obj.color = colvec, var.factor = 3, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
legend("topleft", legend = c("high risk psychosis", "healthy controls"), pch = 20, col = unique(colvec))
resbi
summary(resbi)
help(bpca)
bp <- bpca(gabriel1971)
dev.new(w=6, h=6)
oask <- devAskNewPage(dev.interactive(orNone=TRUE))
plot(bp,
var.factor=2)
plot(resbi, main = "YAASS Biplot", obj.color = colvec, var.factor = 1, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
par(mfrow = c(1,2))
plot(resbi, main = "YAASS Biplot", obj.color = colvec, var.factor = 1, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
plot(resbi, main = "YAASS Biplot", obj.color = colvec, var.factor = 3, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
par(mfrow = c(1,2))
plot(resbi, main = "YAASS Biplot: var.factor = 1", obj.color = colvec, var.factor = 1, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
plot(resbi, main = "YAASS Biplot: var.factor = 3", obj.color = colvec, var.factor = 3, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
legend("topleft", legend = c("high risk psychosis", "healthy controls"), pch = 20, col = unique(colvec))
par(mfrow = c(1,1))
plot(resbi, main = "YAASS Biplot: var.factor = 3", obj.color = colvec, var.factor = 3, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
legend("topleft", legend = c("high risk psychosis", "healthy controls"), pch = 20, col = unique(colvec))
par(mfrow = c(1,2))
plot(resbi, main = "YAASS Biplot: var.factor = 1", obj.color = colvec, var.factor = 1, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
plot(resbi, main = "YAASS Biplot: var.factor = 3", obj.color = colvec, var.factor = 3, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
library(Gifi)
yaass
prc <- Princals(yaass[, 1:5])
library(Gifi)
prc <- Princals(yaass[, 1:5])
summary(prc)
prc <- princals(yaass[, 1:5])
summary(prc)
plot(prc, plot.type = "biplot", main = "Princals Biplot", expand = 0.7, cex.scores = 0.6, col.scores = "gray")
abline(h = 0, v = 0, lty = 2, col = "gray")
par(mfrow = c(1,1))
plot(prc, plot.type = "biplot", main = "Princals Biplot", expand = 0.7, cex.scores = 0.6, col.scores = "gray")
abline(h = 0, v = 0, lty = 2, col = "gray")
plot(prc, plot.type = "biplot", main = "Princals Biplot")
plot(prc, plot.type = "biplot", main = "Princals Biplot", expand = 0.5, cex.scores = 0.6, col.scores = "gray")
abline(h = 0, v = 0, lty = 2, col = "gray")
data("Pashkam", package = "MPsychoR")
str(Pashkam)
psych::describe(Pashkam)
Pashkam
psych::describe(Pashkam$color)
psych::describe(Pashkam$shape)
fitcolor <- mds(Pashkam$color, type = "interval")
fitshape <- mds(Pashkam$shape, type = "interval")
fitcolor
fitshape
plot(fitcolor)
fitcolor <- smacof::mds(Pashkam$color, type = "interval")
par(mfrow = c(1, 2))
plot(fitcolor)
plot(fitshape)
par(mfrow = c(1, 2))
plot(fitcolor, main = "color")
plot(fitshape, main = "shape")
fitproc <- Procrustes(X = fitcolor$conf, Y = fitshape$conf)
fitproc
op <- par(mfrow = c(1,2))
plot(fitcolor, col = "cadetblue", label.conf = list(col = "cadetblue"), main = "Separate MDS Configurations",
ylim = c(-1, 1))
points(fitshape$conf, col = "coral1", pch = 20)
text(fitshape$conf, labels = rownames(fitshape$conf), col = "coral1", cex = 0.8, pos = 3)
legend("bottomright", col = c("cadetblue", "coral"), legend = c("Color Task", "Shape Task"), pch = 19)
plot(fitproc, main = "Procrustes Configuration", ylim = c(-1, 1))
legend("bottomright", col = c("cadetblue", "coral"), legend = c("Color Task", "Shape Task"), pch = 19)
par(op)
op <- par(mfrow = c(1,2))
plot(fitcolor, col = "cadetblue", label.conf = list(col = "cadetblue"), main = "Separate MDS Configurations",  ylim = c(-1, 1))
points(fitshape$conf, col = "coral1", pch = 20)
text(fitshape$conf, labels = rownames(fitshape$conf), col = "coral1", cex = 0.8, pos = 3)
legend("bottomright", col = c("cadetblue", "coral"), legend = c("Color Task", "Shape Task"), pch = 10)
plot(fitproc, main = "Procrustes Configuration", ylim = c(-1, 1))
legend("bottomright", col = c("cadetblue", "coral"), legend = c("Color Task", "Shape Task"), pch = 10)
par(op)
par(mfrow=c(1,1))
op <- par(mfrow = c(1,2))
plot(fitcolor, col = "cadetblue", label.conf = list(col = "cadetblue"), main = "Separate MDS Configurations",  ylim = c(-1, 1))
points(fitshape$conf, col = "coral1", pch = 20)
text(fitshape$conf, labels = rownames(fitshape$conf), col = "coral1", cex = 0.8, pos = 3)
legend("bottomright", col = c("cadetblue", "coral"), legend = c("Color Task", "Shape Task"), pch = 10)
plot(fitproc, main = "Procrustes Configuration", ylim = c(-1, 1))
legend("bottomright", col = c("cadetblue", "coral"), legend = c("Color Task", "Shape Task"), pch = 10)
par(op)
op <- par(mfrow = c(1,2))
plot(fitcolor, col = "cadetblue", label.conf = list(col = "cadetblue"), main = "Separate MDS Configurations",  ylim = c(-1, 1))
points(fitshape$conf, col = "coral1", pch = 20)
text(fitshape$conf, labels = rownames(fitshape$conf), col = "coral1", cex = 0.8, pos = 3)
plot(fitproc, main = "Procrustes Configuration", ylim = c(-1, 1))
op <- par(mfrow = c(1,2))
plot(fitcolor, col = "cadetblue", label.conf = list(col = "cadetblue"), main = "Separate MDS Configurations",  ylim = c(-1, 1))
points(fitshape$conf, col = "coral1", pch = 20)
plot(fitproc, main = "Procrustes Configuration", ylim = c(-1, 1))
fitproc
graphics.off()
setwd("//media//kswada//MyFiles//R//neuralactivity")
packages <- c("dplyr", "MPsychoR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("NeuralActivity", package = "MPsychoR")
str(NeuralActivity)
NeuralActivity
NeuralActivity[1:10]
fitNeuro <- indscal(NeuralActivity[1:10], type = "interval", itmax = 5000)
fitNeuro
fitNeuro <- smacof::indscal(NeuralActivity[1:10], type = "interval", itmax = 5000)
data(NeuralScales, package ="SDMTools")
install.packages("SDMTools", dep=T)
data(NeuralScales, package ="SDMTools")
data(NeuralScales, package ="smacof")
data(NeuralScales, package ="MPsychoR")
cols <- cut(NeuralScales$Social, 5, labels = FALSE)
colpal <- rev(sequential_hcl(5))
pal <- palette(colpal)
plot(fitNeuro, col = cols, label.conf = list(col = cols), main = "Neural Activity Space")
legend.gradient(cbind(x = c(0.85,0.95,0.95,0.85), y = c(-0.9,-0.9,-0.5,-0.5)),
limits = c("low", "high"), cols = colpal, title = "Social", cex = 0.8)
SDMTools::legend.gradient(cbind(x = c(0.85,0.95,0.95,0.85), y = c(-0.9,-0.9,-0.5,-0.5)),
limits = c("low", "high"), cols = colpal, title = "Social", cex = 0.8)
fitNeuro$conf
delta <- Reduce("+", NeuralActivity) / length(NeuralActivity)
delta
help(Reduce)
fit_neural <- smacof::mds(delta, type = "interval")
fit_neural
data("NeuralScales", package = "MPsychoR")
mdsbi <- biplotmds(fit_neural, NeuralScales)
plot(mdsbi, main = "Neural Activity MDS Biplot", col = "gray", label.conf = list(col = "gray"),
vec.conf = list(col = "brown", cex = 1))
X <- fit_neural$conf
Y <- scale(NeuralScales, scale = TRUE)
plot(X, pch = 20, cex = 0.6, xlab = "Dimension 1", ylab = "Dimension 2", col = "darkblue", asp = 1, main = "Biplot MDS Emotion Axis")
text(X, labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calEm <- calibrate(mdsbi$coef[,"Emotion"], Y[,"Emotion"], tm = seq(-2, 1.5, by = 0.5), Fr = X,
dp = TRUE, axiscol = "brown", axislab = "Emotion", labpos = 3, verb = FALSE)
setwd("//media//kswada//MyFiles//R//orange")
packages <- c("dplyr", "MPsychoR", "FactoMinerR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
install.packages("FactoMineR", dep = T)
setwd("//media//kswada//MyFiles//R//orange")
packages <- c("dplyr", "MPsychoR", "FactoMinerR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
packages <- c("dplyr", "MPsychoR", "FactoMineR")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
orange <- read.table("http://factominer.free.fr/book/orange.csv",header=TRUE, sep=";", dec=".", row.names=1)
orange <- read.table("//media//kswada//MyFiles//references//ExploratoryMultivariateAnalysisbyExampleUsingR//orange.csv", header=TRUE, sep=";", dec=",", row.names=1)
summary(orange)
str(orange)
orange <- read.table("//media//kswada//MyFiles//references//ExploratoryMultivariateAnalysisbyExampleUsingR//orange.csv", header=TRUE, sep=";", dec=".", row.names=1)
str(orange)
summary(orange)
psych::describe(orange)
# ----------
psych::pairs.panels(orange)
orange
cor(orange)
cor(orange[,1:7])
psych::pairs.panels(orange[,1:7])
round(cor(orange[,1:7]), digits = 3)
pca_or1 <- prcomp(orange)
pca_or2 <- prcomp(orange, scale = TRUE)
pca_or1 <- prcomp(orange[,1:7])
pca_or2 <- prcomp(orange[,1:7], scale = TRUE)
op <- par(mfrow = c(1,2))
biplot(pca_or1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Unstandardized)", xlim = c(-4, 4), asp = 1, cex.axis = 0.8)
biplot(pca_or2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = "Biplot (Standardized)", asp = 1, cex.axis = 0.8)
layout(1)
par(op)
op <- par(mfrow = c(2,2), mar = c(4, 3, 4, 1))
biplot(pca_or1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Unstandardized, ", alpha, "=0)")), scale = 0, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_or1, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Unstandardized, ", alpha, "=1)")), scale = 1, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_or2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Standardized, ", alpha, "=0)")), scale = 0, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
biplot(pca_or2, pc.biplot = TRUE, cex = c(0.6, 0.8), col = c("gray", "coral1"), arrow.len = 0.05,
main = expression(paste("Biplot (Standardized, ", alpha, "=1)")), scale = 1, cex.axis = 0.8)
abline(h = 0, v = 0, col = "gray", lty = 2)
par(op)
round(cor(orange[,1:7]), 3)
round(apply(orange[,1:7], 2, sd), 3)
X <- pca_or2$x[, 1:2]
# standardize variables
Y <- scale(orange[,1:7])
fitlms <- lm(Y ~ -1 + X)
round(coef(fitlms), 3)
round(t(pca_or2$rotation[,1:2]), 3)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calAE <- calibrate(fitlms$coef[,"AE"], Y[,"AE"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "AE", labpos = 3, verb = FALSE)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calAE <- calibrate(fitlms$coef[,"Sweetness"], Y[,"Sweetness"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "AE", labpos = 3, verb = FALSE)
summary(fitlms)
R2vec <- sapply(summary(fitlms), "[[", "r.squared")
round(R2vec[2], 3)
summary(fitlms)
# Orthogonal projections on Odour.typicality axis
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calAE <- calibrate(fitlms$coef[,"Odour.typicality"], Y[,"Odour.typicality"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "AE", labpos = 3, verb = FALSE)
summary(fitlms)
R2vec <- sapply(summary(fitlms), "[[", "r.squared")
round(R2vec[2], 3)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calAE <- calibrate(fitlms$coef[,"Itensity.of.taste"], Y[,"Itensity.of.taste"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "AE", labpos = 3, verb = FALSE)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calibrate(fitlms$coef[,"Odour.typicality"], Y[,"Odour.typicality"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "Odour.typicality", labpos = 3, verb = FALSE)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calibrate(fitlms$coef[,"Itensity.of.taste"], Y[,"Itensity.of.taste"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "Itensity.of.taste", labpos = 3, verb = FALSE)
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
X
fitlms$coef
plot(X[,1], X[,2], pch = 20, xlab = "PC1", ylab = "PC2", col = "darkblue", asp = 1, main = "Biplot Axis",  xlim = c(-3.2, 3.2))
text(X[,1], X[,2], labels = rownames(X), cex = 0.7, pos = 3, col = "darkblue")
abline(h = 0, v = 0, lty = 2, col = "gray")
calibrate(fitlms$coef[,"Intensity.of.taste"], Y[,"Intensity.of.taste"], tm = seq(-2, 2, by = 0.5), Fr = X, dp = TRUE,
axiscol = "brown", axislab = "Intensity.of.taste", labpos = 3, verb = FALSE)
library(bpca)
resbi <- bpca(orange[, 1:7], scale = FALSE, method = c("gh"))
summary(resbi)
colvec <- c("cadetblue", "chartreuse4")[unclass(yaass$Group)]
plot(resbi, var.factor = 1, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
plot(resbi, var.factor = 3, obj.cex = 0.8, asp = 1, xlim = c(-2, 2), ylim = c(-2, 2))
library(Gifi)
prc <- princals(orange[, 1:7])
summary(prc)
par(mfrow = c(1,1))
# expand = 0.5 to shorten the vectors for better representation
plot(prc, plot.type = "biplot", main = "Princals Biplot", expand = 0.5, cex.scores = 0.6, col.scores = "gray")
abline(h = 0, v = 0, lty = 2, col = "gray")
plot(prc, plot.type = "Shepard")
plot(prc, plot.type = "transplot")
par(mfrow = c(1,1))
plot(prc, plot.type = "transplot")
par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(prc, plot.type = "transplot")
par(mar = c(1,1,1,1))
plot(prc, plot.type = "transplot")
plot(pca_or1, plot.type = "transplot")
psych::descrive(orange)
psych::describe(orange)
res.pca <- PCA(orange, quanti.sup = 8:15, quali.sup = 16:17)
res.pca <- PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
res.pca
res.pca$call
names(res.pca)
res.pca$ind
res.pca$var$cor
plot(res.pca, invisible="quali")
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
summary(res.pca)
res.pca$eig
res.pca$var$cor
res.pca$coord
res.pca$ind$coord
orange["Tropicana amb.",]
orange["Tropicana fr.",]
res.pca$var$cor
plot(res.pca, invisible="quali")
round(res.pca$ind$dist,2)
round(res.pca$ind$contrib[,1:2],2)
round(res.pca$ind$contrib[,1:2],2)
res.pca
round(res.pca$ind$contrib[,1:2],2)
round(res.pca$var$contrib[,1:2],2)
round(res.pca$ind$contrib[,1:2],2)
round(res.pca$var$contrib[,1:2],2)
par(mfrow=c(1,2))
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
plot(res.pca, invisible="quali")
par(mfrow=c(1,2))
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
graphics.off()
par(mfrow=c(1,2))
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
plot(res.pca, invisible="quali")
graphics.off()
par(mfrow=c(1,2))
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
graphics.off()
par(mfrow=c(1,2))
res.pca <- FactoMineR::PCA(orange, quanti.sup = 8:14, quali.sup = 15:16)
res.pca$var$cor
res.pca$eig
round(res.pca$ind$contrib[,1:2],2)
dimdesc(res.pca)
lapply(dimdesc(res.pca),lapply,round,2)
dimdesc(res.pca)
help(dimdesc)
dimdesc(res.pca, axes = 1:2, proba = 0.05)
dimdesc(res.pca, axes = 1, proba = 0.05)
dimdesc(res.pca, axes = 2, proba = 0.05)
