m <- 10
L <- 2 * m + 1
kd <- kernel("daniell", m)
# ----------
u <- Re(rowSums(eq.Pf * Conj(eq.Pf)) / (N - 1))
feq.P <- kernapply(u, kd, circular = TRUE)
u <- Re(rowSums(ex.Pf * Conj(ex.Pf)) / (N - 1))
fex.P <- kernapply(u, kd, circular = TRUE)
# ----------
plot(freq, feq.P[1:512] / fex.P[1:512], type = "l", xlab = "Frequency (Hz)", ylab = "F Statistic", main = "Equal P-Spectra")
# We need to replace (N-1) to L * (N-1) here
( thre <- qf(0.999, 2 * L * (N - 1), 2 * L * (N - 1)) )
abline(h = thre)
# -->
# strong rejection of the euqal spectra hypothesis
N
kd <- kernel("daniell", m)
# ----------
u <- Re(rowSums(eq.Sf * Conj(eq.Sf)) / (N - 1))
feq.S <- kernapply(u, kd, circular = TRUE)
u <- Re(rowSums(ex.Sf * Conj(ex.Sf)) / (N - 1))
fex.S <- kernapply(u, kd, circular = TRUE)
# ----------
plot(freq, feq.S[1:512] / fex.S[1:512], type = "l", xlab = "Frequency (Hz)", ylab = "F Statistic", main = "Equal S-Spectra")
# We need to replace (N-1) to L * (N-1) here
( thre <- qf(0.999, 2 * L * (N - 1), 2 * L * (N - 1)) )
abline(h = thre)
# -->
# strong rejection of the euqal spectra hypothesis.
# the rejection seems stronger for the S components.
# We might tentatively identify that component as being dominant,
n <- length(EQ5[P])
AIC <- rep(0, 40) -> AICc -> BIC
# var.pred:  the prediction variance, an estimate of the portion of the variance of the time series
# that is not explained by the autoregressive model
for(k in 1:40){
# sigma2 <- ar(EQ5[P], order = k, aic = FALSE)$var.pred
sigma2 <- ar(EQ5[S], order = k, aic = FALSE)$var.pred
BIC[k] <- log(sigma2) + (k * log(n) / n)
AICc[k] <- log(sigma2) + ((n + k) / (n - k - 2))
AIC[k] <- log(sigma2) + ((n + 2 * k) / n)
}
# AICc is nearly identical to BIC, so we plot only AIC and BIC
# We added +1 to the BIC to reduce white space in the graphic
IC <- cbind(AIC, BIC + 1)
ts.plot(IC, type =c("o"), xlab = "p", ylab = "AIC / BIC")
graphics.off()
par(mfrow = c(1,2))
# spec.ar() to fit the best model via AIC and plot the resulting spectrum
spaic <- spec.ar(EQ5[P], log = "no")
abline(v = c(0.018, 0.095), lty = 3)
spaic2 <- spec.ar(EQ5[S], log = "no")
abline(v = 0.031, lty = 3)
# ----------
spaic$method
spaic2$method
# -->
# AR(24) spectrum
# AR(18) spectrum
( eqp.ar <- ar(EQ5[P], order.max = 40) )
eqp.ar$aic
plot(1:40, eqp.ar$aic[-1], type = "o")
spaic3 <- spec.ar(EX5[P], log = "no")
spaic4 <- spec.ar(EX5[S], log = "no")
spaic <- spec.ar(EQ5[P], log = "no")
abline(v = c(0.018, 0.095), lty = 3)
spaic2 <- spec.ar(EQ5[S], log = "no")
abline(v = 0.031, lty = 3)
graphics.off()
par(mfrow = c(1,2))
# spec.ar() to fit the best model via AIC and plot the resulting spectrum
spaic <- spec.ar(EQ5[P], log = "no")
abline(v = c(0.018, 0.095), lty = 3)
spaic2 <- spec.ar(EQ5[S], log = "no")
abline(v = 0.031, lty = 3)
spaic3 <- spec.ar(EX5[P], log = "no")
spaic4 <- spec.ar(EX5[S], log = "no")
spaic5 <- spec.ar(NZ[P], log = "no")
spaic6 <- spec.ar(NZ[S], log = "no")
T2 <- rep(NA, 512)
for(k in 1:512){
fvk <- matrix(c(fv11[k], fv21[k], fv12[k], fv22[k]), 2, 2)
dk <- as.matrix(m.diff[k,])
T2[k] <- Re((N/2) * Conj(t(dk)) %*% solve(fvk, dk))
}
# ----------
# The test statistic (eF)
p.dim <- 2
eF <- T2 * (2 * p.dim * (N - 1)) / (2 * N - p.dim - 1)
pts <- 40
freq <- pts * (0:511) / n
# Test statistic and threshold
graphics.off()
par(mfrow=c(1,1), mar = c(3,3,2,1), mgp = c(1.6, 0.6, 0), cex.main = 1.1)
plot(freq, eF, type = "l", xlab = "Frequency(Hz)", ylab = "F Statistic", main = "Equal Means")
abline(h = qf(.999, 2 * p.dim, 2 * (2 * N - p.dim - 1)))
qf(.999, 2 * p.dim, 2 * (2 * N - p.dim - 1))
# -->
# The test statistic (eF) remains well below its critical value at all frequencies,
# implying that the means of the two classes of series are not significantly different.
u <- rowSums(eq.Pf * Conj(eq.Sf)) / (N-1)
feq.PS <- kernapply(u, kd, circular = TRUE)
u <- rowSums(ex.Pf * Conj(ex.Sf)) / (N-1)
fex.PS <- kernapply(u, kd, circular = TRUE)
fv11 <- kernapply(fv11, kd, circular = TRUE)
fv22 <- kernapply(fv22, kd, circular = TRUE)
fv12 <- kernapply(fv12, kd, circular = TRUE)
# ----------
# A modification of the likelihood ratio test incorporates the degrees of freedom as;
Mi <- L * (N - 1)
M <- 2 * Mi
# TS: test statistics
TS <- rep(NA, 512)
for(k in 1:512){
det.feq.k <- Re(feq.P[k] * feq.S[k] - feq.PS[k] * Conj(feq.PS[k]))
det.fex.k <- Re(fex.P[k] * fex.S[k] - fex.PS[k] * Conj(fex.PS[k]))
det.fv.k <- Re(fv11[k] * fv22[k] - fv12[k] * Conj(fv12[k]))
log.n1 <- log(M) * (M * p.dim)
log.d1 <- log(Mi) * (2 * Mi * p.dim)
log.n2 <- log(Mi) * 2 + log(det.feq.k) * Mi + log(det.fex.k) * Mi
log.d2 <- (log(M) + log(det.fv.k)) * M
r <- 1 - ((p.dim + 1) * (p.dim - 1) / 6 * p.dim * (2-1)) * (2/Mi - 1/M)
TS[k] <- -2 * r * (log.n1 + log.n2 - log.d1 - log.d2)
}
plot(freq, TS, type = "l", xlab = "Frequency (Hz)", ylab = "Chi-sq Statistic", main = "Equal Spectral Matrices")
( thresh <- qchisq(.999, p.dim ^ 2) )
abline(h = thresh)
mag.P <- log10(apply(eqexp[P,], 2, max) - apply(eqexp[P,], 2, min))
mag.S <- log10(apply(eqexp[S,], 2, max) - apply(eqexp[S,], 2, min))
eq.P <- mag.P[1:8]
eq.S <- mag.S[1:8]
ex.P <- mag.P[9:16]
ex.S <- mag.S[9:16]
NZ.P <- mag.P[17]
NZ.S <- mag.S[17]
# ------------------------------------------------------------------------------
# Compute linear discriminant function
# ------------------------------------------------------------------------------
( cov.eq <- var(cbind(eq.P, eq.S)) )
( cov.ex <- var(cbind(ex.P, ex.S)) )
# covariance matrices are assumed to be equal
( cov.pooled <- (cov.ex + cov.eq)/2 )
means.eq <- colMeans(cbind(eq.P, eq.S))
means.ex <- colMeans(cbind(ex.P, ex.S))
slopes.eq <- solve(cov.pooled, means.eq)
inter.eq <- -sum(slopes.eq * means.eq)/2
slopes.ex <- solve(cov.pooled, means.ex)
inter.ex <- -sum(slopes.ex * means.ex)/2
# ----------
d.slopes <- slopes.eq - slopes.ex
d.inter <- inter.eq - inter.ex
# ----------
# print functions
cat(d.slopes[1], "mag.P + ", d.slopes[2], "mag.S +", d.inter, "\n")
new.data <- cbind(NZ.P, NZ.S)
d <- sum(d.slopes * new.data) + d.inter
( post.eq <- exp(d) / (1 + exp(d)) )
# print(disc function, posteriors) and plot results
graphics.off()
par(mfrow=c(1,1))
cat(d.slopes[1], "mag.P + ", d.slopes[2], "mag.S +", d.inter, "\n")
cat("P(EQ|data) = ", post.eq, "  P(EX|data) = ", 1 - post.eq, "\n")
plot(eq.P, eq.S, xlim = c(0, 1.5), ylim = c(0.75, 1.25), xlab = "log mag(P)", ylab = "log mag(S)", pch = 8, cex = 1.1, lwd = 2, main = "Classification Based on Magnitude Features")
points(ex.P, ex.S, pch = 6, cex = 1.1, lwd = 2)
points(new.data, pch = 3, cex = 1.1, lwd = 2)
abline(a = -d.inter/d.slopes[2], b = -d.slopes[1]/d.slopes[2])
text(eq.P - 0.07, eq.S + 0.005, label = names(eqexp[1:8]), cex = 0.8)
text(ex.P + 0.07, ex.S + 0.003, label = names(eqexp[9:16]), cex = 0.8)
text(NZ.P + 0.05, NZ.S + 0.003, label = names(eqexp[17]), cex = 0.8)
legend("topright", c("EQ", "EX", "NZ"), pch = c(8,6,3), pt.lwd = 2, cex = 1.1)
all.data <- rbind(cbind(eq.P, eq.S), cbind(ex.P, ex.S))
post.eq <- rep(NA, 8) -> post.ex
for(j in 1:16){
if(j <= 8){ samp.eq = all.data[-c(j, 9:16),];  samp.ex = all.data[9:16,] }
if(j > 8){ samp.eq = all.data[1:8,];  samp.ex = all.data[-c(j, 1:8),] }
df.eq <- nrow(samp.eq) - 1
df.ex <- nrow(samp.ex) - 1
mean.eq <- colMeans(samp.eq)
mean.ex <- colMeans(samp.ex)
cov.eq <- var(samp.eq)
cov.ex <- var(samp.ex)
cov.pooled <- (df.eq * cov.eq + df.ex * cov.ex) / (df.eq + df.ex)
slopes.eq <- solve(cov.pooled, mean.eq)
inter.eq <- -sum(slopes.eq * mean.eq)/2
slopes.ex <- solve(cov.pooled, mean.ex)
inter.ex <- -sum(slopes.ex * mean.ex)/2
d.slopes <- slopes.eq - slopes.ex
d.inter <- inter.eq - inter.ex
d <- sum(d.slopes * all.data[j,]) + d.inter
if(j <= 8) post.eq[j] <- exp(d) / (1 + exp(d))
if(j > 8) post.ex[j - 8] <- 1 / ( 1 + exp(d) )
}
# ----------
Posterior <- cbind(1:8, post.eq, 1:8, post.ex)
colnames(Posterior) <- c("EQ", "P(EQ|data)", "EX", "P(EX|data)")
# Results from Cross-validation
round(Posterior, 3)
# -->
# The jackknifed posterior probabilities of being an earthquake for the earthquake group ranged from 0.621 to 1.000,
# where as the explosion probabilities for the explosion group ranged from 0.717 to 1.000
# The unknown event, NZ, is classified as an explosion, with posterior probability 0.960.
eq = as.ts(eqexp[,1:8])
ex = as.ts(eqexp[,9:16])
nz = as.ts(eqexp[,17])
f.eq <- array(dim=c(8,2,2,512)) -> f.ex
f.NZ = array(dim=c(2,2,512))
# ----------
# below calculates determinant for 2x2 Hermitian matrix
L = c(15,13,5)  # for smoothing
for (i in 1:8){     # compute spectral matrices
f.eq[i,,,] = mvspec(cbind(eq[P,i], eq[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
f.ex[i,,,] = mvspec(cbind(ex[P,i], ex[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
}
u = mvspec(cbind(nz[P],nz[S]), spans=L, taper=.5)
f.NZ = u$fxx
bndwidth = u$bandwidth * 40  # about .75 Hz
# ----------
# average spectra
fhat.eq = apply(f.eq, 2:4, mean)
fhat.ex = apply(f.ex, 2:4, mean)
# ----------
# plot the average spectra
par(mfrow=c(2,2), mar=c(3,3,2,1),  mgp = c(1.6,.6,0))
Fr = 40 * (1:512) / n
plot(Fr, Re(fhat.eq[1,1,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.eq[2,2,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.ex[1,1,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.ex[2,2,]), type="l", xlab="Frequency (Hz)", ylab="")
mtext("Average P-spectra", side=3, line=-1.5, adj=.2, outer=TRUE)
mtext("Earthquakes", side=2, line=-1, adj=.8,  outer=TRUE)
mtext("Average S-spectra", side=3, line=-1.5, adj=.82, outer=TRUE)
mtext("Explosions", side=2, line=-1, adj=.2, outer=TRUE)
par(fig = c(.75, 1, .75, 1), new = TRUE)
ker = kernel("modified.daniell", L)$coef
ker = c(rev(ker), ker[-1])
plot((-33:33)/40, ker,type="l", ylab="", xlab="", cex.axis=.7, yaxp=c(0,.04,2))
eq = as.ts(eqexp[,1:8])
ex = as.ts(eqexp[,9:16])
nz = as.ts(eqexp[,17])
f.eq <- array(dim=c(8,2,2,512)) -> f.ex
f.NZ = array(dim=c(2,2,512))
# ----------
# below calculates determinant for 2x2 Hermitian matrix
L = c(15,13,5)  # for smoothing
for (i in 1:8){     # compute spectral matrices
f.eq[i,,,] = mvspec(cbind(eq[P,i], eq[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
f.ex[i,,,] = mvspec(cbind(ex[P,i], ex[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
}
u = mvspec(cbind(nz[P],nz[S]), spans=L, taper=.5)
f.NZ = u$fxx
bndwidth = u$bandwidth * 40  # about .75 Hz
# ----------
# average spectra
fhat.eq = apply(f.eq, 2:4, mean)
fhat.ex = apply(f.ex, 2:4, mean)
# ----------
# plot the average spectra
par(mfrow=c(2,2), mar=c(3,3,2,1),  mgp = c(1.6,.6,0))
Fr = 40 * (1:512) / n
plot(Fr, Re(fhat.eq[1,1,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.eq[2,2,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.ex[1,1,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.ex[2,2,]), type="l", xlab="Frequency (Hz)", ylab="")
mtext("Average P-spectra", side=3, line=-1.5, adj=.2, outer=TRUE)
mtext("Earthquakes", side=2, line=-1, adj=.8,  outer=TRUE)
mtext("Average S-spectra", side=3, line=-1.5, adj=.82, outer=TRUE)
mtext("Explosions", side=2, line=-1, adj=.2, outer=TRUE)
par(fig = c(.75, 1, .75, 1), new = TRUE)
ker = kernel("modified.daniell", L)$coef
ker = c(rev(ker), ker[-1])
plot((-33:33)/40, ker,type="l", ylab="", xlab="", cex.axis=.7, yaxp=c(0,.04,2))
eq = as.ts(eqexp[,1:8])
ex = as.ts(eqexp[,9:16])
nz = as.ts(eqexp[,17])
f.eq <- array(dim=c(8,2,2,512)) -> f.ex
f.NZ = array(dim=c(2,2,512))
L = c(15,13,5)  # for smoothing
for (i in 1:8){     # compute spectral matrices
f.eq[i,,,] = mvspec(cbind(eq[P,i], eq[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
f.ex[i,,,] = mvspec(cbind(ex[P,i], ex[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
}
u = mvspec(cbind(nz[P],nz[S]), spans=L, taper=.5)
f.NZ = u$fxx
bndwidth = u$bandwidth * 40  # about .75 Hz
library(astsa)
L = c(15,13,5)  # for smoothing
for (i in 1:8){     # compute spectral matrices
f.eq[i,,,] = mvspec(cbind(eq[P,i], eq[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
f.ex[i,,,] = mvspec(cbind(ex[P,i], ex[S,i]), spans = L, taper = .5, plot = FALSE)$fxx
}
u = mvspec(cbind(nz[P],nz[S]), spans=L, taper=.5)
f.NZ = u$fxx
bndwidth = u$bandwidth * 40  # about .75 Hz
fhat.eq = apply(f.eq, 2:4, mean)
fhat.ex = apply(f.ex, 2:4, mean)
par(mfrow=c(2,2), mar=c(3,3,2,1),  mgp = c(1.6,.6,0))
Fr = 40 * (1:512) / n
plot(Fr, Re(fhat.eq[1,1,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.eq[2,2,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.ex[1,1,]), type="l", xlab="Frequency (Hz)", ylab="")
plot(Fr, Re(fhat.ex[2,2,]), type="l", xlab="Frequency (Hz)", ylab="")
mtext("Average P-spectra", side=3, line=-1.5, adj=.2, outer=TRUE)
mtext("Earthquakes", side=2, line=-1, adj=.8,  outer=TRUE)
mtext("Average S-spectra", side=3, line=-1.5, adj=.82, outer=TRUE)
mtext("Explosions", side=2, line=-1, adj=.2, outer=TRUE)
par(fig = c(.75, 1, .75, 1), new = TRUE)
ker = kernel("modified.daniell", L)$coef
ker = c(rev(ker), ker[-1])
plot((-33:33)/40, ker,type="l", ylab="", xlab="", cex.axis=.7, yaxp=c(0,.04,2))
det.c = function(mat){return(Re(mat[1,1] * mat[2,2] - mat[1,2] * mat[2,1]))}
# folding frequency is 20Hz
Balpha = rep(0,19)
for(i in 1:19){
alf = i / 20
for(k in 1:256) {    # only use freqs out to .25
Balpha[i]= Balpha[i] + Re(log(det.c(alf * fhat.ex[,,k] + (1 - alf) * fhat.eq[,,k]) / det.c(fhat.eq[,,k])) -
alf * log(det.c(fhat.ex[,,k]) / det.c(fhat.eq[,,k])))
}
}
# ----------
par(mfrow = c(1,1))
plot(Balpha, type = "l")
# For the case of 2 groups, alpha should be chosen to maximize the disparity between the two group spectra
( alf = which.max(Balpha) / 20 )
# -->
# The maximum value of the estimated Chernoff disparity occurs for alpha = 0.4
# and we use that value in the dicriminant criterion.
det.c = function(mat){return(Re(mat[1,1] * mat[2,2] - mat[1,2] * mat[2,1]))}
# folding frequency is 20Hz
Balpha = rep(0,19)
for(i in 1:19){
alf = i / 20
for(k in 1:256) {    # only use freqs out to .25
Balpha[i]= Balpha[i] + Re(log(det.c(alf * fhat.ex[,,k] + (1 - alf) * fhat.eq[,,k]) / det.c(fhat.eq[,,k])) -
alf * log(det.c(fhat.ex[,,k]) / det.c(fhat.eq[,,k])))
}
}
# ----------
par(mfrow = c(1,1))
plot(Balpha, type = "l")
rep(0,17) -> KLDiff -> BDiff -> KLeq -> KLex -> Beq -> Bex
for (i in 1:17){
if (i <= 8) f0 = f.eq[i,,,]
if (i > 8 & i <= 16) f0 = f.ex[i-8,,,]
if (i == 17) f0 = f.NZ
for (k in 1:256) {    # only use freqs out to .25
tr = Re(sum(diag(solve(fhat.eq[,,k],f0[,,k]))))
KLeq[i] = KLeq[i] + tr + log(det.c(fhat.eq[,,k])) - log(det.c(f0[,,k]))
Beq[i] =  Beq[i] + Re(log(det.c(alf * f0[,,k] + (1 - alf) * fhat.eq[,,k]) / det.c(fhat.eq[,,k])) -
alf * log(det.c(f0[,,k]) / det.c(fhat.eq[,,k])))
tr = Re(sum(diag(solve(fhat.ex[,,k], f0[,,k]))))
KLex[i] = KLex[i] + tr +  log(det.c(fhat.ex[,,k])) - log(det.c(f0[,,k]))
Bex[i] = Bex[i] + Re(log(det.c(alf * f0[,,k] + (1 - alf) * fhat.ex[,,k]) / det.c(fhat.ex[,,k])) -
alf * log(det.c(f0[,,k]) / det.c(fhat.ex[,,k])))
}
KLDiff[i] = (KLeq[i] - KLex[i]) / n
BDiff[i] =  (Beq[i] - Bex[i]) / (2 * n)
}
x.b = max(KLDiff) + .1; x.a = min(KLDiff) - .1
y.b = max(BDiff) + .01; y.a = min(BDiff) - .01
# ------------------------------------------------------------------------------
# plot Chernoff Differences vs. KL Differences
# ------------------------------------------------------------------------------
# The NZ event of unknown origin is classified as an explosion
par(mfrow=c(1,1))
plot(KLDiff[9:16], BDiff[9:16], type="p", xlim=c(x.a,x.b), ylim=c(y.a,y.b), cex=1.1, lwd=2,
xlab="Kullback-Leibler Difference",ylab="Chernoff Difference", main="Classification
Based on Chernoff and K-L Distances", pch=6)
points(KLDiff[1:8], BDiff[1:8], pch=8, cex=1.1, lwd=2)
points(KLDiff[17], BDiff[17],  pch=3, cex=1.1, lwd=2)
legend("topleft", legend=c("EQ", "EX", "NZ"), pch=c(8,6,3), pt.lwd=2)
abline(h=0, v=0, lty=2, col="gray")
text(KLDiff[-c(1,2,3,7,14)]-.075, BDiff[-c(1,2,3,7,14)], label=names(eqexp[-c(1,2,3,7,14)]), cex=.7)
text(KLDiff[c(1,2,3,7,14)]+.075, BDiff[c(1,2,3,7,14)], label=names(eqexp[c(1,2,3,7,14)]), cex=.7)
eq = as.ts(eqexp[,1:8])
ex = as.ts(eqexp[,9:16])
nz = as.ts(eqexp[,17])
f = array(dim=c(17,2,2,512))
L = c(15,15)   # for smoothing
for (i in 1:8){     # compute spectral matrices
f[i,,,] = mvspec(cbind(eq[P,i],eq[S,i]), spans=L, taper=.5, plot=FALSE)$fxx
f[i+8,,,] = mvspec(cbind(ex[P,i],ex[S,i]), spans=L, taper=.5, plot=FALSE)$fxx
}
f[17,,,] = mvspec(cbind(nz[P],nz[S]), spans=L, taper=.5, plot=FALSE)$fxx
# ----------
# calculate symmetric information criteria
# JD; quasi-distance between samples series with estimated spectral matrices based on J-Divergence
JD = matrix(0,17,17)
for (i in 1:16){
for (j in (i+1):17){
for (k in 1:256) {    # only use freqs out to .25
tr1 = Re(sum(diag(solve(f[i,,,k], f[j,,,k]))))
tr2 = Re(sum(diag(solve(f[j,,,k], f[i,,,k]))))
JD[i,j] = JD[i,j] + (tr1 + tr2 - 2*p.dim)
}
}
}
JD = (JD + t(JD))/n
colnames(JD) = c(colnames(eq), colnames(ex), "NZ")
rownames(JD) = colnames(JD)
library(cluster)
# PAM is essentially a robustification of the k-means procedure, under the assumption that two groups are appropriate.
cluster.2 = pam(JD, k = 2, diss = TRUE)
summary(cluster.2)
par(mgp = c(1.6,.6,0), cex=3/4, cex.lab=4/3, cex.main=4/3)
clusplot(JD, cluster.2$cluster, col.clus=1, labels=3, lines=0, col.p=1,
main="Clustering Results for Explosions and Earthquakes")
text(-7,-.5, "Group I", cex=1.1, font=2)
text(1, 5, "Group II", cex=1.1, font=2)
JD
cluster.2 = pam(JD, k = 2, diss = TRUE)
summary(cluster.2)
plot(cluster.2)
par(mgp = c(1.6,.6,0), cex=3/4, cex.lab=4/3, cex.main=4/3)
clusplot(JD, cluster.2$cluster, col.clus=1, labels=3, lines=0, col.p=1,
main="Clustering Results for Explosions and Earthquakes")
text(-7,-.5, "Group I", cex=1.1, font=2)
text(1, 5, "Group II", cex=1.1, font=2)
plot(JD)
help(clusplot)
JD
P <- 1:1024
S <- P + 1024
x <- cbind(EQ5[P], EQ6[P], EX5[P], EX6[P], NZ[P], EQ5[S], EQ6[S], EX5[S], EX6[S], NZ[S])
x.name <- c("EQ5-P", "EQ6-P", "EX5-P", "EX6-P", "NZ-P", "EQ5-S", "EQ6-S", "EX5-S", "EX6-S", "NZ-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
# -->
# Various bivariate earthquakes (EQ) and explosions (EX) recorded at 40 pts/s
# compared with an even NZ (Novaya Zemlya) of unknown origin.
# Compressional waves, also known as primary or P waves, travel fastest in the Earth's crust and are first to arrive.
# Shear waves propagate more slowly through the Earth and arrive second, hence they are called secondary or S waves.
# By seeing time series plot,
# Wave of NZ-P and NZ-S are resembled to explosion
# ----------
apply(x, MARGIN = 2, FUN = forecast::ndiffs)
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EQ1[S], EQ2[S}, EX1[S], EX3[S])
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EQ1[S], EQ2[S}, EX1[S], EX3[S])
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EQ1[S], EQ2[S], EX1[S], EX3[S])
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S")
colnames(x) <- x.name
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
x <- cbind(NZ[P], EX4[P], EX5[P], EX6[P], NZ[S], EX4[S], EX5[S], EX6[S])
x.name <- c("NZ-P", "EX4-P", "EX5-P", "EX6-P", "NZ-S", "EX4-S", "EX5-S", "EX6-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EX8[P], EQ1[S], EQ2[S], EX1[S], EX3[S], EX[8])
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EX8-S", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S", "EX8-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EX8[P], EQ1[S], EQ2[S], EX1[S], EX3[S], EX[8])
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EX8-S", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S", "EX8-S")
colnames(x) <- x.name
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EX8-P", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S", "EX8-S")
colnames(x) <- x.name
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EX8[P], EQ1[S], EQ2[S], EX1[S], EX3[S], EX[8])
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EX8-P", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S", "EX8-S")
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EX8[P], EQ1[S], EQ2[S], EX1[S], EX3[S], EX[8])
x <- cbind(EQ1[P], EQ2[P], EX1[P], EX3[P], EX8[P], EQ1[S], EQ2[S], EX1[S], EX3[S], EX8[S])
x.name <- c("EQ1-P", "EQ2-P", "EX1-P", "EX3-P", "EX8-P", "EQ1-S", "EQ2-S", "EX1-S", "EX3-S", "EX8-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
x <- cbind(EQ4[P], EQ6[P], EX1[P], EX3[P], EX8[P], EQ4[S], EQ6[S], EX1[S], EX3[S], EX8[S])
x.name <- c("EQ4-P", "EQ6-P", "EX1-P", "EX3-P", "EX8-P", "EQ4-S", "EQ6-S", "EX1-S", "EX3-S", "EX8-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
x <- cbind(NZ[P], EX4[P], EX5[P], EX6[P], NZ[S], EX4[S], EX5[S], EX6[S])
x.name <- c("NZ-P", "EX4-P", "EX5-P", "EX6-P", "NZ-S", "EX4-S", "EX5-S", "EX6-S")
colnames(x) <- x.name
# ----------
graphics.off()
par(mfrow = c(1,1))
plot.ts(x, main = "")
mtext("P waves", side = 3, line = 1.2, adj = 0.05, cex = 1.2)
mtext("S waves", side = 3, line = 1.2, adj = 0.85, cex = 1.2)
