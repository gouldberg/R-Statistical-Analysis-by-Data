me3 <- gamlss(cbind(d, n - d) ~ fac + re(fixed = ~fac, random = list(study = pdSymm(~fac))), family = BI, data = meta)
me4 <- gamlss(cbind(d, n - d) ~ fac + re(fixed = ~fac, random = list(study = pdIdent(~fac))), family = BI, data = meta)
me5 <- gamlss(cbind(d, n - d) ~ fac + re(fixed = ~fac, random = list(study = pdDiag(~fact))), family = BI, data = meta)
me5 <- gamlss(cbind(d, n - d) ~ fac + re(fixed = ~fac, random = list(study = pdDiag(~fac))), family = BI, data = meta)
me6 <- gamlss(cbind(d, n - d) ~ fac + re(fixed = ~fac, random = list(study = pdDiag(~fac))), family = BB, data = meta)
GAIC(me2, me3, me4, me5, me6)
GAIC(me2, me3, me4, me5, me6, k = log(length(meta)))
GAIC(me1, me2, me3, me4, me5, me6, k = log(length(meta)))
AIC(me1, me2, me3, me4, me5, me6)
plot(me2)
plot(me5)
plot(me2)
wp(me2)
wp(me5)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//hodges")
packages <- c("dplyr", "gamlss")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  hodges
# ------------------------------------------------------------------------------
data("hodges", package = "gamlss.data")
str(hodges)
car::some(hodges)
# null model (only the constant)
m0 <- gamlss(prind ~ 1, data = hodges)
# main effect model
m1 <- gamlss(prind = state, data = hodges)
m0 <- gamlss(prind ~ 1, data = hodges)
m1 <- gamlss(prind ~ state, data = hodges)
summary(m0)
summary(m1)
plot(prind ~ unclass(state), data = hodges, pch  =3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
lines(fitted(m0))
plot(prind ~ unclass(state), data = hodges, pch  =3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
lines(fitted(m0))
plot(prind ~ state, data = hodges, pch  =3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
lines(fitted(m0))
plot(m1)
plot(m0)
plot(m1)
wp(m1)
m2 <- gamlss(prind ~ random(state), data = hodges, trace = FALSE)
m3 <- gamlss(prind ~ re(random = ~1 | state), data = hodges, trace = FALSE)
# ----------
AIC(m2, m3)
getSmo(m2)
getSmo(m3)
m31 <- gamlss(prind ~ re(random = ~1 | state, method = "REML"), data = hodges, trace = FALSE)
AIC(m2, m3, m31)
getSmo(m31)
getSmo(m2)
plot(m2)
m3 <- gamlss(prind ~ re(random = ~1 | state), data = hodges, trace = FALSE)
getSmo(m3)
plot(m3)
getSmo(m31)
plot(m31)
AIC(m2, m3, m31)
getSmo(m3)
plot(prind ~ unclass(state), data = hodges, pch = 3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m2) ~ unclass(state), data = hodges, pch = 4, col = "blue")
points(fitted(m3) ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
plot(prind ~ unclass(state), data = hodges, pch = 3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m2) ~ unclass(state), data = hodges, pch = 4, col = "blue")
points(fitted(m3) ~ unclass(state), data = hodges, pch = 6, col = "blue")
plot(prind ~ unclass(state), data = hodges, pch = 3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m2) ~ unclass(state), data = hodges, pch = 4, col = "blue")
points(fitted(m3) ~ unclass(state), data = hodges, pch = 6, col = "green")
points(fitted(m31) ~ unclass(state), data = hodges, pch = 7, col = "orange")
lines(fitted(m0), lty = 2, col = "gray")
plot(prind ~ unclass(state), data = hodges, pch = 3)
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m2) ~ unclass(state), data = hodges, pch = 4, col = "blue")
points(fitted(m3) ~ unclass(state), data = hodges, pch = 6, col = "green")
points(fitted(m31) ~ unclass(state), data = hodges, pch = 6, col = "green")
points(fitted(m31) ~ unclass(state), data = hodges, pch = 6, col = "red")
getSmo(m2)
getSmo(m3)
summary(m3)
summary(m2)
summary(m3)
summary(m31)
AIC(m2, m3, m31)
getSmo(m2)$sigb
getSmo(m3)
names(getSmo(m3))
getSigmab(getSmo(m3))
getSigmab <- function(obj){
vc <- VarCorr(obj)
suppressWarnings(storage.mode(vc) <- "numeric")
vc[1:2, "StdDev"][1]
}
names(getSmo(m3))
getSigmab(getSmo(m3))
getSmo(m3)$sigma
getSmo(m2)$sigb
getSigmab(getSmo(m3))
getSigmab(getSmo(m31))
getSmo(m2)$sige
getSmo(m3)$sigma
getSmo(m31)$sigma
term.plot(m2, what = "sige")
getSmo(m2)
l1 <- lme(prind ~ 1, data = hodges, random = ~1 | state)
# ML
l2 <- lme(prind ~ 1, data = hodges, random = ~1 | state, method = "ML")
plot(l1)
plot(l2)
summary(l1)
getSmo(m2)$sigb
getSigmab(getSmo(m3))
getSigmab(getSmo(m31))
getSigmab(l1)
getSigmab(l2)
getSmo(m2)$sigb
getSigmab(getSmo(m3))
getSigmab(l2)
getSigmab(getSmo(m31))
getSigmab(l1)
l1$sigma
getSmo(m3)$sigma
l1$sigma
getSmo(m31)$sigma
l2$sigma
getSmo(m2)$sige
getSmo(m3)$sigma
l1$sigma
getSmo(m31)$sigma
l2$sigma
names(l1)
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1] * getSmo(m2)$sige
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1] * getSmo(m2)$sige
l1$sigma
l2$sigma
fitted(m2, "sigma")[1]
l1$sigma
fitted(m3, "sigma")[1] * getSmo(m2)$sige
fitted(m3, "sigma")[1]
fitted(m3, "sigma")[1]
fitted(m3, "sigma")[1] * getSmo(m3)$sige
fitted(m3, "sigma")[1] * getSmo(m3)$sige
fitted(m3, "sigma")[1]
l1$sigma
fitted(m2, "sigma")[1] * getSmo(m2)$sige
l2$sigma
getSmo(m2)$sige
fitted(m2, "sigma")[1] * getSmo(m2)$sige
l2$sigma
# adjusted estimate of sigma_e
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1] * getSmo(m2)$sige
l2$sigma
fitted(m3, "sigma")[1]
fitted(m3, "sigma")[1]
l1$sigma
fitted(m3, "sigma")[1] * getSmo(m3)$sigma
l1$sigma
getSmo(m3)$sigma
fitted(m3, "sigma")
fitted(m3, "sigma")[1]
getSmo(m3)$sigma
fitted(m3, "sigma")[1] * getSmo(m3)$sigma
fitted(m3, "sigma")[1]
fitted(m3, "sigma")[1] * getSmo(m3)$sigma
l1$sigma
fitted(m2, "sigma")[1]
fitted(m2, "sigma")[1] * getSmo(m2)$sige
l2$sigma
fitted(m3, "sigma")[1]
fitted(m3, "sigma")[1] * getSmo(m3)$sigma
names(l1)
pred(l1)
predict(l1)
predict(l1, level = 0)
plot(prind ~ unclass(state), data = hodges, pch = 3)
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "red")
plot(prind ~ unclass(state), data = hodges, pch = ".")
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 1)
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2)
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(70))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l2, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "blue")
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(l1, level = 0) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l2, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
# marginal
points(fitted(l1, level = 0) ~ unclass(state), data = hodges, pch = 5, col = "red")
# conditional
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(m1) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m3) ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
mean(hodges$prind)
fitted(m0)[1]
fitted(l1, level = 0)[1]
fitted(l2, level = 0)[1]
fitted(l1, level = 0)[1]
fitted(l2, level = 0)[1]
fitted(l1, level = 0)
fitted(l1, level = 0)[1]
fitted(l2, level = 0)[1]
res <- with(hodges, prind) - fitted(m2)
plot(resid(l2) ~ res)
# Marginal data-fitted
res <- with(hodges, prind) - fitted(m0)
plot(resid(l2, level = 0) ~ res)
# Conditional data-BLUP
res <- with(hodges, prind) - fitted(m2)
plot(resid(l2, level = 1) ~ res)
r1 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 1), sigma = l2$sigma))
head(r1)
head(resid(l2, type = "p"))
plot(resid(m3) ~ r1)
plot(resid(m3))
plot(resid(m3))
plot(resid(l2))
graphics.off()
par(mrfow=c(2,1))
plot(resid(m3))
plot(resid(l1))
graphics.off()
par(mfrow=c(2,1))
plot(resid(m3))
plot(resid(l1))
graphics.off()
par(mfrow=c(2,1))
plot(resid(m3))
plot(resid(l1, level = 1))
graphics.off()
par(mfrow=c(2,1))
plot(resid(m3))
plot(resid(l2, level = 1))
graphics.off()
par(mfrow=c(3,1), mar = c(1,1,1,1))
plot(resid(m3))
plot(resid(l2, level = 1))
plot(resid(l2, level = 1, type = "p"))
graphics.off()
par(mfrow=c(3,1), mar = c(2,2,2,2))
plot(resid(m3))
plot(resid(l2, level = 1))
plot(resid(l2, level = 1, type = "p"))
res <- with(hodges, prind) - fitted(m3)
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
# gamlss() residuals are the normalized quantile residuals, which for a normal distribution with constant variance sigma^2 are the standardized residuals
plot(resid(m3))
# gamlss() models have anormal distribution with constant variancve var(mu-hat) = 1, so the Pearson's residuals are y - y-hat
res <- with(hodges, prind) - fitted(m3)
plot(res)
# lme() residuals
plot(resid(l2, level = 1))
# lme() residuals also have the option to produce the Pearson residuals = ( y - y-hat ) / sqrt(var(mu-hat))
plot(resid(l2, level = 1, type = "p"))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
# gamlss() residuals are the normalized quantile residuals, which for a normal distribution with constant variance sigma^2 are the standardized residuals
plot(resid(m3))
# gamlss() models have anormal distribution with constant variancve var(mu-hat) = 1, so the Pearson's residuals are y - y-hat
res <- with(hodges, prind) - fitted(m3)
plot(res)
# lme() residuals
plot(resid(l2, level = 1))
r1 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 1), sigma = l2$sigma))
plot(resid(l2, level = 1, type = "p") ~ r1)
graphics.off()
par(mfrow=c(1,2), mar = c(2,2,2,2))
r1 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 1), sigma = l2$sigma))
plot(resid(l2, level = 1, type = "p") ~ r1)
plot(resid(m3) ~ r1)
graphics.off()
par(mfrow=c(1,1))
r0 <- qNO(pNO(with(hodges, prind), mu = fitted(l2, level = 0), sigma = l2$sigma))
plot(resid(l2, level = 0, type = "p") ~ r0)
summary(getSmo(md))
summary(getSmo(m3))
plot(getSmo(m3))
ranef(getSmo(m3))
# fitted coefficients
coef(getSmo(m3))
intervals(getSmo(m3))
anova(getSmo(m3))
library(gamlss.mix)
library(gamlss.mx)
library(gamlss.mx)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "np", random = ~1 | state, data = hodges, trace = FALSE)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "np", random = ~1 | state, data = hodges, trace = FALSE)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "np", random = ~1 | state, data = hodges)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "np", random = ~1 | state, data = hodges)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "np", random = ~1 | state, data = hodges)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "np", random = ~1 | state, data = hodges)
mnp10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gp", random = ~1 | state, data = hodges)
mnp20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gp", random = ~1 | state, data = hodges)
mgq10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gq", random = ~1 | state, data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gq", random = ~1 | state, data = hodges)
mgq10
mgq20
mgq10
mgq20
getSmo(mgq10)
names(mgq10)
mgq10$parameters
mgq10$sigma.coefficients
help(gamlssNP)
getSigmab(getSmo(mgq10))
# Fitting a normal random intercept for mu with K = 10, 20, using Gaussian quadrature
mgq10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gq", random = ~1 | state, data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gq", random = ~1 | state, data = hodges)
# ----------
mgq10
mgq20
mgq10
getSigmab(getSmo(mgq10))
getSmo(mgq10)
mgq10$mu.coefficients
mgq10$mu.coefficients[2]
mgq20$mu.coefficients[2]
getSigmab(l1)
getSigmab(l1)
getSigmab(l2)
mgq10$mu.coefficients[2]
mgq20$mu.coefficients[2]
l1$sigma
l2$sigma
fitted(mgq10, "sigma")
mgq10$sigma.coefficients
mgq20$sigma.coefficients
names(mgq10)
summary(mgq10)
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
# gamlss() residuals are the normalized quantile residuals, which for a normal distribution with constant variance sigma^2 are the standardized residuals
plot(resid(mgq10))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mgq10))
plot(resid(mgq20))
# lme() residuals
plot(resid(l2, level = 1))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mgq10))
plot(resid(mgq20))
# lme() residuals
plot(resid(l2, level = 1))
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mgq10))
plot(resid(mgq20))
plot(resid(l2, level = 1, type = "p"))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(mgq20) ~ unclass(state), data = hodges, pch = 5, col = "blue")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(mgq20) ~ unclass(state), data = hodges, pch = 5, col = "blue")
points(fitted(mgq10, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "red")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(fitted(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
fitted(mgq10)
points(fitted(mgq10, level=2) ~ unclass(state), data = hodges, pch = 5, col = "red")
mgq10 <- gamlssNP(prind ~ 1, K = 10, mixture = "gq", random = ~1 | state, data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, mixture = "gq", random = ~1 | state, data = hodges)
mgq10 <- gamlssNP(prind ~ 1, K = 10, random = ~1 | state, mixture = "gq", data = hodges)
mgq20 <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges)
mgq10
mgq20
predict(mgq10)
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(predict(mgq10) ~ unclass(state), data = hodges, pch = 5, col = "red")
predict(mgq10)
points(predict(mgq10) ~ state, data = hodges, pch = 5, col = "red")
fitted(mgq10)
nrow(hodges)
fitted(mgq10, level = 2)
help(gamlssNP)
mgq10$ebp
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "blue")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "blue")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq10$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "blue")
lines(fitted(m0), lty = 2, col = "gray")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l1, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
lines(fitted(m0), lty = 2, col = "gray")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mgq20$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(l2, level = 1) ~ unclass(state), data = hodges, pch = 5, col = "green")
lines(fitted(m0), lty = 2, col = "gray")
mNO <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges, family = NO)
mLOGNO <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges, family = LOGNO)
mBCT <- gamlssNP(prind ~ 1, K = 20, random = ~1 | state, mixture = "gq", data = hodges, family = BCT)
mNO
mgq20
mNO
mgq20
mLOGNO
mBCT
GAIC(mNO, mLOGNO, mBCT, k = log(length(hodges)))
mgq20$mu.coefficients[2]
mNO$mu.coefficients[2]
mLOGNO$mu.coefficients
mLOGNO$mu.coefficients[2]
mBCT$mu.coefficients[2]
graphics.off()
par(mfrow=c(2,2), mar = c(2,2,2,2))
plot(resid(mNO))
plot(resid(mLOGNO))
plot(resid(mBCT))
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mNO$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mLOGNO$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
lines(fitted(m0), lty = 2, col = "gray")
library(gamlss.mx)
# We consider a Box-Cox t (BCT) distribution model, which allows for both skewness and kurtosis in the conditional distribution of Y
# and allows for differences between states, in the location, scale and shape of the conditional distribution of Y,
# by including a random effect term in each of the models for the parameters mu, sigma, nu and tau.
m0 <- gamlss(prind ~ random(state), data = hodges, family = BCT, trace = FALSE)
m1 <- gamlss(prind ~ random(state), sigma.fo = ~random(state), data = hodges, family = BCT, trace = FALSE)
m2 <- gamlss(prind ~ random(state), sigma.fo = ~random(state), nu.fo = ~random(state), data = hodges, family = BCT, trace = FALSE)
m3 <- gamlss(prind ~ random(state), sigma.fo = ~random(state), nu.fo = ~random(state), tau.fo = ~random(state), data = hodges, family = BCT, trace = FALSE)
# ----------
AIC(mNO, mLOGNO, mBCT, m0, m1, m2, m3)
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
points(m0$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "green")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "green")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "blue")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "darkgreen")
graphics.off()
par(mfrow=c(1,1))
plot(prind ~ unclass(state), data = hodges, pch = ".", cex = 2, col = gray(0.6))
points(mBCT$ebp ~ unclass(state), data = hodges, pch = 5, col = "red")
points(fitted(m0) ~ unclass(state), data = hodges, pch = 5, col = "green")
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//canadian_weather")
packages <- c("dplyr", "fda")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  canadian weather
#   - Daily temperature and precipitation at 35 different locations in Canada averaged over 1960 to 1994
# ------------------------------------------------------------------------------
data("CanadianWeather", package = "fda")
str(CanadianWeather)
