summary(tmp2)
ExposureBeach <- c("a","a","b","b","a","b","b","a","a")
tmp2 <- lm(Beta ~ factor(ExposureBeach))
summary(tmp2)
ml <- lmList(Richness ~ NAP + Exposure | as.factor(Beach), RIKZ)
RIKZ
ml <- lmList(Richness ~ NAP + Exposure | Beach, RIKZ)
ml <- lmList(Richness ~ NAP + Exposure | as.factor(Beach), RIKZ)
ml <- lmList(Richness ~ NAP + Exposure | Beach, RIKZ)
head(summary(ml))
sapply(ml, coef)
sapply(ml, coef)
ml <- lmList(Richness ~ NAP | Exposure + Beach, RIKZ)
head(summary(ml))
sapply(ml, coef)
help(lmList)
ml <- lmList(Richness ~ NAP + Exposure | Beach, RIKZ)
ml
ml <- lmList(Richness ~ NAP | Beach, RIKZ)
head(summary(ml))
ml
ml[[1]]
summary(ml)[[1]]
summary(ml[[1]])
intercepts <- sapply(ml, coef)[1,]
slopes <- sapply(ml, coef)[2,]
sapply(ml, coef)
sapply(ml, coef)[1,]
slopes <- sapply(ml, coef)[2,]
df <- cbind(RIKZ %>% dplyr::select(Sample, Richness, NAP, Exposure, Beach), intercepts, slopes)
df <- cbind(RIKZ %>% dplyr::select(Beach) %>% arrange(Beach), intercepts, slopes)
RIKZ %>% dplyr::select(Beach) %>% arrange(Beach)
df <- cbind(RIKZ %>% dplyr::select(Beach) %>% unique() %>% arrange(Beach), intercepts, slopes)
df
par(mfrow = c(1, 1))
plot(intercepts, slopes, xlab = "Intercept", ylab = "Slope")
# ----------
formula <- ~ slopes + intercepts
scatterplotMatrix(formula, data = df,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ slopes + intercepts | as.factor(Exposure)
scatterplotMatrix(formula, data = df,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c("black", gray(0.7)), pch = c(1, 20))
formula <- ~ slopes + intercepts | Exposure
scatterplotMatrix(formula, data = df,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c("black", gray(0.7)), pch = c(1, 20))
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme1 <- lme(Richness ~ NAP, random = ~1 | fBeach, data = RIKZ)
summary(Mlme1)
F0 <- fitted(Mlme1, level = 0)
F1 <- fitted(Mlme1, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
mod_obj <- Mlme1
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
library(effects)
plot(predictorEffects(mod_obj))
plot(Effect(c("NAP", "fBeach"), mod_obj),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(5,4,3,2,1), col = c(gray(0.8), gray(0.6), gray(0.4), gray(0.2), "black")))
mod_obj
plot(Effect(c("NAP"), mod_obj),
confint = list(style = "bars"),
lines = list(multiline = TRUE, lty = c(5,4,3,2,1), col = c(gray(0.8), gray(0.6), gray(0.4), gray(0.2), "black")))
d <- 2.94
# StdDev for the residual
sigma <- 3.06
# Covariance between any two sites on the same beach and the variance
d^2
d^2 + sigma^2
summary(mod_obj)
summary(mod_obj)
( rho <- d^2 / (d^2 + sigma^2) )
n <- 5
( design_effect <- 1 + (n - 1) * rho )
N <- 9
( effetive_sample_size <- N * n / design_effect )
n <- 5
( design_effect <- 1 + (n - 1) * rho )
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme2 <- lme(Richness ~ NAP, random = ~1 + NAP | fBeach, data = RIKZ)
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme2 <- lme(Richness ~ NAP, random = ~1 + NAP | fBeach, data = RIKZ)
summary(Mlme2)
AIC(Mlme1);  AIC(Mlme2);
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
mod_obj <- Mlme2
# ------------------------------------------------------------------------------
# Visualize random intercept and slope model
# ------------------------------------------------------------------------------
# level = 0:  we take the fitted values obtained by the population model
# level = 1: give the within-beach fitted values.
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
N <- 9
( effetive_sample_size <- N * n / design_effect )
setwd("//media//kswada//MyFiles//R//Mixed_effects_and_multilevel_model//rikz")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  RIKZ
# ------------------------------------------------------------------------------
RIKZ <- read.table(file = "RIKZ.txt", header = TRUE)
str(RIKZ)
car::some(RIKZ)
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme3 <- lme(Richness ~ 1, random = ~1 | fBeach, data = RIKZ)
library(nlme)
Mlme3 <- lme(Richness ~ 1, random = ~1 | fBeach, data = RIKZ)
summary(Mlme3)
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme3 <- lme(Richness ~ 1, random = ~1 | fBeach, data = RIKZ)
summary(Mlme3)
mod_obj <- Mlme3
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
F1
F0
I <- order(RIKZ$NAP)
NAPs <- sort(RIKZ$NAP)
plot(NAPs, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="Richness", xlab="NAP")
for (i in 1:9){
x1 <- RIKZ$NAP[RIKZ$Beach==i]
y1 <- F1[RIKZ$Beach==i]
K <- order(x1)
lines(sort(x1), y1[K])
}
text(RIKZ$NAP, RIKZ$Richness, RIKZ$Beach, cex=0.9)
M.gls <- gls(Richness ~ NAP, method = "REML", correlation = corCompSymm(form = ~ 1 | fBeach), data = RIKZ)
M.mixed <- lme(Richness ~ NAP, random = ~1 | fBeach, method = "REML", data = RIKZ)
summary(M.gls)
summary(M.mixed)
summary(M.gls)
summary(M.mixed)
summary(M.gls)
summary(M.mixed)
RIKZ$fExp <- RIKZ$Exposure
RIKZ$fExp[RIKZ$fExp == 8] <- 10
RIKZ$fExp <- factor(RIKZ$fExp, levels=c(10,11))
M0.ML <- lme(Richness ~ NAP, data = RIKZ, random = ~1 | fBeach, method = "ML")
M0.REML <-lme(Richness ~ NAP, data = RIKZ, random = ~ 1 | fBeach, method = "REML")
M1.ML <- lme(Richness ~ NAP + fExp, data = RIKZ, random = ~ 1 | fBeach, method = "ML")
M1.REML <- lme(Richness ~ NAP + fExp, data = RIKZ, random = ~ 1 | fBeach, method = "REML")
summary(M0.ML)
summary(M0.REML)
summary(M0.ML)
summary(M0.REML)
summary(M0.ML)
summary(M0.REML)
summary(M0.ML)
summary(M0.REML)
summary(M0.ML)
summary(M0.REML)
summary(M0.ML)
Wrong1 <- gls(Richness ~ 1 + NAP, method = "REML", data = RIKZ)
Wrong2 <- lme(Richness ~ 1 + NAP, random = ~ 1 | fBeach, method = "REML", data = RIKZ)
Wrong3 <- lme(Richness ~ 1 + NAP, method = "REML", random = ~ 1 + NAP | fBeach, data = RIKZ)
# ----------
# Because REML estimation was used, we can compare AICs and BICs.
AIC(Wrong1, Wrong2, Wrong3)
# -->
anova(Wrong1, Wrong2, Wrong3)
0.5 * (1 - pchisq(-2 * (-126.10 + 119.74), 1))
# If we want to compare the model with the random intercept and the model with random intercept and slop
0.5 * ((1 - pchisq(7.09, 1)) + (1 - pchisq(7.09, 2)))
summary(Wrong3)
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  pulp
# ------------------------------------------------------------------------------
data("pulp", package = "faraway")
str(pulp)
car::some(pulp)
# ----------
lmod <- aov(bright ~ operator, data = pulp)
mmod <- lmer(bright ~ 1 + (1 | operator), data = pulp, REML = TRUE)
mod_obj <- mmod
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
F1
F0
mod_obj <- mmod
data("pulp", package = "faraway")
str(pulp)
car::some(pulp)
# ----------
lmod <- aov(bright ~ operator, data = pulp)
mmod <- lmer(bright ~ 1 + (1 | operator), data = pulp, REML = TRUE)
mod_obj <- mmod
library(lme4)
lmod <- aov(bright ~ operator, data = pulp)
mmod <- lmer(bright ~ 1 + (1 | operator), data = pulp, REML = TRUE)
mod_obj <- mmod
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
F1
F0
I <- order(pulp$operator)
opes <- sort(pulp$operator)
plot(opess, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="bright", xlab="operator")
plot(opes, F0[I], lwd = 4, type = "l", ylim=c(0,22), ylab="bright", xlab="operator")
plot(opes, F0[I], lwd = 4, type = "l", ylab="bright", xlab="operator")
fixef(mod_obj) + ranef(mod_obj)$operator
setwd("//media//kswada//MyFiles//R//psid")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  psid
# ------------------------------------------------------------------------------
data("psid", package = "faraway")
str(psid)
car::some(psid)
# ----------
psid$cyear <- psid$year - 78
mod_obj <- lmer(log(income) ~ cyear * sex + age + educ + (cyear | person), data = psid)
F0 <- fitted(mod_obj, level = 0)
F1 <- fitted(mod_obj, level = 1)
F0
F1
F2 <- fitted(mod_obj, level = 2)
F2
F0
F1
F2
F1
F2 <- fitted(mod_obj, level = 3)
F2
predict(mod_obj)
( F0 <- fitted(mod_obj, level = 0) )
( F1 <- fitted(mod_obj, level = 1) )
( F0 <- fitted(mod_obj, level = 0) )
predict(mod_obj)
predict(mod_obj, re.form = ~ 0)
predict(mod_obj, re.form = ~ 0)
( F2 <- fitted(mod_obj, level = 2) )
predict(mod_obj, re.form = ~ 0)
fitted(mod_obj, level = 2)
fitted(mod_obj, level = 0)
predict(mod_obj, re.form = ~ 0)
fitted(mod_obj, level = 0)
predict(mod_obj)
fitted(mod_obj, level = 0)
fitted(mod_obj, level = 1)
fitted(mod_obj, level = 2)
fitted(mod_obj)
predict(mod_obj, re.form = ~ 1)
setwd("//media//kswada//MyFiles//R//Mixed_effects_and_multilevel_model//rikz")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  RIKZ
# ------------------------------------------------------------------------------
RIKZ <- read.table(file = "RIKZ.txt", header = TRUE)
str(RIKZ)
car::some(RIKZ)
# ----------
RIKZ$fBeach <- factor(RIKZ$Beach)
Mlme1 <- lme(Richness ~ NAP, random = ~1 | fBeach, data = RIKZ)
summary(Mlme1)
mod_obj <- Mlme1
augPred(mod_obj)
mod_obj <- Mlme1
augPred(mod_obj)
plot(augPred(mod_obj))
help(augPred)
RIKZ$NAP
fm1 <- lme(Orthodont, random = ~1)
augPred(fm1, length.out = 2, level = c(0,1))
mod_obj <- lme(log(income) ~ cyear * sex + age + educ + (cyear | person),
random = ~1 + cyear | person, data = psid)
mod_obj <- lme(log(income) ~ cyear * sex + age + educ + (cyear | person),
random = ~ 1 + cyear | person, data = psid)
mod_obj <- lme(log(income) ~ cyear * sex + age + educ,
random = ~ 1 + cyear | person, data = psid)
plot(augPred(mod_obj))
data("jsp", package = "faraway")
str(jsp)
car::some(jsp)
# ----------
# We shall take as our response he math test score result from the final year and try to model this as a function of gender,
# social class and the Raven's test score from the first year which math be taken as a measure of ability when entering the school.
jspr <- jsp[jsp$year == 2,]
car::some(jspr)
# ----------
library(lme4)
mmod <- lmer(math ~ raven * social * gender + (1 | school) + (1 | school : class), data = jspr)
jspr$craven <- jspr$raven - mean(jspr$raven)
mmod_final <- lmer(math ~ craven * social + (1 | school) + (1 | school : class), data = jspr)
# ----------
mod_obj <- mmod_final
mod_obj <- lme(math ~ craven * social,
random = ~ 1 | school + school:class, data = jspr)
mod_obj <- lme(math ~ craven * social,
random = ~ school + school:class, data = jspr)
mod_obj <- lme(math ~ craven * social,
random = ~ ~1 + school:class, data = jspr)
setwd("//media//kswada//MyFiles//R//Mixed_effects_and_multilevel_model")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
Owls <- read.table(file = "Owls.txt", header = TRUE)
str(Owls)
# setwd("//media//kswada//MyFiles//R//owls")
setwd("//media//kswada//MyFiles//R//Mixed_effects_and_multilevel_model")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("//media//kswada//MyFiles//R//Mixed_effects_and_multilevel_model//owls")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Owls
#   - Roulin and Bersier (2007) analysed the begging behaviour of nestling barn owls.
#     They looked at how nestlings responded to the presence of the father and of the mother. Using microphones inside and a video outside the nests,
#     they sampled 27 nests and studied vocal begging behaviour when the parents brought prey.
#     The number of nestlings was between 2 and 7 per nest.
#   - Different response variables were defined in the paper:
#       - the amount of time spent on the perch by a parent,  the amount of time in the nestbox,  sibling negotiation, and begging
#   - We analyse sibing negotiation, which is defined as follows.
#     Using the recorded footage, the number of calls made by all offspring in the absence of the parents was counted during 30-s time intervals every 15 min.
#     To allocate a number of calls to a visit from a parent, the counted number of calls from the preceding 15 min of the arrival was used.
#     This number was then divided by the number of nestlings.
#   - The explanatory variables are sex of the parent, treatment of food, and arrival time of the parent.
#     Half of the nests were given extra prey, and from the other half, prey (remaining) were removed. These were called 'food-satiated' and 'food-deprived'
#     respectively.
#     Measurements took place on two nights, and the food treatment was swapped on the second night. Note that the original paper countains an ethical note
#     stating that food treatment did not have an effect on survival of the chicks. Measurements took place between 21.30 h and 05.30 h and the variable
#     ArrivalTime reflects the time when a parent arrived at the perch with a prey.
# ------------------------------------------------------------------------------
Owls <- read.table(file = "Owls.txt", header = TRUE)
str(Owls)
car::some(Owls)
summary(Owls)
psych::describe(Owls)
Hmisc::describe(Owls)
help(Owls)
names(Owls)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- c("Nest", "FoodTreatment", "SexParent", "ArrivalTime", "SiblingNegotiation", "BroodSize", "NegPerChick")
Mydotplot(Owls[,MyVar1])
histogram(Owls$SiblingNegotiation)
histogram(Owls$NegPerChick)
histogram(Owls$SiblingNegotiation)
histogram(Owls$NegPerChick)
car::densityPlot( ~ NegPerChick, data = Owls)
car::symbox(~ NegPerChick, data = Owls)
p1 <- car::powerTransform(NegPerChick ~ 1, data = Owls, family = "bcnPower")
summary(p1)
help(powerTransform)
p1 <- car::powerTransform(NegPerChick ~ 1, data = Owls, family = "bcPower")
summary(p1)
car::testTransform(p1, lambda = 0.25)
car::densityPlot( ~ NegPerChick^0.25, data = Owls)
tmp <- Owls$NegPerChick^0.25
car::densityPlot( ~ tmp, data = tmp)
tmp <- Owls %>% mutate(tmp = NegPerChick^0.25)
car::densityPlot( ~ tmp, data = tmp)
histogram(tmp$tmp)
names(Owls)
car::densityPlot( ~ SiblingNegotiation, data = Owls)
car::symbox(~ SiblingNegotiation, data = Owls)
p1 <- car::powerTransform(SiblingNegotiation ~ 1, data = Owls, family = "bcPower")
summary(p1)
car::testTransform(p1, lambda = 0.25)
tmp <- Owls %>% mutate(tmp = SiblingNegotiation^0.25)
car::densityPlot( ~ tmp, data = tmp)
histogram(tmp$tmp)
car::densityPlot( ~ tmp, data = tmp)
histogram(tmp$tmp)
car::symbox(~ SiblingNegotiation + 1, data = Owls)
car::symbox(~ SiblingNegotiation, data = Owls)
car::symbox(~ SiblingNegotiation, data = Owls)
tmp <- Owls %>% mutate(tmp = Owls + 1)
car::symbox(~ tmp, data = tmp)
names(Owls)
lattice::bwplot(NegPerChick ~ Nest, data = Owls)
lattice::bwplot(log10(NegPerChick + 1) ~ Nest, data = Owls)
lattice::bwplot(log10(NegPerChick + 1) ~ SexParent, data = Owls)
help(boxplot)
boxplot(log10(NegPerChick + 1) ~ SexParent, varwidth = TRUE, notch = TRUE)
boxplot(log10(NegPerChick + 1) ~ SexParent, data = Owls, varwidth = TRUE, notch = TRUE)
boxplot(log10(NegPerChick + 1) ~ SexParent, data = Owls, varwidth = TRUE)
boxplot(log10(NegPerChick + 1) ~ Nest, data = Owls, varwidth = TRUE)
boxplot(log10(NegPerChick + 1) ~ FoodTreatment, data = Owls, varwidth = TRUE)
boxplot(log10(NegPerChick + 1) ~ FoodTreatment + SexParent, data = Owls, varwidth = TRUE)
boxplot(log10(NegPerChick + 1) ~ FoodTreatment, data = Owls, varwidth = TRUE)
boxplot(log10(NegPerChick + 1) ~ FoodTreatment + SexParent, data = Owls, varwidth = TRUE)
summary(Owls)
boxplot(log10(NegPerChick + 1) ~ Broodsize, data = Owls, varwidth = TRUE)
boxplot(log10(NegPerChick + 1) ~ BroodSize, data = Owls, varwidth = TRUE)
ggplot(Owls, aes(x = NEst, y = log10(NegChick + 1))) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = year), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
facet_grid(. ~ area) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "intensity (log scale)")
library(ggplot2)
ggplot(Owls, aes(x = NEst, y = log10(NegChick + 1))) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = year), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
facet_grid(. ~ area) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "intensity (log scale)")
ggplot(Owls, aes(x = Nest, y = log10(NegChick + 1))) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = year), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "intensity (log scale)")
ggplot(Owls, aes(x = Nest, y = log10(NegChick + 1))) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = Nest), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "intensity (log scale)")
ggplot(Owls, aes(x = Nest, y = log10(NegPerChick + 1))) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = Nest), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "intensity (log scale)")
ggplot(Owls, aes(x = Nest, y = NegPerChick + 1)) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = Nest), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "NegPerChick (log scale)")
histogram(Owls$NegPerChick)
ggplot(Owls, aes(x = Nest, y = NegPerChick + 1)) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = Nest), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "NegPerChick + 1 (log scale)")
ggplot(Owls, aes(x = Nest, y = NegPerChick)) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = Nest), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "NegPerChick + 1 (log scale)")
ggplot(Owls, aes(x = Nest, y = NegPerChick + 0.1)) + geom_boxplot(outlier.size = 3, notch = TRUE, aes(fill = Nest), alpha = 0.3) +
#         geom_jitter(position = position_jitter(width= 0.1), alpha = 0.25) +
#         facet_grid(. ~ SexParent) +
scale_y_log10(breaks = c(0, 1, 2, 5, 10, 20, 50, 100, 200)) +
theme(legend.position = "none") + labs(y = "NegPerChick + 1 (log scale)")
summary(Owls)
plot(jitter(Owls + 0.1) ~ ArrivalTime, data = Owls, log = "y", ylab = "log(ArrivalTime + 0.1)", cex.lab = 1.25)
plot(jitter(log(NegPerChick + 0.1)) ~ ArrivalTime, data = Owls, log = "y", ylab = "log(NegPerChick + 0.1)", cex.lab = 1.25)
plot(jitter(log(NegPerChick + 0.1)) ~ ArrivalTime, data = Owls, log = "y", ylab = "log(NegPerChick + 0.1)", cex.lab = 1.25, col = gray(0.7), pch = 20)
lines(lowess(Owls$ArrivalTime, Owls$NegPerChick + 0.1), col = "blue", lwd = 3)
plot(jitter(log10(NegPerChick + 0.1)) ~ ArrivalTime, data = Owls, log = "y", ylab = "log(NegPerChick + 0.1)", cex.lab = 1.25, col = gray(0.7), pch = 20)
lines(lowess(Owls$ArrivalTime, log10(Owls$NegPerChick + 0.1)), col = "blue", lwd = 3)
plot(jitter(log10(NegPerChick + 0.1)) ~ ArrivalTime, data = Owls, log = "y", ylab = "log10(NegPerChick + 0.1)", cex.lab = 1.25, col = gray(0.7), pch = 20)
lines(lowess(Owls$ArrivalTime, log10(Owls$NegPerChick + 0.1)), col = "blue", lwd = 3)
plot(NegPerChick ~ ArrivalTime, data = Owls, log = "y", ylab = "log10(NegPerChick + 0.1)", cex.lab = 1.25, col = gray(0.7), pch = 20)
lines(lowess(Owls$ArrivalTime, Owls$NegPerChick), col = "blue", lwd = 3)
plot(NegPerChick ~ ArrivalTime, data = Owls, log = "y", ylab = "NegPerChick", cex.lab = 1.25, col = gray(0.7), pch = 20)
lines(lowess(Owls$ArrivalTime, Owls$NegPerChick), col = "blue", lwd = 3)
plot(NegPerChick ~ ArrivalTime, data = Owls, log10 = "y", ylab = "NegPerChick", cex.lab = 1.25, col = gray(0.7), pch = 20)
lines(lowess(Owls$ArrivalTime, Owls$NegPerChick), col = "blue", lwd = 3)
ggplot(Owls, aes(ArrivalTime, NegPerChick)) + geom_jitter(position = position_jitter(h = 0.05)) +
stat_smooth(method = "loess", size = 2, fill = "blue", alpha = 0.25) +
stat_smooth(method = "lm", color = "red", size = 1.25, se = FALSE) +
scale_y_log10(breaks = c(1, 2, 5, 10, 20)) +
labs(y = "log(NegPerChick + 0.1)", x = "ArrivalTime")
par(mfrow = c(1,1))
plot(NegPerChick ~ vcdExtra::cutfac(ArrivalTime), data = Owls, log="y", ylab = "log(NegPerChick)", xlab = "ArrivalTime", las=1)
plot(NegPerChick + 0.1 ~ vcdExtra::cutfac(ArrivalTime), data = Owls, log="y", ylab = "log(NegPerChick)", xlab = "ArrivalTime", las=1)
