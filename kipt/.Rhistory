# ------------------------------------------------------------------------------
# "wish" data is recorded as averaged similarity ranging from 1 to 9, so we convert and scaling to disimilarity ranging from 0 to 1
library(smacof)
fit <- mds((9 - wish) / 8, type = "interval")
fit
# ----------
par(mfrow = c(1, 1))
plot(fit)
# ------------------------------------------------------------------------------
# Multidimensional Scaling by each category:  by co-occurence
# ------------------------------------------------------------------------------
# method = 7 is converting "cooccurence" similarities into dissimilarities
diss <- sim2diss(wish, method = 7)
res <- mds(diss, type = "ordinal")
plot(res)
stress_bydim <- c()
ranstress_bydim_med <- c()
ranstress_bydim_q5 <- c()
ranstress_bydim_q95 <- c()
maxdim <- 10
for(ndim in 1:maxdim){
stress <- mds(delta = diss, ndim = ndim, type = "ordinal")$stress
stress_bydim <- c(stress_bydim, stress)
ex <- randomstress(n = dim(diss)[1], ndim = ndim, nrep = 100, type = "ordinal")
ranstress_bydim_med <- c(ranstress_bydim_med, median(ex))
ranstress_bydim_q5 <- c(ranstress_bydim_q5, unname(quantile(ex, 0.05)))
ranstress_bydim_q95 <- c(ranstress_bydim_q95, unname(quantile(ex, 0.95)))
}
# ----------
graphics.off()
par(mfrow=c(1,1))
plot(1:maxdim, stress_bydim, type = "b", lty = 1, lwd = 1, ylim = c(0, 0.50))
lines(1:maxdim, ranstress_bydim_med, lty = 1, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q5, lty = 2, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q95, lty = 2, lwd = 1, col = "gray")
stress_bydim <- c()
ranstress_bydim_med <- c()
ranstress_bydim_q5 <- c()
ranstress_bydim_q95 <- c()
maxdim <- 10
for(ndim in 1:maxdim){
stress <- mds(delta = (9 - wish) / 8, ndim = ndim, type = "interval")$stress
stress_bydim <- c(stress_bydim, stress)
ex <- randomstress(n = dim(diss)[1], ndim = ndim, nrep = 100, type = "interval")
ranstress_bydim_med <- c(ranstress_bydim_med, median(ex))
ranstress_bydim_q5 <- c(ranstress_bydim_q5, unname(quantile(ex, 0.05)))
ranstress_bydim_q95 <- c(ranstress_bydim_q95, unname(quantile(ex, 0.95)))
}
graphics.off()
par(mfrow=c(1,1))
plot(1:maxdim, stress_bydim, type = "b", lty = 1, lwd = 1, ylim = c(0, 0.50))
lines(1:maxdim, ranstress_bydim_med, lty = 1, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q5, lty = 2, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q95, lty = 2, lwd = 1, col = "gray")
help(sim2diss)
help(mds)
diss <- sim2diss(wish)
wish
diss_7 <- sim2diss(wish, method = 7)
diss_7
diss <- sim2diss(wish2)
wish2 <- (9 - wish) / 8
diss <- sim2diss(wish2)
diss
wish2
diss_8 <- sim2diss(wish, method = 8)
diss_8
diss <- sim2diss(wish)
# method = 1: "corr"
diss <- sim2diss(wish2)
wish2 <- (9 - wish) / 8
# method = 1: "corr"
diss <- sim2diss(wish2)
# method = 7 is converting "cooccurence" similarities into dissimilarities
diss_7 <- sim2diss(wish, method = 7)
fit.interval <- mds(wish2, type = "interval")
fit.interval2 <- mds(diss, type = "interval")
fit.ordinal <- mds(diss_7, type = "ordinal")
# type = "ratio" is the default
fit.ratio <- mds(diss)
fit.spline <- mds(diss, type = "mspline")
op <- par(mfrow = c(1, 4))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
par(op)    # Return to default pot settings
fit.spline <- mds(diss, type = "mspline")
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
op <- par(mfrow = c(1, 4))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
par(op)    # Return to default pot settings
fit.spline
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
op <- par(mfrow = c(1, 4))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
op <- par(mfrow = c(3,2))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.interval2, plot.type = "Shepard", main = paste("Stress", round(fit.interval2$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
op <- par(mfrow = c(2,3))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.interval2, plot.type = "Shepard", main = paste("Stress", round(fit.interval2$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
op <- par(mfrow = c(2,3))
plot(fit.ordinal,  main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.interval, main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.interval2, main = paste("Stress", round(fit.interval2$stress, 2)))
plot(fit.ratio,    main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
op <- par(mfrow = c(2,3))
plot(fit.interval, main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.interval2, main = paste("Stress", round(fit.interval2$stress, 2)))
plot(fit.ordinal,  main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.ratio,    main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//intelligence")
packages <- c("dplyr", "smacof")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  intelligence
#   - A frequent application of MDS is testing structural hypotheses. A typical case is intelligence diagnostics.
#     Here, persons are asked to solve several test items. The items can be classified on the basis of their content into different categories
#     of two design factors, called facets in this context.
#     Some test items require the testee to solve computational problmes with numbers and numerical operations.
#     Other items ask for geometrical solutions where figures have to be rotated in 3-dimensional space or pictures have to be completed.
#     Other test items require applying learned rules, while still others have to be solved by finding such rules.
#   - The data in our smalle example are the inter-correlations of 8 intelligence test items.  The items are coded in terms of the facets
#     "Format = {N(umerical), G(eometrical)}" and "Requirement = {A(pply), I(nfer)}
# ------------------------------------------------------------------------------
data(intelligence, package = "smacof")
intelligence
car::some(intelligence)
data(intelligence, package = "smacof")
intelligence
car::some(intelligence)
# ------------------------------------------------------------------------------
# Multidimensional Scaling by each category:  by dissimilarity matrix calculated from correlations
# ------------------------------------------------------------------------------
labl <- paste0(intelligence$Language, intelligence$Requirement)
idiss <- sim2diss(intelligence[,paste0("T", 1:8)])
fit <- mds(idiss)
fit$conf[,2] <- -fit$conf[,2]
# ----------
graphics.off()
plot(fit)
text(fit$conf[,1] - 0.1, fit$conf[,2], labl, cex = 0.7)
segments(x0 = -2, y0 = -1.3, x1 = 0.5, y1 = 0.8, lty = 2)
segments(x0 = -0.4, y0 = 0.7, x1 = 1.3, y1 = -0.7, lty = 2)
fit$confdist
fit$dhat
graphics.off()
plot(fit, plot.type = "Shepard")
fit$stress
plot(fit, plot.type = "Shepard", shepard.x = idiss)
data0 <- as.matrix(idiss)
dat <- data0[lower.tri(data0)]
# Configuration distances
dist <- as.vector(fit$confdist)
# Disparities (transformed proximities, approximated distances, d-hats)
dhat <- as.vector(fit$dhat)
data0 <- as.matrix(idiss)
dat <- data0[lower.tri(data0)]
# ylim1 <- c(0, 1.8); xlim1 <- c(2, 7)
par(mfrow = c(1,1))
plot(dat, dist, pch=21, cex=2, cex.axis=1.4 , cex.lab=1.6,
xlab="Similarity ratings (data)", ylab="Distances in MDS space" , lwd=1.8 )
plot(dat, dist, pch=21, cex=2, cex.axis=0.5 , cex.lab=0.5,
xlab="Similarity ratings (data)", ylab="Distances in MDS space" , lwd=1.8 )
plot(dat, dist, pch=21, cex=0.5, cex.axis=1 , cex.lab=1,
xlab="Similarity ratings (data)", ylab="Distances in MDS space" , lwd=1.8 )
points(dat, dhat, pch=16, col="blue", cex=1)
dat2 <- dat[order(dat, -dhat)]
dhat2 <- dhat[order(dat, -dhat)]
lines(dat2, dhat2, col="red", lwd=2)
for (i in 1:length(dat)){ segments(dat[i], dist[i], dat[i], dhat[i], col="blue", lwd=1.5, lty=2) }
ex <- randomstress(n = dim(idiss)[1], ndim = 2, nrep = 500, type = "interval")
ex <- randomstress(n = dim(idiss)[1], ndim = 2, nrep = 500, type = "ratio")
quantile(ex, c(0.05, 0.95))
fit$stress
hist(ex)
psych::describe(ex)
ex <- permtest(fit)
graphics.off()
hist(ex$stressvec, xlim = c(ex$stress.obs - 0.05, max(ex$stressvec) + 0.05))
abline(v = ex$stress.obs, col = "red")
points(ex$stress.obs, 0, cex = 2, pch = 16, col = "red")
# -->
fit$stress
# Simulate global stress and random stress by dimension
stress_bydim <- c()
ranstress_bydim_med <- c()
ranstress_bydim_q5 <- c()
ranstress_bydim_q95 <- c()
maxdim <- 10
for(ndim in 1:maxdim){
stress <- mds(delta = idiss, ndim = ndim, type = "ratio")$stress
stress_bydim <- c(stress_bydim, stress)
ex <- randomstress(n = dim(idiss)[1], ndim = ndim, nrep = 100, type = "ratio")
ranstress_bydim_med <- c(ranstress_bydim_med, median(ex))
ranstress_bydim_q5 <- c(ranstress_bydim_q5, unname(quantile(ex, 0.05)))
ranstress_bydim_q95 <- c(ranstress_bydim_q95, unname(quantile(ex, 0.95)))
}
maxdim <- 5
for(ndim in 1:maxdim){
stress <- mds(delta = idiss, ndim = ndim, type = "ratio")$stress
stress_bydim <- c(stress_bydim, stress)
ex <- randomstress(n = dim(idiss)[1], ndim = ndim, nrep = 100, type = "ratio")
ranstress_bydim_med <- c(ranstress_bydim_med, median(ex))
ranstress_bydim_q5 <- c(ranstress_bydim_q5, unname(quantile(ex, 0.05)))
ranstress_bydim_q95 <- c(ranstress_bydim_q95, unname(quantile(ex, 0.95)))
}
# ----------
graphics.off()
par(mfrow=c(1,1))
plot(1:maxdim, stress_bydim, type = "b", lty = 1, lwd = 1, ylim = c(0, 0.50))
lines(1:maxdim, ranstress_bydim_med, lty = 1, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q5, lty = 2, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q95, lty = 2, lwd = 1, col = "gray")
# -->
stress_bydim <- c()
ranstress_bydim_med <- c()
ranstress_bydim_q5 <- c()
ranstress_bydim_q95 <- c()
maxdim <- 5
for(ndim in 1:maxdim){
stress <- mds(delta = idiss, ndim = ndim, type = "ratio")$stress
stress_bydim <- c(stress_bydim, stress)
ex <- randomstress(n = dim(idiss)[1], ndim = ndim, nrep = 100, type = "ratio")
ranstress_bydim_med <- c(ranstress_bydim_med, median(ex))
ranstress_bydim_q5 <- c(ranstress_bydim_q5, unname(quantile(ex, 0.05)))
ranstress_bydim_q95 <- c(ranstress_bydim_q95, unname(quantile(ex, 0.95)))
}
graphics.off()
par(mfrow=c(1,1))
plot(1:maxdim, stress_bydim, type = "b", lty = 1, lwd = 1, ylim = c(0, 0.50))
lines(1:maxdim, ranstress_bydim_med, lty = 1, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q5, lty = 2, lwd = 1, col = "gray")
lines(1:maxdim, ranstress_bydim_q95, lty = 2, lwd = 1, col = "gray")
fit$SPP
fit
fit
names(fit)
fit$spp
graphics.off()
par(mfrow=c(1,2))
plot(fit, plot.type = "bubbleplot")
# Stress Plot
plot(fit, plot.type = "stressplot")
library(gplots)
# Representation Errors
RepErr <- as.matrix((fit$dhat - fit$confdist) ^ 2)
yr <- colorRampPalette(c("lightyellow", "red"), space = "rgb")(100)
heatmap.2( RepErr, cellnote = round(RepErr,2), Rowv = NA, Colv="Rowv",
lwid = c(1, 40), lhei = c(1, 40), margins = c(8, 8),
key=FALSE, notecol="black", trace="none", col=yr, symm=TRUE, dendrogram="none" )
JK <- jackknife(fit)
JK
# stability measure
JK$stab
par(mfrow=c(1,1))
plot(JK, col.p = "black", col.l = "black", lwd = 1.2)
fit <- mds(idiss)
ex <- permtest(fit)
graphics.off()
hist(ex$stressvec, xlim = c(ex$stress.obs - 0.05, max(ex$stressvec) + 0.05))
abline(v = ex$stress.obs, col = "red")
points(ex$stress.obs, 0, cex = 2, pch = 16, col = "red")
fit$stress
idiss <- sim2diss(intelligence[,paste0("T", 1:8)])
# again fitting to recover orignal fit
fit <- mds(idiss)
JK <- jackknife(fit)
JK
# stability measure
JK$stab
par(mfrow=c(1,1))
plot(JK, col.p = "black", col.l = "black", lwd = 1.2)
help(bootmds)
set.seed(123)
resboot <- bootmds(fit, data = intelligence[,paste0("T", 1:8)], method.dat = "pearson", nrep = 500)
resboot
resboot$stab
# ----------
plot(resboot)
idiss <- sim2diss(intelligence[,paste0("T", 1:8)])
# ----------
fit.interval <- mds(idiss, type = "interval")
fit.ordinal <- mds(idiss, type = "ordinal")
# type = "ratio" is the default
fit.ratio <- mds(idiss)
fit.spline <- mds(idiss, type = "mspline")
op <- par(mfrow = c(2,2))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
op <- par(mfrow = c(1,4))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
plot(fit.ratio,    plot.type = "Shepard", main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   plot.type = "Shepard", main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
op <- par(mfrow = c(2,2))
plot(fit.interval, main = paste("Stress", round(fit.interval$stress, 2)))  # --> second
plot(fit.ordinal,  main = paste("Stress", round(fit.ordinal$stress, 2)))  # --> best
plot(fit.ratio,    main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   main = paste("Stress", round(fit.spline$stress, 2)))
par(op)
op <- par(mfrow = c(1,4))
plot(fit.interval, plot.type = "Shepard", main = paste("Stress", round(fit.interval$stress, 2)))
plot(fit.ordinal,  plot.type = "Shepard", main = paste("Stress", round(fit.ordinal$stress, 2)))
op <- par(mfrow = c(2,2))
plot(fit.interval, main = paste("Stress", round(fit.interval$stress, 2)))  # --> second
plot(fit.ordinal,  main = paste("Stress", round(fit.ordinal$stress, 2)))  # --> best
plot(fit.ratio,    main = paste("Stress", round(fit.ratio$stress, 2)))
plot(fit.spline,   main = paste("Stress", round(fit.spline$stress, 2)))
help(sim2diss)
diss <- sim2diss(wish, method = max(wish))
# ----------
# Enforces a strict circle
res1 <- smacofSphere(diss, type = "ordinal")
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
res2 <- smacofSphere(diss, type = "ordinal", algorithm = "dual", penalty = 22)
res3 <- mds(diss, type = "ordinal")
# ----------
res1$stress
res2$stress
res3$stress
op <- par(mfrow = c(1,3))
plot(res1, main="Circular MDS (primal)")
plot(res2, main="Circular MDS 2 (dual)")
plot(res3, main="Exploratory MDS")
par(op)
diss
labl <- rownames(diss)
labl
res1
plot(res1, main="Circular MDS (primal)", label = labl)
labl
rownames(diss)
intelligence
idiss <- sim2diss(intelligence[,paste0("T", 1:8)], method = max(wish))
# Enforces a strict circle
res1 <- smacofSphere(diss, type = "ordinal")
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
res2 <- smacofSphere(diss, type = "ordinal", algorithm = "dual", penalty = 22)
# Exploratory MDS
res3 <- mds(diss, type = "ordinal")
res1$stress
res2$stress
res3$stress
res1 <- smacofSphere(idiss, type = "ordinal")
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
# Exploratory MDS
res3 <- mds(idiss, type = "ordinal")
# ----------
res1$stress
res2$stress
res3$stress
op <- par(mfrow = c(1,3))
rownames(diss)
plot(res1, main="Circular MDS (primal)")
plot(res2, main="Circular MDS 2 (dual)")
plot(res3, main="Exploratory MDS")
par(op)
res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
# res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 22)
# Exploratory MDS
# res3 <- mds(idiss, type = "ordinal")
res3 <- mds(idiss)
# ----------
res1$stress
res2$stress
res3$stress
op <- par(mfrow = c(1,3))
rownames(diss)
plot(res1, main="Circular MDS (primal)")
plot(res2, main="Circular MDS 2 (dual)")
plot(res3, main="Exploratory MDS")
par(op)
# ----------
# Enforces a strict circle
# res1 <- smacofSphere(idiss, type = "ordinal")
res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
# res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 5)
# Exploratory MDS
# res3 <- mds(idiss, type = "ordinal")
res3 <- mds(idiss)
# ----------
res1$stress
res2$stress
res3$stress
# ----------
res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
# res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 1)
# Exploratory MDS
# res3 <- mds(idiss, type = "ordinal")
res3 <- mds(idiss)
# ----------
res1$stress
res2$stress
res3$stress
op <- par(mfrow = c(1,3))
rownames(diss)
plot(res1, main="Circular MDS (primal)")
plot(res2, main="Circular MDS 2 (dual)")
plot(res3, main="Exploratory MDS")
par(op)
rownames(idiss)
idiss
colnames(idiss)
library(CircE)
install.packages("CircE", dep = T)
idiss <- sim2diss(R, method = max(R))
setwd("//media//kswada//MyFiles//R//pvq40")
packages <- c("dplyr", "smacof")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  PVQ40
# ------------------------------------------------------------------------------
data(PVQ40, package = "smacof")
str(PVQ40)
attributes(PVQ40)
car::some(PVQ40)
# ------------------------------------------------------------------------------
# MDS on scores averaged by category
# ------------------------------------------------------------------------------
var_n <- c("SE", "CO", "TR", "BE", "UN", "SD", "ST", "HE", "AC", "PO")
var_n_select <- c("se1, se2", "co1, co2", "tr1, tr2", "be1, be2", "un1, un2, un3", "sd1, sd2", "st1, st2", "he1, he2", "ac1, ac2", "po1, po2")
# Take row means for each category of measure
for(i in 1:length(var_n)){
eval(parse(text = paste0(var_n[i], " <- rowMeans(subset(PVQ40, select = c(", var_n_select[i], ")), na.rm = TRUE)")))
}
raw <- cbind(SE, CO, TR, BE, UN, SE, ST, HE, AC, PO)
# ----------
R <- cor(raw)
diss <- sim2diss(R)
result <- mds(diss, init = "torgerson", type = "ordinal")
plot(result)
idiss <- sim2diss(R, method = max(R))
# ----------
# Enforces a strict circle
# res1 <- smacofSphere(idiss, type = "ordinal")
res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
# res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 1)
# Exploratory MDS
# res3 <- mds(idiss, type = "ordinal")
res3 <- mds(idiss)
idiss <- sim2diss(R, method = max(R))
# ----------
# Enforces a strict circle
res1 <- smacofSphere(idiss, type = "ordinal")
# res1 <- smacofSphere(idiss)
# uses a penalty function that pushes the MDS solution in the direction of a perfect circle
# default penalty = 100 and when setting it to 22, say, the force that pulls the solution toward a perfect circle is mitigated.
# When setting the penalty weight to 100 (as default), then the circle is perfect, too.
res2 <- smacofSphere(idiss, type = "ordinal", algorithm = "dual", penalty = 22)
# res2 <- smacofSphere(idiss, algorithm = "dual", penalty = 1)
# Exploratory MDS
res3 <- mds(idiss, type = "ordinal")
# res3 <- mds(idiss)
# ----------
res1$stress
res2$stress
res3$stress
op <- par(mfrow = c(1,3))
colnames(idiss)
plot(res1, main="Circular MDS (primal)")
plot(res2, main="Circular MDS 2 (dual)")
plot(res3, main="Exploratory MDS")
par(op)
rownames(idiss)
