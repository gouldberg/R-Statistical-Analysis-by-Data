love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned + pa1, data = njmin3_2, method = "nearest", replace = FALSE)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned + pa1 + pa2 + I(pa^2), data = njmin3_2, method = "nearest", replace = FALSE)
m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned + pa1 + pa2 + I(pa1^2), data = njmin3_2, method = "nearest", replace = FALSE)
m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned + pa1 + pa2, data = njmin3_2, method = "nearest", replace = FALSE)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned + pa1 + pa2 + d, data = njmin3_2, method = "nearest", replace = FALSE)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys")))))
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + pa1 + pa2 + d, data = njmin3_2, method = "nearest", replace = FALSE)
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys")))))
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys")))))
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + pa1 + pa2 + d, data = njmin3_2, method = "nearest", replace = FALSE)
m_mod$nn
plot(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
m_mod <- matchit(formula = nj ~ rest_type + co_owned + pa1 + pa2 + d, data = njmin3_2, method = "nearest", replace = FALSE)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
tmp <- njmin3_2 %>% filter(pa1 == 1)
table(tmp$nj)
tmp <- njmin3_2 %>% filter(pa1 == 2)
table(tmp$nj)
tmp <- njmin3_2 %>% filter(pa1 == 0)
table(tmp$nj)
tmp <- njmin3_2 %>% filter(pa2 == 1)
table(tmp$nj)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "nearest", replace = FALSE)
summary(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
# note that matched_data has only matched control and treated
# ------------------------------------------------------------------------------
# plot distance
# ------------------------------------------------------------------------------
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
help(matchit)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic", replace = FALSE)
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ----------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic", replace = FALSE)
# ----------
summary(m_mod)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic", replace = FALSE)
str(njmin3_2)
m_mod <- matchit(formula = logical(nj) ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic", replace = FALSE)
m_mod <- matchit(formula = logical(nj) ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic")
m_mod <- matchit(formula = logic(nj) ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic")
m_mod <- matchit(formula = as.logical(nj) ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic")
as.logical(njmin3_2$nj)
logical(njmin3_2$nj)
bool(njmin3_2$nj)
as.bool(njmin3_2$nj)
help(to_logical)
njmin3_2$nj <- "logical"
njmin3_2$nj
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ----------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
as.logical(njmin3_2$nj)
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ----------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
njmin3_2$nj <- as.logical(njmin3_2$nj)
njmin3_2$nj
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = as.logical(nj) ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic")
plot(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
# note that matched_data has only matched control and treated
# ------------------------------------------------------------------------------
# plot distance
# ------------------------------------------------------------------------------
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ----------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
library(MatchIt)
# Matching by propensity score
# including variables of selection-bias sources
# method = "near":  nearest neighbor matching
# default distance measure is "logit"
# replace = TRUE:  each control unit can be matched only once
# Note that pa1, pa2 are related to "nj", so we can not use them as covariates
m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned, data = njmin3_2, method = "nearest", replace = FALSE)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "nearest", replace = FALSE)
# ----------
summary(m_mod)
# ----------
# basic summary table of matched data
m_mod$nn
# estimated distance measure for each unit
m_mod$distance
# weghts assigned to each unit in the matching process.
# Unmatched units have weights equal to zero.
# Matched treated units have weight 1.
# Each matched control unit has weight proportaional to the number of treatment units to which it was matched,
# and the sum of the control weights is equal to the number of uniquely matched control units
m_mod$weights
# the units ineligible for matching due to common support restrictions
m_mod$discarded[m_mod$discarded == TRUE]
# ----------
# If the empirical distributions are the same in the treated and control groups, the points in the Q-Q plots would all lie
# on the 45 degree line
# Deviations from the 45 degree line indicate differences in the empirical distribution
plot(m_mod)
library(cobalt)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "nearest", replace = FALSE)
# ----------
summary(m_mod)
# ----------
# basic summary table of matched data
m_mod$nn
# estimated distance measure for each unit
m_mod$distance
# weghts assigned to each unit in the matching process.
# Unmatched units have weights equal to zero.
# Matched treated units have weight 1.
# Each matched control unit has weight proportaional to the number of treatment units to which it was matched,
# and the sum of the control weights is equal to the number of uniquely matched control units
m_mod$weights
# the units ineligible for matching due to common support restrictions
m_mod$discarded[m_mod$discarded == TRUE]
# ----------
# If the empirical distributions are the same in the treated and control groups, the points in the Q-Q plots would all lie
# on the 45 degree line
# Deviations from the 45 degree line indicate differences in the empirical distribution
plot(m_mod)
library(cobalt)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
# note that matched_data has only matched control and treated
# ------------------------------------------------------------------------------
# plot distance
# ------------------------------------------------------------------------------
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 40))
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 80))
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
# -->
# propensity scores is predictive ..
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# convert to logical (TRUE, FALSE) for genetic matching
njmin3_2$nj <- as.logical(njmin3_2$nj)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = nj ~ rest_type + co_owned + d, data = njmin3_2, method = "nearest", replace = FALSE)
njmin3_2$nj <- as.logical(njmin3_2$nj)
m_mod <- matchit(formula = as.logical(nj) ~ rest_type + co_owned + d, data = njmin3_2, method = "genetic")
as.bool(njmin3_2$nj)
# ----------
summary(m_mod)
# ----------
# basic summary table of matched data
m_mod$nn
plot(m_mod)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = FALSE)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "genetic", replace = FALSE)
summary(m_mod)
m_mod$nn
plot(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
# note that matched_data has only matched control and treated
# ------------------------------------------------------------------------------
# plot distance
# ------------------------------------------------------------------------------
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 30))
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
# ------------------------------------------------------------------------------
# Check the assumption of ignorability of treatment assignment
# AUC and ROC: distance's power to discriminate New Jersey or not ?
# ------------------------------------------------------------------------------
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
setwd("//media//kswada//MyFiles//R//njmin3")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  njmin3
# ------------------------------------------------------------------------------
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ------------------------------------------------------------------------------
# Data preparation
# ------------------------------------------------------------------------------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
# ------------------------------------------------------------------------------
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = FALSE)
# ----------
summary(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
setwd("//media//kswada//MyFiles//R//njmin3")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  njmin3
# ------------------------------------------------------------------------------
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ------------------------------------------------------------------------------
# Data preparation
# ------------------------------------------------------------------------------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = FALSE)
plot(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
# note that matched_data has only matched control and treated
# ------------------------------------------------------------------------------
# plot distance
# ------------------------------------------------------------------------------
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = TRUE)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
# note that matched_data has only matched control and treated
# ------------------------------------------------------------------------------
# plot distance
# ------------------------------------------------------------------------------
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
# ------------------------------------------------------------------------------
# Check the assumption of ignorability of treatment assignment
# AUC and ROC: distance's power to discriminate New Jersey or not ?
# ------------------------------------------------------------------------------
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
setwd("//media//kswada//MyFiles//R//njmin3")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  njmin3
# ------------------------------------------------------------------------------
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
# ------------------------------------------------------------------------------
# Data preparation
# ------------------------------------------------------------------------------
# exclude the missing value record
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
# Dummy coded --> one variable
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
# Note that pa1, pa2 is related to "nj", so we can not use for covariate
# ----------
# also convert to factors
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
# ------------------------------------------------------------------------------
# Propensity Score Matching
# ------------------------------------------------------------------------------
library(MatchIt)
# Matching by propensity score
# including variables of selection-bias sources
# method = "near":  nearest neighbor matching
# default distance measure is "logit"
# replace = TRUE:  each control unit can be matched only once
# Note that pa1, pa2 are related to "nj", so we can not use them as covariates
# m_mod <- matchit(formula = nj ~ bk + kfc + roys + wendys + co_owned, data = njmin3_2, method = "nearest", replace = FALSE)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = TRUE)
summary(m_mod)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = TRUE)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
# -->
# propensity scores is predictive ..
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
matched_data <- match.data(m_mod)
head(matched_data)
# ----------
nrow(matched_data)
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
setwd("//media//kswada//MyFiles//R//njmin3")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  njmin3
# ------------------------------------------------------------------------------
data("njmin3", package = "POE5Rdata")
dim(njmin3)
str(njmin3)
car::some(njmin3)
njmin3_2 <- njmin3 %>% filter(!is.na(fte)) %>% dplyr::select(-demp)
njmin3_2 <- njmin3_2 %>% mutate(rest_type = ifelse(bk == 1, "bk", ifelse(kfc == 1, "kfc", ifelse(roys == 1, "roys", ifelse(wendys == 1, "wendys", "none")))))
njmin3_2 <- rapply(njmin3_2, f = as.factor, class = "integer", how = "replace")
str(njmin3_2)
m_mod <- matchit(formula = nj ~ rest_type + co_owned, data = njmin3_2, method = "nearest", replace = FALSE)
summary(m_mod)
love.plot(m_mod, stats = "mean.diffs", threshold = 0.1, stars = "std")
graphics.off()
lattice::histogram(~ distance | nj, data = matched_data,
xlab = "propensity score", ylab = "percentage",
layout = c(1,2), xlim = c(0, 1), ylim = c(0, 60))
library(ROCR)
# AUC
performance(prediction(matched_data$distance, matched_data$nj), measure = "auc")@y.values[[1]]
graphics.off()
par(mfrow = c(1,1))
perf <- performance(prediction(matched_data$distance, matched_data$nj), "tpr", "fpr")
plot(perf, col = "blue")
abline(a = 0, b = 1)
