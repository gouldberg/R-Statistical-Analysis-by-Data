# ----------
graphics.off()
plot(y)
# locating starting point and extract outline coordinate
start <- locator(1)
Rc <- Conte(c(round(start$x), round(start$y)), y@grey)
lines(Rc$X, Rc$Y, lwd = 4)
graphics.off()
plot(y)
# locating starting point and extract outline coordinate
start <- locator(1)
Rc <- Conte(c(round(start$x), round(start$y)), y@grey)
lines(Rc$X, Rc$Y, lwd = 4)
lines(Rc$X, Rc$Y, lwd = 4)
lines(Rc$X+5, Rc$Y+5, lwd = 4)
graphics.off()
plot(y)
# locating starting point and extract outline coordinate
start <- locator(1)
Rc <- Conte(c(round(start$x), round(start$y)), y@grey)
lines(Rc$X, Rc$Y, lwd = 4)
start <- locator(1)
Rc <- Conte(c(round(start$x), round(start$y)), y@grey)
lines(Rc$X, Rc$Y, lwd = 4)
start <- locator(1)
Rc <- Conte(c(round(start$x), round(start$y)), y@grey)
lines(Rc$X, Rc$Y, lwd = 4)
arrows(0, Rc$Y[1], Rc$X[1], Rc$Y[1], length = 0.1)
data("crabs", package = "MASS")
str(crabs)
car::some(crabs)
plot(crabs$FL, crabs$RW, bg = c("grey50", "white")[crabs$sex], pch = c(21, 22)[crabs$sp], cex = c(1.8, 1)[crabs$sp])
summary(lm(crabs$RW ~ crabs$FL))
abline(mod)
mod <- lm(crabs$RW ~ crabs$FL)
summary(mod)
abline(mod)
coul <- rep(c("grey40", "black"), 2)
lwe <- c(2, 2, 1, 1)
plot(crabs$FL, crabs$RW, bg = c("grey50", "white")[crabs$sex], pch = c(21, 22)[crabs$sp], cex = c(1.8, 1)[crabs$sp])
for(i in 1:4){
a <- levels(crabs$sp:crabs$sex)[i]
lines(ELLI(
crabs$FL[crabs$sp:crabs$sex==a],
crabs$RW[crabs$sp:crabs$sex == a]),
col = coul[i], lwd = lwe[i])
}
ELLI <- function(x, y, conf = 0.95, np = 50){
centroid <- apply(cbind(x, y), 2, mean)
ang <- seq(0, 2 * pi, length = np)
z <- cbind(cos(ang), sin(ang))
radiuscoef <- qnorm((1 - conf)/2, lower.tail = F)
cvcxy <- var(cbind(x, y))
r <- cor(x, y)
M1 <- matrix(c(1, 1, -1, 1), 2, 2)
M2 <- matrix(c(var(x), var(y)), 2, 2)
M3 <- matrix(c(1 + r, 1 - r), 2, 2, byrow = T)
ellpar <- M1 * sqrt(M2 * M3 / 2)
t(centroid + radiuscoef * ellpar %*% t(z))
}
# ------------------------------------------------------------------------------
# Analyizing the relationship between two distance measurements in different groups
# ------------------------------------------------------------------------------
coul <- rep(c("grey40", "black"), 2)
lwe <- c(2, 2, 1, 1)
plot(crabs$FL, crabs$RW, bg = c("grey50", "white")[crabs$sex], pch = c(21, 22)[crabs$sp], cex = c(1.8, 1)[crabs$sp])
for(i in 1:4){
a <- levels(crabs$sp:crabs$sex)[i]
lines(ELLI(
crabs$FL[crabs$sp:crabs$sex==a],
crabs$RW[crabs$sp:crabs$sex == a]),
col = coul[i], lwd = lwe[i])
}
crabs$sp:crabs$sex==a
crabs$sp
crabs$sex==a
crabs$sp:crabs$sex
i <- 1
a <- levels(crabs$sp:crabs$sex)[i]
a
a <- levels(crabs$sp:crabs$sex)[i]
i <- 1
a <- levels(crabs$sp:crabs$sex)[i]
x <- crabs$FL[crabs$sp:crabs$sex == a]
y <- crabs$RW[crabs$sp:crabs$sex == a]
conf <- 0.95
np <- 50
centroid <- apply(cbind(x, y), 2, mean)
centroid
ang <- seq(0, 2 * pi, length = np)
ang
z <- cbind(cos(ang), sin(ang))
z
radiuscoef <- qnorm((1 - conf)/2, lower.tail = F)
radiuscoef
cvcxy <- var(cbind(x, y))
cvcxy
r <- cor(x, y)
M1 <- matrix(c(1, 1, -1, 1), 2, 2)
M2 <- matrix(c(var(x), var(y)), 2, 2)
M3 <- matrix(c(1 + r, 1 - r), 2, 2, byrow = T)
ellpar <- M1 * sqrt(M2 * M3 / 2)
ellpar
M3
M2
M1
centroid + radiuscoef * ellpar %*% t(z)
sqrt(M2 * M3 / 2)
M2 * M3 / 2
# regression parameters and statistics for the first group
a <- summary(lm(crabs$RW[1:50] ~ crabs$FL[1:50]))$coefficients
a
( tt <- ( a[2,1] - b[2,1] ) / sqrt(a[2,2]^2 + b[2^2]^2) )
a <- summary(lm(crabs$RW[1:50] ~ crabs$FL[1:50]))$coefficients
a
# ----------
# regression parameters and statistics for the second group
b <- summary(lm(crabs$RW[51:100] ~ crabs$FL[51:100]))$coefficients
b
# ----------
Computation of the t-value
( tt <- ( a[2,1] - b[2,1] ) / sqrt(a[2,2]^2 + b[2^2]^2) )
( 1 - pt(abs(-tt), (length(crabs$FL[1:100]) - 4))) * 2
mod1 <- lm(crabs$RW[1:100] ~ crabs$FL[1:100])
mod2 <- lm(crabs$RW[1:100] ~ crabs$FL[1:100] + crabs$sex[1:100])
fullmod <- lm(crabs$RW[1:100] ~ crabs$FL[1:100] * crabs$sex[1:100])
anova(fullmod, mod1)
anova(fullmod, mod2)
help(crabs)
x <- crabs$FL[1:50]
new <- data.frame(x = seq(max(crabs$FL[1:50]), min(crabs$FL[1:50]), length =50))
pred.int <- predict(lm(crabs$RW[1:50] ~ x), new, interval = "confidence")
pred.fit <- predict(lm(crabs$RW[1:50] ~ x), new, interval = "prediction")
plot(crabs$FL[1:50], crabs$RW[1:50], pch = 21, cex = 1.8, bg = "grey50", asp = 1)
matplot(new$x, cbind(pred.int), lty = c(1,2,2), type = "l", col = 1, add = T)
matplot(new$x, cbind(pred.p), lwd = c(1,2,2), lty = c(1,2,2), col = c("black", rep("grey50", 2)), type = "l", add = T)
matplot(new$x, cbind(pred.fit), lwd = c(1,2,2), lty = c(1,2,2), col = c("black", rep("grey50", 2)), type = "l", add = T)
library(smatr)
install.pacakges("smatr", dep=T)
install.packages("smatr", dep=T)
library(smatr)
MRW <- crabs$RW[1:50]
FRW <- crabs$RW[51:100]
MFL <- crabs$FL[1:50]
FFL <- crabs$FL[51:100]
line.cis(log(FFL), log(FRW), method = "MA")
line.cis(log(MFL), log(MRW), method = "MA")
unlist(slope.test(log(FFL), log(FRW), method = "MA"))
unlist(slope.test(log(MFL), log(MRW), method = "MA"))
unlist(slope.com(crabs$FL[1:100], crabs$RW[1:100], groups = crabs$sex[1:100], method = "MA"))
unlist(slope.test(log(FFL), log(FRW), method = "OLS"))
unlist(slope.test(log(MFL), log(MRW), method = "OLS"))
unlist(slope.com(crabs$FL[1:100], crabs$RW[1:100], groups = crabs$sex[1:100], method = "OLS"))
unlist(slope.test(log(FFL), log(FRW), method = "MA"))
unlist(slope.test(log(MFL), log(MRW), method = "MA"))
( test1 <- slope.test(log(FFL), log(FRW), method = "MA") )
unlist(test1)
test_f <- slope.test(log(FFL), log(FRW), method = "MA")
unlist(test_f)
test_m <- slope.test(log(MFL), log(MRW), method = "MA")
unlist(test_m)
plot(test_f)
plot(test_f, type = "residuals")
setwd("//media//kswada//MyFiles//R//differential_equations")
packages <- c("dplyr", "deSolve")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
r <- 1
K <- 10
yini <- 2
derivs <- function(t, y, parms) list(r * y * (1 - y / K))
times <- seq(from = 0, to = 20, by = 0.2)
out <- ode(y = tini, times = times, func = derivs, parms = NULL)
head(out)
out <- ode(y = yini, times = times, func = derivs, parms = NULL)
head(out)
plot(out)
plot(out, main = "logistic growth")
y <- 12
out <- ode(y = yini, times = times, func = derivs, parms = NULL)
plot(out2, add = T, lty = 2)
out2 <- ode(y = yini, times = times, func = derivs, parms = NULL)
plot(out2, add = T, lty = 2)
yini <- 2
derivs <- function(t, y, parms) list(r * y * (1 - y / K))
times <- seq(from = 0, to = 20, by = 0.2)
out <- ode(y = yini, times = times, func = derivs, parms = NULL)
head(out)
plot(out, main = "logistic growth")
# ----------
y <- 12
out2 <- ode(y = yini, times = times, func = derivs, parms = NULL)
plot(out2, add = T, lty = 2)
yini <- 2
derivs <- function(t, y, parms) list(r * y * (1 - y / K))
times <- seq(from = 0, to = 20, by = 0.2)
out <- ode(y = yini, times = times, func = derivs, parms = NULL)
head(out)
plot(out, main = "logistic growth")
# ----------
y <- 12
out2 <- ode(y = yini, times = times, func = derivs, parms = NULL)
par(new = T)
plot(out2, lty = 2)
head(out)
yini <- 2
derivs <- function(t, y, parms) list(r * y * (1 - y / K))
times <- seq(from = 0, to = 20, by = 0.2)
out <- ode(y = yini, times = times, func = derivs, parms = NULL)
head(out)
plot(out, main = "logistic growth")
# ----------
y <- 12
out2 <- ode(y = yini, times = times, func = derivs, parms = NULL)
lines(out2$time, out2[,2], lty = 2)
out2$time
lines(out2[,"time"], out2[,2], lty = 2)
plot(out, out2, main = "logistic growth", lwd = 2)
yini <- 2
derivs <- function(t, y, parms) list(r * y * (1 - y / K))
times <- seq(from = 0, to = 20, by = 0.2)
out <- ode(y = yini, times = times, func = derivs, parms = NULL)
head(out)
# ----------
yini <- 12
out2 <- ode(y = yini, times = times, func = derivs, parms = NULL)
plot(out, out2, main = "logistic growth", lwd = 2)
a <- - 8 / 3
b <- -10
c < -28
yini <- c(X = 1, Y = 1, Z = 1)
Lorenz <- function(t, y, parms){
with(as.list(y), {
dX <- a * X + Y * Z
dY <- b * (Y - Z)
dZ <- -X * Y + c * Y - Z
list(c(dX, dY, dZ))
})
}
times <- seq(from = 0, to = 100, by = 0.01)
out <- ode(y = yini, times = times, func = Lorenz, parms = NULL)
a <- - 8 / 3
b <- -10
c < 28
yini <- c(X = 1, Y = 1, Z = 1)
Lorenz <- function(t, y, parms){
with(as.list(y), {
dX <- a * X + Y * Z
dY <- b * (Y - Z)
dZ <- -X * Y + c * Y - Z
list(c(dX, dY, dZ))
})
}
times <- seq(from = 0, to = 100, by = 0.01)
out <- ode(y = yini, times = times, func = Lorenz, parms = NULL)
a <- - 8 / 3
b <- -10
c <- 28
yini <- c(X = 1, Y = 1, Z = 1)
Lorenz <- function(t, y, parms){
with(as.list(y), {
dX <- a * X + Y * Z
dY <- b * (Y - Z)
dZ <- -X * Y + c * Y - Z
list(c(dX, dY, dZ))
})
}
times <- seq(from = 0, to = 100, by = 0.01)
out <- ode(y = yini, times = times, func = Lorenz, parms = NULL)
plot(out, lwd = 2)
head(out)
plot(out[, "X"], out[,"Y"], type = "l", xlab = "X", ylab = "Y", main = "butterfly")
rididode <- function(t, y, parms){
dy1 <- -2 * y[2] * y[3]
dy2 <- 1.25 * y[1] * y[3]
dy3 <- -0.5 * y[1] * y[2]
list(c(dy1, dy2, dy3))
}
yini <- c(1, 0, 0.9)
times <- seq(from = 0, to = 20, by = 0.01)
out <- ode(times = times, y = yini, func = rigidode, parms = NULL, method = rkMethod("rk45ck"))
rigidode <- function(t, y, parms){
dy1 <- -2 * y[2] * y[3]
dy2 <- 1.25 * y[1] * y[3]
dy3 <- -0.5 * y[1] * y[2]
list(c(dy1, dy2, dy3))
}
yini <- c(1, 0, 0.9)
times <- seq(from = 0, to = 20, by = 0.01)
out <- ode(times = times, y = yini, func = rigidode, parms = NULL, method = rkMethod("rk45ck"))
heed(out)
out <- ode(times = times, y = yini, func = rigidode, parms = NULL, method = rkMethod("rk45ck"))
head(out)
matplot(x = out[,1], y = out[,-1], type = "l", lwd = 2, lty = "solid", col = c("red", "blue", "black"), xlab = "time", ylab = "y", main = "rigidode")
legend("bottomright", col = c("red", "blue", "black"), legend = c("y1", "y2", "y3"), lwd = 2)
par(mfrow=c(1,1))
matplot(x = out[,1], y = out[,-1], type = "l", lwd = 2, lty = "solid", col = c("red", "blue", "black"), xlab = "time", ylab = "y", main = "rigidode")
legend("bottomright", col = c("red", "blue", "black"), legend = c("y1", "y2", "y3"), lwd = 2)
library(scatterplot3d)
scatterplot3d(out[,-1], type = "l", lwd = 2, xlab = "", ylab = "", zlab = "", main = "rigidode")
rkMethod("rk45ck")
data("turtles", package = "Flury")
install.packages("Flury", dep = t)
data("turtles", package = "Flury")
str(turtles)
car::some(turtles)
geosize <- (apply(turtles[,2:4], 1, prod)) ^ (1 / length(turtles[1,2:4]) )
( geosize <- (apply(turtles[,2:4], 1, prod)) ^ (1 / length(turtles[1,2:4]) ) )
(apply(turtles[,2:4], 1, prod))
93*74*37
shaperatio <- as.matrix(turtles[,2:4] / geosize)
( shaperatio <- as.matrix(turtles[,2:4] / geosize) )
pairs(log(shaperatio), pch = 21, cex = 1.5, bg = c("black", "white")[turtles[,1]])
anova(lm(I(log(geosize[1:24,])) ~ I(log(shaperatio[1:24,]))))
anova(lm(I(log(geosize[1:24,])) ~ I(log(shaperatio[1:24,]))))
I(log(geosize[1:24,])
I(log(geosize[1:24,]))
lm(I(log(geosize[1:24,])) ~ I(log(shaperatio[1:24,])))
geosize
geosize[1:24,]
geosize[1:24,]
log(geosize[1:24])
shaperatio[1:24,]
anova(lm(I(log(geosize[1:24])) ~ I(log(shaperatio[1:24,]))))
I(log(shaperatio[1:24,])))
I(log(shaperatio[1:24,]))
mod <- lm(I(log(geosize[1:24])) ~ I(log(shaperatio[1:24,])))
sumamry(mod)
summary(mod)
anova(mod)
pairs(regmod$residuals, labels = c("res.length", "res.width", "res.height")), pch = 21, bg = "black", cex = 1.5)
pairs(regmod$residuals, labels = c("res.length", "res.width", "res.height"), pch = 21, bg = "black", cex = 1.5)
regmod <- lm(as.matrix(turtles[1:24,2:4] ~ geosize[1:24]))
pairs(regmod$residuals, labels = c("res.length", "res.width", "res.height"), pch = 21, bg = "black", cex = 1.5)
regmod <- lm(as.matrix(turtles[1:24,2:4]) ~ geosize[1:24])
pairs(regmod$residuals, labels = c("res.length", "res.width", "res.height"), pch = 21, bg = "black", cex = 1.5)
regmod <- lm(as.matrix(turtles[1:24,2:4]) ~ geosize[1:24])
regmod1 <- lm(as.matrix(turtles[1:24,2:4]) ~ geosize[1:24] - 1)
pairs(regmod1$residuals, labels = c("res.length", "res.width", "res.height"), pch = 21, bg = "black", cex = 1.5)
sum(diag(var(regmod$fitted.values))) / sum(diag(var(as.matrix(turtles[1:24,2:4]))))
sum(diag(var(regmod1$fitted.values))) / sum(diag(var(as.matrix(turtles[1:24,2:4]))))
svd(var(regmod$residuals))$d
svd(var(regmod1$residuals))$d
setwd("//media//kswada//MyFiles//R//iris")
packages <- c("dplyr", "randomForest")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  iris
# ------------------------------------------------------------------------------
data("iris")
str(iris)
car::some(iris)
library(ade4)
install.packages("ade4", dep = T)
library(ade4)
tp <- triangle.plot(iris[,c(1,2,4)], cpoint = 0, show.position =F)
points(tp, pch = c(1,2,8)[iris[,5]])
car::some(turtles)
tp <- triangle.plot(turtles[,2:4], cpoint = 0, show.position =F)
points(tp, pch = c(1,2)[turtles[,1]])
shaperatio
geosize
tp <- triangle.plot(shaperatio[,1:3], cpoint = 0, show.position =F)
points(tp, pch = c(1,2)[turtles[,1]])
colnames(shaperatio) <- colnames(turtles[,2:4])
tp <- triangle.plot(shaperatio[,1:3], cpoint = 0, show.position =F)
points(tp, pch = c(1,2)[turtles[,1]])
colnames(shaperatio) <- colnames(turtles[,2:4])
shaperatio
tp <- triangle.plot(log(shaperatio[,1:3]), cpoint = 0, show.position =F)
points(tp, pch = c(1,2)[turtles[,1]])
log(shaperatio[,1:3])
colnames(shaperatio) <- colnames(turtles[,2:4])
tp <- triangle.plot(shaperatio[,1:3], cpoint = 0, show.position =F)
points(tp, pch = c(1,2)[turtles[,1]])
help(triangle.plot)
prcomp(turtles[1:24, 2:4])
summary(prcomp(turtles[1:24, 2:4]))
( pr <- prcomp(turtles[1:24, 2:4]) )
# Rotation value contains the contribution of the original variables on principal components
summary(pr)
biplot(pr, xlim = c(-0.4, 0.5), col = 1)
( pr_log <- prcomp(log(turtles[1:24, 2:4])) )
summary(pr_log)
biplot(pr_log, xlim = c(-0.4, 0.5), col = 1)
isojoli <- function(mat){
# number of observations
n <- dim(mat)[1]
# number of log-transformed variables
p <- dim(mat)[2]
# the variance-covariance matrix
S <- var(log(mat))
# the theoretical eigenvector under the hypothesis of isometry
# i.e., all components equal to sqrt(i/p)
V1 <- rep(sqrt(1 / p), p)
# the first eivenvalue (variance on the first PC)
L1 <- svd(S)$d[1]
chiobs <- (n - 1) * (L1 * t(V1) %*% ginv(S) %*% V1 + (1 / L1) * t(V1) %*% S %+% V1 - 2)
unlist(list(Chisq = chiobs, p = pchisq(chiobs, p - 1, lower.tail = F)))
}
isojoli(turtles[1:24,2:4])
isojoli <- function(mat){
# number of observations
n <- dim(mat)[1]
# number of log-transformed variables
p <- dim(mat)[2]
# the variance-covariance matrix
S <- var(log(mat))
# the theoretical eigenvector under the hypothesis of isometry
# i.e., all components equal to sqrt(i/p)
V1 <- rep(sqrt(1 / p), p)
# the first eivenvalue (variance on the first PC)
L1 <- svd(S)$d[1]
chiobs <- (n - 1) * (L1 * t(V1) %*% ginv(S) %*% V1 + (1 / L1) * t(V1) %*% S %*% V1 - 2)
unlist(list(Chisq = chiobs, p = pchisq(chiobs, p - 1, lower.tail = F)))
}
# ----------
isojoli(turtles[1:24,2:4])
unlist(coli(prcomp(log(turtles[1:24,2:4]))[[2]][,1], rep(sqrt(1/3),3)))
coli <- function(ev1, ev2, nperm = 1000, graph = T){
dist <- numeric(nperm)
n <- length(ev1)
Angle <- function(v1, v2){
sum(v1 * v2) / (sqrt(sum(v1 ^ 2)) * sqrt(sum(v2 ^ 2)))
}
for(i in 1:nperm){
X1 <- runif(n, -1, 1)
X2 <- runif(n, -1, 1)
dist[i] <- angle(X1, X2)
}
zobs <- Angle(ev1, ev2)
pv <- length(dist[dist > zobs]) / nperm
if(graph){
hist(dist, breaks = 50, main = "Distribution of the cosine of the angle between 2 random vectors",
xlab = "Z statistic", ylab = "# of vect ealaloire",
sub = paste("Actual z-obs = ", round(zobs, 5), ": p <", round((1 - abs(0.5 - pv)), 5)))
abline(v = zobs)
}
return(list(z.stat = zobs, p = 1 ^ (abs(0.5 - pv)) * 2, angle = acos(zobs)))
}
pr_log <- prcomp(log(turtles[1:24, 2:4]))
( pr_log <- prcomp(log(turtles[1:24, 2:4])) )
( coli_output <- coli(pr_log)
( coli_output <- coli(pr_log) )
( coli_output <- coli(pr_log) )
( coli_output <- coli(pr_log) )
prcomp(log(turtles[1:24,2:4])
prcomp(log(turtles[1:24,2:4]))
prcomp(log(turtles[1:24,2:4]))
pr_log[[2]][,1]
( sing_val <- pr_log[[2]][,1] )
( coli_output <- sing_val, rep(sqrt(1/3), 3) )
( coli_output <- coli(sing_val, rep(sqrt(1/3), 3)) )
ev1 <- sing_val;  ev2 <- rep(sqrt(1/3), 3);
( coli_output <- coli(ev1, ev2) )
nperm = 1000
dist <- numeric(nperm)
n <- length(ev1)
Angle <- function(v1, v2){
sum(v1 * v2) / (sqrt(sum(v1 ^ 2)) * sqrt(sum(v2 ^ 2)))
}
for(i in 1:nperm){
X1 <- runif(n, -1, 1)
X2 <- runif(n, -1, 1)
dist[i] <- angle(X1, X2)
}
angle <- function(v1, v2){
temp <- sum(v1 * v2) / ( sqrt(sum(v1^2)) * sqrt(sum(v2^2)) )
}
unlist(coli(ev1, ev2))
ev2
plot(prog[,2:3], xlab = "PC2", ylab = "PC3", pch = 21, bg = c("black", "white")[turtles[,1]], asp = 1)
plot(proj[,2:3], xlab = "PC2", ylab = "PC3", pch = 21, bg = c("black", "white")[turtles[,1]], asp = 1)
pca <- prcomp(turtles[1:24, 2:4])
proj <- turtles[,2:4] %*% pca[[2]]
plot(proj[,2:3], xlab = "PC2", ylab = "PC3", pch = 21, bg = c("black", "white")[turtles[,1]], asp = 1)
plot(proj[,2:3], xlab = "PC2", ylab = "PC3", pch = 21, bg = c("black", "white")[turtles[,1]], asp = 1)
proj
pca <- prcomp(turtles[1:24, 2:4])
proj <- turtles[,2:4] %*% pca[[2]]
pca[[2]]
turtles[,2:4]
turtles[,2:4] %*% pca[[2]]
as.matrix(turtles[,2:4]) %*% pca[[2]]
proj <- as.matrix(turtles[,2:4]) %*% pca[[2]]
plot(proj[,2:3], xlab = "PC2", ylab = "PC3", pch = 21, bg = c("black", "white")[turtles[,1]], asp = 1)
lines(ELLI(proj[1:24, 2], proj[1:24, 3]))
lines(ELLI(proj[25:48, 2], proj[25:48, 3]))
( proj <- as.matrix(turtles[,2:4]) %*% pca[[2]] )
miris <- as.matrix(iris[,1:4])
lda(miris, as.factor(iris[,5]))
summary(lda(miris, as.factor(iris[,5])))
size <- apply(miris, 1, prod) ^ (1 / (dim(miris)[2]))
shapeiris <- miris / size
formlda <- lda(miris, as.factor(iris[,5]))
shapelda <- lda(shapeiris, as.factor(iris[,5]))
proj1 <- miris %*% formlda$scaling
proj2 <- shapeiris %*% shapelda$scaling
layout(matrix(c(1,2), 1, 2))
plot(proj1, pch = (1:3)[as.factor(iris[,5])], asp = 1, cex = 0.6, xlab = "FD1", ylab = "FD2", main = "Form FDA")
plot(proj2, pch = (1:3)[as.factor(iris[,5])], asp = 1, cex = 0.6, xlab = "FD1", ylab = "FD2", main = "Shape FDA")
( formlda <- lda(miris, as.factor(iris[,5])) )
( shapelda <- lda(shapeiris, as.factor(iris[,5])) )
meangroup <- formlda$means
meanproj <- meangroup %*% formula$scaling
dist(meanproj)
meangroup <- formlda$means
meanproj <- meangroup %*% formlda$scaling
dist(meanproj)
W <- var(miris[1:50,]) * 49 + var(miris[51:100,]) * 49 + var(miris[101:150,]) * 49
VCVw <- W / (150 - 3)
sqrt(diff(meangroup[1:2,]) %*% solve(VCVw) %*% t(diff(meangroup[1:2,])))
dist(predict(formlda, meangroup)$x)
