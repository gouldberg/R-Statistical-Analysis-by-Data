( ses <- z[match(x,1:3)] )
( ses <- factor(ses, levels = z, ordered=TRUE) )
plyr::revalue(ses, c("low"="small", "middle"="medium", "high"="large"))
ses2 <- ses[ses != "middle"]
summary(ses2)
ses2 <- droplevels(ses2)
ses2
x <- c(2,2,1,3,4,1,1,1,4,3,NA,NA)
table(x)
table(x, addNA=TRUE)
table(x, addNA(x))
addNA(x)
x
x <- c(2,2,1,3,4,1,1,1,4,3,NA,NA)
str(x)
x <- c(2,2,1,3,4,1,1,1,4,3,NA,NA)
str(x)
addNA(x)
table(addNA(x))
table(x, useNA="always")
factor(letters[1:20], label="LT")
x1 <- gl(2, 8, label=c("C", "T"))
( x1 <- gl(2, 8, label=c("C", "T")) )
( x1 <- gl(2, 8, label=c("C", "T"), ordered=TRUE) )
nlevels(x1)
( x1 <- gl(n = 2, k = 8, labels=c("C", "T"), ordered=TRUE) )
nlevels(x1)
( x2 <- gl(n = 2, k = 8, length = 10, labels=c("C", "T"), ordered=TRUE) )
( x2 <- gl(n = 2, k = 8, length = 100, labels=c("C", "T"), ordered=TRUE) )
( a <- gl(n = 2, k = 4) )
( b <- gl(n = 2, k = 2, labels = c("c", "t")) )
interaction(a, b, sep="_")
a:b
a:b
( a <- gl(n = 2, k = 4) )
( b <- gl(n = 2, k = 2, labels = c("c", "t")) )
a:b
interaction(a, b, sep="_")
a*b
( ff < factor(substring("statistics", 1:10, 1:10), levels=letters) )
( ff < factor(substring("statistics", 1:10, 1:10), levels=letters) )
( ff <- factor(substring("statistics", 1:10, 1:10), levels=letters) )
ff[3]
ff[1:3] <- c("f", "a", "n")
ff
ff[,drop=TRUE]
x <- c(1,2,3,2,1,3,2,1,2,3,2,1,1,1,2,3,3,2,2,1)
z <- c("low", "middle", "high")
( ses <- z[match(x,1:3)] )
( ses <- factor(ses, levels = z, ordered=TRUE) )
# ----------
# You can also reverse the order of levels if desired by rev(levels())
( ses <- factor(ses, levels = rev(levels(ses))) )
# ---------------------------------------------------------------------------
# Revalue levels by plyr::revalue()
# ---------------------------------------------------------------------------
( ses <- factor(ses, levels = rev(levels(ses))) )
plyr::revalue(ses, c("low"="small", "middle"="medium", "high"="large"))
# ---------------------------------------------------------------------------
# Dropping levels
# ---------------------------------------------------------------------------
# dataframe without "middle"
ses2 <- ses[ses != "middle"]
summary(ses2)
ses3 <- droplevels(ses2)
ses3
ses4 <- ses2[,drop=TRUE]
ses4
str(InspectSprays)
str(InsectSprays)
InspectSprays$spray
InsectSprays$spray
reorder(spray, count, median)
with(InsectSprays, reorder(spray, count, median))
library(dplyr)
library(ggplot2)
diamonds
ggplot(dagta = diamonds) + stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun,y = median
)
ggplot(dagta = diamonds) + stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(data = diamonds) + stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_bin
# min, max, and median for "depth" by "cut"
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
fun.y = mean,
geom = "pointrange"
) +
stat_summary(
fun.y = mean,
geom = "line"
)
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary(
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
fun.y = mean,
geom = "pointrange"
) +
stat_summary(
fun.y = mean,
geom = "line"
)
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary(
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
fun.y = mean,
geom = "pointrange"
)
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary(
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
fun.y = mean
)
ggplot(data = diamonds) + stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(data = diamonds, aes(x = cut, y = depth)) +
stat_summary(
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
fun.y = mean
)
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue"))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow=2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ class, nrow=2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + geom_smooth()
ggplot(data = mpg) + geom_point(mapping = aes(colour = class)) + geom_smooth()
ggplot(data = mpg, mapping = aes(colour = class)) + geom_point(mapping = aes(color = class)) + geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(colour = class)) + geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(colour = class)) + geom_smooth(mapping = aes(ltype = class))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(colour = class)) + geom_smooth(mapping = aes(colour = class))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(colour = class)) + geom_smooth(mapping = aes(colour = class), se=FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(colour = class)) +
geom_smooth(mapping = aes(linetype = class), se=FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() + geom_smooth() + facet_wrap()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() + geom_smooth() + facet_wrap(~ class, nrow=2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() + geom_smooth(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow=2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(colour = class)) +
geom_smooth(
data = filter(mpg, classs = "subcompact"), se=FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(colour = class)) +
geom_smooth(
data = filter(mpg, classs = "subcompact"),
se=FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(colour = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se=FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(colour = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se=FALSE
) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(colour = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se=FALSE
) +
geom_smooth(colour="black")
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + geom_abline()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed()
help(geom_abline)
p + geom_smooth(method = "lm", se = FALSE)
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed()
help(geom_abline)
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline(intercept = 22, slope = 1) + coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline(intercept = 12, slope = 1) + coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline(intercept = 2, slope = 1) + coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline(intercept = 4, slope = 1) + coord_fixed()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline(intercept = 6, slope = 1) + coord_fixed()
help(geom_smooth)
help(geom_abline)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p + geom_smooth(method = "lm", se = FALSE)
coef(lm(mpg ~ wt, data = mtcars))
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p + geom_smooth(method = "lm", se = FALSE)
p + geom_smooth(method = "lm", se = TRUE)
p <- ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
p + geom_smooth(method = "lm", se = TRUE)
p <- ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(mapping = aes(colour = class))
p + geom_smooth(method = "lm", se = TRUE)
l1 <- list(1:3, "a", c(TRUE, FALSE, TRUE))
l1
str(l1)
l2 <- list(l1, c(2.5,4.2))
str(l2)
l3 <- append(l1, list(c(2.5, 4.2)))
str(l3)
l1$item4 <- c(2.5, 4.2)
str(l1)
l1[[1]] <- c(l1[[1]], 4:6)
str(l1)
l1[[1]] <- c(l1[[1]], 4:6)
l1[[2]] <- c(l1[[2]], c("dding", "to a", "list"))
str(l1)
table1
table2
table3
table3 %>% separate(rate, into = c("cases", "population")
table3 %>% separate(rate, into = c("cases", "population"))
table3 %>% separate(rate, into = c("cases", "population"), convert=TRUE)
table3 %>% separate(year, into = c("century", "year"), sep=2)
table5
table5 %>% unite(new, centry, year)
table5 %>% unite(new, century, year)
table5
table5 %>% unite(new, century, year)
table5 %>% unite(new, century, year, sep="")
library(magrittr)
rnorm(100) %>% matrix(ncol = 2) %T% plot() %>% str()
library(magrittr)
rnorm(100) %>% matrix(ncol = 2) %T% plot() %>% str()
rnorm(100) %>% matrix(ncol = 2) %T>% plot() %>% str()
rnorm(100) %>% matrix(ncol = 2) %>% plot()
rnorm(100) %>% matrix(ncol = 2) %>% str()
mtcars %$% cor(disp, mpg)
with(mtcars, cor(disp, mpg))
mtcars
mtcars %<>% transform(cyl = cyl * 2)
head(mtcars)
mtcars %<>% transform(cyl = cyl * 2)
head(mtcars)
mtcars %>% filter(carb > 1) %>% extract(, 1:4) %T>% plot() %>% summary()
mtcars %>% filter(carb > 1) %>% extract(., 1:4) %T>% plot() %>% summary()
help(extract)
mtcars %>% filter(carb > 1)
mtcars %>% filter(carb > 1) %>% extract(., 1:4)
mtcars %>% filter(carb > 1) %>% extract(., mpg:hp) %T>% plot() %>% summary()
mtcars %>% filter(carb > 1) %>% extract(., mpg:hp) %T>% plot() %>% summary()
mtcars %>% filter(carb > 1) %>% extract(., 1:4) %T>% plot() %>% summary()
extract(flights, 1:4)
extract(flights, year)
extract(flights, "year")
extract(flights, "year":"hp")
help(extract)
mtcars %>% set_colnames8paste("Col", 1:11, sep="")
mtcars %>% set_colnames(paste("Col", 1:11, sep="")
mtcars %>% set_colnames(paste("Col", 1:11, sep=""))
mtcars %>% set_colnames(paste("Col", 1:11, sep="")) %>% head
help("multiply_by")
mtcars %>% extract(., "mpg") %>% multiply_by(5)
mpg
mtcars
mtcars %>% extract(., "mpg", "cyl") %>% multiply_by()
mtcars %>% extract(., "mpg", "cyl") %>% multiply_by(5)
mtcars %>% extract(., "mpg", "cyl")
mtcars %>% extract(., c("mpg", "cyl"))
mtcars %>% extract(., c("mpg", "cyl")) %>% multiply_by(5)
mtcars %>% extract(., "mpg") %>% add("cyl")
mtcars %>% extract(., "mpg") %>% add(., "cyl")
mtcars %>% extract(., "mpg") %>% add(5)
mtcars %>% extract(., "mpg") %>% '/' 6
mtcars %>% extract(., "mpg") %>% '/'(6)
mtcars %>% extract(., "mpg") %>% '*'(5)
mtcars %>% extract(., "mpg") %>% divide_by(6)
mtcars %>% extract(., "mpg") %>% '/'(6)
mtcars %>% extract(., "mpg") %>% add(6)
mtcars %>% extract(., "mpg") %>% '+'(6)
mtcars %>% extract(., "mpg") %>% raise_to_power(2)
mtcars %>% extract(., "mpg") %>% '^'(6)
mtcars %>% extract(., "mpg") %>% raise_to_power(2)
mtcars %>% extract(., "mpg") %>% '^'(2)
mtcars %>% extract(., "mpg") %>% raise_to_power(2)
mtcars %>% extract(., "mpg") %>% '^'(2)
good.times <-
Sys.Date() %>%
as.POSIXct %>%
seq(by = "15 mins", length.out = 100) %>%
data.frame(timestamp = .)
good.times
( good.times$quarter <-
good.times %>%
use_series(timestamp) %>%
format("%M") %>%
as.numeric %>%
divide_by_int(15) %>%
add(1) )
mtcars$mpg %<>% sqrt
rm(list=ls())
nyfilights
flights
library(lattice)
library(dplyr)
library(ggplot2)
library(lattice)
xyplot(hwy ~ displ, data = mpg)
xyplot(hwy ~ displ, data = mpg, groups = class)
xyplot(hwy ~ displ, data = mpg, groups = class, aspect = "iso")
xyplot(hwy ~ displ, data = mpg, groups = class)
xyplot(hwy ~ displ, data = mpg, groups = class, col="black")
xyplot(hwy ~ displ, data = mpg, groups = class)
xyplot(hwy ~ displ, data = mpg, groups = class, fill = fill)
xyplot(hwy ~ displ, data = mpg, groups = class, pch=21)
xyplot(hwy ~ displ, data = mpg, groups = class)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 40)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 10)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 1)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 5)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 3)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 2)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 10)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 20)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 15)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 13)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 21)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 2)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 3)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 4)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 5)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 6)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 10)
xyplot(hwy ~ displ | class, data = mpg, pch = 10)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 3)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 12)
xyplot(hwy ~ displ, data = mpg, groups = class, pch = 20)
xyplot(hwy ~ displ | class, data = mpg, pch = 20)
xyplot(hwy ~ displ | class, data = mpg, groups = c(drv, cyl), pch = 20)
xyplot(hwy ~ displ | class, data = mpg, groups = c(drv), pch = 20)
xyplot(hwy ~ displ | class, data = mpg, groups = c(drv, cyl), pch = 20)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
xyplot(hwy ~ displ | class + displ + hwy, data = mpg, pch = 20)
xyplot(hwy ~ displ | class + drv + cyl, data = mpg, pch = 20)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
xyplot(hwy ~ displ | class + drv + cyl, data = mpg, pch = 20)
xyplot(hwy ~ displ | drv + cyl, data = mpg, pch = 20)
bwplot(factor(class) ~ hwy, data = mpg)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot()
bwplot(factor(class) ~ hwy, data = mpg, varwidth = TRUE)
bwplot(factor(class) ~ hwy, data = mpg)
bwplot(factor(class) ~ hwy, data = mpg, varwidth = TRUE)
bwplot(hwy ~ factor(class), data = mpg)
bwplot(factor(class) ~ factor(class), data = mpg)
bwplot(factor(class) ~ hwy, data = mpg)
bwplot(hwy ~ factor(class), data = mpg)
bwplot(factor(class) ~ hwy, data = mpg, varwidth = TRUE)
bwplot(hwy ~ factor(class), data = mpg, varwidth = TRUE)
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"))
xyplot(hwy ~ displ, data = mpg, type = c("smooth"))
xyplot(hwy ~ displ, data = mpg, type = c("g", "smooth"))
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"))
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"), col.line = "black")
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"), col.line = "black", pch = 20)
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"), col.line = "black", pch = 21)
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"), col.line = "black", pch = 20)
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "r"), col.line = "black", pch = 20)
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"), groups = class, col.line = "black", pch = 20)
xyplot(hwy ~ displ, data = mpg, type = c("g", "p", "smooth"), groups = class, pch = 20)
xyplot(hwy ~ displ | class, data = mpg, type = c("g", "p", "smooth"), pch = 20)
library(dplyr)
library(stringr)
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c("Good", time_of_day, " ", name, if(birthday) " and HAPPY BIRTHDAY")
str_c("Good ", time_of_day, " ", name, if(birthday) " and HAPPY BIRTHDAY")
birthday <- TRUE
str_c("Good ", time_of_day, " ", name, if(birthday) " and HAPPY BIRTHDAY", ".")
setwd("//media//kswada//MyFiles//R//gapminder")
packages <- c("dplyr", "modelr", "tidyverse")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
packages <- c("dplyr", "modelr", "tidyverse", "gapminder")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
gapminder
str(gapminder)
gapminder %<% ggplot(aes(year, lifeExp, group = country)) + geom_line(alpha = 1/3)
gapminder %>% ggplot(aes(year, lifeExp, group = country)) + geom_line(alpha = 1/3)
nz <- filter(gapminder, country == "New Zealand")
nz %>% ggplot(aes(year, lifeExp)) + geom_line() + ggtitle("Full data = ")
nz %>% add_predictions(nz_mod) %>% ggplot(aes(year, pred)) + geom_line() + ggtitle("Linear trend")
nz_mod <- lm(lifeExp ~ year, data = nz)
nz %>% add_predictions(nz_mod) %>% ggplot(aes(year, pred)) + geom_line() + ggtitle("Linear trend")
nz %>% add_residuals(nz_mod) %>% ggplot(aes(year, resid)) + geom_hline(yintercept = 0, colour = "white", size = 3) + geom_line() + ggtitle("Remaining pattern")
by_country <- gapminder %>% group_by(country, continent) %>% nest()
by_country
by_country$data[[1]]
country_model <- function(df){ lm(lifeExp ~ year, data = df) }
models <- map(by_country$data, country_model)
by_country <- by_country %>% mutate(model = map(data, country_model))
by_country
by_country %>% filter(continent == "Europe")
by_country %>% arrange(continent, country)
by_country <- by_country %>% mutate(resids = map2(data, model, add_residuals))
by_country
resids <- unnest(by_country, resids)
resids
resids %>% ggplot(aes(year, resid)) + geom_line(aes(group = country), alpha = 1/3) + geom_smooth(se = FALSE)
redis %>% ggplot(aes(year, resid, group = country)) + geom_line(alpha = 1/3) + facet_wrap(~continent)
resids %>% ggplot(aes(year, resid, group = country)) + geom_line(alpha = 1/3) + facet_wrap(~continent)
broom::glance(nz_mod)
by_country %>% mutate(glance = map(model, broom::glance)) %>% unnest(glance)
glance <- by_country %>% mutate(glance = map(model, broom::glance)) %>% unnest(glance, .drop = TRUE)
glance
glance %>% arrange(r.squared)
glance %>% ggplot(aes(continent, r.squared)) + geom_jitter(width = 0.5)
gapminder %>% semi_join(bad_fit, by = "country") %>% ggplot(aes(year, lifeExp, color = country)) + geom_line()
bad_fit <- filter(glance, r.squared < 0.25)
gapminder %>% semi_join(bad_fit, by = "country") %>% ggplot(aes(year, lifeExp, color = country)) + geom_line()
aug <- by_country %>% mutate(aug = map(model, broom::augment)) %>% unnest(augment, .drop = TRUE)
by_country %>% mutate(aug = map(model, broom::augment))
glance <- by_country %>% mutate(glance = map(model, broom::glance)) %>% unnest(glance, .drop = TRUE)
aug <- by_country %>% mutate(aug = map(model, broom::augment)) %>% unnest(aug, .drop = TRUE)
aug
df <- data.frame(
a = rnorm(100),
b = rpois(10, 100),
c = rbinom(10, prob=0.1, n = 100)
)
head(df)
sapply(df, fivenum)
apply(df, MARGIN=2, FUN=fivenum)
do.call(cbind, lapply(x, fivenum))
do.call(cbind, lapply(df, fivenum))
example("InsectSprays")
capabilities
capabilities()
l1 <- list(1:3, "a", c(TRUE, FALSE, TRUE))
str(l1)
# ----------
# If we add the new elements with list(), it will create a list of two components,
#  - component 1 will be a nested list of the original list
#  - component 2 will be the new elements added
l2 <- list(l1, c(2.5,4.2))
str(l2)
# ----------
# simply add a fourth list component without creating nested lists by append()
l3 <- append(l1, list(c(2.5, 4.2)))
str(l3)
# alternatively, we can also add a new list component by utilizing the $ sign and naming the new item
l1$item4 <- c(2.5, 4.2)
str(l1)
c(l1, l2)
ls1 <- list(1:3, "a", c(TRUE, FALSE, TRUE))
ls2 <- list(runif(2))
c(l1, l2)
c(ls1, ls2)
l1 <- list(1:3, "a", c(TRUE, FALSE, TRUE))
str(l1)
# ----------
# If we add the new elements with list(), it will create a list of two components,
#  - component 1 will be a nested list of the original list
#  - component 2 will be the new elements added
l2 <- list(l1, c(2.5,4.2))
str(l2)
l3 <- append(l1, list(c(2.5, 4.2)))
str(l3)
c(l1, list(c(2.5, 4.2)))
l3_2 <- c(l1, list(c(2.5, 4.2)))
str(l3_2)
str(l3)
x <- list(a = 1:3, b = runif(3))
x
do.call("cbind", x)
sapply(x, cbind)
sapply(x, "+")
names(iris)
names(iris) <- abbreviate(iris)
str(iris)
names(iris)
iris
