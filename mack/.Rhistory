eff.cowles[[1]]
eff.cowles[[2]]
plot(eff.cowles, "sex", axes=list(y=list(lab="Prob(Volunteer)")))
plot(eff.cowles, "neuroticism:extraversion",
axes=list(y=list(lab="Prob(Volunteer)", ticks=list(at=c(.1,.25,.5,.75,.9)))))
plot(Effect(c("neuroticism", "extraversion"), mod.cowles,
confint=list(type="Scheffe"),
xlevels=list(extraversion=seq(0, 24, 6)),
fixed.predictors=list(given.values=c(sexmale=0.5))),
axes=list(y=list(lab="Prob(Volunteer)", ticks=list(at=c(.1,.25,.5,.75,.9)))))
mod <- lm(prestige ~ type*(education + income + women), Prestige)
summary(mod)
plot(predictorEffects(mod, ~income))
eff2 <- effect("colour:age", mod, xlevels=list(age=15:45))
eff2
plot(eff2, rescale.axis=FALSE, multiline=TRUE, ylab="Probability(released)", rug=FALSE)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//heger_priede")
packages <- c("dplyr", "lattice")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Heger Priede
#   - data from Heger et al. (2008) who looked at deep-sea pelagic bioluminescence (light omission of a living organism) in the summer of 2004
#     during a voyage of the research vessel G.O.Sars from the Azores to Iceland.
#   - A camera mounted on a so-called lander, connected to the boat with a winch cable (Priede et al. 2006), was lowered through the water column.
#     As the system descended, any potentially bioluminescent organisms striking against, or passing through, a mesh screeen were mecahnically stimulated,
#     and light output was recorded. Depth, temperature, salinity, oxygen, and fluorescence levels were measured.
# ------------------------------------------------------------------------------
BL <- read.table(file = "//media//kswada//MyFiles//references//ZuurBeginnersGuideToGeneralizedAdditiveModelsWithR//HegerPriede.txt", header = TRUE)
str(BL)
names(BL)
# no missing value
colSums(is.na(BL))
# ------------------------------------------------------------------------------
# relationship between Sources and Depth
# ------------------------------------------------------------------------------
# The data were sampled at 14 tstations, but in the beginning our analysis we will ignore any potential station effects.
# scatterplot of depth in metres versus bioluminescence counts per cubic meter (called "Sources" in the data file)
# Scale Depth
BL$DepthOriginal <- BL$Depth
BL$Depth <- BL$Depth/max(BL$Depth)
par(mfrow=c(1,2))
plot(x = BL$DepthOriginal, y = BL$Sources, xlab = "Depth", ylab ="Sources",  cex.lab = 1.5)
plot(x = BL$Depth, y = BL$Sources, xlab = "Scaled depth", ylab ="Sources",  cex.lab = 1.5, cex = 0.7,  pch = 16, col = grey(0.5))
# ------------------------------------------------------------------------------
# Assess collineartity
Mybwplot <- function(Z, MyVar, TargetVar){
#Multipanel boxplots
#Z: data set
#MyVar: character string
#TargetVar: variable for the x-axis..must be a factor
AllY <- as.vector(as.matrix(Z[,MyVar]))
AllX <- rep(Z[,TargetVar], length(MyVar))
ID <- rep(MyVar, each = nrow(Z))
P <- bwplot(AllY ~ factor(AllX) | ID, horizontal = FALSE,
ylab = "", xlab = "",
scales = list(alternating = T,cex.lab = 1.5,
x = list(relation = "same",rot =90, abbreviate = TRUE, cex = 1.5),
y = list(relation = "free", draw = FALSE)),
strip = strip.custom(bg = 'white',
par.strip.text = list(cex = 1.2)),
cex = .5,
par.settings = list(
box.rectangle = list(col = 1),
box.umbrella  = list(col = 1),
plot.symbol   = list(cex = .5, col = 1)))
print(P)
}
MyVar <- c("Sources", "Depth", "Temp", "Salinity", "Oxgen", "flcugl")
Mybwplot(BL, MyVar, "Station")
M1 <- lm(Sources ~ Depth, data = BL)
print(summary(M1), digits = 2, signif.stars = FALSE)
par(mfrow=c(1,1))
plot(x = BL$Depth, y = BL$Sources, xlab = "Scaled depth", ylab ="Sources",  cex.lab = 1.5, cex = 0.7,  pch = 16, col = grey(0.5))
abline(M1, lwd = 5)
E1 <- rstandard(M1)
F1 <- fitted(M1)
par(mfrow=c(1,2), mar = c(5,5,2,2))
plot(x = F1, y = E1, xlab = "Fitted values",  ylab = "Residuals",  cex.lab = 1.5)
abline(h = 0, v = 0)
plot(x = BL$Depth, y = E1,  xlab = "Depth",  ylab = "Residuals",  cex.lab = 1.5)
abline(h = 0)
rk <- function(x,z) ((z-0.5)^2-1/12)*((x-0.5)^2-1/12)/4 -((abs(x-z)-0.5)^4 -0.5*(abs(x-z)-0.5)^2 +7/240)/24
x <- BL$Depth
x
xk <- QD[2:10]
xk <- QD[2:10]
probs <- seq(0, 1, length = 11)
QD    <- quantile(BL$Depth, probs)
QD
QD
xk <- QD[2:10]
xk
q <- length(xk) + 2  # including outer knots (first and last)
n <- length(x)
X <- matrix(1, n, q)
X[,2] <- x
x
xk
head(x)
head(xk)
X
head(X)
outer(x, xk, FUN=rk)
help(outer)
x <- 1:9; names(x) <- x
x
x %o% x
y <- 2:8; names(y) <- paste(y,":", sep = "")
outer(y, x, "^")
y
x
outer(month.abb, 1999:2003, FUN = "paste")
xtabs(~ family, data = data)
setwd("//media//kswada//MyFiles//R//donner")
packages <- c("dplyr", "vcd", "MASS", "datasets")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Donner
# ------------------------------------------------------------------------------
data("Donner", package = "vcdExtra")
dim(Donner)
str(Donner)
car::some(Donner)
data <- Donner
data$survived <- factor(Donner$survived, labels = c("no", "yes"))
xtabs(~ family, data = data)
setwd("//media//kswada//MyFiles//R//donner")
packages <- c("dplyr", "vcd", "MASS", "datasets")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data("Donner", package = "vcdExtra")
library(vcdExtra)
install.packages("vcdExtra")
data("Donner", package = "vcdExtra")
dim(Donner)
str(Donner)
car::some(Donner)
data <- Donner
data$survived <- factor(Donner$survived, labels = c("no", "yes"))
xtabs(~ family, data = data)
fam <- data$family
levels(fam)[c(3,4,6,7,9)] <- "Others"
fam <- factor(fam, levels(fam)[c(1, 2, 4:6, 3)])
data$family <- fam
xtabs(~ family, data = data)
fam <- data$family
levels(fam)[c(3,4,6,7,9)] <- "Others"
fam <- factor(fam, levels(fam)[c(1, 2, 4:6, 3)])
data$family <- fam
xtabs(~ family, data = data)
graphics.off()
spineplot(xtabs(~ family + survived, data = data))
gpairs::gpairs(data[,c(4, 2, 3, 1)], diag.pars = list(fontsize = 20, hist.color = "gray"),
mosaic.pars = list(gp = shading_Friendly), outer.rot = c(45, 45))
install.packages("gpairs",dep=T)
gpairs::gpairs(data[,c(4, 2, 3, 1)], diag.pars = list(fontsize = 20, hist.color = "gray"),
mosaic.pars = list(gp = shading_Friendly), outer.rot = c(45, 45))
graphics.off()
gg <- ggplot(data, aes(age, as.numeric(survived=="yes"), color = sex)) + ylab("Survived") + theme_bw() +
geom_point(position = position_jitter(height = 0.02, width = 0))
# add conditional linear logistic regressions
gg + stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ x, alpha = 0.2, size = 2, aes(fill = sex))
gg + stat_smooth(method = "loess", span=0.9, alpha = 0.2, size = 2, aes(fill = sex)) + coord_cartesian(ylim = c(-.05, 1.05))
gg + stat_smooth(method = "glm", method.args = list(family = "binomial"), formula = y ~ poly(x,2), alpha = 0.2, size = 2, aes(fill = sex))
donner.mod1 <- glm(survived ~ age + sex, data = data, family = binomial)
donner.mod2 <- glm(survived ~ age * sex, data = data, family = binomial)
car::Anova(donner.mod1)
car::Anova(donner.mod2)
library(splines)
donner.mod5 <- glm(survived ~ ns(age,2) * sex, data = data, family = binomial)
donner.mod6 <- glm(survived ~ ns(age,4) * sex, data = data, family = binomial)
car::Anova(donner.mod5)
car::Anova(donner.mod6)
# ----------
# With four more parameters, donner.mod6 fits better and has a smaller AIC.
vcdExtra::LRstats(donner.mod4, donner.mod5, donner.mod6)
donner.eff6 <- effects::allEffects(donner.mod6, xlevels = list(age=seq(0, 50, 5)))
plot(donner.eff6, ticks = list(at=c(0.001, 0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)))
ns(data$age,4)
attr(ns(data$age,4), "knots")
head(dat$age)
head(data$age)
head(ns(data$age,4))
1 + (23-7.25)*0.75 + (23-20.50)*0.18 + (23-28)*0.09 + (23-50)*(-0.05)
1 + (23-1)*0.75 + (23-7.25)*0.18 + (23-20.5)*0.09 + (23-28)*(-0.05)
1 + (23)*0.75 + (23-7.25)*0.18 + (23-20.5)*0.09 + (23-28)*(-0.05)
1 + (23)*0.7469 + (23-7.25)*0.1807 + (23-20.5)*0.0918 + (23-28)*(-0.04919)
1 + (23-7.25)*0.75 + (23-20.50)*0.18 + (23-28)*0.09 + (23-70)*(-0.05)
help(ns)
car::crPlots(donner.mod1, ~ age, smooth = list(span = 0.5),
id = TRUE, showLabels = list(method=list(abs(residuals(donner.mod1, type="pearson")), "x"), n=2, cex=1, col=car::carPalette()[1], location="lr"))
car::crPlots(donner.mod3, ~ poly(age,2), smooth = list(span = 0.5),
id = TRUE, showLabels = list(method=list(abs(residuals(donner.mod1, type="pearson")), "x"), n=2, cex=1, col=car::carPalette()[1], location="lr"))
col <- ifelse(data$survived == "yes", "blue", "red")
pch <- ifelse(data$sex == "Male", 16, 17)
car::avPlots(donner.mod1, id = TRUE, col = col, pch = pch, col.lines = "darkgreen")
data(mack, package = "gamair")
data(mackp, package = "gamair")
data(coast, package = "gamair")
str(mack)
str(mackp)
str(coast)
summary(mack)
table(mack$time)
table(mack$country)
table(mack$vessel)
psych::describe(mack)
# ----------
plot(coast$lon, coast$lat, type="l", col = "blue")
# or draw it clipped to  whatever the current plot is....
# lines(coast$lon, coast$lat, col="blue")
par(new = T)
plot(lat ~ lon, data = mackp, cex = 0.3)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- names(mack)
Mydotplot(as.matrix(mack[,MyVar1]))
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- names(mack)
Mydotplot(as.matrix(mack[,MyVar1]))
# -->
# many zero for egg.count
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
#               scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- names(mack)
Mydotplot(as.matrix(mack[,MyVar1]))
# -->
# many zero for egg.count
summary(mack)
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
# or draw it clipped to  whatever the current plot is....
# lines(coast$lon, coast$lat, col="blue")
par(new = T)
plot(lat ~ lon, groups = tmp$country, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
str(mackp)
str(mack)
par(new = T)
plot(lat ~ lon, groups = mack$country, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
str(mackp)
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
# or draw it clipped to  whatever the current plot is....
# lines(coast$lon, coast$lat, col="blue")
par(new = T)
plot(lat ~ lon, groups = mack$country, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
mack$country
mackp$country
str(mackp)
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
plot(lat ~ lon, g = mack$country, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(lat ~ lon, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
plot(lat ~ lon, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
# or draw it clipped to  whatever the current plot is....
# lines(coast$lon, coast$lat, col="blue")
par(new = T)
plot(lat ~ lon, col = 1:4, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
par(new = T)
plot(lat ~ lon, col = mack$country, data = mackp, cex = 0.3, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(lat ~ lon, col = mack$country, data = mackp, cex = 1, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(coast$lon, coast$lat, type="l", col = "blue", las = 1)
# or draw it clipped to  whatever the current plot is....
# lines(coast$lon, coast$lat, col="blue")
par(new = T)
plot(lat ~ lon, col = mack$country, data = mackp, cex = 1, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
library(car)
formula <- ~ egg.count + b.depth + c.dist + log(salinity) + temp.surf + temp.20m + log(net.area)
scatterplotMatrix(formula, data = mack,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
library(psych)
var_obj <- c("egg.count", "b.depth", "c.dist", "salinity", "temp.surf", "temp.20m", "net.area")
# here we apply method = "spearman" due to terrible skewness
pairs.panels(mack[, var_obj], ci = TRUE, smoother = TRUE, stars = TRUE, method = "spearman")
Myxyplot <- function(Z, MyV, NameY1, MyXlab = "", MyYlab="") {
AllX  <- as.vector(as.matrix(Z[,MyV]))
AllY  <- rep(Z[,NameY1] , length(MyV))
AllID <- rep(MyV, each = nrow(Z))
library(mgcv)
library(lattice)
P <- xyplot(AllY ~ AllX|factor(AllID), col = 1,
xlab = list(MyXlab, cex = 1.5),
#ylab = list("Response variable", cex = 1.5),
#ylab = list("Pearson residuals", cex = 1.5),
ylab = list(MyYlab, cex = 1.5),
#layout = c(2,2),   #Modify
strip = function(bg='white', ...) strip.default(bg='white', ...),
scales = list(alternating = T, x = list(relation = "free"), y = list(relation = "same")),
panel=function(x, y){
panel.grid(h=-1, v= 2)
panel.points(x, y, col = 1)
panel.loess(x, y, span = 0.8,col = 1, lwd = 2)
})
print(P)
}
MyVar <- c("b.depth", "c.dist", "salinity", "temp.surf", "temp.20m", "net.area")
Myxyplot(mack, MyVar, "egg.count")
mack$log.net.area <- log(mack$net.area)
mod_glm <- glm(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = poisson)
mod_glm2 <- glm(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
# ----------
summary(mod_glm)
summary(mod_glm2)
car::residualPlots(mod_glm)
car::residualPlots(mod_glm2)
graphics.off()
par(mfrow=c(1,1))
plot(mod_glm)
mack$log.net.area <- log(mack$net.area)
# ----------
# The square root transofrm of b.depth is to reduce leverage from very high values
# select = TRUE:  add an extra penalty to each term so that it can be penalized to zero.
# This means that the smoothing parameter estimation that is part of fitting can completely remove terms from the model
# If the corresponding smoothing parameter is estimated as zero then the extra penalty has no effect.
gmtw <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(salinity) + s(temp.surf) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
summary(gmtw)
gmnb <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(salinity) + s(temp.surf) + s(temp.20m) + offset(log.net.area),
data = mack, family = nb, method = "REML", select = TRUE)
summary(gmnb)
par(mfrow = c(1, 2))
plot(fitted(gmtw), resid(gmtw))
plot(fitted(gmnb), resid(gmnb))
car::residualPlot(gmtw)
car::residualPlot(gmnb)
AIC(gmtw, gmnb)
car::residualPlot(mod_glm2)
car::residualPlot(gmtw)
car::residualPlot(gmnb)
graphics.off()
par(mfrow = c(2, 2))
car::residualPlot(mod_glm2)
car::residualPlot(gmtw)
car::residualPlot(gmnb)
AIC(gmtw, gmnb)
plot(gmtw, shade = TRUE)
graphics.off()
par(mfrow = c(2,2))
plot(gmtw, shade = TRUE)
summary(gmnb)
plot(gmtw, shade = TRUE)
par(mfrow = c(2,2))
plot(gmtw, shade = TRUE)
data = mack, family = tw, method = "REML", select = TRUE)
gm1
# -->
# still give a fully penalized temp.surf effect, so that is dropped too.
# ----------
# drop temp.surf
gm2 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm2
# ----------
car::residualPlot(gm1)
car::residualPlot(gm2)
# some residual plots
graphics.off()
par(mfrow = c(2,3))
plot(mack$temp.20m, resid(gm2))
plot(mack$lat, resid(gm2))
plot(mack$lon, resid(gm2))
plot(mack$temp.surf, resid(gm2))
plot(mack$c.dist, resid(gm2))
qqnorm(resid(gm2));  qqline(resid(gm2))
# Estimated non-linear effects
par(mfrow = c(2, 2))
plot(coast$lon, coast$lat, type="l", col = "blue")
par(new = T)
plot(gm2, shade = TRUE)
summary(gm2)
mackp$log.net.area <- rep(0, nrow(mackp))
lon <- seq(-15, -1, 1/4)
lat <- seq(44, 58, 1/4)
# ----------
zz <- array(NA, 57 * 57)
zz[mackp$area.index] <- predict(gm2, mackp)
graphics.off()
par(mfrow=c(1,1))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
# -->
# Notice tha substantial problem that the egg densities remain high at the western boundary of the survey data.
# (the right side is the western boundary)
set.seed(4)
br1 <- rmvn(n = 1000, coef(gm2), vcov(gm2))
br1
Xp <- predict(gm2, newdata = mackp, type = "lpmatrix")
mean.eggs1 <- colMeans(exp(Xp %*% t(br1)))
# ----------
hist(mean.eggs1)
# ----------
# smoothing parameter uncertainty correction by substituting vcov(gm2, unconditional = TRUE) for vcov(gm2)
set.seed(4)
br2 <- rmvn(n = 1000, coef(gm2), vcov(gm2, unconditional = TRUE))
br2
mean.eggs2 <- colMeans(exp(Xp %*% t(br2)))
# ----------
par(mfrow = c(2, 1), mar = c(2,2,2,2))
hist(mean.eggs1)
hist(mean.eggs2)
# ----------
summary(mean.eggs1)
summary(mean.eggs2)
mack$log.net.area <- log(mack$net.area)
gm_sos <- gam(egg.count ~ s(lon, lat, bs = "sos", k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm_sos
# ----------
summary(gm_sos)
AIC(gm2, gm_sos)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
zz_sos <- array(NA, 57*57)
zz_sos[mackp$area.index] <- predict(gm_sos, mackp)
par(mfrow = c(1,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
gmgps <- gam(egg.count ~ s(lon, lat, bs = "gp", k = 100, m = c(1, 1)) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gmgps
# ----------
summary(gmgps)
# ----------
AIC(gm2, gm_sos, gmgps)
plot(gmgps, shade = TRUE)
# ----------
graphics.off()
par(mfrow = c(2,2))
plot(gmgps, shade = TRUE)
gamgr <- gam(egg.count ~ s(lon, lat, k = 100) + s(lon, lat, by = temp.20m) + s(lon, lat, by = I(b.depth^.5)) + offset(log.net.area),
data = mack, family = tw, method = "ML")
gamgr
# ----------
summary(gamgr)
# ----------
AIC(gm2, gm_sos, gamgr)
# -->
# It has an AIC value 15 lower than gm2, so is worth serious consideration as an alternative model.
summary(gamgr)
# ----------
AIC(gm2, gm_sos, gamgr)
zz_ggps <- array(NA, 57*57)
zz_ggps[mackp$area.index] <- predict(gmgps, mackp)
zz_gr <- array(NA, 57*57)
zz_gr[mackp$area.index] <- predict(gamgr, mackp)
par(mfrow = c(2,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_ggps, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_ggps, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
# -->
# Noticeably rougher as a result of the suppression of long-range autocorrelation
image(lon, lat, matrix(zz_gr, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_gr, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
# -->
# Noticeably smoother than the previous models, although not radically different in general appearance.
( Xp <- predict(gamgr, newdata = mackp, type = "lpmatrix") )
attributes(Xp)$dimnames[[2]]
# ----------
br <- rmvn(n = 1000, coef(gamgr), vcov(gamgr, unconditional = TRUE))
# ----------
mackp[1,]
Xp[1,]
br[1,1:100] %*% Xp[1,1:100]
br[1,] %*% Xp[1,]
br[1,]
Xp[1,]
