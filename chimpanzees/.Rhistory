si <- function(theta, dat, opt = TRUE){
# Return ML if opt == TRUE or fitted gam otherwise
# make identifiable by insisting that ||alpha|| = 1
alpha <- c(1, theta)  # alpha defined via unconstrained theta
kk <- sqrt(sum(alpha^2))
alpha <- alpha / kk  # ||alpha|| = 1
# ----------
# re-weight lagged covariates
o3 <- dat$o3 %*% alpha
tmp <- dat$tmp %*% alpha
pm10 <- dat$pm10 %*% alpha
# ----------
# bam with default REML smoothing parameter estimation in order to keep the computation time reasonable
# using the discrete = TRUE option to bam would speed up a little more again.
b <- bam(dat$death ~ s(dat$time, k = 200, bs = "cr") + s(pm10, bs = "cr") + te(o3, tmp, k = 8), family = poisson)  # fit model
# give user somthing to watch
cat(".")
# ----------
if(opt) return(b$gcv.ubre) else{
b$alpha <- alpha  # add alpha to model object
b$J <- outer(alpha, -theta / kk^2)  # get dalpha_i / dtheta_j
for(j in 1:length(theta)) b$J[j+1, j] <- b$J[j+1, j] + 1/kk
return(b)
}
}
# ----------
# IT TAKES TIME !!!:  around 30 min.
f1 <- optim(rep(1, 5), si, method = "BFGS", hessian = TRUE, dat = dat)
apl <- bam(death ~ s(time, bs = "cr", k = 200) + te(pm10, lag, k = c(10, 5)) + te(o3, tmp, lag, k = c(8, 8, 5)), family = poisson, data = dat)
summary(apl)
gam.check(apl)
plot(apl)
AIC(apsi, apl)
par(mfrow=c(1,3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 5))
plot(apl)
AIC(apsi, apl)
gam.check(apl)
plot(apl)
par(mfrow=c(1,3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 1))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 3))
vis.gam(apl, plot.type = "persp", view = c("o3", "tmp"), theta = 30, phi = 30, color = "gray", cond=list(lag = 5))
plot(apl)
par(mfrow=c(1,1))
plot(apl)
plot(apl, 1)
plot(apl, 4)
plot(apl, 2, "pm10")
summary(apl)
head(dat)
names(dat)
head(chicago)
dat$so2 <- lagard(chicago$so2median)
dat$so2 <- lagard(chicago$so2median)
apl2 <- bam(death ~ s(time, bs = "cr", k = 200) + te(pm10, lag, k = c(10, 5)) + te(o3, tmp, lag, k = c(8, 8, 5)) + te(so2, tmp, lag, k = c(8, 8, 5)), family = poisson, data = dat)
summary(apl2)
summary(apl)
summary(apl2)
summary(apl2)
anova(apl2)
rm(list=ls())
graphics.off()
setwd("//media//kswada//MyFiles//R//swer")
packages <- c("dplyr", "lattice", "gamair")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
data(swer, package = "gamair")
str(swer)
par(mfrow = c(1,1))
xyplot(N ~ E, data = swer, cex = extra)
xyplot(N ~ E, data = swer, cex = exra)
swer
par(mfrow = c(1,1))
xyplot(N ~ E, data = swer, cex = swer$exra)
xyplot(N ~ E, data = swer, cex = sqrt(swer$exra))
help(swer)
par(mfrow = c(1,1))
xyplot(N ~ E | year, data = swer, cex = sqrt(swer$exra) / 10)
par(mfrow = c(1,1))
xyplot(N ~ E, data = swer, cex = sqrt(swer$exra) / 10)
par(mfrow = c(1,1))
xyplot(N ~ E, data = swer, cex = sqrt(swer$exra) / 5)
par(mfrow = c(1,1))
xyplot(N ~ E, data = swer, cex = sqrt(swer$exra) / 5, col = "black")
xyplot(exra ~ year | climate.region, data = swer, type = "b", col = "black")
xyplot(exra ~ year | climate.region, data = swer, type = "l", col = "black")
xyplot(max(exra) ~ year | climate.region, data = swer, type = "l", col = "black")
xyplot(exra ~ year | climate.region, data = swer, col = "black")
xyplot(exra ~ year | climate.region, data = swer, cex = 2, col = "black")
xyplot(exra ~ year | climate.region, data = swer, cex = 0.3, col = "black")
b0 <- gam(list(Exra ~ s(nao) + s(elevetion) + climate.region + te(N, E, year, d = c(2,1), k = c(20, 5))
~ s(year) + s(nao) + s(elevation) + climate.region + s(N, E),
~ s(elevation) + climate.region),
family = gevlss, data = swer)
b0 <- gam(list(exra ~ s(nao) + s(elevetion) + climate.region + te(N, E, year, d = c(2,1), k = c(20, 5))
~ s(year) + s(nao) + s(elevation) + climate.region + s(N, E),
~ s(elevation) + climate.region),
family = gevlss, data = swer)
b0 <- gam(list(exra ~ s(nao) + s(elevetion) + climate.region + te(N, E, year, d = c(2,1), k = c(20, 5)),
~ s(year) + s(nao) + s(elevation) + climate.region + s(N, E),
~ s(elevation) + climate.region),
family = gevlss, data = swer)
b0 <- gam(list(exra ~ s(nao) + s(elevation) + climate.region + te(N, E, year, d = c(2,1), k = c(20, 5)),
~ s(year) + s(nao) + s(elevation) + climate.region + s(N, E),
~ s(elevation) + climate.region),
family = gevlss, data = swer)
b <- gam(list(exra ~ s(nao) + s(elevation) + climate.region + s(N, E),
~ s(year) + s(elevation) + climate.region + s(N, E),
~ climate.region),
family = gevlss, data = swer)
plot(b0, scale = 0, scheme = c(1,1,3,1,1,3), contour.col = "white")
plot(b1, scale = 0, scheme = c(1,1,3,1,1,3), contour.col = "white")
plot(b, scale = 0, scheme = c(1,1,3,1,1,3), contour.col = "white")
AIC(b, b0)
summary(b)
summary(b0)
AIC(b, b0)
# ----------
plot(b, scale = 0, scheme = c(1,1,3,1,1,3), contour.col = "white")
mu <- fitted(b)[,1]
rho <- fitted(b)[,2]
xi <- fitted(b)[,3]
fv <- mu + exp(rho) * (gamma(1 - xi) - 1) / xi
mu <- fitted(b)[,1]
rho <- fitted(b)[,2]
xi <- fitted(b)[,3]
fv <- mu + exp(rho) * (gamma(1 - xi) - 1) / xi
plot(resid(b) ~ fv, pch = ".", cex = 0.3, col = gray(0.4))
plot(resid(b) ~ fv, pch = ".", cex = 0.6, col = gray(0.4))
plot(resid(b) ~ fv, pch = ".", cex = 1.0, col = gray(0.4))
plot(resid(b) ~ fv, pch = ".", cex.size = 1.0, col = gray(0.4))
plot(resid(b) ~ fv, pch = ".", cex = 3, col = gray(0.6))
plot(resid(b) ~ fv, pch = ".", cex = 2, col = gray(0.8))
plot(resid(b) ~ fv, pch = ".", cex = 3, col = gray(0.4))
plot(resid(b, type = "d") ~ fv, pch = ".", cex = 3, col = gray(0.4))
plot(resid(b, type = "p") ~ fv, pch = ".", cex = 3, col = gray(0.4))
graphics.off()
par(mfrow=c(1,3))
plot(resid(b, type = "d") ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "deviance residuals")
plot(resid(b, type = "p") ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "Pearson residuals")
plot(swer$exr ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "Observed response")
lines(fv, fitted(b))
fv
lines(fv, data$exra)
fv
data$exra
lines(fv, swer$exra)
graphics.off()
par(mfrow=c(1,3))
plot(resid(b, type = "d") ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "deviance residuals")
plot(resid(b, type = "p") ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "Pearson residuals")
plot(swer$exr ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "Observed response")
lines(fv[order(fv)], swer$exra[order(swer$exra)])
mu <- fitted(b)[,1]
rho <- fitted(b)[,2]
xi <- fitted(b)[,3]
fv <- mu + exp(rho) * (gamma(1 - xi) - 1) / xi
graphics.off()
par(mfrow=c(1,3))
plot(resid(b, type = "d") ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "deviance residuals")
plot(resid(b, type = "p") ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "Pearson residuals")
plot(swer$exr ~ fv, pch = ".", cex = 3, col = gray(0.4), xlab = "fitted values", ylab = "Observed response")
Fi.gev <- function(z, mu, sigma, xi){
# approximate xi = 0, by small xi
xi[abs(xi) < 1e-8] <- 1e-8
x <- mu + ((-log(z)) ^ -xi - 1) * sigma / xi
}
# ----------
# posterior mean and cov
mb <- coef(b)
Vb <- vcov(b)
# ----------
# copy fitted model object to modify
b1 <- b
# ----------
n.rep <- 1000
# posterior sim
br <- rvn(n.rep, mb, Vb)
# posterior sim
br <- rmvn(n.rep, mb, Vb)
n <- length(fitted(b))
sim.dat <- cbind(data.frame(rep(0, n * n.rep)), swer$code)
sim.dat
( br <- rmvn(n.rep, mb, Vb) )
( mb <- coef(b) )
( Vb <- vcov(b) )
# posterior sim
( br <- rmvn(n.rep, mb, Vb) )
for(i in 1:n.rep){
b1$coefficients <- br[i,]
X <- predict(b1, type = "response")
ii <- 1:n + (i - 1) * n
sim.dat[ii,1] <- Fi.gev(runif(n), X[,1], exp(X[,2]), X[,3])
}
stm <- tapply(sim.dat[,1], sim.dat[,2], mean)
st98 <- tapply(sim.dat[,1], sim.dat[,2], quantile, probs = 0.98)
stm <- tapply(sim.dat[,1], sim.dat[,2], mean)
st98 <- tapply(sim.dat[,1], sim.dat[,2], quantile, probs = 0.98)
( stm <- tapply(sim.dat[,1], sim.dat[,2], mean) )
( st98 <- tapply(sim.dat[,1], sim.dat[,2], quantile, probs = 0.98) )
plot(stm, tapply(swer$exra, swer$year, mean))
stm
tapply(swer$exra, swer$year, mean)
plot(stm, tapply(swer$exra, swer$climate.region, mean))
tapply(swer$exra, swer$climate.region
tapply(swer$exra, swer$code, mean)
tapply(swer$exra, swer$code, mean)
plot(stm, tapply(swer$exra, swer$code, mean))
graphics.off()
par(mfrow=c(1,2))
plot(stm, tapply(swer$exra, swer$code, mean), xlab = "mean annual maximum", ylab = "simulated version")
plot(st98, tapply(swer$exra, swer$code, max), xlab = "maximum", ylab = "simulated 98th percentile")
n.rep <- 1000
# posterior sim
( br <- rmvn(n.rep, mb, Vb) )
n <- length(fitted(b))
sim.dat <- cbind(data.frame(rep(0, n * n.rep)), swer$code)
for(i in 1:n.rep){
# copy sim coefs to gam object
b1$coefficients <- br[i,]
X <- predict(b1, type = "lpmatrix")
sim.dat[ii,1] <- X
}
i <- 1
b1$coefficients <- br[i,]
X <- predict(b1, type = "lpmatrix")
X
X$lpi
ii
rm(list=ls())
setwd("//media//kswada//MyFiles//R//mack")
packages <- c("dplyr", "lattice", "gamair")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# This tutorial is based on
# Chapter 7. GAMs in Practive: mgcv from "Generalized Additive Models An Introduction with R 2nd Edition" (by Simon N. Wood)
# ------------------------------------------------------------------------------
# data:  mack
#   - Data from 1992 mackerel eff survey. The data were first modelled using GAMs by Borchers et al. (1997)
#   - As well as longitude and latitude, a number of other possible predicttors of egg abundance are available:
#        - salinity
#        - temp.surf: surface temperature of the ocean
#        - temp.20m:  water temperature at a depth of 20m
#        - b.depth:  depth of the ocean
#        - c.dist:  distance from the 200m seabed contour
#            --> this predictor reflects the biologists' belief that the fish like to spawn near the edge of the continental shelf, conventionally considered to end ata seabed depth of 200m.
#   - egg.count as response variable
#        - At each sampling location, a net was hauled vertically through the water column from well below the depth at which eggs are found to the surface:
#          the mackerel eggs caught in the net were counted
# ------------------------------------------------------------------------------
data(mack, package = "gamair")
str(mack)
psych::describe(mack)
hist(mack$egg.count)
lattice::xyplot(lat ~ lon, data = mack, cex = mack$egg.cound)
lattice::xyplot(lat ~ lon, data = mack, cex = sqrt(mack$egg.cound) / 10)
lattice::xyplot(lat ~ lon, data = mack, cex = sqrt(mack$egg.cound) / 10)
lattice::xyplot(lat ~ lon, data = mack, cex = sqrt(mack$egg.cound) / 20)
lattice::xyplot(lat ~ lon, data = mack, cex = sqrt(mack$egg.count) / 10)
mod_glm <- gam(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
mack$log.net.area <- log(mack$net.area)
mod_glm <- gam(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
summary(mod_glm)
plog(mod_glm)
plot(mod_glm)
mod_glm <- glm(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
# ----------
summary(mod_glm)
plot(mod_glm)
plot(mod_glm)
par(mfrow=c(1,1))
plot(mod_glm)
mod_glm <- glm(egg.count ~ I(b.depth^.5) + c.dist + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
# ----------
summary(mod_glm)
graphics.off()
par(mfrow=c(1,1))
plot(mod_glm)
mod_glm <- glm(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
# ----------
summary(mod_glm)
# ----------
graphics.off()
par(mfrow=c(1,1))
plot(mod_glm)
mod_glm <- glm(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = poisson)
mod_glm2 <- glm(egg.count ~ I(b.depth^.5) + c.dist + salinity + temp.surf + temp.20m + offset(log.net.area),
data = mack, family = quasipoisson)
summary(mod_glm)
summary(mod_glm2)
graphics.off()
par(mfrow=c(1,1))
plot(mod_glm)
# The square root transofrm of b.depth is to reduce leverage from very high values
gmtw <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(salinity) + s(temp.surf) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
summary(gmtw)
gmnb <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(salinity) + s(temp.surf) + s(temp.20m) + offset(log.net.area),
data = mack, family = nb, method = "REML", select = TRUE)
summary(gmnb)
par(mfrow = c(1, 2))
plot(fitted(gmtw), resid(gmtw))
plot(fitted(gmnb), resid(gmnb))
# drop salinity
gm1 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + s(temp.surf) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm1
gm2 <- gam(egg.count ~ s(lon, lat, k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm2
graphics.off()
par(mfrow = c(2,3))
plot(mack$temp.20m, resid(gm2))
plot(mack$lat, resid(gm2))
plot(mack$lon, resid(gm2))
plot(mack$temp.surf, resid(gm2))
plot(mack$c.dist, resid(gm2))
qqnorm(resid(gm2));  qqline(resid(gm2))
help(gam)
AIC(gmtw, gmnb)
plot(gmtw)
par(mfrow = c(2, 2))
plot(gm2)
summary(gm2)
mackp
mackp
help(mackp)
data(mack, package = "gamair")
data(mackp, package = "gamair")
str(mack)
str(mackp)
plot(lat ~ lon, data = mackp)
polygon(data[,c("lat","lon")])
polygon(mackp[,c("lat","lon")])
par(mfrow=c(1,1))
plot(lat ~ lon, data = mackp)
polygon(mackp[,c("lat","lon")])
mackp$log.net.area <- rep(0, nrow(mackp))
lon <- seq(-15, -1, 1/4)
lat <- seq(44, 58, 1/4)
# ----------
zz <- array(NA, 57 * 57)
zz[mackp$area.index] <- predict(gm2, mackp)
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
coast
?coast
str(coast)
data(coast, package = "gamair")
str(coast)
plot(coast$lon,coast$lat,type="l")
lines(coast$lon,coast$lat,col="blue")
plot(coast$lon, coast$lat, type="l", col = "blue")
plot(lat ~ lon, data = mackp)
plot(coast$lon, coast$lat, type="l", col = "blue")
plot(lat ~ lon, data = mackp, add = TRUE)
plot(coast$lon, coast$lat, type="l", col = "blue")
par(new = T)
plot(lat ~ lon, data = mackp)
plot(coast$lon, coast$lat, type="l", col = "blue")
par(new = T)
plot(lat ~ lon, data = mackp, cex = 0.3)
summary(gm2)
plot(gm2)
par(mfrow = c(2, 2))
plot(coast$lon, coast$lat, type="l", col = "blue")
par(new = T)
plot(gm2)
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
graphics.off()
par(mfrow=c(1,1))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
set.seed(4)
br1 <- rmvn(n = 1000, coef(gm2), vcov(gm2))
br1
Xp <- predict(gm2, newdata = mackp, type = "lpmatrix")
mean.eggs1 <- colMeans(exp(Xp %*% t(br1)))
# ----------
hist(mean.eggs1)
set.seed(4)
br2 <- rmvn(n = 1000, coef(gm2), vcov(gm2, unconditional = TRUE))
br2
mean.eggs2 <- colMeans(exp(Xp %*% t(br2)))
# ----------
par(mfrow = c(2, 1), mar = c(2,2,2,2))
hist(mean.eggs1)
hist(mean.eggs2)
gm_sos <- gam(egg.count ~ s(lon, lat, bs = "sos", k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm_sos
summary(gm_sos)
mack$log.net.area <- log(mack$net.area)
gm_sos <- gam(egg.count ~ s(lon, lat, bs = "sos", k = 100) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gm_sos
summary(gm_sos)
AIC(gm2, gm_sos)
zz <- array(NA, 57*57)
zz[mackp$area.index] <- predict(gm2, mackp)
zz_sos <- array(NA, 57*57)
zz_sos[mackp$area.index] <- predict(gm_sos, mackp)
par(mfrow = c(1,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
gamgr <- gam(egg.count ~ s(lon, lat, k = 100) + s(lon, lat, by = temp.20m) + s(lon, lat, by = I(b.depth^.5)) + offset(log.net.area),
data = mack, family = tw, method = "ML")
gamgr
AIC(gm2, gm_sos, gamgr)
zz_gr <- array(NA, 57*57)
zz_gr[mackp$area.index] <- predict(gamgr, mackp)
par(mfrow = c(1,3))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_gr, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_gr, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
gmgps <- gam(egg.count ~ s(lon, lat, bs = "gp", k = 100, m = c(1, 1)) + s(I(b.depth^.5)) + s(c.dist) + s(temp.20m) + offset(log.net.area),
data = mack, family = tw, method = "REML", select = TRUE)
gmgps
summary(gmgps)
AIC(gm2, gm_sos, gmgps)
plot(gmgps)
zz_ggps <- array(NA, 57*57)
zz_ggps[mackp$area.index] <- predict(gamgps, mackp)
zz_ggps <- array(NA, 57*57)
zz_ggps[mackp$area.index] <- predict(gmgps, mackp)
par(mfrow = c(2,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_ggps, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_ggps, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_gr, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_gr, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
par(mfrow = c(2,2))
image(lon, lat, matrix(zz, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_sos, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_sos, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_ggps, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_ggps, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
image(lon, lat, matrix(zz_gr, 57, 57), col = gray(0:32/32), cex.lab = 1.5, cex.axis = 1.4)
contour(lon, lat, matrix(zz_gr, 57, 57), add = TRUE)
lines(coast$lon, coast$lat, col = 1)
rm(list=ls())
graphics.off()
rm(list=ls())
install.packages("rethinking",dep=T)
help(install.pacakges)
>help(install.package)
??install.pacakges
?install.packages
install.packages("rethinking",dep=T)
install.packages(c("coda","mvtnorm","devtools","loo"))
installed.packages("rstan")
library(rstan)
remove.packages("rstan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages(c("coda","mvtnorm","devtools","loo"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
setwd("//media//kswada//MyFiles//R//chimpanzees")
packages <- c("dplyr", "rethinking")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  prosocial chimpanzees
# ------------------------------------------------------------------------------
data("chimpanzees", package = "rethinking")
d <- chimpanzees
dim(d)
str(d)
mod1 <- map(
alist(
pulled_left ~ dbinom(1, p),
logit(p) <- a,
a ~ dnorm(0, 10)
),
data = d
)
# Note that these values are on the scale of log-oods
precis(mod1, digits=3)
# ----------
# to get back onto the probability scale
logistic(c(0.18, 0.32, 0.46))
