if(k == 4){
plot(1:k, InvV, type = "l", main = "Inverted V shaped Lag Weights")
}
}
k <- 2
for(k in seq(2, k, 2)){
i = 1:(k/2);  bet = 1;  InvV1 = i * bet;  # bet will be estimated
i = (1 + (k/2)):k;  InvV2 = (k - i) * bet;
InvV = c(InvV1, InvV2)  # combine two parts of inverted V
if(k == 4){
plot(1:k, InvV, type = "l", main = "Inverted V shaped Lag Weights")
}
}
for(k in seq(2, 10, 2)){
i = 1:(k/2);  bet = 1;  InvV1 = i * bet;  # bet will be estimated
i = (1 + (k/2)):k;  InvV2 = (k - i) * bet;
InvV = c(InvV1, InvV2)  # combine two parts of inverted V
start2 = lagwt(starts, InvV)
n = length(sales); nn = length(start2)
starts2 = start2[(nn - n + 1):nn]
reg1 = lm(sales ~ starts2)
rsq2 = (cor(fitted(reg1), sales))^2
print(paste0("k = ", k, "  :  rsq2 = ", round(rsq2, 4)))
}
k = 2
i = 1:(k/2);  bet = 1;  InvV1 = i * bet;
i = (1 + (k/2)):k;  InvV2 = (k - i) * bet;
InvV = c(InvV1, InvV2)
graphics.off()
par(mfrow = c(1,1))
plot(1:k, InvV, type = "l", main = "Inverted V shaped Lag Weights")
k = 2
i = 1:(k/2);  bet = 1;  InvV1 = i * bet;
i = (1 + (k/2)):k;  InvV2 = (k - i) * bet;
InvV = c(InvV1, InvV2)
graphics.off()
par(mfrow = c(1,1))
plot(1:k, InvV, type = "l", main = "Inverted V shaped Lag Weights")
k = 2
i = 1:(k/2);  bet = 1;  InvV1 = i * bet;
i = (1 + (k/2)):k;  InvV2 = (k - i) * bet;
InvV = c(InvV1, InvV2)
graphics.off()
par(mfrow = c(1,1))
plot(1:k, InvV, type = "l", main = "Inverted V shaped Lag Weights")
k = 4
i = 1:(k/2);  bet = 1;  InvV1 = i * bet;
i = (1 + (k/2)):k;  InvV2 = (k - i) * bet;
InvV = c(InvV1, InvV2)
graphics.off()
par(mfrow = c(1,1))
plot(1:k, InvV, type = "l", main = "Inverted V shaped Lag Weights")
start2 = lagwt(starts, InvV)
n = length(sales); nn = length(start2)
starts2 = start2[(nn - n + 1):nn]
reg2 = lm(sales ~ starts2)
summary(reg2)
library(dyn)
library(dynlm)
reg.koy = dynlm(sales ~ L(sales, -1) + starts, data = data.ts)
reg.koy = dynlm(sales ~ L(sales, -1) + starts)
install.packages("dyn", dep=T)
library(dyn)
help(dyn)
reg.koy = dyn(sales ~ lag(sales, -1) + starts)
print(c("lambda = ", reg.koy$coef[2]), q = F)
reg.koy$coef[2]
reg.koy = dyn$lm(sales ~ lag(sales, -1) + starts)
reg.koy = dyn$lm(sales ~ lag(sales, -1) + starts)
library(dyn)
starts = ts(starts, start = c(1960,1))
sales = ts(sales, start = c(1970,1))
reg.koy = dyn$lm(sales ~ lag(sales, -1) + starts)
print(c("lambda = ", reg.koy$coef[2]), q = F)
print(c("lambda = ", round(reg.koy$coef[2], 5), q = F)
print(c("lambda = ", round(reg.koy$coef[2], 5)), q = F)
print(c("lambda = ", round(reg.koy$coef[2], 5)), q = F)
lamd = reg.koy$coef[2]
print(c("mean lag = lamd / (1 - lamd", lamd / (1 - lamd)), q = F)
lamd = reg.koy$coef[2]
print(c("mean lag = lamd / (1 - lamd)", round(lamd / (1 - lamd), 5)), q = F)
print(c("mean lag = lamd / (1 - lamd)", round(lamd / (1 - lamd), 5)))
print(c("mean lag = lamd / (1 - lamd)", round(lamd / (1 - lamd), 5)), q = F)
print(c("alpha = ", reg.koy$coef[1] / (1 - reg.koy$coef[2])), q = F)
print(c("alpha = ", round(reg.koy$coef[1] / (1 - reg.koy$coef[2]), 5), q = F)
print(c("alpha = ", round(reg.koy$coef[1] / (1 - reg.koy$coef[2]), 5)), q = F)
print(c("alpha = ", round(reg.koy$coef[1] / (1 - reg.koy$coef[2]), 5)), q = F)
summary(reg.koy)
summary(reg.koy)
print(c("alpha = ", round(reg.koy$coef[1] / (1 - reg.koy$coef[2]), 5)), q = F)
graphics.off()
plot(residuals(reg.koy))
lines(lowess(residuals(reg.koy)), col="blue")
acf(residuals(reg.koy), main = "")
a1 <- lmtest::bgtest(reg.koy, order = 1, type = "Chisq")
b1 <- lmtest::bgtest(reg.koy, order = 2, type = "Chisq")
c1 <- lmtest::bgtest(reg.koy, order = 3, type = "Chisq")
d1 <- lmtest::bgtest(reg.koy, order = 4, type = "Chisq")
dfr <- data.frame(rbind(
c(a1$statistic, a1$p.value),
c(b1$statistic, b1$p.value),
c(c1$statistic, c1$p.value),
c(d1$statistic, d1$p.value)
))
dfrm <- cbind(1:4, dfr)
names(dfrm) <- c("k", "FDL(4) Chisq", "FDL(4) p-Value")
kable(dfrm, digits = 4, align="c", caption = "Breusch-Godfrey Test")
lmtest::bgtest(reg.koy)
help(bgtest)
lmtest::dwtest(reg.koy)
lmtest::dwtest(reg.koy, max.lag = 4)
help(dwtest)
lmtest::dwtest(reg.koy)
car::durbin.watson(reg.koy, max.lag = 4)
car::durbinWatsonTest(reg.koy, max.lag = 4)
acf1 = as.numeric(acf(resid(reg.koy), plot=F)$acf[2])
sumr = summary(reg.koy)
se = sumr$coef[2,2];  se2 = se^2;
bigt = length(resid(reg.koy))
durbinh = acf1 * sqrt(bigt / (1 - bigt * se2))
durbin
if(abs(durbinh) > 1.96)  print("regr residuals are autocorrelated")
acf1 = as.numeric(acf(resid(reg.koy), plot=F)$acf[2])
sumr = summary(reg.koy)
se = sumr$coef[2,2];  se2 = se^2;
bigt = length(resid(reg.koy))
durbinh = acf1 * sqrt(bigt / (1 - bigt * se2))
( durbinh = acf1 * sqrt(bigt / (1 - bigt * se2)) )
if(abs(durbinh) > 1.96)  print("regr residuals are autocorrelated")
acf(residuals(reg.koy), main = "")
lamd = reg.koy$coef[2]
print(c("mean lag = lamd / (1 - lamd)", round(lamd / (1 - lamd), 5)), q = F)
starts = ts(starts, start = c(1960, 1))
dmstarts = starts - mean(starts)
sales = ts(sales, start = c(970, 1))
dmsales = sales - mean(sales)
sales = ts(sales, start = c(1970, 1))
dmsales = sales - mean(sales)
setwd("/media/kswada/MyFiles/R/housing_starts")
packages <- c("dplyr", "AER", "tseries", "forecast", "dynlm", "stargazer")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data: housing starts
# ------------------------------------------------------------------------------
starts <- c(1252, 1313, 1463, 1610, 1529, 1473, 1165, 1292, 1508, 1467,
1434, 2052, 2357, 2045, 1338, 1160, 1538, 1987, 2020, 1745,
1292, 1084, 1062, 1703, 1750, 1742, 1805, 1621, 1488, 1376,
1193, 1014, 1200, 1288, 1457, 1354, 1477, 1474, 1617, 1641,
1569, 1603, 1705, 1848, 1956, 2068)
sales <- c(485, 656, 718, 634, 519, 549, 646, 819, 817, 709, 545,
436, 412, 623, 639, 688, 750, 671, 676, 650, 534, 509,
610, 666, 670, 667, 757, 804, 886, 880, 877, 908, 973, 1086, 1203, 1283)
# ----------
# Note that sales data is leading 10 years
length(starts)
length(sales)
# ----------
# add NA to first 10 years to sales
sales2 <- c(rep(NA, 10), sales)
length(sales2)
# ----------
data <- data.frame(starts = starts, sales2 = sales2)
data.ts <- ts(data, start = c(1960), end = c(2005), frequency = 1)
# ----------
starts = ts(starts, start = c(1960, 1))
dmstarts = starts - mean(starts)
sales = ts(sales, start = c(1970, 1))
dmsales = sales - mean(sales)
nam <- c(
"Autoregressive-Distributed Lag",
"Static Regression",
"Univariate Time Series",
"Differenced Data",
"Leading Indicator",
"Partial Adjustment",
"Common Factor (Autoregressive error)",
"Finite Distributed Lag",
"Dead Start",
"Homogeneous Equilibrium Correction",
"General Equilibrium Correction")
nam
nrestr = c(0, 2, 2, 2, 2, 1, 3, 1, 1, 3, 0)
adjRsq <- RSS < Fstat <- Fcrit < rep(NA, 11)
nam <- c(
"Autoregressive-Distributed Lag",
"Static Regression",
"Univariate Time Series",
"Differenced Data",
"Leading Indicator",
"Partial Adjustment",
"Common Factor (Autoregressive error)",
"Finite Distributed Lag",
"Dead Start",
"Homogeneous Equilibrium Correction",
"General Equilibrium Correction")
# ----------
# number of restrictions by model number
nrestr = c(0, 2, 2, 2, 2, 1, 3, 1, 1, 3, 0)
# ----------
# F = [ (ReRSS - UnRSS) / r ] / [ UnRSS / df ]
adjRsq <- RSS < Fstat <- Fcrit < rep(NA, 11)
# ----------
library(dyn)
intercept = 0
regM1 = dyn$lm(dmsales ~ dmstarts + lag(dmsales, -1) + lag(dmstarts, -1) -1)
regM2 = dyn$lm(dmsales ~ dmstarts - 1)
regM3 = dyn$lm(dmsales ~ lag(dmstarts - 1) -1)
regM4 = dyn$lm(diff(dmsales) ~ diff(dmstarts) -1)
regM5 = dyn$lm(dmsales ~ lag(dmstarts, -1) -1)
regM6 = dyn$lm(dmsales ~ dmstarts + lag(dmsales, -1) - 1)
regM8 = dyn$lm(dmsales ~ dmstarts + lag(dmstarts, -1) - 1)
regM9 = dyn$lm(dmsales ~ lag(dmsales, -1) + lag(dmstarts, -1) -1)
regM10 = dyn$lm(diff(dmsales) ~ dmstarts + lag((dmsales - dmstarts), -1) -1)
# regM11 = dyn$lm(diff(dmsales) ~ dmstarts + lag((dmsales - bigk * dmstarts), -1) -1)
regM11 = regM1  # model M11 imposes no restriction, equivalent M1
# ----------
# regM7
dmslaesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476))
# ----------
# stats for regM1
su = summary(regM1)
adjRsq[1] = su$adj
RSS[1] = su$df[2] * ((su$sigma)^2)
dmslaesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476))
dmstartsLag1
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 0.1))
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1)
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1), start = list(bet1 = 0.0535, bet2 = 0.9476))
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476))
help(nls)
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 0.1, dmsalesLag1 = 0.1))
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 0.01, dmsalesLag1 = 0.01))
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 0.001, dmsalesLag1 = 0.001))
dmslaesLag1
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 100, dmsalesLag1 = 100))
su = summary(regM1)
adjRsq[1] = su$adj
RSS[1] = su$df[2] * ((su$sigma)^2)
su = summary(regM1)
adjRsq[1] = su$adj
RSS[1] = su$df[2] * ((su$sigma)^2)
adjRsq <- RSS < Fstat <- Fcrit < rep(NA, 11)
adjRsq <- RSS < Fstat <- Fcrit <- rep(NA, 11)
su = summary(regM1)
adjRsq[1] = su$adj
RSS[1] = su$df[2] * ((su$sigma)^2)
adjRsq
Fcrit <- rep(NA, 11)
Fcrit
adjRsq <- RSS < Fstat <- Fcrit <- rep(NA, 11)
adjRsq <- RSS <- Fstat <- Fcrit <- rep(NA, 11)
su = summary(regM1)
adjRsq[1] = su$adj
RSS[1] = su$df[2] * ((su$sigma)^2)
UnRSS = RSS[1]
refdf = su$df[2]
for(i in 2:10) Fcrit[i] = qf(0.95, df1 = nrestr[i], df2 = refdf)
for(i in c(2:6,8:10)){
eval(parse(text = paste0("mod <- regM, i")))
su = summary(mod)
adjRsq[i] = su$adj
RSS[i] = su$df[i] * ((su$sigma)^2)
Fnum = (su$df[i] * ((su$sigma)^2) - UnRSS) / nrestr[i]
Fstat[i] = Fnum / (UnRSS / refdf)
}
for(i in c(2:6,8:10)){
eval(parse(text = paste0("mod <- regM", i)))
su = summary(mod)
adjRsq[i] = su$adj
RSS[i] = su$df[i] * ((su$sigma)^2)
Fnum = (su$df[i] * ((su$sigma)^2) - UnRSS) / nrestr[i]
Fstat[i] = Fnum / (UnRSS / refdf)
}
# stats for regM11
bigk = (regM1$coef[1] + regM1$coef[3]) / (1 - regM1$coef[3])
print(" Model M11 is same as the unrestricted model M1, with K = ")
as.numeric(bigk)
su = summary(regM11)
adjRsq[11] = su$adj
RSS[11] = su$df[2] * ((su$sigma)^2)
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
print(" Model, F statistic, Critical Value of F, Num df")
print(cbind(nam, round(Fstat, 6), round(Fcrit, 6), nrestr), q = F)
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
print(" Model, F statistic, Critical Value of F, Num df")
print(cbind(nam, round(Fstat, 6), round(Fcrit, 6), nrestr), q = F)
nam <- c(
"Autoregressive-Distributed Lag",
"Static Regression",
"Univariate Time Series",
"Differenced Data",
"Leading Indicator",
"Partial Adjustment",
"Common Factor (Autoregressive error)",
"Finite Distributed Lag",
"Dead Start",
"Homogeneous Equilibrium Correction",
"General Equilibrium Correction")
# ----------
# number of restrictions by model number
nrestr = c(0, 2, 2, 2, 2, 1, 3, 1, 1, 3, 0)
# ----------
# F = [ (ReRSS - UnRSS) / r ] / [ UnRSS / df ]
adjRsq <- RSS <- Fstat <- Fcrit <- rep(NA, 11)
# ----------
library(dyn)
intercept = 0
regM1 = dyn$lm(dmsales ~ dmstarts + lag(dmsales, -1) + lag(dmstarts, -1) -1)
regM2 = dyn$lm(dmsales ~ dmstarts - 1)
regM3 = dyn$lm(dmsales ~ lag(dmstarts - 1) -1)
regM4 = dyn$lm(diff(dmsales) ~ diff(dmstarts) -1)
regM5 = dyn$lm(dmsales ~ lag(dmstarts, -1) -1)
regM6 = dyn$lm(dmsales ~ dmstarts + lag(dmsales, -1) - 1)
regM8 = dyn$lm(dmsales ~ dmstarts + lag(dmstarts, -1) - 1)
regM9 = dyn$lm(dmsales ~ lag(dmsales, -1) + lag(dmstarts, -1) -1)
regM10 = dyn$lm(diff(dmsales) ~ dmstarts + lag((dmsales - dmstarts), -1) -1)
# regM11 = dyn$lm(diff(dmsales) ~ dmstarts + lag((dmsales - bigk * dmstarts), -1) -1)
regM11 = regM1  # model M11 imposes no restriction, equivalent M1
dmslaesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM1
dmslaesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = -0.2, dmsalesLag1 = 1.0))
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 0.2, dmsalesLag1 = 1.0))
regM23
regM2
regM9
regM7 = nls(dms ~ dmst + dmsalesLag1 + dmstartsLag1)
regM7
dmslaesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476, dmstartsLag1 = 0.2, dmsalesLag1 = 1.0))
# ----------
# stats for regM1
su = summary(regM1)
adjRsq[1] = su$adj
RSS[1] = su$df[2] * ((su$sigma)^2)
# ----------
# stats for common
UnRSS = RSS[1]
refdf = su$df[2]
for(i in 2:10) Fcrit[i] = qf(0.95, df1 = nrestr[i], df2 = refdf)
for(i in c(2:6,8:10)){
eval(parse(text = paste0("mod <- regM", i)))
su = summary(mod)
adjRsq[i] = su$adj
RSS[i] = su$df[i] * ((su$sigma)^2)
Fnum = (su$df[i] * ((su$sigma)^2) - UnRSS) / nrestr[i]
Fstat[i] = Fnum / (UnRSS / refdf)
}
su = summary(regM7)
ebet1 = su$coef[1]
evet2 = su$coef[2]
fitt = ebet1 * dmst + ebet2 * dmsalesLag1 - (evet1 * ebet2) * dmstartsLag1
cor1 = cor(dms, fitt)
Rsquare = cor1 ^2
adjRsq[7] = 1 - (1 - Rsquare) * (34 / (34 - 2))
RSS[7] = sum((dms - fitt)^2)
Fnum = (RSS[7] - UnRSS) / nrestr[7]
Fstat[7] = Fnum / (UnRSS / refdf)
bigk = (regM1$coef[1] + regM1$coef[3]) / (1 - regM1$coef[3])
print(" Model M11 is same as the unrestricted model M1, with K = ")
as.numeric(bigk)
su = summary(regM11)
adjRsq[11] = su$adj
RSS[11] = su$df[2] * ((su$sigma)^2)
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
c(2:6,8:10)
for(i in c(2:6,8:10)){
eval(parse(text = paste0("mod <- regM", i)))
su = summary(mod)
adjRsq[i] = su$adj
RSS[i] = su$df[2] * ((su$sigma)^2)
Fnum = (su$df[2] * ((su$sigma)^2) - UnRSS) / nrestr[i]
Fstat[i] = Fnum / (UnRSS / refdf)
}
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
regM3 = dyn$lm(dmsales ~ lag(dmsales - 1) -1)
for(i in c(2:6,8:10)){
eval(parse(text = paste0("mod <- regM", i)))
su = summary(mod)
adjRsq[i] = su$adj
RSS[i] = su$df[2] * ((su$sigma)^2)
Fnum = (su$df[2] * ((su$sigma)^2) - UnRSS) / nrestr[i]
Fstat[i] = Fnum / (UnRSS / refdf)
}
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
print(" Model, F statistic, Critical Value of F, Num df")
print(cbind(nam, round(Fstat, 6), round(Fcrit, 6), nrestr), q = F)
dmslaesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476))
dmsalesLag1 = dmsales[1:35]
dms = dmsales[2:36]  # dependent variable has 35 observations
dmst = dmstarts[12:46] # must start at 12 to get 35 observations right
dmstartsLag1 = dmstarts[11:45]  # lagged starts at 11
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.0535, bet2 = 0.9476))
su = summary(regM7)
ebet1 = su$coef[1]
evet2 = su$coef[2]
fitt = ebet1 * dmst + ebet2 * dmsalesLag1 - (evet1 * ebet2) * dmstartsLag1
cor1 = cor(dms, fitt)
Rsquare = cor1 ^2
adjRsq[7] = 1 - (1 - Rsquare) * (34 / (34 - 2))
RSS[7] = sum((dms - fitt)^2)
Fnum = (RSS[7] - UnRSS) / nrestr[7]
Fstat[7] = Fnum / (UnRSS / refdf)
su = summary(regM7)
ebet1 = su$coef[1]
ebet2 = su$coef[2]
fitt = ebet1 * dmst + ebet2 * dmsalesLag1 - (evet1 * ebet2) * dmstartsLag1
cor1 = cor(dms, fitt)
Rsquare = cor1 ^2
adjRsq[7] = 1 - (1 - Rsquare) * (34 / (34 - 2))
RSS[7] = sum((dms - fitt)^2)
Fnum = (RSS[7] - UnRSS) / nrestr[7]
Fstat[7] = Fnum / (UnRSS / refdf)
su = summary(regM7)
ebet1 = su$coef[1]
ebet2 = su$coef[2]
fitt = ebet1 * dmst + ebet2 * dmsalesLag1 - (ebet1 * ebet2) * dmstartsLag1
cor1 = cor(dms, fitt)
Rsquare = cor1 ^2
adjRsq[7] = 1 - (1 - Rsquare) * (34 / (34 - 2))
RSS[7] = sum((dms - fitt)^2)
Fnum = (RSS[7] - UnRSS) / nrestr[7]
Fstat[7] = Fnum / (UnRSS / refdf)
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
print(" Model, F statistic, Critical Value of F, Num df")
print(cbind(nam, round(Fstat, 6), round(Fcrit, 6), nrestr), q = F)
regM1
summary(lm(dms ~ dmst + dmsalesLag1 + dmstartsLag1))
regM7 = nls(dms ~ bet1 * dmst + bet2 * dmsalesLag1 - (bet1 * bet2) * dmstartsLag1, start = list(bet1 = 0.292, bet2 = 1.064))
su = summary(regM7)
ebet1 = su$coef[1]
ebet2 = su$coef[2]
fitt = ebet1 * dmst + ebet2 * dmsalesLag1 - (ebet1 * ebet2) * dmstartsLag1
cor1 = cor(dms, fitt)
Rsquare = cor1 ^2
adjRsq[7] = 1 - (1 - Rsquare) * (34 / (34 - 2))
RSS[7] = sum((dms - fitt)^2)
Fnum = (RSS[7] - UnRSS) / nrestr[7]
Fstat[7] = Fnum / (UnRSS / refdf)
print(" Model, Adjusted R-square, Residual Sum of Squares")
print(cbind(nam, round(adjRsq, 5), round(RSS, 0)), q = F)
print(" Model, F statistic, Critical Value of F, Num df")
print(cbind(nam, round(Fstat, 6), round(Fcrit, 6), nrestr), q = F)
graphics.off()
plot(residuals(regM1))
lines(lowess(residuals(regM1)), col="blue")
graphics.off()
plot(residuals(regM4))
lines(lowess(residuals(regM4)), col="blue")
graphics.off()
plot(residuals(regM7))
lines(lowess(residuals(regM7)), col="blue")
graphics.off()
plot(residuals(regM7), type = "l")
lines(lowess(residuals(regM7)), col="blue")
graphics.off()
plot(residuals(regM4))
lines(lowess(residuals(regM4)), col="blue")
graphics.off()
par(mfrow = c(3,1))
plot(residuals(regM1))
lines(lowess(residuals(regM1)), col="blue")
plot(residuals(regM4))
lines(lowess(residuals(regM4)), col="blue")
plot(residuals(regM7), type = "l")
lines(lowess(residuals(regM7)), col="blue")
acf(residuals(regM1), main = "")
acf(residuals(regM1), main = "")
acf(residuals(regM4), main = "")
acf(residuals(regM7), main = "")
graphics.off()
par(mfrow = c(3,1))
acf(residuals(regM1), main = "")
acf(residuals(regM4), main = "")
acf(residuals(regM7), main = "")
predict(regM1)
graphics.off()
par(mfrow = c(3,1))
plot(residuals(regM1))
lines(lowess(residuals(regM1)), col="blue")
plot(residuals(regM4))
lines(lowess(residuals(regM4)), col="blue")
plot(residuals(regM7), type = "l")
lines(lowess(residuals(regM7)), col="blue")
rm(list=ls())
